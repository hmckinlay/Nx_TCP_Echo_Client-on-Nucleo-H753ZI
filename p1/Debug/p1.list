
p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016724  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080169c4  080169c4  000269c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016ed4  08016ed4  00026ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016ed8  08016ed8  00026ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f4  24000000  08016edc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005260  240000f4  08016fd0  000300f4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24005354  08016fd0  00035354  2**0
                  ALLOC
  8 .tcp_sec      000000c0  30000000  08016fd0  00040000  2**2
                  ALLOC
  9 .nx_data      00007d00  30000100  08016fd0  00030100  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00196efe  00000000  00000000  00030122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001e424  00000000  00000000  001c7020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae0  00000000  00000000  001e5448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001dc0  00000000  00000000  001e7f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00056820  00000000  00000000  001e9ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0006c632  00000000  00000000  00240508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001802df  00000000  00000000  002acb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0042ce19  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008144  00000000  00000000  0042ce6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000f4 	.word	0x240000f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080169ac 	.word	0x080169ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000f8 	.word	0x240000f8
 80002dc:	080169ac 	.word	0x080169ac

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	240023c8 	.word	0x240023c8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	00493dff 	.word	0x00493dff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	240023cc 	.word	0x240023cc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	240023d0 	.word	0x240023d0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	240023d4 	.word	0x240023d4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24002464 	.word	0x24002464

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f013 fd9d 	bl	8013ff8 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f013 fc32 	bl	8013d2c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	2400293c 	.word	0x2400293c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24002464 	.word	0x24002464
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24002938 	.word	0x24002938
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	240023dc 	.word	0x240023dc
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24002460 	.word	0x24002460
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	2400246c 	.word	0x2400246c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24002524 	.word	0x24002524
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	240023cc 	.word	0x240023cc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	240023d0 	.word	0x240023d0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	240023d4 	.word	0x240023d4
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80005c8:	2334      	movs	r3, #52	; 0x34
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80005d0:	4a35      	ldr	r2, [pc, #212]	; (80006a8 <tx_application_define+0xe8>)
 80005d2:	4936      	ldr	r1, [pc, #216]	; (80006ac <tx_application_define+0xec>)
 80005d4:	4836      	ldr	r0, [pc, #216]	; (80006b0 <tx_application_define+0xf0>)
 80005d6:	f013 ffb9 	bl	801454c <_txe_byte_pool_create>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <tx_application_define+0x32>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
  	printf("F:tx_byte_pool_create Tx App memory pool\r\n");
 80005e0:	4834      	ldr	r0, [pc, #208]	; (80006b4 <tx_application_define+0xf4>)
 80005e2:	f015 f913 	bl	801580c <puts>
  	aar.fCount++;
 80005e6:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <tx_application_define+0xf8>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a32      	ldr	r2, [pc, #200]	; (80006b8 <tx_application_define+0xf8>)
 80005ee:	6053      	str	r3, [r2, #4]
 80005f0:	e020      	b.n	8000634 <tx_application_define+0x74>
    /* USER CODE END TX_Byte_Pool_Error */
  }
  else
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */
  	printf("S:tx_byte_pool_create Tx App memory pool\r\n");
 80005f2:	4832      	ldr	r0, [pc, #200]	; (80006bc <tx_application_define+0xfc>)
 80005f4:	f015 f90a 	bl	801580c <puts>
  	aar.sCount++;
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <tx_application_define+0xf8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a2e      	ldr	r2, [pc, #184]	; (80006b8 <tx_application_define+0xf8>)
 8000600:	6013      	str	r3, [r2, #0]
    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <tx_application_define+0xf0>)
 8000604:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f000 f86a 	bl	80006e0 <App_ThreadX_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d008      	beq.n	8000624 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
    	printf("F:App_ThreadX_Init\r\n");
 8000612:	482b      	ldr	r0, [pc, #172]	; (80006c0 <tx_application_define+0x100>)
 8000614:	f015 f8fa 	bl	801580c <puts>
    	aar.fCount++;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <tx_application_define+0xf8>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <tx_application_define+0xf8>)
 8000620:	6053      	str	r3, [r2, #4]
 8000622:	e007      	b.n	8000634 <tx_application_define+0x74>
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    else
    {
    	printf("S:App_ThreadX_Init\r\n");
 8000624:	4827      	ldr	r0, [pc, #156]	; (80006c4 <tx_application_define+0x104>)
 8000626:	f015 f8f1 	bl	801580c <puts>
    	aar.sCount++;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <tx_application_define+0xf8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <tx_application_define+0xf8>)
 8000632:	6013      	str	r3, [r2, #0]
    }
    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000634:	2334      	movs	r3, #52	; 0x34
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <tx_application_define+0x108>)
 800063e:	4923      	ldr	r1, [pc, #140]	; (80006cc <tx_application_define+0x10c>)
 8000640:	4823      	ldr	r0, [pc, #140]	; (80006d0 <tx_application_define+0x110>)
 8000642:	f013 ff83 	bl	801454c <_txe_byte_pool_create>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <tx_application_define+0x9e>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Error */
  	printf("F:tx_byte_pool_create Nx App memory pool\r\n");
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <tx_application_define+0x114>)
 800064e:	f015 f8dd 	bl	801580c <puts>
  	aar.fCount++;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <tx_application_define+0xf8>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <tx_application_define+0xf8>)
 800065a:	6053      	str	r3, [r2, #4]
    }
    /* USER CODE END MX_NetXDuo_Init_Success */

  }

}
 800065c:	e020      	b.n	80006a0 <tx_application_define+0xe0>
  	printf("S:tx_byte_pool_create Tx App memory pool\r\n");
 800065e:	4817      	ldr	r0, [pc, #92]	; (80006bc <tx_application_define+0xfc>)
 8000660:	f015 f8d4 	bl	801580c <puts>
  	aar.sCount++;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <tx_application_define+0xf8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <tx_application_define+0xf8>)
 800066c:	6013      	str	r3, [r2, #0]
    memory_ptr = (VOID *)&nx_app_byte_pool;
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <tx_application_define+0x110>)
 8000670:	60fb      	str	r3, [r7, #12]
    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f014 fde6 	bl	8015244 <MX_NetXDuo_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <tx_application_define+0xd0>
    	printf("F:MX_NetXDuo_Init\r\n");
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <tx_application_define+0x118>)
 8000680:	f015 f8c4 	bl	801580c <puts>
    	aar.fCount++;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <tx_application_define+0xf8>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <tx_application_define+0xf8>)
 800068c:	6053      	str	r3, [r2, #4]
}
 800068e:	e007      	b.n	80006a0 <tx_application_define+0xe0>
    	printf("S:MX_NetXDuo_Init\r\n");
 8000690:	4812      	ldr	r0, [pc, #72]	; (80006dc <tx_application_define+0x11c>)
 8000692:	f015 f8bb 	bl	801580c <puts>
    	aar.sCount++;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <tx_application_define+0xf8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <tx_application_define+0xf8>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000110 	.word	0x24000110
 80006ac:	080169c4 	.word	0x080169c4
 80006b0:	24002050 	.word	0x24002050
 80006b4:	080169d8 	.word	0x080169d8
 80006b8:	2400216c 	.word	0x2400216c
 80006bc:	08016a04 	.word	0x08016a04
 80006c0:	08016a30 	.word	0x08016a30
 80006c4:	08016a44 	.word	0x08016a44
 80006c8:	30000100 	.word	0x30000100
 80006cc:	08016a58 	.word	0x08016a58
 80006d0:	24002084 	.word	0x24002084
 80006d4:	08016a6c 	.word	0x08016a6c
 80006d8:	08016a98 	.word	0x08016a98
 80006dc:	08016aac 	.word	0x08016aac

080006e0 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	60bb      	str	r3, [r7, #8]
  //  ret = TX_THREAD_ERROR;
  //}
  //
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80006f0:	68fb      	ldr	r3, [r7, #12]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000702:	f011 fccd 	bl	80120a0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}

0800070a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000712:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000716:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d013      	beq.n	800074a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000722:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000726:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800072a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00b      	beq.n	800074a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000732:	e000      	b.n	8000736 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000734:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000736:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f9      	beq.n	8000734 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000740:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800074a:	687b      	ldr	r3, [r7, #4]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
#ifdef SDEF_ITM
 ITM_SendChar(ch);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ffd1 	bl	800070a <ITM_SendChar>
#endif
 return(ch);
 8000768:	687b      	ldr	r3, [r7, #4]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	asm("nop");
 800077a:	bf00      	nop
  //extern char _sbss[];
  //extern char _ebss[];
  //memset(_sbss,0,(_ebss-_sbss)); //zero bss memory, must be before HAL_Init();

#ifdef SDEF_MPU
  MPU_Config();
 800077c:	f000 f9ee 	bl	8000b5c <MPU_Config>
#ifdef SDEF_CACHE
  SCB_EnableICache();
  SCB_EnableDCache(); //cannot step through this line
#endif

  HAL_Init();
 8000780:	f000 feb2 	bl	80014e8 <HAL_Init>

  SystemClock_Config();
 8000784:	f000 f89a 	bl	80008bc <SystemClock_Config>

	//__HAL_RCC_D2SRAM1_CLK_ENABLE();
	__HAL_RCC_D2SRAM2_CLK_ENABLE(); //enable D2 RAM clock just in case https://stackoverflow.com/questions/64908765/why-does-d2-ram-work-correctly-even-when-clock-is-disabled
 8000788:	4b47      	ldr	r3, [pc, #284]	; (80008a8 <main+0x134>)
 800078a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800078e:	4a46      	ldr	r2, [pc, #280]	; (80008a8 <main+0x134>)
 8000790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000794:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000798:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <main+0x134>)
 800079a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800079e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
	//__HAL_RCC_D2SRAM3_CLK_ENABLE(); //enable if using

  MX_GPIO_Init();
 80007a6:	f000 f951 	bl	8000a4c <MX_GPIO_Init>

  setvbuf(stdout, NULL, _IONBF, 0); // Disable I/O buffering for STDOUT stream, so that chars are sent out as soon as they are printed.
 80007aa:	4b40      	ldr	r3, [pc, #256]	; (80008ac <main+0x138>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	2300      	movs	r3, #0
 80007b2:	2202      	movs	r2, #2
 80007b4:	2100      	movs	r1, #0
 80007b6:	f015 f871 	bl	801589c <setvbuf>

  printf("I:Starting ThreadX\r\n");
 80007ba:	483d      	ldr	r0, [pc, #244]	; (80008b0 <main+0x13c>)
 80007bc:	f015 f826 	bl	801580c <puts>
  MX_ThreadX_Init();
 80007c0:	f7ff ff9d 	bl	80006fe <MX_ThreadX_Init>

  printf("E:***SHOULD NOT RUN***\r\n");
 80007c4:	483b      	ldr	r0, [pc, #236]	; (80008b4 <main+0x140>)
 80007c6:	f015 f821 	bl	801580c <puts>

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ca:	f000 f9c7 	bl	8000b5c <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ce:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <main+0x144>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d11b      	bne.n	8000812 <main+0x9e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007da:	f3bf 8f4f 	dsb	sy
}
 80007de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e0:	f3bf 8f6f 	isb	sy
}
 80007e4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <main+0x144>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007ee:	f3bf 8f4f 	dsb	sy
}
 80007f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f4:	f3bf 8f6f 	isb	sy
}
 80007f8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <main+0x144>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <main+0x144>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000806:	f3bf 8f4f 	dsb	sy
}
 800080a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800080c:	f3bf 8f6f 	isb	sy
}
 8000810:	e000      	b.n	8000814 <main+0xa0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000812:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <main+0x144>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d138      	bne.n	8000892 <main+0x11e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <main+0x144>)
 8000822:	2200      	movs	r2, #0
 8000824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <main+0x144>)
 8000830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000834:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	0b5b      	lsrs	r3, r3, #13
 800083a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800083e:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000848:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	015a      	lsls	r2, r3, #5
 800084e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000852:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000858:	4917      	ldr	r1, [pc, #92]	; (80008b8 <main+0x144>)
 800085a:	4313      	orrs	r3, r2
 800085c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	1e5a      	subs	r2, r3, #1
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1ef      	bne.n	800084a <main+0xd6>
    } while(sets-- != 0U);
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1e5a      	subs	r2, r3, #1
 800086e:	60ba      	str	r2, [r7, #8]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1e5      	bne.n	8000840 <main+0xcc>
  __ASM volatile ("dsb 0xF":::"memory");
 8000874:	f3bf 8f4f 	dsb	sy
}
 8000878:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <main+0x144>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <main+0x144>)
 8000880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000884:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000886:	f3bf 8f4f 	dsb	sy
}
 800088a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088c:	f3bf 8f6f 	isb	sy
}
 8000890:	e000      	b.n	8000894 <main+0x120>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000892:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 fe28 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f810 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 f8d6 	bl	8000a4c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80008a0:	f7ff ff2d 	bl	80006fe <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <main+0x130>
 80008a6:	bf00      	nop
 80008a8:	58024400 	.word	0x58024400
 80008ac:	24000090 	.word	0x24000090
 80008b0:	08016ac0 	.word	0x08016ac0
 80008b4:	08016ad4 	.word	0x08016ad4
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09c      	sub	sp, #112	; 0x70
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	224c      	movs	r2, #76	; 0x4c
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f014 ff10 	bl	80156f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2220      	movs	r2, #32
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f014 ff0a 	bl	80156f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008dc:	2002      	movs	r0, #2
 80008de:	f003 f855 	bl	800398c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <SystemClock_Config+0xf0>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a30      	ldr	r2, [pc, #192]	; (80009ac <SystemClock_Config+0xf0>)
 80008ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <SystemClock_Config+0xf0>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <SystemClock_Config+0xf4>)
 80008fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000900:	4a2b      	ldr	r2, [pc, #172]	; (80009b0 <SystemClock_Config+0xf4>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <SystemClock_Config+0xf4>)
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000914:	bf00      	nop
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <SystemClock_Config+0xf0>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800091e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000922:	d1f8      	bne.n	8000916 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000928:	2301      	movs	r3, #1
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800093c:	233c      	movs	r3, #60	; 0x3c
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800094c:	230c      	movs	r3, #12
 800094e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000950:	2300      	movs	r3, #0
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4618      	mov	r0, r3
 800095e:	f003 f84f 	bl	8003a00 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000968:	f000 f944 	bl	8000bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	233f      	movs	r3, #63	; 0x3f
 800096e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000978:	2308      	movs	r3, #8
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000980:	2340      	movs	r3, #64	; 0x40
 8000982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2104      	movs	r1, #4
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fc44 	bl	8004220 <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800099e:	f000 f929 	bl	8000bf4 <Error_Handler>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3770      	adds	r7, #112	; 0x70
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58024800 	.word	0x58024800
 80009b0:	58000400 	.word	0x58000400

080009b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
void MX_ETH_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_ETH_Init+0x80>)
 80009ba:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <MX_ETH_Init+0x84>)
 80009bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_ETH_Init+0x88>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_ETH_Init+0x88>)
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_ETH_Init+0x88>)
 80009cc:	22e1      	movs	r2, #225	; 0xe1
 80009ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ETH_Init+0x88>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_ETH_Init+0x88>)
 80009d8:	2200      	movs	r2, #0
 80009da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x10;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_ETH_Init+0x88>)
 80009de:	2210      	movs	r2, #16
 80009e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ETH_Init+0x80>)
 80009e4:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_ETH_Init+0x88>)
 80009e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_ETH_Init+0x80>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ETH_Init+0x80>)
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <MX_ETH_Init+0x8c>)
 80009f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_ETH_Init+0x80>)
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <MX_ETH_Init+0x90>)
 80009f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_ETH_Init+0x80>)
 80009fc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ETH_Init+0x80>)
 8000a04:	f000 ff48 	bl	8001898 <HAL_ETH_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a0e:	f000 f8f1 	bl	8000bf4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a12:	2234      	movs	r2, #52	; 0x34
 8000a14:	2100      	movs	r1, #0
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_ETH_Init+0x94>)
 8000a18:	f014 fe6a 	bl	80156f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_ETH_Init+0x94>)
 8000a1e:	2221      	movs	r2, #33	; 0x21
 8000a20:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_ETH_Init+0x94>)
 8000a24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a28:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_ETH_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24002174 	.word	0x24002174
 8000a38:	40028000 	.word	0x40028000
 8000a3c:	240020b8 	.word	0x240020b8
 8000a40:	30000060 	.word	0x30000060
 8000a44:	30000000 	.word	0x30000000
 8000a48:	240021fc 	.word	0x240021fc

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	4a39      	ldr	r2, [pc, #228]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a90:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_GPIO_Init+0x104>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPO_LED_GREEN_Pin|GPO_LED_RED_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f244 0101 	movw	r1, #16385	; 0x4001
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000b00:	f002 ff10 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPO_LED_YELLOW_GPIO_Port, GPO_LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2102      	movs	r1, #2
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <MX_GPIO_Init+0x10c>)
 8000b0a:	f002 ff0b 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPO_LED_GREEN_Pin GPO_LED_RED_Pin */
  GPIO_InitStruct.Pin = GPO_LED_GREEN_Pin|GPO_LED_RED_Pin;
 8000b0e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <MX_GPIO_Init+0x108>)
 8000b28:	f002 fd4c 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPO_LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPO_LED_YELLOW_Pin;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPO_LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_GPIO_Init+0x10c>)
 8000b44:	f002 fd3e 	bl	80035c4 <HAL_GPIO_Init>

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58020400 	.word	0x58020400
 8000b58:	58021000 	.word	0x58021000

08000b5c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b6e:	f000 fe17 	bl	80017a0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000b7a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000b7e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000b80:	230f      	movs	r3, #15
 8000b82:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fe34 	bl	8001810 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000bac:	2307      	movs	r3, #7
 8000bae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fe28 	bl	8001810 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f000 fe05 	bl	80017d0 <HAL_MPU_Enable>

}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f000 fcbd 	bl	8001560 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_MspInit+0x30>)
 8000c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c0c:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x30>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x30>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	58024400 	.word	0x58024400

08000c34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a5d      	ldr	r2, [pc, #372]	; (8000dc8 <HAL_ETH_MspInit+0x194>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	f040 80b3 	bne.w	8000dbe <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c58:	4b5c      	ldr	r3, [pc, #368]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000c5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5e:	4a5b      	ldr	r2, [pc, #364]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c68:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c72:	623b      	str	r3, [r7, #32]
 8000c74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c76:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7c:	4a53      	ldr	r2, [pc, #332]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c86:	4b51      	ldr	r3, [pc, #324]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c94:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000c96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c9a:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ca4:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b42      	ldr	r3, [pc, #264]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a3d      	ldr	r2, [pc, #244]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a35      	ldr	r2, [pc, #212]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0c:	4b2f      	ldr	r3, [pc, #188]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <HAL_ETH_MspInit+0x198>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d2a:	2332      	movs	r3, #50	; 0x32
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3a:	230b      	movs	r3, #11
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <HAL_ETH_MspInit+0x19c>)
 8000d46:	f002 fc3d 	bl	80035c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d4a:	2386      	movs	r3, #134	; 0x86
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5a:	230b      	movs	r3, #11
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <HAL_ETH_MspInit+0x1a0>)
 8000d66:	f002 fc2d 	bl	80035c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7c:	230b      	movs	r3, #11
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <HAL_ETH_MspInit+0x1a4>)
 8000d88:	f002 fc1c 	bl	80035c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9e:	230b      	movs	r3, #11
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <HAL_ETH_MspInit+0x1a8>)
 8000daa:	f002 fc0b 	bl	80035c4 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	203d      	movs	r0, #61	; 0x3d
 8000db4:	f000 fccc 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000db8:	203d      	movs	r0, #61	; 0x3d
 8000dba:	f000 fce3 	bl	8001784 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3738      	adds	r7, #56	; 0x38
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40028000 	.word	0x40028000
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58020800 	.word	0x58020800
 8000dd4:	58020000 	.word	0x58020000
 8000dd8:	58020400 	.word	0x58020400
 8000ddc:	58021800 	.word	0x58021800

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b090      	sub	sp, #64	; 0x40
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	d827      	bhi.n	8000e3e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000dee:	2200      	movs	r2, #0
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	2036      	movs	r0, #54	; 0x36
 8000df4:	f000 fcac 	bl	8001750 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000df8:	2036      	movs	r0, #54	; 0x36
 8000dfa:	f000 fcc3 	bl	8001784 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000dfe:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <HAL_InitTick+0xc4>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_InitTick+0xc8>)
 8000e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e0a:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <HAL_InitTick+0xc8>)
 8000e0c:	f043 0310 	orr.w	r3, r3, #16
 8000e10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_InitTick+0xc8>)
 8000e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e22:	f107 0210 	add.w	r2, r7, #16
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fd6d 	bl	800490c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e34:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d106      	bne.n	8000e4a <HAL_InitTick+0x6a>
 8000e3c:	e001      	b.n	8000e42 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e02b      	b.n	8000e9a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e42:	f003 fd4d 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 8000e46:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e48:	e004      	b.n	8000e54 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e4a:	f003 fd49 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <HAL_InitTick+0xcc>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	0c9b      	lsrs	r3, r3, #18
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_InitTick+0xd0>)
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_InitTick+0xd4>)
 8000e66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_InitTick+0xd0>)
 8000e6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e70:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <HAL_InitTick+0xd0>)
 8000e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_InitTick+0xd0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_InitTick+0xd0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <HAL_InitTick+0xd0>)
 8000e84:	f003 fd84 	bl	8004990 <HAL_TIM_Base_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e8e:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <HAL_InitTick+0xd0>)
 8000e90:	f003 fde0 	bl	8004a54 <HAL_TIM_Base_Start_IT>
 8000e94:	4603      	mov	r3, r0
 8000e96:	e000      	b.n	8000e9a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3740      	adds	r7, #64	; 0x40
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	24000008 	.word	0x24000008
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	431bde83 	.word	0x431bde83
 8000eb0:	24002230 	.word	0x24002230
 8000eb4:	40001000 	.word	0x40001000

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>
	...

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("E:Hardfault\r\n");
 8000ec4:	4801      	ldr	r0, [pc, #4]	; (8000ecc <HardFault_Handler+0xc>)
 8000ec6:	f014 fca1 	bl	801580c <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0xa>
 8000ecc:	08016aec 	.word	0x08016aec

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//printf("I:TIM6_IRQ In %lu\r\n",it.tim6Count);
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <TIM6_DAC_IRQHandler+0x18>)
 8000ef6:	f003 fe1d 	bl	8004b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //printf("I:TIM6_IRQ Out %lu\r\n",it.tim6Count);
  it.tim6Count++;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <TIM6_DAC_IRQHandler+0x1c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a02      	ldr	r2, [pc, #8]	; (8000f0c <TIM6_DAC_IRQHandler+0x1c>)
 8000f02:	6053      	str	r3, [r2, #4]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24002230 	.word	0x24002230
 8000f0c:	2400227c 	.word	0x2400227c

08000f10 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
	//printf("I:ETH_IRQ In %lu\r\n",it.ethCount);
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <ETH_IRQHandler+0x18>)
 8000f16:	f001 f929 	bl	800216c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */
  //printf("I:ETH_IRQ Out %lu\r\n",it.ethCount);
  it.ethCount++;
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <ETH_IRQHandler+0x1c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a02      	ldr	r2, [pc, #8]	; (8000f2c <ETH_IRQHandler+0x1c>)
 8000f22:	6013      	str	r3, [r2, #0]
  /* USER CODE END ETH_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24002174 	.word	0x24002174
 8000f2c:	2400227c 	.word	0x2400227c

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_kill>:

int _kill(int pid, int sig)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f4a:	f014 fb7f 	bl	801564c <__errno>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2216      	movs	r2, #22
 8000f52:	601a      	str	r2, [r3, #0]
	return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_exit>:

void _exit (int status)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffe7 	bl	8000f40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f72:	e7fe      	b.n	8000f72 <_exit+0x12>

08000f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
	}

return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fbc5 	bl	8000758 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
	}
	return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	605a      	str	r2, [r3, #4]
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f014 fae4 	bl	801564c <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	24080000 	.word	0x24080000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	240020c0 	.word	0x240020c0
 80010b8:	24005358 	.word	0x24005358

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <SystemInit+0xec>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <SystemInit+0xec>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <SystemInit+0xf0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	2b06      	cmp	r3, #6
 80010da:	d807      	bhi.n	80010ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010dc:	4b33      	ldr	r3, [pc, #204]	; (80011ac <SystemInit+0xf0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 030f 	bic.w	r3, r3, #15
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <SystemInit+0xf0>)
 80010e6:	f043 0307 	orr.w	r3, r3, #7
 80010ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010ec:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <SystemInit+0xf4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <SystemInit+0xf4>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <SystemInit+0xf4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <SystemInit+0xf4>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	492b      	ldr	r1, [pc, #172]	; (80011b0 <SystemInit+0xf4>)
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <SystemInit+0xf8>)
 8001106:	4013      	ands	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <SystemInit+0xf0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d007      	beq.n	8001126 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <SystemInit+0xf0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 030f 	bic.w	r3, r3, #15
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <SystemInit+0xf0>)
 8001120:	f043 0307 	orr.w	r3, r3, #7
 8001124:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <SystemInit+0xf4>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <SystemInit+0xf4>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <SystemInit+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <SystemInit+0xf4>)
 800113a:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <SystemInit+0xfc>)
 800113c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <SystemInit+0xf4>)
 8001140:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <SystemInit+0x100>)
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <SystemInit+0xf4>)
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <SystemInit+0x104>)
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <SystemInit+0xf4>)
 800114c:	2200      	movs	r2, #0
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <SystemInit+0xf4>)
 8001152:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <SystemInit+0x104>)
 8001154:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <SystemInit+0xf4>)
 8001158:	2200      	movs	r2, #0
 800115a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <SystemInit+0xf4>)
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <SystemInit+0x104>)
 8001160:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <SystemInit+0xf4>)
 8001164:	2200      	movs	r2, #0
 8001166:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <SystemInit+0xf4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <SystemInit+0xf4>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001172:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <SystemInit+0xf4>)
 8001176:	2200      	movs	r2, #0
 8001178:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <SystemInit+0x108>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <SystemInit+0x10c>)
 8001180:	4013      	ands	r3, r2
 8001182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001186:	d202      	bcs.n	800118e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <SystemInit+0x110>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <SystemInit+0x114>)
 8001190:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001194:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SystemInit+0xec>)
 8001198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800119c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	52002000 	.word	0x52002000
 80011b0:	58024400 	.word	0x58024400
 80011b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b8:	02020200 	.word	0x02020200
 80011bc:	01ff0000 	.word	0x01ff0000
 80011c0:	01010280 	.word	0x01010280
 80011c4:	5c001000 	.word	0x5c001000
 80011c8:	ffff0000 	.word	0xffff0000
 80011cc:	51008108 	.word	0x51008108
 80011d0:	52004000 	.word	0x52004000

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d8:	f7ff ff70 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	; (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f014 fa29 	bl	8015658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fab5 	bl	8000774 <main>
  bx  lr
 800120a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001210:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001214:	240000f4 	.word	0x240000f4
  ldr r2, =_sidata
 8001218:	08016edc 	.word	0x08016edc
  ldr r2, =_sbss
 800121c:	240000f4 	.word	0x240000f4
  ldr r4, =_ebss
 8001220:	24005354 	.word	0x24005354

08001224 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC3_IRQHandler>

08001226 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <LAN8742_RegisterBusIO+0x28>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <LAN8742_RegisterBusIO+0x28>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <LAN8742_RegisterBusIO+0x28>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e014      	b.n	800127e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d17c      	bne.n	80013a4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2220      	movs	r2, #32
 80012bc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e01c      	b.n	80012fe <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f107 0208 	add.w	r2, r7, #8
 80012cc:	2112      	movs	r1, #18
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	4798      	blx	r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da03      	bge.n	80012e0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80012d8:	f06f 0304 	mvn.w	r3, #4
 80012dc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80012de:	e00b      	b.n	80012f8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d105      	bne.n	80012f8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
         break;
 80012f6:	e005      	b.n	8001304 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b1f      	cmp	r3, #31
 8001302:	d9df      	bls.n	80012c4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b1f      	cmp	r3, #31
 800130a:	d902      	bls.n	8001312 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800130c:	f06f 0302 	mvn.w	r3, #2
 8001310:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d145      	bne.n	80013a4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6810      	ldr	r0, [r2, #0]
 8001320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001324:	2100      	movs	r1, #0
 8001326:	4798      	blx	r3
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	db37      	blt.n	800139e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6810      	ldr	r0, [r2, #0]
 8001336:	f107 0208 	add.w	r2, r7, #8
 800133a:	2100      	movs	r1, #0
 800133c:	4798      	blx	r3
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	db28      	blt.n	8001396 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4798      	blx	r3
 800134a:	4603      	mov	r3, r0
 800134c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800134e:	e01c      	b.n	800138a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4798      	blx	r3
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001362:	d80e      	bhi.n	8001382 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6810      	ldr	r0, [r2, #0]
 800136c:	f107 0208 	add.w	r2, r7, #8
 8001370:	2100      	movs	r1, #0
 8001372:	4798      	blx	r3
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	da07      	bge.n	800138a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800137a:	f06f 0304 	mvn.w	r3, #4
 800137e:	613b      	str	r3, [r7, #16]
                 break;
 8001380:	e010      	b.n	80013a4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001382:	f06f 0301 	mvn.w	r3, #1
 8001386:	613b      	str	r3, [r7, #16]
               break;
 8001388:	e00c      	b.n	80013a4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1dd      	bne.n	8001350 <LAN8742_Init+0xc6>
 8001394:	e006      	b.n	80013a4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001396:	f06f 0304 	mvn.w	r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	e002      	b.n	80013a4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800139e:	f06f 0303 	mvn.w	r3, #3
 80013a2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d112      	bne.n	80013d0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4798      	blx	r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80013b4:	bf00      	nop
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013c8:	d9f5      	bls.n	80013b6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80013d0:	693b      	ldr	r3, [r7, #16]
 }
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6810      	ldr	r0, [r2, #0]
 80013ee:	f107 020c 	add.w	r2, r7, #12
 80013f2:	2101      	movs	r1, #1
 80013f4:	4798      	blx	r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da02      	bge.n	8001402 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013fc:	f06f 0304 	mvn.w	r3, #4
 8001400:	e06e      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6810      	ldr	r0, [r2, #0]
 800140a:	f107 020c 	add.w	r2, r7, #12
 800140e:	2101      	movs	r1, #1
 8001410:	4798      	blx	r3
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	da02      	bge.n	800141e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001418:	f06f 0304 	mvn.w	r3, #4
 800141c:	e060      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001428:	2301      	movs	r3, #1
 800142a:	e059      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6810      	ldr	r0, [r2, #0]
 8001434:	f107 020c 	add.w	r2, r7, #12
 8001438:	2100      	movs	r1, #0
 800143a:	4798      	blx	r3
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	da02      	bge.n	8001448 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001442:	f06f 0304 	mvn.w	r3, #4
 8001446:	e04b      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11b      	bne.n	800148a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <LAN8742_GetLinkState+0x90>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001466:	2302      	movs	r3, #2
 8001468:	e03a      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001474:	2303      	movs	r3, #3
 8001476:	e033      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001482:	2304      	movs	r3, #4
 8001484:	e02c      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001486:	2305      	movs	r3, #5
 8001488:	e02a      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6810      	ldr	r0, [r2, #0]
 8001492:	f107 020c 	add.w	r2, r7, #12
 8001496:	211f      	movs	r1, #31
 8001498:	4798      	blx	r3
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	da02      	bge.n	80014a6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014a0:	f06f 0304 	mvn.w	r3, #4
 80014a4:	e01c      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014b0:	2306      	movs	r3, #6
 80014b2:	e015      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 031c 	and.w	r3, r3, #28
 80014ba:	2b18      	cmp	r3, #24
 80014bc:	d101      	bne.n	80014c2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014be:	2302      	movs	r3, #2
 80014c0:	e00e      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 031c 	and.w	r3, r3, #28
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d101      	bne.n	80014d0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e007      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 031c 	and.w	r3, r3, #28
 80014d6:	2b14      	cmp	r3, #20
 80014d8:	d101      	bne.n	80014de <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014da:	2304      	movs	r3, #4
 80014dc:	e000      	b.n	80014e0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014de:	2305      	movs	r3, #5
    }				
  }
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f000 f923 	bl	800173a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014f4:	f003 f84a 	bl	800458c <HAL_RCC_GetSysClockFreq>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_Init+0x68>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	4913      	ldr	r1, [pc, #76]	; (8001554 <HAL_Init+0x6c>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
 8001510:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_Init+0x68>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_Init+0x6c>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_Init+0x70>)
 800152a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_Init+0x74>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001532:	200f      	movs	r0, #15
 8001534:	f7ff fc54 	bl	8000de0 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e002      	b.n	8001548 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001542:	f7ff fb5d 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	58024400 	.word	0x58024400
 8001554:	08016d78 	.word	0x08016d78
 8001558:	24000004 	.word	0x24000004
 800155c:	24000000 	.word	0x24000000

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2400000c 	.word	0x2400000c
 8001584:	24002284 	.word	0x24002284

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	24002284 	.word	0x24002284

080015a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetREVID+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0c1b      	lsrs	r3, r3, #16
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	5c001000 	.word	0x5c001000

080015b8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015c8:	4904      	ldr	r1, [pc, #16]	; (80015dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	58000400 	.word	0x58000400

080015e0 <__NVIC_SetPriorityGrouping>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	4313      	orrs	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	05fa0000 	.word	0x05fa0000

08001628 <__NVIC_GetPriorityGrouping>:
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff4c 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800175e:	f7ff ff63 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001762:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f7ff ffb3 	bl	80016d4 <NVIC_EncodePriority>
 800176e:	4602      	mov	r2, r0
 8001770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff82 	bl	8001680 <__NVIC_SetPriority>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff56 	bl	8001644 <__NVIC_EnableIRQ>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017a4:	f3bf 8f5f 	dmb	sy
}
 80017a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_MPU_Disable+0x28>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_MPU_Disable+0x28>)
 80017b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_MPU_Disable+0x2c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	e000ed90 	.word	0xe000ed90

080017d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_MPU_Enable+0x38>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_MPU_Enable+0x3c>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_MPU_Enable+0x3c>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017ee:	f3bf 8f4f 	dsb	sy
}
 80017f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f4:	f3bf 8f6f 	isb	sy
}
 80017f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed90 	.word	0xe000ed90
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	785a      	ldrb	r2, [r3, #1]
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_MPU_ConfigRegion+0x84>)
 800181e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d029      	beq.n	800187c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001828:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <HAL_MPU_ConfigRegion+0x84>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7b1b      	ldrb	r3, [r3, #12]
 8001834:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7adb      	ldrb	r3, [r3, #11]
 800183a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800183c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7a9b      	ldrb	r3, [r3, #10]
 8001842:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001844:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7b5b      	ldrb	r3, [r3, #13]
 800184a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800184c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7b9b      	ldrb	r3, [r3, #14]
 8001852:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001854:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7bdb      	ldrb	r3, [r3, #15]
 800185a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800185c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7a5b      	ldrb	r3, [r3, #9]
 8001862:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001864:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7a1b      	ldrb	r3, [r3, #8]
 800186a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800186c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001876:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001878:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800187a:	e005      	b.n	8001888 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_MPU_ConfigRegion+0x84>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_MPU_ConfigRegion+0x84>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed90 	.word	0xe000ed90

08001898 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0c6      	b.n	8001a38 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff f9be 	bl	8000c34 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2223      	movs	r2, #35	; 0x23
 80018bc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b60      	ldr	r3, [pc, #384]	; (8001a40 <HAL_ETH_Init+0x1a8>)
 80018c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c4:	4a5e      	ldr	r2, [pc, #376]	; (8001a40 <HAL_ETH_Init+0x1a8>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <HAL_ETH_Init+0x1a8>)
 80018d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7a1b      	ldrb	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d103      	bne.n	80018ec <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fe67 	bl	80015b8 <HAL_SYSCFG_ETHInterfaceSelect>
 80018ea:	e003      	b.n	80018f4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018f0:	f7ff fe62 	bl	80015b8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fe3c 	bl	8001588 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001912:	e00f      	b.n	8001934 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001914:	f7ff fe38 	bl	8001588 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001922:	d907      	bls.n	8001934 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2204      	movs	r2, #4
 8001928:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	22e0      	movs	r2, #224	; 0xe0
 800192e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e081      	b.n	8001a38 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1e6      	bne.n	8001914 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f001 fac2 	bl	8002ed0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800194c:	f002 ff98 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 8001950:	4603      	mov	r3, r0
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <HAL_ETH_Init+0x1ac>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9a      	lsrs	r2, r3, #18
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3a01      	subs	r2, #1
 8001960:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 fa15 	bl	8002d94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001980:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001984:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	22e0      	movs	r2, #224	; 0xe0
 800199c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e04a      	b.n	8001a38 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80019aa:	4413      	add	r3, r2
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_ETH_Init+0x1b0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6952      	ldr	r2, [r2, #20]
 80019b6:	0052      	lsls	r2, r2, #1
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	6809      	ldr	r1, [r1, #0]
 80019bc:	431a      	orrs	r2, r3
 80019be:	f241 1308 	movw	r3, #4360	; 0x1108
 80019c2:	440b      	add	r3, r1
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f001 fada 	bl	8002f80 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f001 fb1e 	bl	800300e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	3305      	adds	r3, #5
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	021a      	lsls	r2, r3, #8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	3304      	adds	r3, #4
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	3303      	adds	r3, #3
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	061a      	lsls	r2, r3, #24
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	3302      	adds	r3, #2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a10:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a1e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2210      	movs	r2, #16
 8001a34:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	58024400 	.word	0x58024400
 8001a44:	431bde83 	.word	0x431bde83
 8001a48:	ffff8001 	.word	0xffff8001

08001a4c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3310      	adds	r3, #16
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_ETH_DescAssignMemory+0x28>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d904      	bls.n	8001a7e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e021      	b.n	8001ac2 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00b      	beq.n	8001ab4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d174      	bne.n	8001bc8 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2223      	movs	r2, #35	; 0x23
 8001ae2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e00f      	b.n	8001b0a <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3310      	adds	r3, #16
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d9ec      	bls.n	8001aea <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0202 	orr.w	r2, r2, #2
 8001b24:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b52:	4413      	add	r3, r2
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6811      	ldr	r1, [r2, #0]
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b62:	440b      	add	r3, r1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6811      	ldr	r1, [r2, #0]
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b7e:	440b      	add	r3, r1
 8001b80:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001b94:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b98:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001ba2:	4413      	add	r3, r2
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6811      	ldr	r1, [r2, #0]
 8001baa:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	f241 1334 	movw	r3, #4404	; 0x1134
 8001bb4:	440b      	add	r3, r1
 8001bb6:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2210      	movs	r2, #16
 8001bbc:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2222      	movs	r2, #34	; 0x22
 8001bc2:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d040      	beq.n	8001c68 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2223      	movs	r2, #35	; 0x23
 8001bea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bf4:	4413      	add	r3, r2
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6811      	ldr	r1, [r2, #0]
 8001bfc:	f023 0201 	bic.w	r2, r3, #1
 8001c00:	f241 1304 	movw	r3, #4356	; 0x1104
 8001c04:	440b      	add	r3, r1
 8001c06:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6811      	ldr	r1, [r2, #0]
 8001c18:	f023 0201 	bic.w	r2, r3, #1
 8001c1c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c20:	440b      	add	r3, r1
 8001c22:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0202 	bic.w	r2, r2, #2
 8001c56:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2210      	movs	r2, #16
 8001c62:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  if(pTxConfig == NULL)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d107      	bne.n	8001c96 <HAL_ETH_Transmit_IT+0x20>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e02f      	b.n	8001cf6 <HAL_ETH_Transmit_IT+0x80>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d12a      	bne.n	8001cf4 <HAL_ETH_Transmit_IT+0x7e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f001 fa10 	bl	80030c8 <ETH_Prepare_Tx_Descriptors>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_ETH_Transmit_IT+0x48>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e01b      	b.n	8001cf6 <HAL_ETH_Transmit_IT+0x80>
    }

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d904      	bls.n	8001cda <HAL_ETH_Transmit_IT+0x64>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	1f1a      	subs	r2, r3, #4
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	3106      	adds	r1, #6
 8001ce6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001cea:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001cee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_ETH_Transmit_IT+0x80>

  }
  else
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b089      	sub	sp, #36	; 0x24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3344      	adds	r3, #68	; 0x44
 8001d0a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d06b      	beq.n	8001e08 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e0ce      	b.n	8001ed2 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d036      	beq.n	8001db4 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d902      	bls.n	8001d68 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b04      	subs	r3, #4
 8001d66:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db11      	blt.n	8001d9e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d902      	bls.n	8001d9e <HAL_ETH_IsRxDataAvailable+0xa0>
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e08e      	b.n	8001ed2 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d012      	beq.n	8001de6 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d902      	bls.n	8001dda <HAL_ETH_IsRxDataAvailable+0xdc>
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	e010      	b.n	8001e08 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3301      	adds	r3, #1
 8001dea:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3301      	adds	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d902      	bls.n	8001dfe <HAL_ETH_IsRxDataAvailable+0x100>
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e06:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db02      	blt.n	8001e16 <HAL_ETH_IsRxDataAvailable+0x118>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d98e      	bls.n	8001d34 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d056      	beq.n	8001eca <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e03b      	b.n	8001eb4 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e4a:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d20d      	bcs.n	8001eae <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d902      	bls.n	8001ea4 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b04      	subs	r3, #4
 8001ea2:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3bf      	bcc.n	8001e3c <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	f241 1328 	movw	r3, #4392	; 0x1128
 8001ec6:	440b      	add	r3, r1
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]

  return 0;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b08a      	sub	sp, #40	; 0x28
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3344      	adds	r3, #68	; 0x44
 8001eec:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d104      	bne.n	8001f16 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07d      	b.n	8002012 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff feed 	bl	8001cfe <HAL_ETH_IsRxDataAvailable>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e071      	b.n	8002012 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
 8001f42:	e031      	b.n	8001fa8 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f7e:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	3301      	adds	r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d902      	bls.n	8001f92 <HAL_ETH_GetRxDataBuffer+0xb4>
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3c7      	bcc.n	8001f44 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d803      	bhi.n	8001fde <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	e018      	b.n	8002010 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d012      	beq.n	800200c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	e001      	b.n	8002010 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3344      	adds	r3, #68	; 0x44
 8002028:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fe60 	bl	8001cfe <HAL_ETH_IsRxDataAvailable>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e017      	b.n	8002078 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4413      	add	r3, r2
 8002050:	3b01      	subs	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d902      	bls.n	8002060 <HAL_ETH_GetRxDataLength+0x46>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3b04      	subs	r3, #4
 800205e:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3344      	adds	r3, #68	; 0x44
 800208c:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209c:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e057      	b.n	8002160 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	e03b      	b.n	800213c <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020d2:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3b01      	subs	r3, #1
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	429a      	cmp	r2, r3
 8002118:	d20d      	bcs.n	8002136 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d902      	bls.n	800212c <HAL_ETH_BuildRxDescriptors+0xac>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b04      	subs	r3, #4
 800212a:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	3301      	adds	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	429a      	cmp	r2, r3
 8002142:	d3bf      	bcc.n	80020c4 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	f241 1328 	movw	r3, #4392	; 0x1128
 800214e:	440b      	add	r3, r1
 8002150:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3724      	adds	r7, #36	; 0x24
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002182:	2b40      	cmp	r3, #64	; 0x40
 8002184:	d113      	bne.n	80021ae <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f241 1334 	movw	r3, #4404	; 0x1134
 800218e:	4413      	add	r3, r2
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d109      	bne.n	80021ae <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f005 fe20 	bl	8007de0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021a8:	f248 0240 	movw	r2, #32832	; 0x8040
 80021ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d113      	bne.n	80021e8 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	f241 1334 	movw	r3, #4404	; 0x1134
 80021c8:	4413      	add	r3, r2
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d109      	bne.n	80021e8 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f005 fe1f 	bl	8007e18 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021e2:	f248 0201 	movw	r2, #32769	; 0x8001
 80021e6:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021fa:	d149      	bne.n	8002290 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	f241 1334 	movw	r3, #4404	; 0x1134
 8002204:	4413      	add	r3, r2
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002210:	d13e      	bne.n	8002290 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	f043 0208 	orr.w	r2, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002230:	d11b      	bne.n	800226a <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	f241 1302 	movw	r3, #4354	; 0x1102
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f241 1334 	movw	r3, #4404	; 0x1134
 800224e:	4413      	add	r3, r2
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6811      	ldr	r1, [r2, #0]
 8002256:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800225a:	f241 1334 	movw	r3, #4404	; 0x1134
 800225e:	440b      	add	r3, r1
 8002260:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	22e0      	movs	r2, #224	; 0xe0
 8002266:	66da      	str	r2, [r3, #108]	; 0x6c
 8002268:	e00f      	b.n	800228a <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002284:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002288:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f85c 	bl	8002348 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002298:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800229c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80022a0:	d10e      	bne.n	80022c0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	22e0      	movs	r2, #224	; 0xe0
 80022b2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f851 	bl	800235c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d10f      	bne.n	80022f0 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022d8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f844 	bl	8002370 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d10f      	bne.n	8002320 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f836 	bl	8002384 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_ETH_IRQHandler+0x1d8>)
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_ETH_IRQHandler+0x1d8>)
 800232e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f82f 	bl	8002398 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	58000080 	.word	0x58000080

08002348 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e03e      	b.n	800244c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023d6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	055b      	lsls	r3, r3, #21
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f043 030c 	orr.w	r3, r3, #12
 80023fa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800240e:	f7ff f8bb 	bl	8001588 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002414:	e009      	b.n	800242a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002416:	f7ff f8b7 	bl	8001588 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002424:	d901      	bls.n	800242a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e010      	b.n	800244c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ed      	bne.n	8002416 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e03c      	b.n	80024f0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800247e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	055b      	lsls	r3, r3, #21
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f023 030c 	bic.w	r3, r3, #12
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_ETH_WritePHYRegister+0xa4>)
 80024b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80024ba:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <HAL_ETH_WritePHYRegister+0xa4>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80024c2:	f7ff f861 	bl	8001588 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024c8:	e009      	b.n	80024de <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80024ca:	f7ff f85d 	bl	8001588 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d8:	d901      	bls.n	80024de <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e008      	b.n	80024f0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ed      	bne.n	80024ca <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40028000 	.word	0x40028000

080024fc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e1c3      	b.n	8002898 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0e5b      	lsrs	r3, r3, #25
 800275a:	f003 021f 	and.w	r2, r3, #31
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	b29a      	uxth	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	bf14      	ite	ne
 800280e:	2301      	movne	r3, #1
 8002810:	2300      	moveq	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002824:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002834:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf14      	ite	ne
 800284c:	2301      	movne	r3, #1
 800284e:	2300      	moveq	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf14      	ite	ne
 800286a:	2301      	movne	r3, #1
 800286c:	2300      	moveq	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e00a      	b.n	80028ce <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d105      	bne.n	80028cc <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80028c0:	6839      	ldr	r1, [r7, #0]
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f8c4 	bl	8002a50 <ETH_SetMACConfig>

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  if(dmaconf == NULL)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00a      	b.n	8002900 <HAL_ETH_SetDMAConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d105      	bne.n	80028fe <HAL_ETH_SetDMAConfig+0x28>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 80028f2:	6839      	ldr	r1, [r7, #0]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f9c7 	bl	8002c88 <ETH_SetDMAConfig>

    return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_ETH_SetDMAConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002918:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002920:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002922:	f001 ffad 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 8002926:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d908      	bls.n	8002942 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d804      	bhi.n	8002942 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e027      	b.n	8002992 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d908      	bls.n	800295c <HAL_ETH_SetMDIOClockRange+0x54>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d204      	bcs.n	800295c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e01a      	b.n	8002992 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4a13      	ldr	r2, [pc, #76]	; (80029ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d303      	bcc.n	800296c <HAL_ETH_SetMDIOClockRange+0x64>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d911      	bls.n	8002990 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d908      	bls.n	8002986 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d804      	bhi.n	8002986 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e005      	b.n	8002992 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e000      	b.n	8002992 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002990:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	01312cff 	.word	0x01312cff
 80029a8:	02160ebf 	.word	0x02160ebf
 80029ac:	03938700 	.word	0x03938700
 80029b0:	05f5e0ff 	.word	0x05f5e0ff
 80029b4:	08f0d17f 	.word	0x08f0d17f

080029b8 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if(pFilterConfig == NULL)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e039      	b.n	8002a40 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	78db      	ldrb	r3, [r3, #3]
 80029d6:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80029d8:	431a      	orrs	r2, r3
                    ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	791b      	ldrb	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80029e0:	431a      	orrs	r2, r3
                      ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	7a1b      	ldrb	r3, [r3, #8]
 80029e6:	00db      	lsls	r3, r3, #3
                    ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80029e8:	431a      	orrs	r2, r3
                        ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	795b      	ldrb	r3, [r3, #5]
 80029ee:	011b      	lsls	r3, r3, #4
                      ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80029f0:	4313      	orrs	r3, r2
                          ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	7a52      	ldrb	r2, [r2, #9]
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ETH_SetMACFilterConfig+0x46>
 80029fa:	2220      	movs	r2, #32
 80029fc:	e000      	b.n	8002a00 <HAL_ETH_SetMACFilterConfig+0x48>
 80029fe:	2200      	movs	r2, #0
                        ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002a00:	431a      	orrs	r2, r3
                            ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	79db      	ldrb	r3, [r3, #7]
 8002a06:	021b      	lsls	r3, r3, #8
                          ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002a08:	431a      	orrs	r2, r3
                              ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	799b      	ldrb	r3, [r3, #6]
 8002a0e:	025b      	lsls	r3, r3, #9
                            ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002a10:	431a      	orrs	r2, r3
                                ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	789b      	ldrb	r3, [r3, #2]
 8002a16:	029b      	lsls	r3, r3, #10
                              ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002a18:	431a      	orrs	r2, r3
                                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	07db      	lsls	r3, r3, #31
                                ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002a20:	431a      	orrs	r2, r3
                                    pFilterConfig->ControlPacketsFilter);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_ETH_SetMACFilterConfig+0x94>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	68f9      	ldr	r1, [r7, #12]
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	7ffff800 	.word	0x7ffff800

08002a50 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002a62:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	791b      	ldrb	r3, [r3, #4]
 8002a68:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002a6a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7b1b      	ldrb	r3, [r3, #12]
 8002a70:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a72:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	7b5b      	ldrb	r3, [r3, #13]
 8002a78:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a7a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	7b9b      	ldrb	r3, [r3, #14]
 8002a80:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	7bdb      	ldrb	r3, [r3, #15]
 8002a88:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a8a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	7c12      	ldrb	r2, [r2, #16]
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d102      	bne.n	8002a9a <ETH_SetMACConfig+0x4a>
 8002a94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a98:	e000      	b.n	8002a9c <ETH_SetMACConfig+0x4c>
 8002a9a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a9c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	7c52      	ldrb	r2, [r2, #17]
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d102      	bne.n	8002aac <ETH_SetMACConfig+0x5c>
 8002aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aaa:	e000      	b.n	8002aae <ETH_SetMACConfig+0x5e>
 8002aac:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002aae:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	7c9b      	ldrb	r3, [r3, #18]
 8002ab4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002ab6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002abc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002ac2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	7f1b      	ldrb	r3, [r3, #28]
 8002ac8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002aca:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	7f5b      	ldrb	r3, [r3, #29]
 8002ad0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002ad2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	7f92      	ldrb	r2, [r2, #30]
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d102      	bne.n	8002ae2 <ETH_SetMACConfig+0x92>
 8002adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae0:	e000      	b.n	8002ae4 <ETH_SetMACConfig+0x94>
 8002ae2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002ae4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7fdb      	ldrb	r3, [r3, #31]
 8002aea:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002aec:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	d102      	bne.n	8002afe <ETH_SetMACConfig+0xae>
 8002af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002afc:	e000      	b.n	8002b00 <ETH_SetMACConfig+0xb0>
 8002afe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002b00:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002b06:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b0e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002b10:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <ETH_SetMACConfig+0x22c>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b3a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b3c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b44:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002b46:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002b4e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002b50:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	d102      	bne.n	8002b62 <ETH_SetMACConfig+0x112>
 8002b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b60:	e000      	b.n	8002b64 <ETH_SetMACConfig+0x114>
 8002b62:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002b64:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <ETH_SetMACConfig+0x230>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	68f9      	ldr	r1, [r7, #12]
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b88:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <ETH_SetMACConfig+0x234>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	68f9      	ldr	r1, [r7, #12]
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bb2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002bba:	2a00      	cmp	r2, #0
 8002bbc:	d101      	bne.n	8002bc2 <ETH_SetMACConfig+0x172>
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	e000      	b.n	8002bc4 <ETH_SetMACConfig+0x174>
 8002bc2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002bc4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bd6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002bec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002bf4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f023 0103 	bic.w	r1, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002c1a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d101      	bne.n	8002c3e <ETH_SetMACConfig+0x1ee>
 8002c3a:	2240      	movs	r2, #64	; 0x40
 8002c3c:	e000      	b.n	8002c40 <ETH_SetMACConfig+0x1f0>
 8002c3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002c40:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002c48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c4a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002c52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c60:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	00048083 	.word	0x00048083
 8002c80:	c0f88000 	.word	0xc0f88000
 8002c84:	fffffef0 	.word	0xfffffef0

08002c88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <ETH_SetDMAConfig+0xf8>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	6809      	ldr	r1, [r1, #0]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002cae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	7b1b      	ldrb	r3, [r3, #12]
 8002cc0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	f241 0304 	movw	r3, #4100	; 0x1004
 8002cce:	4413      	add	r3, r2
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <ETH_SetDMAConfig+0xfc>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6811      	ldr	r1, [r2, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	f241 0304 	movw	r3, #4100	; 0x1004
 8002ce2:	440b      	add	r3, r1
 8002ce4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7b5b      	ldrb	r3, [r3, #13]
 8002cea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <ETH_SetDMAConfig+0x100>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6811      	ldr	r1, [r2, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002d0e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	7d1b      	ldrb	r3, [r3, #20]
 8002d18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d1a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	7f5b      	ldrb	r3, [r3, #29]
 8002d20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002d2e:	4413      	add	r3, r2
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <ETH_SetDMAConfig+0x104>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6811      	ldr	r1, [r2, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002d42:	440b      	add	r3, r1
 8002d44:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7f1b      	ldrb	r3, [r3, #28]
 8002d4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d5c:	4413      	add	r3, r2
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <ETH_SetDMAConfig+0x108>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6811      	ldr	r1, [r2, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d70:	440b      	add	r3, r1
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	ffff87fd 	.word	0xffff87fd
 8002d84:	ffff2ffe 	.word	0xffff2ffe
 8002d88:	fffec000 	.word	0xfffec000
 8002d8c:	ffc0efef 	.word	0xffc0efef
 8002d90:	7fc0ffff 	.word	0x7fc0ffff

08002d94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b0a4      	sub	sp, #144	; 0x90
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002da2:	2300      	movs	r3, #0
 8002da4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002dec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002df0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e16:	2300      	movs	r3, #0
 8002e18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002e50:	2302      	movs	r3, #2
 8002e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fde6 	bl	8002a50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ea2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002eb4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002eba:	f107 0308 	add.w	r3, r7, #8
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff fee1 	bl	8002c88 <ETH_SetDMAConfig>
}
 8002ec6:	bf00      	nop
 8002ec8:	3790      	adds	r7, #144	; 0x90
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002eea:	f001 fcc9 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 8002eee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d908      	bls.n	8002f0a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d804      	bhi.n	8002f0a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e027      	b.n	8002f5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d908      	bls.n	8002f24 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d204      	bcs.n	8002f24 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e01a      	b.n	8002f5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d303      	bcc.n	8002f34 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d911      	bls.n	8002f58 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d908      	bls.n	8002f4e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d804      	bhi.n	8002f4e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e005      	b.n	8002f5a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	e000      	b.n	8002f5a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002f58:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	01312cff 	.word	0x01312cff
 8002f70:	02160ebf 	.word	0x02160ebf
 8002f74:	03938700 	.word	0x03938700
 8002f78:	05f5e0ff 	.word	0x05f5e0ff
 8002f7c:	08f0d17f 	.word	0x08f0d17f

08002f80 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e01d      	b.n	8002fca <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68d9      	ldr	r1, [r3, #12]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	3206      	adds	r2, #6
 8002fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d9de      	bls.n	8002f8e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f241 132c 	movw	r3, #4396	; 0x112c
 8002fde:	4413      	add	r3, r2
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68d9      	ldr	r1, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	f241 1314 	movw	r3, #4372	; 0x1114
 8002ff0:	4413      	add	r3, r2
 8002ff2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e024      	b.n	8003066 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6919      	ldr	r1, [r3, #16]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3310      	adds	r3, #16
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3301      	adds	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d9d7      	bls.n	800301c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f241 1330 	movw	r3, #4400	; 0x1130
 8003092:	4413      	add	r3, r2
 8003094:	2203      	movs	r2, #3
 8003096:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6919      	ldr	r1, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80030a4:	4413      	add	r3, r2
 80030a6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	f241 1328 	movw	r3, #4392	; 0x1128
 80030b8:	4413      	add	r3, r2
 80030ba:	6019      	str	r1, [r3, #0]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b08d      	sub	sp, #52	; 0x34
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3318      	adds	r3, #24
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80030e6:	2300      	movs	r3, #0
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800310a:	d007      	beq.n	800311c <ETH_Prepare_Tx_Descriptors+0x54>
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	3304      	adds	r3, #4
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800311c:	2302      	movs	r3, #2
 800311e:	e24a      	b.n	80035b6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d044      	beq.n	80031b6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4b72      	ldr	r3, [pc, #456]	; (80032fc <ETH_Prepare_Tx_Descriptors+0x234>)
 8003132:	4013      	ands	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003138:	431a      	orrs	r2, r3
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003158:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d027      	beq.n	80031b6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	b29a      	uxth	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	431a      	orrs	r2, r3
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031a4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00e      	beq.n	80031e0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	4b4e      	ldr	r3, [pc, #312]	; (8003300 <ETH_Prepare_Tx_Descriptors+0x238>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	6992      	ldr	r2, [r2, #24]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <ETH_Prepare_Tx_Descriptors+0x130>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d030      	beq.n	800325a <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	3301      	adds	r3, #1
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2b03      	cmp	r3, #3
 800321a:	d902      	bls.n	8003222 <ETH_Prepare_Tx_Descriptors+0x15a>
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	3b04      	subs	r3, #4
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	3301      	adds	r3, #1
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800323a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800323e:	d10c      	bne.n	800325a <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003248:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003256:	2302      	movs	r3, #2
 8003258:	e1ad      	b.n	80035b6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	3301      	adds	r3, #1
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003270:	4013      	ands	r3, r2
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	6852      	ldr	r2, [r2, #4]
 8003276:	431a      	orrs	r2, r3
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800329a:	4013      	ands	r3, r2
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	6852      	ldr	r2, [r2, #4]
 80032a0:	0412      	lsls	r2, r2, #16
 80032a2:	431a      	orrs	r2, r3
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	e008      	b.n	80032bc <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2200      	movs	r2, #0
 80032ae:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b13      	ldr	r3, [pc, #76]	; (8003304 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d021      	beq.n	800330c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	04db      	lsls	r3, r3, #19
 80032d6:	431a      	orrs	r2, r3
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <ETH_Prepare_Tx_Descriptors+0x240>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	69d2      	ldr	r2, [r2, #28]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	e02e      	b.n	800335a <ETH_Prepare_Tx_Descriptors+0x292>
 80032fc:	ffff0000 	.word	0xffff0000
 8003300:	ffffc000 	.word	0xffffc000
 8003304:	c000ffff 	.word	0xc000ffff
 8003308:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	4b93      	ldr	r3, [pc, #588]	; (8003560 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003312:	4013      	ands	r3, r2
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	6852      	ldr	r2, [r2, #4]
 8003318:	431a      	orrs	r2, r3
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	431a      	orrs	r2, r3
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	431a      	orrs	r2, r3
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	431a      	orrs	r2, r3
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80cb 	beq.w	8003540 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80033bc:	e0c0      	b.n	8003540 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033cc:	3301      	adds	r3, #1
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d902      	bls.n	80033dc <ETH_Prepare_Tx_Descriptors+0x314>
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	3b04      	subs	r3, #4
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033fe:	d007      	beq.n	8003410 <ETH_Prepare_Tx_Descriptors+0x348>
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	3304      	adds	r3, #4
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d026      	beq.n	800345e <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800341e:	2300      	movs	r3, #0
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	e016      	b.n	8003452 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	3301      	adds	r3, #1
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	2b03      	cmp	r3, #3
 800343a:	d902      	bls.n	8003442 <ETH_Prepare_Tx_Descriptors+0x37a>
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	3b04      	subs	r3, #4
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	3301      	adds	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	429a      	cmp	r2, r3
 8003458:	d3e4      	bcc.n	8003424 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e0ab      	b.n	80035b6 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	3301      	adds	r3, #1
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4b3a      	ldr	r3, [pc, #232]	; (8003564 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800347a:	4013      	ands	r3, r2
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	6852      	ldr	r2, [r2, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d012      	beq.n	80034b4 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	6852      	ldr	r2, [r2, #4]
 80034aa:	0412      	lsls	r2, r2, #16
 80034ac:	431a      	orrs	r2, r3
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	e008      	b.n	80034c6 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	2200      	movs	r2, #0
 80034b8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	6a3a      	ldr	r2, [r7, #32]
 80034c4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00f      	beq.n	80034f2 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80034d8:	4013      	ands	r3, r2
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	69d2      	ldr	r2, [r2, #28]
 80034de:	431a      	orrs	r2, r3
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	e017      	b.n	8003522 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <ETH_Prepare_Tx_Descriptors+0x498>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	431a      	orrs	r2, r3
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	431a      	orrs	r2, r3
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	3301      	adds	r3, #1
 8003526:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f af3a 	bne.w	80033be <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00f      	beq.n	8003570 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	e00e      	b.n	800357c <ETH_Prepare_Tx_Descriptors+0x4b4>
 800355e:	bf00      	nop
 8003560:	ffff8000 	.word	0xffff8000
 8003564:	ffffc000 	.word	0xffffc000
 8003568:	c000ffff 	.word	0xc000ffff
 800356c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800358c:	6979      	ldr	r1, [r7, #20]
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	3304      	adds	r3, #4
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800359e:	b672      	cpsid	i
}
 80035a0:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	4413      	add	r3, r2
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80035b0:	b662      	cpsie	i
}
 80035b2:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3734      	adds	r7, #52	; 0x34
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035d2:	4b89      	ldr	r3, [pc, #548]	; (80037f8 <HAL_GPIO_Init+0x234>)
 80035d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035d6:	e194      	b.n	8003902 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8186 	beq.w	80038fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d00b      	beq.n	8003610 <HAL_GPIO_Init+0x4c>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d007      	beq.n	8003610 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003604:	2b11      	cmp	r3, #17
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b12      	cmp	r3, #18
 800360e:	d130      	bne.n	8003672 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	2203      	movs	r2, #3
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003646:	2201      	movs	r2, #1
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 0201 	and.w	r2, r3, #1
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0xee>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b12      	cmp	r3, #18
 80036b0:	d123      	bne.n	80036fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3208      	adds	r2, #8
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2203      	movs	r2, #3
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0203 	and.w	r2, r3, #3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80e0 	beq.w	80038fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373c:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_GPIO_Init+0x238>)
 800373e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003742:	4a2e      	ldr	r2, [pc, #184]	; (80037fc <HAL_GPIO_Init+0x238>)
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_GPIO_Init+0x238>)
 800374e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800375a:	4a29      	ldr	r2, [pc, #164]	; (8003800 <HAL_GPIO_Init+0x23c>)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	3302      	adds	r3, #2
 8003762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a20      	ldr	r2, [pc, #128]	; (8003804 <HAL_GPIO_Init+0x240>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d052      	beq.n	800382c <HAL_GPIO_Init+0x268>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_GPIO_Init+0x244>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_GPIO_Init+0x22e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1e      	ldr	r2, [pc, #120]	; (800380c <HAL_GPIO_Init+0x248>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d02b      	beq.n	80037ee <HAL_GPIO_Init+0x22a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_GPIO_Init+0x24c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d025      	beq.n	80037ea <HAL_GPIO_Init+0x226>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_GPIO_Init+0x250>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01f      	beq.n	80037e6 <HAL_GPIO_Init+0x222>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_GPIO_Init+0x254>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d019      	beq.n	80037e2 <HAL_GPIO_Init+0x21e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1a      	ldr	r2, [pc, #104]	; (800381c <HAL_GPIO_Init+0x258>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_GPIO_Init+0x21a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_GPIO_Init+0x25c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00d      	beq.n	80037da <HAL_GPIO_Init+0x216>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_GPIO_Init+0x260>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <HAL_GPIO_Init+0x212>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a17      	ldr	r2, [pc, #92]	; (8003828 <HAL_GPIO_Init+0x264>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_GPIO_Init+0x20e>
 80037ce:	2309      	movs	r3, #9
 80037d0:	e02d      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037d2:	230a      	movs	r3, #10
 80037d4:	e02b      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037d6:	2308      	movs	r3, #8
 80037d8:	e029      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037da:	2307      	movs	r3, #7
 80037dc:	e027      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037de:	2306      	movs	r3, #6
 80037e0:	e025      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037e2:	2305      	movs	r3, #5
 80037e4:	e023      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037e6:	2304      	movs	r3, #4
 80037e8:	e021      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037ea:	2303      	movs	r3, #3
 80037ec:	e01f      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e01d      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e01b      	b.n	800382e <HAL_GPIO_Init+0x26a>
 80037f6:	bf00      	nop
 80037f8:	58000080 	.word	0x58000080
 80037fc:	58024400 	.word	0x58024400
 8003800:	58000400 	.word	0x58000400
 8003804:	58020000 	.word	0x58020000
 8003808:	58020400 	.word	0x58020400
 800380c:	58020800 	.word	0x58020800
 8003810:	58020c00 	.word	0x58020c00
 8003814:	58021000 	.word	0x58021000
 8003818:	58021400 	.word	0x58021400
 800381c:	58021800 	.word	0x58021800
 8003820:	58021c00 	.word	0x58021c00
 8003824:	58022000 	.word	0x58022000
 8003828:	58022400 	.word	0x58022400
 800382c:	2300      	movs	r3, #0
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	f002 0203 	and.w	r2, r2, #3
 8003834:	0092      	lsls	r2, r2, #2
 8003836:	4093      	lsls	r3, r2
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800383e:	4938      	ldr	r1, [pc, #224]	; (8003920 <HAL_GPIO_Init+0x35c>)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	089b      	lsrs	r3, r3, #2
 8003844:	3302      	adds	r3, #2
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80038c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	3301      	adds	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	f47f ae63 	bne.w	80035d8 <HAL_GPIO_Init+0x14>
  }
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	3724      	adds	r7, #36	; 0x24
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	58000400 	.word	0x58000400

08003924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
 8003930:	4613      	mov	r3, r2
 8003932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003934:	787b      	ldrb	r3, [r7, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003940:	e003      	b.n	800394a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	041a      	lsls	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	619a      	str	r2, [r3, #24]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003968:	887a      	ldrh	r2, [r7, #2]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4013      	ands	r3, r2
 800396e:	041a      	lsls	r2, r3, #16
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43d9      	mvns	r1, r3
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	400b      	ands	r3, r1
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	619a      	str	r2, [r3, #24]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d00a      	beq.n	80039b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d001      	beq.n	80039b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e01f      	b.n	80039f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e01d      	b.n	80039f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	490f      	ldr	r1, [pc, #60]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039c6:	f7fd fddf 	bl	8001588 <HAL_GetTick>
 80039ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039cc:	e009      	b.n	80039e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039ce:	f7fd fddb 	bl	8001588 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039dc:	d901      	bls.n	80039e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e007      	b.n	80039f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ee:	d1ee      	bne.n	80039ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	58024800 	.word	0x58024800

08003a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	; 0x30
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e3ff      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8087 	beq.w	8003b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a20:	4b99      	ldr	r3, [pc, #612]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a2a:	4b97      	ldr	r3, [pc, #604]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d007      	beq.n	8003a46 <HAL_RCC_OscConfig+0x46>
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	2b18      	cmp	r3, #24
 8003a3a:	d110      	bne.n	8003a5e <HAL_RCC_OscConfig+0x5e>
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d10b      	bne.n	8003a5e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a46:	4b90      	ldr	r3, [pc, #576]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d06c      	beq.n	8003b2c <HAL_RCC_OscConfig+0x12c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d168      	bne.n	8003b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e3d9      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x76>
 8003a68:	4b87      	ldr	r3, [pc, #540]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a86      	ldr	r2, [pc, #536]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	e02e      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x98>
 8003a7e:	4b82      	ldr	r3, [pc, #520]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a81      	ldr	r2, [pc, #516]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b7f      	ldr	r3, [pc, #508]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7e      	ldr	r2, [pc, #504]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e01d      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0xbc>
 8003aa2:	4b79      	ldr	r3, [pc, #484]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a78      	ldr	r2, [pc, #480]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a75      	ldr	r2, [pc, #468]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd4>
 8003abc:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a71      	ldr	r2, [pc, #452]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6e      	ldr	r2, [pc, #440]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd fd54 	bl	8001588 <HAL_GetTick>
 8003ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fd fd50 	bl	8001588 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e38d      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003af6:	4b64      	ldr	r3, [pc, #400]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xe4>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fd40 	bl	8001588 <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd fd3c 	bl	8001588 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e379      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b1e:	4b5a      	ldr	r3, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x10c>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80ae 	beq.w	8003c98 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3c:	4b52      	ldr	r3, [pc, #328]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b46:	4b50      	ldr	r3, [pc, #320]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_RCC_OscConfig+0x162>
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	2b18      	cmp	r3, #24
 8003b56:	d13a      	bne.n	8003bce <HAL_RCC_OscConfig+0x1ce>
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d135      	bne.n	8003bce <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b62:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x17a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e34b      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	f7fd fd11 	bl	80015a0 <HAL_GetREVID>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d817      	bhi.n	8003bb8 <HAL_RCC_OscConfig+0x1b8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d108      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x1a2>
 8003b90:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b98:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba0:	e07a      	b.n	8003c98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba2:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	031b      	lsls	r3, r3, #12
 8003bb0:	4935      	ldr	r1, [pc, #212]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb6:	e06f      	b.n	8003c98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	4930      	ldr	r1, [pc, #192]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bcc:	e064      	b.n	8003c98 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d045      	beq.n	8003c62 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0219 	bic.w	r2, r3, #25
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	4929      	ldr	r1, [pc, #164]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd fcce 	bl	8001588 <HAL_GetTick>
 8003bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf0:	f7fd fcca 	bl	8001588 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e307      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	f7fd fcc7 	bl	80015a0 <HAL_GetREVID>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d817      	bhi.n	8003c4c <HAL_RCC_OscConfig+0x24c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d108      	bne.n	8003c36 <HAL_RCC_OscConfig+0x236>
 8003c24:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c2c:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c32:	6053      	str	r3, [r2, #4]
 8003c34:	e030      	b.n	8003c98 <HAL_RCC_OscConfig+0x298>
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	031b      	lsls	r3, r3, #12
 8003c44:	4910      	ldr	r1, [pc, #64]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
 8003c4a:	e025      	b.n	8003c98 <HAL_RCC_OscConfig+0x298>
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	490b      	ldr	r1, [pc, #44]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
 8003c60:	e01a      	b.n	8003c98 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <HAL_RCC_OscConfig+0x288>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd fc8b 	bl	8001588 <HAL_GetTick>
 8003c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c74:	e00a      	b.n	8003c8c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fd fc87 	bl	8001588 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d903      	bls.n	8003c8c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e2c4      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
 8003c88:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c8c:	4ba4      	ldr	r3, [pc, #656]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ee      	bne.n	8003c76 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a9 	beq.w	8003df8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	4b9e      	ldr	r3, [pc, #632]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cb0:	4b9b      	ldr	r3, [pc, #620]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d007      	beq.n	8003ccc <HAL_RCC_OscConfig+0x2cc>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b18      	cmp	r3, #24
 8003cc0:	d13a      	bne.n	8003d38 <HAL_RCC_OscConfig+0x338>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d135      	bne.n	8003d38 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ccc:	4b94      	ldr	r3, [pc, #592]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x2e4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	2b80      	cmp	r3, #128	; 0x80
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e296      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ce4:	f7fd fc5c 	bl	80015a0 <HAL_GetREVID>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d817      	bhi.n	8003d22 <HAL_RCC_OscConfig+0x322>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d108      	bne.n	8003d0c <HAL_RCC_OscConfig+0x30c>
 8003cfa:	4b89      	ldr	r3, [pc, #548]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d02:	4a87      	ldr	r2, [pc, #540]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d0a:	e075      	b.n	8003df8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d0c:	4b84      	ldr	r3, [pc, #528]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	069b      	lsls	r3, r3, #26
 8003d1a:	4981      	ldr	r1, [pc, #516]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d20:	e06a      	b.n	8003df8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d22:	4b7f      	ldr	r3, [pc, #508]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	497b      	ldr	r1, [pc, #492]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d36:	e05f      	b.n	8003df8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d042      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d40:	4b77      	ldr	r3, [pc, #476]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a76      	ldr	r2, [pc, #472]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fc1c 	bl	8001588 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d54:	f7fd fc18 	bl	8001588 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e255      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d66:	4b6e      	ldr	r3, [pc, #440]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d72:	f7fd fc15 	bl	80015a0 <HAL_GetREVID>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d817      	bhi.n	8003db0 <HAL_RCC_OscConfig+0x3b0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d108      	bne.n	8003d9a <HAL_RCC_OscConfig+0x39a>
 8003d88:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d90:	4a63      	ldr	r2, [pc, #396]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d96:	6053      	str	r3, [r2, #4]
 8003d98:	e02e      	b.n	8003df8 <HAL_RCC_OscConfig+0x3f8>
 8003d9a:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	069b      	lsls	r3, r3, #26
 8003da8:	495d      	ldr	r1, [pc, #372]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
 8003dae:	e023      	b.n	8003df8 <HAL_RCC_OscConfig+0x3f8>
 8003db0:	4b5b      	ldr	r3, [pc, #364]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	4958      	ldr	r1, [pc, #352]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60cb      	str	r3, [r1, #12]
 8003dc4:	e018      	b.n	8003df8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003dc6:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a55      	ldr	r2, [pc, #340]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fbd9 	bl	8001588 <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003dda:	f7fd fbd5 	bl	8001588 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e212      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dec:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d036      	beq.n	8003e72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d019      	beq.n	8003e40 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0c:	4b44      	ldr	r3, [pc, #272]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e10:	4a43      	ldr	r2, [pc, #268]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fd fbb6 	bl	8001588 <HAL_GetTick>
 8003e1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e20:	f7fd fbb2 	bl	8001588 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1ef      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e32:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x420>
 8003e3e:	e018      	b.n	8003e72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e40:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	4a36      	ldr	r2, [pc, #216]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fb9c 	bl	8001588 <HAL_GetTick>
 8003e50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fd fb98 	bl	8001588 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1d5      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e66:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d036      	beq.n	8003eec <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d019      	beq.n	8003eba <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e86:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e92:	f7fd fb79 	bl	8001588 <HAL_GetTick>
 8003e96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e9a:	f7fd fb75 	bl	8001588 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1b2      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x49a>
 8003eb8:	e018      	b.n	8003eec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fb5f 	bl	8001588 <HAL_GetTick>
 8003eca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ece:	f7fd fb5b 	bl	8001588 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e198      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_RCC_OscConfig+0x520>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f0      	bne.n	8003ece <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8085 	beq.w	8004004 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_RCC_OscConfig+0x524>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_RCC_OscConfig+0x524>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f06:	f7fd fb3f 	bl	8001588 <HAL_GetTick>
 8003f0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f0c:	e00c      	b.n	8003f28 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fd fb3b 	bl	8001588 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d905      	bls.n	8003f28 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e178      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
 8003f20:	58024400 	.word	0x58024400
 8003f24:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f28:	4b96      	ldr	r3, [pc, #600]	; (8004184 <HAL_RCC_OscConfig+0x784>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ec      	beq.n	8003f0e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d106      	bne.n	8003f4a <HAL_RCC_OscConfig+0x54a>
 8003f3c:	4b92      	ldr	r3, [pc, #584]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a91      	ldr	r2, [pc, #580]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	e02d      	b.n	8003fa6 <HAL_RCC_OscConfig+0x5a6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x56c>
 8003f52:	4b8d      	ldr	r3, [pc, #564]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a8c      	ldr	r2, [pc, #560]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	4b8a      	ldr	r3, [pc, #552]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	4a89      	ldr	r2, [pc, #548]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6a:	e01c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x5a6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b05      	cmp	r3, #5
 8003f72:	d10c      	bne.n	8003f8e <HAL_RCC_OscConfig+0x58e>
 8003f74:	4b84      	ldr	r3, [pc, #528]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a83      	ldr	r2, [pc, #524]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f7a:	f043 0304 	orr.w	r3, r3, #4
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	4b81      	ldr	r3, [pc, #516]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a80      	ldr	r2, [pc, #512]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8c:	e00b      	b.n	8003fa6 <HAL_RCC_OscConfig+0x5a6>
 8003f8e:	4b7e      	ldr	r3, [pc, #504]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a7d      	ldr	r2, [pc, #500]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9a:	4b7b      	ldr	r3, [pc, #492]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a7a      	ldr	r2, [pc, #488]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003fa0:	f023 0304 	bic.w	r3, r3, #4
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d015      	beq.n	8003fda <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fd faeb 	bl	8001588 <HAL_GetTick>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fd fae7 	bl	8001588 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e122      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fcc:	4b6e      	ldr	r3, [pc, #440]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ee      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x5b6>
 8003fd8:	e014      	b.n	8004004 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7fd fad5 	bl	8001588 <HAL_GetTick>
 8003fde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fd fad1 	bl	8001588 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e10c      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ff8:	4b63      	ldr	r3, [pc, #396]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ee      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8101 	beq.w	8004210 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800400e:	4b5e      	ldr	r3, [pc, #376]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004016:	2b18      	cmp	r3, #24
 8004018:	f000 80bc 	beq.w	8004194 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b02      	cmp	r3, #2
 8004022:	f040 8095 	bne.w	8004150 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b58      	ldr	r3, [pc, #352]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a57      	ldr	r2, [pc, #348]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 800402c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fd faa9 	bl	8001588 <HAL_GetTick>
 8004036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403a:	f7fd faa5 	bl	8001588 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0e2      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800404c:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 800405a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCC_OscConfig+0x78c>)
 800405e:	4013      	ands	r3, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	430a      	orrs	r2, r1
 800406c:	4946      	ldr	r1, [pc, #280]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 800406e:	4313      	orrs	r3, r2
 8004070:	628b      	str	r3, [r1, #40]	; 0x28
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	3b01      	subs	r3, #1
 8004078:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	3b01      	subs	r3, #1
 8004082:	025b      	lsls	r3, r3, #9
 8004084:	b29b      	uxth	r3, r3
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	3b01      	subs	r3, #1
 800408e:	041b      	lsls	r3, r3, #16
 8004090:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	3b01      	subs	r3, #1
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040a2:	4939      	ldr	r1, [pc, #228]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80040a8:	4b37      	ldr	r3, [pc, #220]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4a36      	ldr	r2, [pc, #216]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040b4:	4b34      	ldr	r3, [pc, #208]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b8:	4b35      	ldr	r3, [pc, #212]	; (8004190 <HAL_RCC_OscConfig+0x790>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040c0:	00d2      	lsls	r2, r2, #3
 80040c2:	4931      	ldr	r1, [pc, #196]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040c8:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f023 020c 	bic.w	r2, r3, #12
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	492c      	ldr	r1, [pc, #176]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040da:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	f023 0202 	bic.w	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	4928      	ldr	r1, [pc, #160]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040ec:	4b26      	ldr	r3, [pc, #152]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	4a25      	ldr	r2, [pc, #148]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f8:	4b23      	ldr	r3, [pc, #140]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4a22      	ldr	r2, [pc, #136]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004104:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 800410a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fd fa2e 	bl	8001588 <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004130:	f7fd fa2a 	bl	8001588 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e067      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x730>
 800414e:	e05f      	b.n	8004210 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fd fa14 	bl	8001588 <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004164:	f7fd fa10 	bl	8001588 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e04d      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004176:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_RCC_OscConfig+0x788>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x764>
 8004182:	e045      	b.n	8004210 <HAL_RCC_OscConfig+0x810>
 8004184:	58024800 	.word	0x58024800
 8004188:	58024400 	.word	0x58024400
 800418c:	fffffc0c 	.word	0xfffffc0c
 8004190:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004194:	4b21      	ldr	r3, [pc, #132]	; (800421c <HAL_RCC_OscConfig+0x81c>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_OscConfig+0x81c>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d031      	beq.n	800420c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0203 	and.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d12a      	bne.n	800420c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d122      	bne.n	800420c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d11a      	bne.n	800420c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	0a5b      	lsrs	r3, r3, #9
 80041da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d111      	bne.n	800420c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d108      	bne.n	800420c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	0e1b      	lsrs	r3, r3, #24
 80041fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3730      	adds	r7, #48	; 0x30
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	58024400 	.word	0x58024400

08004220 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e19c      	b.n	800456e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b8a      	ldr	r3, [pc, #552]	; (8004460 <HAL_RCC_ClockConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d910      	bls.n	8004264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b87      	ldr	r3, [pc, #540]	; (8004460 <HAL_RCC_ClockConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 020f 	bic.w	r2, r3, #15
 800424a:	4985      	ldr	r1, [pc, #532]	; (8004460 <HAL_RCC_ClockConfig+0x240>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b83      	ldr	r3, [pc, #524]	; (8004460 <HAL_RCC_ClockConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e184      	b.n	800456e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	4b7b      	ldr	r3, [pc, #492]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800427c:	429a      	cmp	r2, r3
 800427e:	d908      	bls.n	8004292 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004280:	4b78      	ldr	r3, [pc, #480]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	4975      	ldr	r1, [pc, #468]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 800428e:	4313      	orrs	r3, r2
 8004290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d010      	beq.n	80042c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	4b70      	ldr	r3, [pc, #448]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d908      	bls.n	80042c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ae:	4b6d      	ldr	r3, [pc, #436]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	496a      	ldr	r1, [pc, #424]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	4b64      	ldr	r3, [pc, #400]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042d8:	429a      	cmp	r2, r3
 80042da:	d908      	bls.n	80042ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042dc:	4b61      	ldr	r3, [pc, #388]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	495e      	ldr	r1, [pc, #376]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d010      	beq.n	800431c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	4b59      	ldr	r3, [pc, #356]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004306:	429a      	cmp	r2, r3
 8004308:	d908      	bls.n	800431c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800430a:	4b56      	ldr	r3, [pc, #344]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	4953      	ldr	r1, [pc, #332]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004318:	4313      	orrs	r3, r2
 800431a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	4b4d      	ldr	r3, [pc, #308]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	429a      	cmp	r2, r3
 8004336:	d908      	bls.n	800434a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f023 020f 	bic.w	r2, r3, #15
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4947      	ldr	r1, [pc, #284]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004346:	4313      	orrs	r3, r2
 8004348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d055      	beq.n	8004402 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004356:	4b43      	ldr	r3, [pc, #268]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4940      	ldr	r1, [pc, #256]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004364:	4313      	orrs	r3, r2
 8004366:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d107      	bne.n	8004380 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004370:	4b3c      	ldr	r3, [pc, #240]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d121      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0f6      	b.n	800456e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d107      	bne.n	8004398 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d115      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0ea      	b.n	800456e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043a0:	4b30      	ldr	r3, [pc, #192]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0de      	b.n	800456e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b0:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0d6      	b.n	800456e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043c0:	4b28      	ldr	r3, [pc, #160]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f023 0207 	bic.w	r2, r3, #7
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4925      	ldr	r1, [pc, #148]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fd f8d9 	bl	8001588 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043da:	f7fd f8d5 	bl	8001588 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0be      	b.n	800456e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f0:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	429a      	cmp	r2, r3
 8004400:	d1eb      	bne.n	80043da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	429a      	cmp	r2, r3
 800441c:	d208      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f023 020f 	bic.w	r2, r3, #15
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	490e      	ldr	r1, [pc, #56]	; (8004464 <HAL_RCC_ClockConfig+0x244>)
 800442c:	4313      	orrs	r3, r2
 800442e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_ClockConfig+0x240>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d214      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_ClockConfig+0x240>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 020f 	bic.w	r2, r3, #15
 8004446:	4906      	ldr	r1, [pc, #24]	; (8004460 <HAL_RCC_ClockConfig+0x240>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <HAL_RCC_ClockConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e086      	b.n	800456e <HAL_RCC_ClockConfig+0x34e>
 8004460:	52002000 	.word	0x52002000
 8004464:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004480:	429a      	cmp	r2, r3
 8004482:	d208      	bcs.n	8004496 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004484:	4b3c      	ldr	r3, [pc, #240]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	4939      	ldr	r1, [pc, #228]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 8004492:	4313      	orrs	r3, r2
 8004494:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	4b34      	ldr	r3, [pc, #208]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d208      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044b2:	4b31      	ldr	r3, [pc, #196]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	492e      	ldr	r1, [pc, #184]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d010      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	4b28      	ldr	r3, [pc, #160]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044dc:	429a      	cmp	r2, r3
 80044de:	d208      	bcs.n	80044f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	4922      	ldr	r1, [pc, #136]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800450a:	429a      	cmp	r2, r3
 800450c:	d208      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800450e:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4917      	ldr	r1, [pc, #92]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 800451c:	4313      	orrs	r3, r2
 800451e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004520:	f000 f834 	bl	800458c <HAL_RCC_GetSysClockFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	4912      	ldr	r1, [pc, #72]	; (800457c <HAL_RCC_ClockConfig+0x35c>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
 800453c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_RCC_ClockConfig+0x358>)
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	4a0d      	ldr	r2, [pc, #52]	; (800457c <HAL_RCC_ClockConfig+0x35c>)
 8004548:	5cd3      	ldrb	r3, [r2, r3]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <HAL_RCC_ClockConfig+0x360>)
 8004556:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004558:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <HAL_RCC_ClockConfig+0x364>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_RCC_ClockConfig+0x368>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fc fc3c 	bl	8000de0 <HAL_InitTick>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
 800457c:	08016d78 	.word	0x08016d78
 8004580:	24000004 	.word	0x24000004
 8004584:	24000000 	.word	0x24000000
 8004588:	24000008 	.word	0x24000008

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004592:	4bb3      	ldr	r3, [pc, #716]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800459a:	2b18      	cmp	r3, #24
 800459c:	f200 8155 	bhi.w	800484a <HAL_RCC_GetSysClockFreq+0x2be>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	0800460d 	.word	0x0800460d
 80045ac:	0800484b 	.word	0x0800484b
 80045b0:	0800484b 	.word	0x0800484b
 80045b4:	0800484b 	.word	0x0800484b
 80045b8:	0800484b 	.word	0x0800484b
 80045bc:	0800484b 	.word	0x0800484b
 80045c0:	0800484b 	.word	0x0800484b
 80045c4:	0800484b 	.word	0x0800484b
 80045c8:	08004633 	.word	0x08004633
 80045cc:	0800484b 	.word	0x0800484b
 80045d0:	0800484b 	.word	0x0800484b
 80045d4:	0800484b 	.word	0x0800484b
 80045d8:	0800484b 	.word	0x0800484b
 80045dc:	0800484b 	.word	0x0800484b
 80045e0:	0800484b 	.word	0x0800484b
 80045e4:	0800484b 	.word	0x0800484b
 80045e8:	08004639 	.word	0x08004639
 80045ec:	0800484b 	.word	0x0800484b
 80045f0:	0800484b 	.word	0x0800484b
 80045f4:	0800484b 	.word	0x0800484b
 80045f8:	0800484b 	.word	0x0800484b
 80045fc:	0800484b 	.word	0x0800484b
 8004600:	0800484b 	.word	0x0800484b
 8004604:	0800484b 	.word	0x0800484b
 8004608:	0800463f 	.word	0x0800463f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800460c:	4b94      	ldr	r3, [pc, #592]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004618:	4b91      	ldr	r3, [pc, #580]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	4a90      	ldr	r2, [pc, #576]	; (8004864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
 8004628:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800462a:	e111      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800462c:	4b8d      	ldr	r3, [pc, #564]	; (8004864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800462e:	61bb      	str	r3, [r7, #24]
    break;
 8004630:	e10e      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004632:	4b8d      	ldr	r3, [pc, #564]	; (8004868 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004634:	61bb      	str	r3, [r7, #24]
    break;
 8004636:	e10b      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004638:	4b8c      	ldr	r3, [pc, #560]	; (800486c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800463a:	61bb      	str	r3, [r7, #24]
    break;
 800463c:	e108      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800463e:	4b88      	ldr	r3, [pc, #544]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004648:	4b85      	ldr	r3, [pc, #532]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004652:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004654:	4b82      	ldr	r3, [pc, #520]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800465e:	4b80      	ldr	r3, [pc, #512]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	08db      	lsrs	r3, r3, #3
 8004664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80e1 	beq.w	8004844 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b02      	cmp	r3, #2
 8004686:	f000 8083 	beq.w	8004790 <HAL_RCC_GetSysClockFreq+0x204>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b02      	cmp	r3, #2
 800468e:	f200 80a1 	bhi.w	80047d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d056      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x1c0>
 800469e:	e099      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a0:	4b6f      	ldr	r3, [pc, #444]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02d      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046ac:	4b6c      	ldr	r3, [pc, #432]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	08db      	lsrs	r3, r3, #3
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	4a6b      	ldr	r2, [pc, #428]	; (8004864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
 80046bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b62      	ldr	r3, [pc, #392]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004706:	e087      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004874 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b51      	ldr	r3, [pc, #324]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a02 	vldr	s12, [r7, #8]
 800472e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004870 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800474a:	e065      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004878 <HAL_RCC_GetSysClockFreq+0x2ec>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b40      	ldr	r3, [pc, #256]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004772:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004870 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478e:	e043      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800487c <HAL_RCC_GetSysClockFreq+0x2f0>
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b2f      	ldr	r3, [pc, #188]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d2:	e021      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004878 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004816:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	0a5b      	lsrs	r3, r3, #9
 800481e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004822:	3301      	adds	r3, #1
 8004824:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004830:	edd7 6a07 	vldr	s13, [r7, #28]
 8004834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483c:	ee17 3a90 	vmov	r3, s15
 8004840:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004842:	e005      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	61bb      	str	r3, [r7, #24]
    break;
 8004848:	e002      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800484a:	4b07      	ldr	r3, [pc, #28]	; (8004868 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800484c:	61bb      	str	r3, [r7, #24]
    break;
 800484e:	bf00      	nop
  }

  return sysclockfreq;
 8004850:	69bb      	ldr	r3, [r7, #24]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	; 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	58024400 	.word	0x58024400
 8004864:	03d09000 	.word	0x03d09000
 8004868:	003d0900 	.word	0x003d0900
 800486c:	017d7840 	.word	0x017d7840
 8004870:	46000000 	.word	0x46000000
 8004874:	4c742400 	.word	0x4c742400
 8004878:	4a742400 	.word	0x4a742400
 800487c:	4bbebc20 	.word	0x4bbebc20

08004880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004886:	f7ff fe81 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800488a:	4602      	mov	r2, r0
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	490f      	ldr	r1, [pc, #60]	; (80048d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004898:	5ccb      	ldrb	r3, [r1, r3]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a07      	ldr	r2, [pc, #28]	; (80048d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80048bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048be:	4a07      	ldr	r2, [pc, #28]	; (80048dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	58024400 	.word	0x58024400
 80048d4:	08016d78 	.word	0x08016d78
 80048d8:	24000004 	.word	0x24000004
 80048dc:	24000000 	.word	0x24000000

080048e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80048e4:	f7ff ffcc 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4904      	ldr	r1, [pc, #16]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	58024400 	.word	0x58024400
 8004908:	08016d78 	.word	0x08016d78

0800490c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	223f      	movs	r2, #63	; 0x3f
 800491a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_RCC_GetClockConfig+0x7c>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0207 	and.w	r2, r3, #7
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004928:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_RCC_GetClockConfig+0x7c>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004934:	4b14      	ldr	r3, [pc, #80]	; (8004988 <HAL_RCC_GetClockConfig+0x7c>)
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_RCC_GetClockConfig+0x7c>)
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <HAL_RCC_GetClockConfig+0x7c>)
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_GetClockConfig+0x7c>)
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_RCC_GetClockConfig+0x7c>)
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCC_GetClockConfig+0x80>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 020f 	and.w	r2, r3, #15
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	601a      	str	r2, [r3, #0]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	58024400 	.word	0x58024400
 800498c:	52002000 	.word	0x52002000

08004990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e049      	b.n	8004a36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f841 	bl	8004a3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 f9f8 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d001      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e04f      	b.n	8004b0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01d      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d018      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d115      	bne.n	8004af6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d015      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d011      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	e008      	b.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e000      	b.n	8004b0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40010400 	.word	0x40010400
 8004b2c:	40001800 	.word	0x40001800
 8004b30:	00010007 	.word	0x00010007

08004b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0202 	mvn.w	r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f905 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8f7 	bl	8004d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f908 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0204 	mvn.w	r2, #4
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f8db 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8cd 	bl	8004d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8de 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0208 	mvn.w	r2, #8
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8b1 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8a3 	bl	8004d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f8b4 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0210 	mvn.w	r2, #16
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f887 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f879 	bl	8004d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f88a 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fb ff8c 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f914 	bl	8004f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d10e      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d107      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f907 	bl	8004f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d10e      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d107      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f838 	bl	8004dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d10e      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f06f 0220 	mvn.w	r2, #32
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f8c7 	bl	8004ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3d      	ldr	r2, [pc, #244]	; (8004edc <TIM_Base_SetConfig+0x118>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3c      	ldr	r2, [pc, #240]	; (8004ee0 <TIM_Base_SetConfig+0x11c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3b      	ldr	r2, [pc, #236]	; (8004ee4 <TIM_Base_SetConfig+0x120>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <TIM_Base_SetConfig+0x118>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <TIM_Base_SetConfig+0x11c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <TIM_Base_SetConfig+0x120>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a28      	ldr	r2, [pc, #160]	; (8004eec <TIM_Base_SetConfig+0x128>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a27      	ldr	r2, [pc, #156]	; (8004ef0 <TIM_Base_SetConfig+0x12c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <TIM_Base_SetConfig+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a11      	ldr	r2, [pc, #68]	; (8004eec <TIM_Base_SetConfig+0x128>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a10      	ldr	r2, [pc, #64]	; (8004ef0 <TIM_Base_SetConfig+0x12c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <TIM_Base_SetConfig+0x130>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d103      	bne.n	8004ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	615a      	str	r2, [r3, #20]
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <_nxe_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (dhcp_ptr == NX_NULL))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <_nxe_dhcp_create+0x22>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <_nxe_dhcp_create+0x3c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d102      	bne.n	8004f56 <_nxe_dhcp_create+0x22>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <_nxe_dhcp_create+0x26>
    {
    
        return(NX_PTR_ERROR);
 8004f56:	2307      	movs	r3, #7
 8004f58:	e006      	b.n	8004f68 <_nxe_dhcp_create+0x34>
    }

    /* Call actual DHCP create service.  */
    status =  _nx_dhcp_create(dhcp_ptr, ip_ptr, name_ptr);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f808 	bl	8004f74 <_nx_dhcp_create>
 8004f64:	6178      	str	r0, [r7, #20]

    /* Return status.  */
    return(status);
 8004f66:	697b      	ldr	r3, [r7, #20]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	49502020 	.word	0x49502020

08004f74 <_nx_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08e      	sub	sp, #56	; 0x38
 8004f78:	af08      	add	r7, sp, #32
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
            return (NX_DHCP_INVALID_NAME);
    }
#endif /* NX_DHCP_CLIENT_ENABLE_HOST_NAME_CHECK  */

    /* Initialize the DHCP control block to zero.  */
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 8004f80:	f641 7248 	movw	r2, #8008	; 0x1f48
 8004f84:	2100      	movs	r1, #0
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f010 fbb2 	bl	80156f0 <memset>
    
    /* Save the IP pointer.  */
    dhcp_ptr -> nx_dhcp_ip_ptr =  ip_ptr;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	609a      	str	r2, [r3, #8]

    /* Save the DHCP name.  */
    dhcp_ptr -> nx_dhcp_name =  name_ptr;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	605a      	str	r2, [r3, #4]
        /* Invalid payload, return error status.  */
        return(NX_DHCP_INVALID_PAYLOAD);
    }

    /* Create the pool and check the status */
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f103 000c 	add.w	r0, r3, #12
                                    dhcp_ptr -> nx_dhcp_pool_area, NX_DHCP_PACKET_POOL_SIZE);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3348      	adds	r3, #72	; 0x48
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8004fa2:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 8004fa6:	9200      	str	r2, [sp, #0]
 8004fa8:	f44f 7214 	mov.w	r2, #592	; 0x250
 8004fac:	497e      	ldr	r1, [pc, #504]	; (80051a8 <_nx_dhcp_create+0x234>)
 8004fae:	f006 fe47 	bl	800bc40 <_nx_packet_pool_create>
 8004fb2:	6178      	str	r0, [r7, #20]

    /* Determine if it was successful.  */
    if (status != NX_SUCCESS)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <_nx_dhcp_create+0x4a>
    {

        /* No, return error status.  */
        return(status);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	e0f0      	b.n	80051a0 <_nx_dhcp_create+0x22c>
    }

    /* Set an internal packet pool pointer to the newly created packet pool. */
    dhcp_ptr -> nx_dhcp_packet_pool_ptr = &dhcp_ptr -> nx_dhcp_pool;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f103 020c 	add.w	r2, r3, #12
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8c3 2bd8 	str.w	r2, [r3, #3032]	; 0xbd8
#endif /* NX_DHCP_CLIENT_SEND_MAX_DHCP_MESSAGE_OPTION  */

#endif /* NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL  */

    /* Create the Socket and check the status */
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f603 31dc 	addw	r1, r3, #3036	; 0xbdc
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4a71      	ldr	r2, [pc, #452]	; (80051a8 <_nx_dhcp_create+0x234>)
 8004fe2:	68b8      	ldr	r0, [r7, #8]
 8004fe4:	f00b f800 	bl	800ffe8 <_nx_udp_socket_create>
 8004fe8:	6178      	str	r0, [r7, #20]
                                  NX_DHCP_TYPE_OF_SERVICE, NX_DHCP_FRAGMENT_OPTION, NX_DHCP_TIME_TO_LIVE, NX_DHCP_QUEUE_DEPTH);

    /* Was the socket creation successful?  */
    if (status != NX_SUCCESS)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <_nx_dhcp_create+0x8c>
    {

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f006 fef2 	bl	800bde0 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	e0cf      	b.n	80051a0 <_nx_dhcp_create+0x22c>
    }


    /* Set the UDP socket receive callback function.  */
    status = nx_udp_socket_receive_notify(&(dhcp_ptr -> nx_dhcp_socket), _nx_dhcp_udp_receive_notify);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005006:	4969      	ldr	r1, [pc, #420]	; (80051ac <_nx_dhcp_create+0x238>)
 8005008:	4618      	mov	r0, r3
 800500a:	f00b fa4b 	bl	80104a4 <_nx_udp_socket_receive_notify>
 800500e:	6178      	str	r0, [r7, #20]

    /* Check status.  */
    if (status != NX_SUCCESS) 
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <_nx_dhcp_create+0xba>
    {


#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 800501c:	4618      	mov	r0, r3
 800501e:	f006 fedf 	bl	800bde0 <_nx_packet_pool_delete>
#endif

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005028:	4618      	mov	r0, r3
 800502a:	f00b f86d 	bl	8010108 <_nx_udp_socket_delete>
    }

    /* Create the ThreadX activity timeout timer.  This will be used to periodically check to see if
       a client connection has gone silent and needs to be terminated.  */
    status =  tx_timer_create(&(dhcp_ptr -> nx_dhcp_timer), "DHCP Client Timer", _nx_dhcp_timeout_entry,
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f641 505c 	movw	r0, #7516	; 0x1d5c
 8005034:	4418      	add	r0, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	222c      	movs	r2, #44	; 0x2c
 800503a:	9203      	str	r2, [sp, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	9202      	str	r2, [sp, #8]
 8005040:	2264      	movs	r2, #100	; 0x64
 8005042:	9201      	str	r2, [sp, #4]
 8005044:	2264      	movs	r2, #100	; 0x64
 8005046:	9200      	str	r2, [sp, #0]
 8005048:	4a59      	ldr	r2, [pc, #356]	; (80051b0 <_nx_dhcp_create+0x23c>)
 800504a:	495a      	ldr	r1, [pc, #360]	; (80051b4 <_nx_dhcp_create+0x240>)
 800504c:	f010 f810 	bl	8015070 <_txe_timer_create>
 8005050:	6178      	str	r0, [r7, #20]
                              (NX_DHCP_TIME_INTERVAL), TX_NO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_timer), dhcp_ptr)

    /* Determine if the semaphore creation was successful.  */
    if (status != NX_SUCCESS)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00d      	beq.n	8005074 <_nx_dhcp_create+0x100>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800505e:	4618      	mov	r0, r3
 8005060:	f00b f852 	bl	8010108 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 800506a:	4618      	mov	r0, r3
 800506c:	f006 feb8 	bl	800bde0 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	e095      	b.n	80051a0 <_nx_dhcp_create+0x22c>
    }

    /* Create the DHCP mutex.  */
    status =  tx_mutex_create(&(dhcp_ptr -> nx_dhcp_mutex), "NetX DHCP Client", TX_NO_INHERIT);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f641 5004 	movw	r0, #7428	; 0x1d04
 800507a:	4418      	add	r0, r3
 800507c:	2334      	movs	r3, #52	; 0x34
 800507e:	2200      	movs	r2, #0
 8005080:	4949      	ldr	r1, [pc, #292]	; (80051a8 <_nx_dhcp_create+0x234>)
 8005082:	f00f fc19 	bl	80148b8 <_txe_mutex_create>
 8005086:	6178      	str	r0, [r7, #20]

    /* Determine if the semaphore creation was successful.  */
    if (status != NX_SUCCESS)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <_nx_dhcp_create+0x144>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005094:	4618      	mov	r0, r3
 8005096:	f00b f837 	bl	8010108 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80050a0:	4618      	mov	r0, r3
 80050a2:	f006 fe9d 	bl	800bde0 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80050ac:	4413      	add	r3, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f010 f88a 	bl	80151c8 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	e073      	b.n	80051a0 <_nx_dhcp_create+0x22c>
    }

    /* Create the DHCP processing thread.  */
    status =  tx_thread_create(&(dhcp_ptr -> nx_dhcp_thread), "NetX DHCP Client", _nx_dhcp_thread_entry, (ULONG)(ALIGN_TYPE)dhcp_ptr,
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f603 4054 	addw	r0, r3, #3156	; 0xc54
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f603 5304 	addw	r3, r3, #3332	; 0xd04
 80050c6:	21b0      	movs	r1, #176	; 0xb0
 80050c8:	9106      	str	r1, [sp, #24]
 80050ca:	2100      	movs	r1, #0
 80050cc:	9105      	str	r1, [sp, #20]
 80050ce:	2101      	movs	r1, #1
 80050d0:	9104      	str	r1, [sp, #16]
 80050d2:	2103      	movs	r1, #3
 80050d4:	9103      	str	r1, [sp, #12]
 80050d6:	2103      	movs	r1, #3
 80050d8:	9102      	str	r1, [sp, #8]
 80050da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050de:	9101      	str	r1, [sp, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	4613      	mov	r3, r2
 80050e4:	4a34      	ldr	r2, [pc, #208]	; (80051b8 <_nx_dhcp_create+0x244>)
 80050e6:	4930      	ldr	r1, [pc, #192]	; (80051a8 <_nx_dhcp_create+0x234>)
 80050e8:	f00f fe4c 	bl	8014d84 <_txe_thread_create>
 80050ec:	6178      	str	r0, [r7, #20]
                                NX_DHCP_THREAD_PRIORITY, NX_DHCP_THREAD_PRIORITY, 1, TX_DONT_START);

    NX_THREAD_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_thread), dhcp_ptr)

    /* Determine if the thread creation was successful.  */
    if (status != NX_SUCCESS)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <_nx_dhcp_create+0x1b8>
    {

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	f641 5304 	movw	r3, #7428	; 0x1d04
 80050fa:	4413      	add	r3, r2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f00f fc79 	bl	80149f4 <_txe_mutex_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005108:	4618      	mov	r0, r3
 800510a:	f00a fffd 	bl	8010108 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8005114:	4618      	mov	r0, r3
 8005116:	f006 fe63 	bl	800bde0 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005120:	4413      	add	r3, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f010 f850 	bl	80151c8 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	e039      	b.n	80051a0 <_nx_dhcp_create+0x22c>
    }

    /* Create a DHCP event flag group. .  */
    status = tx_event_flags_create(&(dhcp_ptr -> nx_dhcp_events), (CHAR *)"DHCP Client Events");
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	f641 5338 	movw	r3, #7480	; 0x1d38
 8005132:	4413      	add	r3, r2
 8005134:	2224      	movs	r2, #36	; 0x24
 8005136:	4921      	ldr	r1, [pc, #132]	; (80051bc <_nx_dhcp_create+0x248>)
 8005138:	4618      	mov	r0, r3
 800513a:	f00f faa7 	bl	801468c <_txe_event_flags_create>
 800513e:	6178      	str	r0, [r7, #20]

    /* Check for error. */
    if (status != TX_SUCCESS)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d021      	beq.n	800518a <_nx_dhcp_create+0x216>
    {

        /* Delete the thread.  */
        tx_thread_delete(&(dhcp_ptr -> nx_dhcp_thread));
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 800514c:	4618      	mov	r0, r3
 800514e:	f00f ff0b 	bl	8014f68 <_txe_thread_delete>

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005158:	4413      	add	r3, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f00f fc4a 	bl	80149f4 <_txe_mutex_delete>

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005166:	4413      	add	r3, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f010 f82d 	bl	80151c8 <_txe_timer_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005174:	4618      	mov	r0, r3
 8005176:	f00a ffc7 	bl	8010108 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8005180:	4618      	mov	r0, r3
 8005182:	f006 fe2d 	bl	800bde0 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	e00a      	b.n	80051a0 <_nx_dhcp_create+0x22c>
    }

    /* Update the dhcp structure ID.  */
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <_nx_dhcp_create+0x24c>)
 800518e:	601a      	str	r2, [r3, #0]

    /* Save the DHCP instance.  */
    _nx_dhcp_created_ptr = dhcp_ptr;
 8005190:	4a0c      	ldr	r2, [pc, #48]	; (80051c4 <_nx_dhcp_create+0x250>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6013      	str	r3, [r2, #0]

    /* Default enable DHCP on the primary interface (0).  */
    _nx_dhcp_interface_enable(dhcp_ptr, 0);
 8005196:	2100      	movs	r1, #0
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fa08 	bl	80055ae <_nx_dhcp_interface_enable>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	08016afc 	.word	0x08016afc
 80051ac:	080056ed 	.word	0x080056ed
 80051b0:	08005715 	.word	0x08005715
 80051b4:	08016b10 	.word	0x08016b10
 80051b8:	0800573b 	.word	0x0800573b
 80051bc:	08016b24 	.word	0x08016b24
 80051c0:	44484350 	.word	0x44484350
 80051c4:	240020c4 	.word	0x240020c4

080051c8 <_nx_dhcp_interface_reinitialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_dhcp_interface_reinitialize(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]

UINT                      status;
ULONG                     ip_address;
ULONG                     network_mask;
ULONG                     gateway_address;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]

  
    /* Obtain DHCP Client protection mutex. */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	f641 5304 	movw	r3, #7428	; 0x1d04
 80051dc:	4413      	add	r3, r2
 80051de:	f04f 31ff 	mov.w	r1, #4294967295
 80051e2:	4618      	mov	r0, r3
 80051e4:	f00f fc44 	bl	8014a70 <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 80051e8:	f107 030c 	add.w	r3, r7, #12
 80051ec:	461a      	mov	r2, r3
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 fe70 	bl	8006ed6 <_nx_dhcp_interface_record_find>
 80051f6:	61f8      	str	r0, [r7, #28]

    /* Check status.  */
    if (status)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <_nx_dhcp_interface_reinitialize+0x48>
    {

        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005204:	4413      	add	r3, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f00f fc8c 	bl	8014b24 <_txe_mutex_put>
        return(status);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	e063      	b.n	80052d8 <_nx_dhcp_interface_reinitialize+0x110>
    }

    /* Check if have IP address.  */
    if (interface_record -> nx_dhcp_ip_address)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d018      	beq.n	800524a <_nx_dhcp_interface_reinitialize+0x82>
    {

        /* Get the IP address.  */
        status = nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, &ip_address, &network_mask);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6898      	ldr	r0, [r3, #8]
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	f107 0218 	add.w	r2, r7, #24
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	f004 fff5 	bl	800a214 <_nx_ip_interface_address_get>
 800522a:	61f8      	str	r0, [r7, #28]

        /* Check if the IP address is set by DHCP.  */
        if ((status == NX_SUCCESS) && (ip_address == interface_record -> nx_dhcp_ip_address))
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <_nx_dhcp_interface_reinitialize+0x82>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	429a      	cmp	r2, r3
 800523a:	d106      	bne.n	800524a <_nx_dhcp_interface_reinitialize+0x82>
        {

            /* Clear the IP address.  */
            nx_ip_interface_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, 0, 0);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6898      	ldr	r0, [r3, #8]
 8005240:	2300      	movs	r3, #0
 8005242:	2200      	movs	r2, #0
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	f005 f825 	bl	800a294 <_nx_ip_interface_address_set>
        }
    }

    /* Check if have gateway address.  */
    if (interface_record -> nx_dhcp_gateway_address)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d015      	beq.n	800527e <_nx_dhcp_interface_reinitialize+0xb6>
    {

        /* Get the gateway address.  */
        status = nx_ip_gateway_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, &gateway_address);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f107 0210 	add.w	r2, r7, #16
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f004 fe64 	bl	8009f2a <_nx_ip_gateway_address_get>
 8005262:	61f8      	str	r0, [r7, #28]

        /* Check status.  */
        if ((status == NX_SUCCESS) && (gateway_address == interface_record -> nx_dhcp_gateway_address))
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <_nx_dhcp_interface_reinitialize+0xb6>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	d104      	bne.n	800527e <_nx_dhcp_interface_reinitialize+0xb6>
        {

            /* Clear the Gateway/Router IP address.  */
            nx_ip_gateway_address_clear(dhcp_ptr -> nx_dhcp_ip_ptr);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4618      	mov	r0, r3
 800527a:	f004 fe2b 	bl	8009ed4 <_nx_ip_gateway_address_clear>
        }
    }

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS; 
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	615a      	str	r2, [r3, #20]

    /* Clear these DHCP Client network values too.*/
    interface_record -> nx_dhcp_gateway_address = NX_BOOTP_NO_ADDRESS; 
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]
    interface_record -> nx_dhcp_network_mask = NX_BOOTP_NO_ADDRESS;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	619a      	str	r2, [r3, #24]

    /* Clear the flag to skip the discovery step. The host application must
       call the nx_dhcp_request_ip_address to reset the flag and the requested IP address. */
    interface_record -> nx_dhcp_skip_discovery = NX_FALSE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	645a      	str	r2, [r3, #68]	; 0x44
                                                             
    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset the seconds field for starting the DHCP request process. */
    interface_record -> nx_dhcp_seconds = 0;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]

    /* Reset the timeout and retransmission interval.  */
    interface_record -> nx_dhcp_timeout = 0;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DHCP state to the initial state.  */
    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_NOT_STARTED;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	705a      	strb	r2, [r3, #1]

    /* Release the mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	f641 5304 	movw	r3, #7428	; 0x1d04
 80052ce:	4413      	add	r3, r2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f00f fc27 	bl	8014b24 <_txe_mutex_put>
    return NX_SUCCESS;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <_nxe_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_start(NX_DHCP *dhcp_ptr)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for invalid input pointer.  */
    if ((dhcp_ptr == NX_NULL) || (dhcp_ptr -> nx_dhcp_id != NX_DHCP_ID))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <_nxe_dhcp_start+0x18>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a11      	ldr	r2, [pc, #68]	; (8005338 <_nxe_dhcp_start+0x58>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d001      	beq.n	80052fc <_nxe_dhcp_start+0x1c>
        return(NX_PTR_ERROR);
 80052f8:	2307      	movs	r3, #7
 80052fa:	e018      	b.n	800532e <_nxe_dhcp_start+0x4e>
#elif defined(__GNUC__) /* GCC and ARM Compiler 6 */

__attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
{
unsigned int  ipsr_value;
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80052fc:	f3ef 8305 	mrs	r3, IPSR
 8005300:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8005302:	68ba      	ldr	r2, [r7, #8]
    
    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <_nxe_dhcp_start+0x5c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4313      	orrs	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d108      	bne.n	8005320 <_nxe_dhcp_start+0x40>
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <_nxe_dhcp_start+0x60>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <_nxe_dhcp_start+0x40>
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <_nxe_dhcp_start+0x60>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <_nxe_dhcp_start+0x64>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d101      	bne.n	8005324 <_nxe_dhcp_start+0x44>
 8005320:	2311      	movs	r3, #17
 8005322:	e004      	b.n	800532e <_nxe_dhcp_start+0x4e>

    /* Call actual DHCP start service.  */
    status =  _nx_dhcp_start(dhcp_ptr);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f80f 	bl	8005348 <_nx_dhcp_start>
 800532a:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 800532c:	68fb      	ldr	r3, [r7, #12]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	44484350 	.word	0x44484350
 800533c:	2400008c 	.word	0x2400008c
 8005340:	240023d0 	.word	0x240023d0
 8005344:	24002470 	.word	0x24002470

08005348 <_nx_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_start(NX_DHCP *dhcp_ptr)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]

UINT    status;
UINT    interfaces_started = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
UINT    i;


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	f641 5304 	movw	r3, #7428	; 0x1d04
 800535a:	4413      	add	r3, r2
 800535c:	f04f 31ff 	mov.w	r1, #4294967295
 8005360:	4618      	mov	r0, r3
 8005362:	f00f fb85 	bl	8014a70 <_txe_mutex_get>

    /* Check all interfaces to find out which need to start the DHCP protocol.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e028      	b.n	80053be <_nx_dhcp_start+0x76>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	441a      	add	r2, r3
 800537a:	f641 5388 	movw	r3, #7560	; 0x1d88
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d118      	bne.n	80053b8 <_nx_dhcp_start+0x70>
        {

            /* Start DHCP on this interface.   */
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800538e:	fb01 f303 	mul.w	r3, r1, r3
 8005392:	441a      	add	r2, r3
 8005394:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8005398:	4413      	add	r3, r2
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f828 	bl	80053f4 <_nx_dhcp_interface_start>
 80053a4:	60f8      	str	r0, [r7, #12]
             /* Note, not all interfaces are enabled to run, so
                status may not be successful. Skip to the next
                interface. */

             /* Check status.  */
             if ((status == NX_SUCCESS) || (status == NX_DHCP_ALREADY_STARTED))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <_nx_dhcp_start+0x6a>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b93      	cmp	r3, #147	; 0x93
 80053b0:	d102      	bne.n	80053b8 <_nx_dhcp_start+0x70>
             {
                 interfaces_started++;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	3301      	adds	r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	3301      	adds	r3, #1
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0d3      	beq.n	800536c <_nx_dhcp_start+0x24>
             }
        }
    }

    /* Check if any interfaces started DHCP. */
    if (interfaces_started == 0) 
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <_nx_dhcp_start+0x94>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	f641 5304 	movw	r3, #7428	; 0x1d04
 80053d0:	4413      	add	r3, r2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f00f fba6 	bl	8014b24 <_txe_mutex_put>

        /* Unable to start any interfaces. */
        return NX_DHCP_NO_INTERFACES_STARTED;
 80053d8:	23a6      	movs	r3, #166	; 0xa6
 80053da:	e007      	b.n	80053ec <_nx_dhcp_start+0xa4>
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	f641 5304 	movw	r3, #7428	; 0x1d04
 80053e2:	4413      	add	r3, r2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f00f fb9d 	bl	8014b24 <_txe_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);  
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <_nx_dhcp_interface_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_start(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]

UINT    i;
UINT    status;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]

    
    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005408:	4413      	add	r3, r2
 800540a:	f04f 31ff 	mov.w	r1, #4294967295
 800540e:	4618      	mov	r0, r3
 8005410:	f00f fb2e 	bl	8014a70 <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8005414:	f107 030c 	add.w	r3, r7, #12
 8005418:	461a      	mov	r2, r3
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f001 fd5a 	bl	8006ed6 <_nx_dhcp_interface_record_find>
 8005422:	6138      	str	r0, [r7, #16]

    /* Check status.  */
    if (status)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <_nx_dhcp_interface_start+0x48>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005430:	4413      	add	r3, r2
 8005432:	4618      	mov	r0, r3
 8005434:	f00f fb76 	bl	8014b24 <_txe_mutex_put>

        return(status);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	e0b4      	b.n	80055a6 <_nx_dhcp_interface_start+0x1b2>
    }

    /* Check if DHCP is already started.  */
    if (interface_record -> nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <_nx_dhcp_interface_start+0x62>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	f641 5304 	movw	r3, #7428	; 0x1d04
 800544a:	4413      	add	r3, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f00f fb69 	bl	8014b24 <_txe_mutex_put>
        return(NX_DHCP_ALREADY_STARTED); 
 8005452:	2393      	movs	r3, #147	; 0x93
 8005454:	e0a7      	b.n	80055a6 <_nx_dhcp_interface_start+0x1b2>
    }
                                   
    /* Check if other interface are working.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	e01c      	b.n	8005496 <_nx_dhcp_interface_start+0xa2>
    {

        /* Check which interface record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	441a      	add	r2, r3
 800546a:	f641 5388 	movw	r3, #7560	; 0x1d88
 800546e:	4413      	add	r3, r2
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00c      	beq.n	8005490 <_nx_dhcp_interface_start+0x9c>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	441a      	add	r2, r3
 8005484:	f641 5389 	movw	r3, #7561	; 0x1d89
 8005488:	4413      	add	r3, r2
 800548a:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <_nx_dhcp_interface_start+0xaa>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	3301      	adds	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0df      	beq.n	800545c <_nx_dhcp_interface_start+0x68>
 800549c:	e000      	b.n	80054a0 <_nx_dhcp_interface_start+0xac>
        {

            /* Yes, other interface have started DHCP.  */
            break;
 800549e:	bf00      	nop
        }
    }

    /* Check if any interfaces have started DHCP.  */
    if (i == NX_DHCP_CLIENT_MAX_RECORDS) 
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d14b      	bne.n	800553e <_nx_dhcp_interface_start+0x14a>
    {

        /* Bind the UDP socket to the DHCP Client port.  */
        status =  nx_udp_socket_bind(&(dhcp_ptr -> nx_dhcp_socket), NX_DHCP_CLIENT_UDP_PORT, NX_WAIT_FOREVER);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295
 80054b0:	2144      	movs	r1, #68	; 0x44
 80054b2:	4618      	mov	r0, r3
 80054b4:	f00a fc6e 	bl	800fd94 <_nx_udp_socket_bind>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Check for error */
        if (status != NX_SUCCESS)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <_nx_dhcp_interface_start+0xde>
        {

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	f641 5304 	movw	r3, #7428	; 0x1d04
 80054c6:	4413      	add	r3, r2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f00f fb2b 	bl	8014b24 <_txe_mutex_put>
            return(status);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	e069      	b.n	80055a6 <_nx_dhcp_interface_start+0x1b2>
        }

        /* Resume the DHCP processing thread.  */
        status = tx_thread_resume(&(dhcp_ptr -> nx_dhcp_thread));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 80054d8:	4618      	mov	r0, r3
 80054da:	f00f fd8d 	bl	8014ff8 <_txe_thread_resume>
 80054de:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if ((status != TX_SUCCESS) && (status != TX_SUSPEND_LIFTED))
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d011      	beq.n	800550a <_nx_dhcp_interface_start+0x116>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b19      	cmp	r3, #25
 80054ea:	d00e      	beq.n	800550a <_nx_dhcp_interface_start+0x116>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80054f2:	4618      	mov	r0, r3
 80054f4:	f00b f82e 	bl	8010554 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	f641 5304 	movw	r3, #7428	; 0x1d04
 80054fe:	4413      	add	r3, r2
 8005500:	4618      	mov	r0, r3
 8005502:	f00f fb0f 	bl	8014b24 <_txe_mutex_put>
            return(status);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	e04d      	b.n	80055a6 <_nx_dhcp_interface_start+0x1b2>
        }

        /* Activate DHCP Timer.  */
        status = tx_timer_activate(&(dhcp_ptr -> nx_dhcp_timer));
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005510:	4413      	add	r3, r2
 8005512:	4618      	mov	r0, r3
 8005514:	f00f fd8e 	bl	8015034 <_txe_timer_activate>
 8005518:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if (status != NX_SUCCESS)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <_nx_dhcp_interface_start+0x14a>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005526:	4618      	mov	r0, r3
 8005528:	f00b f814 	bl	8010554 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005532:	4413      	add	r3, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f00f faf5 	bl	8014b24 <_txe_mutex_put>
            return(status);
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	e033      	b.n	80055a6 <_nx_dhcp_interface_start+0x1b2>
        }
    }

    /* Start DHCP service for this interface record.  */
    /* Start the DHCP protocol again by setting the state back to INIT. */
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2202      	movs	r2, #2
 8005542:	705a      	strb	r2, [r3, #1]
    /* The client begins in INIT state and forms a DHCPDISCOVER message.
       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
       RFC2131, Section4.4.1, Page36.  */

    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2264      	movs	r2, #100	; 0x64
 8005548:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the application has specified a routine for DHCP state change notification.  */
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005556:	4413      	add	r3, r2
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <_nx_dhcp_interface_start+0x17e>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005564:	4413      	add	r3, r2
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	7852      	ldrb	r2, [r2, #1]
 800556c:	4611      	mov	r1, r2
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
    }

    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8005578:	4413      	add	r3, r2
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <_nx_dhcp_interface_start+0x1a2>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8005586:	4413      	add	r3, r2
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	69d1      	ldr	r1, [r2, #28]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	7852      	ldrb	r2, [r2, #1]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	f641 5304 	movw	r3, #7428	; 0x1d04
 800559c:	4413      	add	r3, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f00f fac0 	bl	8014b24 <_txe_mutex_put>

    return NX_SUCCESS;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <_nx_dhcp_interface_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_enable(NX_DHCP *dhcp_ptr, UINT iface_index)   
{
 80055ae:	b590      	push	{r4, r7, lr}
 80055b0:	b087      	sub	sp, #28
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
UINT                      i;
ULONG                     client_physical_lsw, client_physical_msw;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	f641 5304 	movw	r3, #7428	; 0x1d04
 80055c2:	4413      	add	r3, r2
 80055c4:	f04f 31ff 	mov.w	r1, #4294967295
 80055c8:	4618      	mov	r0, r3
 80055ca:	f00f fa51 	bl	8014a70 <_txe_mutex_get>

    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e034      	b.n	800563e <_nx_dhcp_interface_enable+0x90>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	441a      	add	r2, r3
 80055e2:	f641 5388 	movw	r3, #7560	; 0x1d88
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d116      	bne.n	800561c <_nx_dhcp_interface_enable+0x6e>
        {

            /* Check if the interface is already enabled. */
            if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	441a      	add	r2, r3
 80055fc:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8005600:	4413      	add	r3, r2
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d116      	bne.n	8005638 <_nx_dhcp_interface_enable+0x8a>
            {

                /* Release the DHCP mutex.  */
                 tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005610:	4413      	add	r3, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f00f fa86 	bl	8014b24 <_txe_mutex_put>
                 return(NX_DHCP_INTERFACE_ALREADY_ENABLED);
 8005618:	23a3      	movs	r3, #163	; 0xa3
 800561a:	e063      	b.n	80056e4 <_nx_dhcp_interface_enable+0x136>
        }
        else
        {

            /* Yes, we found an available record.  */
            if (interface_record == NX_NULL)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <_nx_dhcp_interface_enable+0x8a>
                interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8005628:	fb02 f203 	mul.w	r2, r2, r3
 800562c:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005630:	4413      	add	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4413      	add	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	3301      	adds	r3, #1
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0c7      	beq.n	80055d4 <_nx_dhcp_interface_enable+0x26>
        }
    }

    /* Check if we found an valid DHCP interface record.  */
    if (interface_record == NX_NULL)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d108      	bne.n	800565c <_nx_dhcp_interface_enable+0xae>
    {

        /* No, release the mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005650:	4413      	add	r3, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f00f fa66 	bl	8014b24 <_txe_mutex_put>
        return(NX_DHCP_NO_RECORDS_AVAILABLE);
 8005658:	23a7      	movs	r3, #167	; 0xa7
 800565a:	e043      	b.n	80056e4 <_nx_dhcp_interface_enable+0x136>
    }

    /* Set this record as valid.  */
    interface_record -> nx_dhcp_record_valid = NX_TRUE;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2201      	movs	r2, #1
 8005660:	701a      	strb	r2, [r3, #0]

    /* Set interface index. */  
    interface_record -> nx_dhcp_interface_index = iface_index;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	61da      	str	r2, [r3, #28]

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2200      	movs	r2, #0
 800566c:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2200      	movs	r2, #0
 8005672:	615a      	str	r2, [r3, #20]

    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2200      	movs	r2, #0
 8005678:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Get the client MAC address from the device interface. */
    client_physical_msw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6899      	ldr	r1, [r3, #8]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	440b      	add	r3, r1
 8005698:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
    client_physical_lsw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6899      	ldr	r1, [r3, #8]
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	440b      	add	r3, r1
 80056b0:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]

    /* Generate a 'unique' client transaction ID from the MAC address for each message to the server. */
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	ea82 0403 	eor.w	r4, r2, r3
 80056c0:	f010 f8ac 	bl	801581c <rand>
 80056c4:	4603      	mov	r3, r0
 80056c6:	ea84 0203 	eor.w	r2, r4, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	605a      	str	r2, [r3, #4]

    /* Clear the timeout.  */
    interface_record -> nx_dhcp_timeout = 0;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2200      	movs	r2, #0
 80056d2:	621a      	str	r2, [r3, #32]

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	f641 5304 	movw	r3, #7428	; 0x1d04
 80056da:	4413      	add	r3, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f00f fa21 	bl	8014b24 <_txe_mutex_put>
    return(NX_SUCCESS); 
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	371c      	adds	r7, #28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd90      	pop	{r4, r7, pc}

080056ec <_nx_dhcp_udp_receive_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_udp_receive_notify(NX_UDP_SOCKET *socket_ptr)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

    NX_PARAMETER_NOT_USED(socket_ptr);

    /* Set the data received event flag.  */
    tx_event_flags_set(&(_nx_dhcp_created_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_RECEIVE_EVENT, TX_OR);
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <_nx_dhcp_udp_receive_notify+0x24>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	f641 5338 	movw	r3, #7480	; 0x1d38
 80056fc:	4413      	add	r3, r2
 80056fe:	2200      	movs	r2, #0
 8005700:	2101      	movs	r1, #1
 8005702:	4618      	mov	r0, r3
 8005704:	f00f f8aa 	bl	801485c <_txe_event_flags_set>
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	240020c4 	.word	0x240020c4

08005714 <_nx_dhcp_timeout_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_entry(ULONG dhcp)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

NX_DHCP     *dhcp_ptr;


    /* Setup DHCP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60fb      	str	r3, [r7, #12]

    /* Set the data event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_TIMER_EVENT, TX_OR);
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	f641 5338 	movw	r3, #7480	; 0x1d38
 8005726:	4413      	add	r3, r2
 8005728:	2200      	movs	r2, #0
 800572a:	2102      	movs	r1, #2
 800572c:	4618      	mov	r0, r3
 800572e:	f00f f895 	bl	801485c <_txe_event_flags_set>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <_nx_dhcp_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_thread_entry(ULONG dhcp_instance)
{
 800573a:	b590      	push	{r4, r7, lr}
 800573c:	b08f      	sub	sp, #60	; 0x3c
 800573e:	af02      	add	r7, sp, #8
 8005740:	6078      	str	r0, [r7, #4]
UINT                      status;
UINT                      iface_index;
UINT                      source_port;
ULONG                     source_ip_address;
UINT                      protocol;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]

    /* Setup the DHCP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp_instance)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Obtain the DHCP mutex before processing an.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800574a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574c:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005750:	4413      	add	r3, r2
 8005752:	f04f 31ff 	mov.w	r1, #4294967295
 8005756:	4618      	mov	r0, r3
 8005758:	f00f f98a 	bl	8014a70 <_txe_mutex_get>
    /* Enter the DHCP Client task loop.  */
    do
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800575c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575e:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005762:	4413      	add	r3, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f00f f9dd 	bl	8014b24 <_txe_mutex_put>

        /* Wait for a DHCP client activity.  */
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	f641 5038 	movw	r0, #7480	; 0x1d38
 8005770:	4418      	add	r0, r3
 8005772:	f107 0320 	add.w	r3, r7, #32
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	9200      	str	r2, [sp, #0]
 800577c:	2201      	movs	r2, #1
 800577e:	f04f 31ff 	mov.w	r1, #4294967295
 8005782:	f00f f815 	bl	80147b0 <_txe_event_flags_get>
                           TX_OR_CLEAR, &events, TX_WAIT_FOREVER);

        /* Obtain the DHCP mutex before processing an.  */
        tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005788:	f641 5304 	movw	r3, #7428	; 0x1d04
 800578c:	4413      	add	r3, r2
 800578e:	f04f 31ff 	mov.w	r1, #4294967295
 8005792:	4618      	mov	r0, r3
 8005794:	f00f f96c 	bl	8014a70 <_txe_mutex_get>

        /* Check for DHCP data received event.  */
        if  (events & NX_DHCP_CLIENT_RECEIVE_EVENT)
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d03a      	beq.n	8005818 <_nx_dhcp_thread_entry+0xde>
            /* Loop to receive DHCP message.  */
            while(1)
            {

                /* Check for an incoming DHCP packet with non blocking option. */
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80057a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80057ac:	2200      	movs	r2, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f00a fd0a 	bl	80101c8 <_nx_udp_socket_receive>
 80057b4:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check for packet receive errors. */
                if (status != NX_SUCCESS)
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d12c      	bne.n	8005816 <_nx_dhcp_thread_entry+0xdc>
                {
                    break;
                }

                /* Find the source IP address, port, interface this packet is on. */
                status = nx_udp_packet_info_extract(packet_ptr, &source_ip_address, &protocol, &source_port, &iface_index);
 80057bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057be:	f107 0418 	add.w	r4, r7, #24
 80057c2:	f107 0210 	add.w	r2, r7, #16
 80057c6:	f107 0114 	add.w	r1, r7, #20
 80057ca:	f107 031c 	add.w	r3, r7, #28
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4623      	mov	r3, r4
 80057d2:	f00a f860 	bl	800f896 <_nx_udp_packet_info_extract>
 80057d6:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS) 
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <_nx_dhcp_thread_entry+0xae>
                {

                    nx_packet_release(packet_ptr); 
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f006 fb87 	bl	800bef4 <_nx_packet_release>
                    continue;
 80057e6:	e015      	b.n	8005814 <_nx_dhcp_thread_entry+0xda>
                }

                /* Find the interface record.  */
                status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f107 020c 	add.w	r2, r7, #12
 80057ee:	4619      	mov	r1, r3
 80057f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057f2:	f001 fb70 	bl	8006ed6 <_nx_dhcp_interface_record_find>
 80057f6:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS)
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <_nx_dhcp_thread_entry+0xce>
                {

                    /* Release the original packet . */
                    nx_packet_release(packet_ptr);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f006 fb77 	bl	800bef4 <_nx_packet_release>
                    continue;
 8005806:	e005      	b.n	8005814 <_nx_dhcp_thread_entry+0xda>
                }
                
                /* Process DHCP packet.  */
                _nx_dhcp_packet_process(dhcp_ptr, interface_record, packet_ptr);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	4619      	mov	r1, r3
 800580e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005810:	f000 f80c 	bl	800582c <_nx_dhcp_packet_process>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8005814:	e7c5      	b.n	80057a2 <_nx_dhcp_thread_entry+0x68>
                    break;
 8005816:	bf00      	nop
            }
        }

        /* Timer event.  */
        if (events & NX_DHCP_CLIENT_TIMER_EVENT)
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d09c      	beq.n	800575c <_nx_dhcp_thread_entry+0x22>
        {
            _nx_dhcp_timeout_process(dhcp_ptr);
 8005822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005824:	f000 fa66 	bl	8005cf4 <_nx_dhcp_timeout_process>
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005828:	e798      	b.n	800575c <_nx_dhcp_thread_entry+0x22>
	...

0800582c <_nx_dhcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_dhcp_packet_process(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, NX_PACKET *packet_ptr)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b094      	sub	sp, #80	; 0x50
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
#ifdef NX_DHCP_CLIENT_SEND_ARP_PROBE
ULONG       probing_delay;
#endif

    /* Set the IP pointer and interface index.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
    iface_index = interface_record -> nx_dhcp_interface_index;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	643b      	str	r3, [r7, #64]	; 0x40

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length <= NX_BOOTP_OFFSET_OPTIONS)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2bf0      	cmp	r3, #240	; 0xf0
 800584a:	d803      	bhi.n	8005854 <_nx_dhcp_packet_process+0x28>
    {

        /* Release the packet. */
        nx_packet_release(packet_ptr);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f006 fb51 	bl	800bef4 <_nx_packet_release>

        /* Return.  */
        return;
 8005852:	e24c      	b.n	8005cee <_nx_dhcp_packet_process+0x4c2>
    }

    /* Copy the received packet (datagram) over to a packet from the DHCP Client pool and release
       the packet back to receive packet pool as soon as possible. */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 800585a:	f107 0118 	add.w	r1, r7, #24
 800585e:	2300      	movs	r3, #0
 8005860:	222c      	movs	r2, #44	; 0x2c
 8005862:	f005 feef 	bl	800b644 <_nx_packet_allocate>
 8005866:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if (status != NX_SUCCESS)
 8005868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <_nx_dhcp_packet_process+0x4a>
    {

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f006 fb40 	bl	800bef4 <_nx_packet_release>

        /* Error allocating packet, return error status.  */
        return;
 8005874:	e23b      	b.n	8005cee <_nx_dhcp_packet_process+0x4c2>
    }

    /* Verify the incoming packet does not exceed our DHCP Client packet payload. */
    if ((ULONG)(new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_prepend_ptr) < ((packet_ptr) -> nx_packet_length))
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	429a      	cmp	r2, r3
 8005888:	d207      	bcs.n	800589a <_nx_dhcp_packet_process+0x6e>
    {

        /* Release the newly allocated packet . */
        nx_packet_release(new_packet_ptr);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	4618      	mov	r0, r3
 800588e:	f006 fb31 	bl	800bef4 <_nx_packet_release>
        
        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f006 fb2e 	bl	800bef4 <_nx_packet_release>

        return;
 8005898:	e229      	b.n	8005cee <_nx_dhcp_packet_process+0x4c2>
    }

    /* Initialize the offset to the beginning of the packet buffer. */
    offset = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	63bb      	str	r3, [r7, #56]	; 0x38
    status = nx_packet_data_extract_offset(packet_ptr, offset, (VOID *)new_packet_ptr -> nx_packet_prepend_ptr, (packet_ptr) -> nx_packet_length, &bytes_copied);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80058a6:	f107 0310 	add.w	r3, r7, #16
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	460b      	mov	r3, r1
 80058ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f006 f8e2 	bl	800ba7a <_nx_packet_data_extract_offset>
 80058b6:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if ((status != NX_SUCCESS) || (bytes_copied == 0))
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <_nx_dhcp_packet_process+0x98>
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d107      	bne.n	80058d4 <_nx_dhcp_packet_process+0xa8>
    {

        /* Release the allocated packet we'll never send. */
        nx_packet_release(new_packet_ptr);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f006 fb14 	bl	800bef4 <_nx_packet_release>

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f006 fb11 	bl	800bef4 <_nx_packet_release>

        /* Error extracting packet buffer, return error status.  */
        return;
 80058d2:	e20c      	b.n	8005cee <_nx_dhcp_packet_process+0x4c2>
    }

    /* Update the new packet with the bytes copied.  For chained packets, this will reflect the total
       'datagram' length. */
    new_packet_ptr -> nx_packet_length = bytes_copied; 
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24


    /* Now we can release the original packet. */
    nx_packet_release(packet_ptr);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f006 fb0a 	bl	800bef4 <_nx_packet_release>

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 80058e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	440b      	add	r3, r1
 80058ee:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
    dhcp_client_mac_lsw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 80058f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	440b      	add	r3, r1
 8005904:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Set work_ptr.  */
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	331c      	adds	r3, #28
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the target MAC address in the DHCP message.  */
    packet_client_mac_msw = (((ULONG)work_ptr[0]) << 8) | ((ULONG)work_ptr[1]);
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800591c:	3201      	adds	r2, #1
 800591e:	7812      	ldrb	r2, [r2, #0]
 8005920:	4313      	orrs	r3, r2
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	3302      	adds	r3, #2
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	061a      	lsls	r2, r3, #24
                            (((ULONG)work_ptr[3]) << 16) |
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	3303      	adds	r3, #3
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	041b      	lsls	r3, r3, #16
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8005934:	431a      	orrs	r2, r3
                            (((ULONG)work_ptr[4]) << 8) |
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	3304      	adds	r3, #4
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
                            (((ULONG)work_ptr[3]) << 16) |
 800593e:	4313      	orrs	r3, r2
                            ((ULONG)work_ptr[5]);
 8005940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005942:	3205      	adds	r2, #5
 8005944:	7812      	ldrb	r2, [r2, #0]
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8005946:	4313      	orrs	r3, r2
 8005948:	627b      	str	r3, [r7, #36]	; 0x24

    /* Determine if the  MAC address matches ours.  */
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 800594a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594e:	429a      	cmp	r2, r3
 8005950:	d103      	bne.n	800595a <_nx_dhcp_packet_process+0x12e>
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	429a      	cmp	r2, r3
 8005958:	d004      	beq.n	8005964 <_nx_dhcp_packet_process+0x138>
    {

        /* Release the allocated packet. */
        nx_packet_release(new_packet_ptr);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	4618      	mov	r0, r3
 800595e:	f006 fac9 	bl	800bef4 <_nx_packet_release>
        return;
 8005962:	e1c4      	b.n	8005cee <_nx_dhcp_packet_process+0x4c2>
    }

    /* Check if XIDs match.  */
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	3304      	adds	r3, #4
 800596a:	2104      	movs	r1, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f001 fa43 	bl	8006df8 <_nx_dhcp_get_data>
 8005972:	4602      	mov	r2, r0
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d004      	beq.n	8005986 <_nx_dhcp_packet_process+0x15a>
    {

        /* Release the original packet . */
        nx_packet_release(new_packet_ptr);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	4618      	mov	r0, r3
 8005980:	f006 fab8 	bl	800bef4 <_nx_packet_release>

        /* Error with XID data, return error status.  */
        return;
 8005984:	e1b3      	b.n	8005cee <_nx_dhcp_packet_process+0x4c2>
    }

    /* Save the original state for the state change callback; after this point we will likely change it. */                          
    original_state  = interface_record -> nx_dhcp_state;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	623b      	str	r3, [r7, #32]

    /* The action depends on the current state of the dhcp client. */
    switch (interface_record -> nx_dhcp_state)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	3b03      	subs	r3, #3
 8005992:	2b04      	cmp	r3, #4
 8005994:	f200 816c 	bhi.w	8005c70 <_nx_dhcp_packet_process+0x444>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <_nx_dhcp_packet_process+0x174>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059b5 	.word	0x080059b5
 80059a4:	08005a41 	.word	0x08005a41
 80059a8:	08005c71 	.word	0x08005c71
 80059ac:	08005b09 	.word	0x08005b09
 80059b0:	08005bbf 	.word	0x08005bbf

        case NX_DHCP_STATE_SELECTING:
        {
    
            /* Set up a buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	61fb      	str	r3, [r7, #28]

            /* Get what type of DHCP message it is. */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr -> nx_packet_length);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	f107 0214 	add.w	r2, r7, #20
 80059c2:	2135      	movs	r1, #53	; 0x35
 80059c4:	69f8      	ldr	r0, [r7, #28]
 80059c6:	f001 f8c2 	bl	8006b4e <_nx_dhcp_get_option_value>
 80059ca:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Determine if it is an Offer.  */        
            if ((status == NX_SUCCESS) && (dhcp_type == NX_DHCP_TYPE_DHCPOFFER))
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 8150 	bne.w	8005c74 <_nx_dhcp_packet_process+0x448>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f040 814c 	bne.w	8005c74 <_nx_dhcp_packet_process+0x448>
            {

                /* Yes, a valid Offer is received!  */

                /* Increment the number of offers received.  */
                interface_record -> nx_dhcp_offers_received++;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

                /* Update the DHCP Client interface parameters (IP address, server IP, lease, renewal and rebind times */
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 ff8b 	bl	800690e <_nx_dhcp_extract_information>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 813c 	bne.w	8005c78 <_nx_dhcp_packet_process+0x44c>
                    break;

                /* Send the DHCP Request to accept the offer.  */
                _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005a00:	2203      	movs	r2, #3
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fb29 	bl	800605c <_nx_dhcp_send_request_internal>

                /* Reset the initial timeout to NX_DHCP_MIN_RETRANS_TIMEOUT seconds  */
                interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
                interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	621a      	str	r2, [r3, #32]

                /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 f93e 	bl	8006ca0 <_nx_dhcp_add_randomize>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	621a      	str	r2, [r3, #32]

                /* Check if the timeout is zero.  */
                if (interface_record -> nx_dhcp_timeout == 0)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <_nx_dhcp_packet_process+0x20c>
                    interface_record -> nx_dhcp_timeout = 1;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2201      	movs	r2, #1
 8005a36:	621a      	str	r2, [r3, #32]

                /* Update the state to Requesting state.  */
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	705a      	strb	r2, [r3, #1]
           }

           /* Let the timeout processing handle retransmissions. We're done here */
           break;
 8005a3e:	e119      	b.n	8005c74 <_nx_dhcp_packet_process+0x448>
            /* Also initialize status to success since we won't make the get option call. */               
            status = NX_SUCCESS;
#endif

            /* Setup buffer pointer.  */
            buffer = new_packet_ptr -> nx_packet_prepend_ptr;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	61fb      	str	r3, [r7, #28]

#ifndef NX_DHCP_ENABLE_BOOTP
            /* There is a valid DHCP response, see if it is an ACK.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f107 0214 	add.w	r2, r7, #20
 8005a4e:	2135      	movs	r1, #53	; 0x35
 8005a50:	69f8      	ldr	r0, [r7, #28]
 8005a52:	f001 f87c 	bl	8006b4e <_nx_dhcp_get_option_value>
 8005a56:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
            /* Proceed to processing the server response?   */
            if (status == NX_SUCCESS)
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 810e 	bne.w	8005c7c <_nx_dhcp_packet_process+0x450>
            {

                /* Yes, check and see if it is an ACK back to our previous request.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d12d      	bne.n	8005ac2 <_nx_dhcp_packet_process+0x296>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Either we got an ACK or we are using BOOTP.  */

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 ff46 	bl	800690e <_nx_dhcp_extract_information>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 80fb 	bne.w	8005c80 <_nx_dhcp_packet_process+0x454>
                    /* Setup the handler to indicate the we want collision notification.  */
                    ip_ptr -> nx_ip_interface[iface_index].nx_interface_ip_conflict_notify_handler = _nx_dhcp_ip_conflict;

#else    /* NX_DHCP_CLIENT_SEND_ARP_PROBE not defined: */

                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005a96:	f004 fbfd 	bl	800a294 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <_nx_dhcp_packet_process+0x286>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f004 fa60 	bl	8009f72 <_nx_ip_gateway_address_set>
                    }

                    /* No ARP probe performed. OK to change to the Bound state.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2205      	movs	r2, #5
 8005ab6:	705a      	strb	r2, [r3, #1]
#ifdef NX_DHCP_ENABLE_BOOTP
                    /* BOOTP does not use timeouts.  For the life of this DHCP Client application, keep the same IP address. */
                    interface_record -> nx_dhcp_timeout = NX_WAIT_FOREVER; 
#else
                    /* Set the renewal time received from the server.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	621a      	str	r2, [r3, #32]
#endif /* NX_DHCP_ENABLE_BOOTP  */

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE*/

                    break;
 8005ac0:	e0e7      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
                }
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b06      	cmp	r3, #6
 8005ac6:	f040 80d9 	bne.w	8005c7c <_nx_dhcp_packet_process+0x450>
                {
                                                 
                    /* Increment the number of NACKs received.  */
                    interface_record -> nx_dhcp_nacks_received++;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

                    /* Reinitialize DHCP.  */
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	4619      	mov	r1, r3
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fb72 	bl	80051c8 <_nx_dhcp_interface_reinitialize>

                    /* Restart DHCP service for this interface record.  */

                    /* Start the DHCP protocol again by setting the state back to INIT. */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	705a      	strb	r2, [r3, #1]
                    /* The client begins in INIT state and forms a DHCPDISCOVER message.
                       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                       RFC2131, Section4.4.1, Page36.  */

                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2264      	movs	r2, #100	; 0x64
 8005aee:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Check if the timeout is less than 1 second.  */
                    if (interface_record -> nx_dhcp_timeout < NX_IP_PERIODIC_RATE)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	2b63      	cmp	r3, #99	; 0x63
 8005afc:	f200 80be 	bhi.w	8005c7c <_nx_dhcp_packet_process+0x450>
                        interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2264      	movs	r2, #100	; 0x64
 8005b04:	621a      	str	r2, [r3, #32]
                }
            }
            break;
 8005b06:	e0b9      	b.n	8005c7c <_nx_dhcp_packet_process+0x450>

        case NX_DHCP_STATE_RENEWING:
        {

            /* Setup the buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	61fb      	str	r3, [r7, #28]

            /* Check the server response if it accepts are renewal.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	f107 0214 	add.w	r2, r7, #20
 8005b16:	2135      	movs	r1, #53	; 0x35
 8005b18:	69f8      	ldr	r0, [r7, #28]
 8005b1a:	f001 f818 	bl	8006b4e <_nx_dhcp_get_option_value>
 8005b1e:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Was the option retrieved?  */
            if (status == NX_SUCCESS)
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f040 80ae 	bne.w	8005c84 <_nx_dhcp_packet_process+0x458>
            {

                /* Yes, Check for an ACK.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d12d      	bne.n	8005b8a <_nx_dhcp_packet_process+0x35e>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fee2 	bl	800690e <_nx_dhcp_extract_information>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 809b 	bne.w	8005c88 <_nx_dhcp_packet_process+0x45c>
                        break;
                    
                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005b5e:	f004 fb99 	bl	800a294 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <_nx_dhcp_packet_process+0x34e>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f004 f9fc 	bl	8009f72 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state*/
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	621a      	str	r2, [r3, #32]

                    /* Change the state back to bound.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2205      	movs	r2, #5
 8005b86:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 8005b88:	e07c      	b.n	8005c84 <_nx_dhcp_packet_process+0x458>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d179      	bne.n	8005c84 <_nx_dhcp_packet_process+0x458>
                    interface_record -> nx_dhcp_nacks_received++;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff fb0f 	bl	80051c8 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2202      	movs	r2, #2
 8005bae:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2264      	movs	r2, #100	; 0x64
 8005bb4:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8005bbc:	e062      	b.n	8005c84 <_nx_dhcp_packet_process+0x458>

        case NX_DHCP_STATE_REBINDING:
        {

            /* Setup buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	61fb      	str	r3, [r7, #28]

            /* There is a valid DHCP response, pickup the type of response.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	f107 0214 	add.w	r2, r7, #20
 8005bcc:	2135      	movs	r1, #53	; 0x35
 8005bce:	69f8      	ldr	r0, [r7, #28]
 8005bd0:	f000 ffbd 	bl	8006b4e <_nx_dhcp_get_option_value>
 8005bd4:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Valid response?  */
            if (status == NX_SUCCESS)
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d157      	bne.n	8005c8c <_nx_dhcp_packet_process+0x460>
            {

                /* Is it an ACK response?  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d12c      	bne.n	8005c3c <_nx_dhcp_packet_process+0x410>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fe88 	bl	800690e <_nx_dhcp_extract_information>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d145      	bne.n	8005c90 <_nx_dhcp_packet_process+0x464>
                        break;

                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005c10:	f004 fb40 	bl	800a294 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <_nx_dhcp_packet_process+0x400>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f004 f9a3 	bl	8009f72 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	621a      	str	r2, [r3, #32]

                    /* Change to bound state.  */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2205      	movs	r2, #5
 8005c38:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 8005c3a:	e027      	b.n	8005c8c <_nx_dhcp_packet_process+0x460>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d124      	bne.n	8005c8c <_nx_dhcp_packet_process+0x460>
                    interface_record -> nx_dhcp_nacks_received++;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	4619      	mov	r1, r3
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fab6 	bl	80051c8 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2264      	movs	r2, #100	; 0x64
 8005c66:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8005c6e:	e00d      	b.n	8005c8c <_nx_dhcp_packet_process+0x460>
        }

        default:
            break;
 8005c70:	bf00      	nop
 8005c72:	e00e      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
           break;
 8005c74:	bf00      	nop
 8005c76:	e00c      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
                    break;
 8005c78:	bf00      	nop
 8005c7a:	e00a      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
            break;
 8005c7c:	bf00      	nop
 8005c7e:	e008      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
                        break;
 8005c80:	bf00      	nop
 8005c82:	e006      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
            break;
 8005c84:	bf00      	nop
 8005c86:	e004      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
                        break;
 8005c88:	bf00      	nop
 8005c8a:	e002      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
            break;
 8005c8c:	bf00      	nop
 8005c8e:	e000      	b.n	8005c92 <_nx_dhcp_packet_process+0x466>
                        break;
 8005c90:	bf00      	nop

    } /* End of switch case */

    /* Release the packet.  */
    nx_packet_release(new_packet_ptr);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f006 f92d 	bl	800bef4 <_nx_packet_release>

    /* Check if the state is changed.  */
    if (original_state != interface_record -> nx_dhcp_state)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d022      	beq.n	8005cec <_nx_dhcp_packet_process+0x4c0>
    {

        /* Determine if the application has specified a routine for DHCP state change notification.  */
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005cac:	4413      	add	r3, r2
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <_nx_dhcp_packet_process+0x49c>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005cba:	4413      	add	r3, r2
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	7852      	ldrb	r2, [r2, #1]
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	4798      	blx	r3
        }

        /* Determine if the application has specified a routine for DHCP interface state change notification.  */
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8005cce:	4413      	add	r3, r2
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <_nx_dhcp_packet_process+0x4c0>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8005cdc:	4413      	add	r3, r2
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	69d1      	ldr	r1, [r2, #28]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	7852      	ldrb	r2, [r2, #1]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	4798      	blx	r3
        }
    }

    return;
 8005cec:	bf00      	nop
}
 8005cee:	3748      	adds	r7, #72	; 0x48
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <_nx_dhcp_timeout_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_process(NX_DHCP *dhcp_ptr)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

UINT            i;
UINT            original_state;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE  */

    /* Update the timeout on both interfaces. Check what needs to be done
       if a timeout expires, based on Client state. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	e1a0      	b.n	8006048 <_nx_dhcp_timeout_process+0x354>
    {

         /* Check if the DHCP Client is active on this interface. */      
         if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	441a      	add	r2, r3
 8005d14:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005d18:	4413      	add	r3, r2
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 818f 	beq.w	8006040 <_nx_dhcp_timeout_process+0x34c>
             continue;

         /* Set the interface reocrd pointer.  */
         interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8005d28:	fb02 f203 	mul.w	r2, r2, r3
 8005d2c:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005d30:	4413      	add	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]

         /* Update the count.  */
         interface_record -> nx_dhcp_seconds ++;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	609a      	str	r2, [r3, #8]

        /* Check the timer.  */
        if (interface_record -> nx_dhcp_timeout != 0)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 817b 	beq.w	8006042 <_nx_dhcp_timeout_process+0x34e>
        {

            /* Apply the timer interval to the current DHCP Client timeout.  */
            if (interface_record -> nx_dhcp_timeout > NX_DHCP_TIME_INTERVAL)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	2b64      	cmp	r3, #100	; 0x64
 8005d52:	d906      	bls.n	8005d62 <_nx_dhcp_timeout_process+0x6e>
            {

                /* Update the timeout.  */
                interface_record -> nx_dhcp_timeout -= (ULONG)NX_DHCP_TIME_INTERVAL;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	621a      	str	r2, [r3, #32]
 8005d60:	e16f      	b.n	8006042 <_nx_dhcp_timeout_process+0x34e>
            }
            else
            {

                /* The DHCP Client timeout has expired. */
                interface_record -> nx_dhcp_timeout = 0; 
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2200      	movs	r2, #0
 8005d66:	621a      	str	r2, [r3, #32]

                /* Save the current state for state change callback. */
                original_state = interface_record -> nx_dhcp_state;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	60fb      	str	r3, [r7, #12]

                /* Process according to what state the Client is in. */
                switch (interface_record -> nx_dhcp_state)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	3b02      	subs	r3, #2
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	f200 8132 	bhi.w	8005fde <_nx_dhcp_timeout_process+0x2ea>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <_nx_dhcp_timeout_process+0x8c>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005da1 	.word	0x08005da1
 8005d84:	08005e25 	.word	0x08005e25
 8005d88:	08005e69 	.word	0x08005e69
 8005d8c:	08005ead 	.word	0x08005ead
 8005d90:	08005eeb 	.word	0x08005eeb
 8005d94:	08005f71 	.word	0x08005f71
 8005d98:	08005fdf 	.word	0x08005fdf
 8005d9c:	08005fdf 	.word	0x08005fdf

                    case NX_DHCP_STATE_INIT:
                    {

                        /* Reset the seconds field for starting the DHCP address acquistiion. */
                        interface_record -> nx_dhcp_seconds = 0;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2200      	movs	r2, #0
 8005da4:	609a      	str	r2, [r3, #8]
                        /* Initial state when there is no address.  Send a DHCPDISCOVER message
                           to find a DHCP server and switch to the SELECTING state.
                           Initial timeout is NX_DHCP_MIN_RETRANS_TIMEOUT seconds. */
#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Only if the DHCP Client is requesting an IP address and is configured to skip the Discovery message. */
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <_nx_dhcp_timeout_process+0xd4>
                            (interface_record -> nx_dhcp_skip_discovery))
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <_nx_dhcp_timeout_process+0xd4>
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005db6:	2203      	movs	r2, #3
 8005db8:	6939      	ldr	r1, [r7, #16]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f94e 	bl	800605c <_nx_dhcp_send_request_internal>

                            /* And change to the Requesting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	705a      	strb	r2, [r3, #1]
 8005dc6:	e007      	b.n	8005dd8 <_nx_dhcp_timeout_process+0xe4>
                        }
                        else
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8005dc8:	2201      	movs	r2, #1
 8005dca:	6939      	ldr	r1, [r7, #16]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f945 	bl	800605c <_nx_dhcp_send_request_internal>

                            /* And change to the Selecting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_SELECTING;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	705a      	strb	r2, [r3, #1]
                        /* And change to the Requesting state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
#endif

                        /* Check if the retransmission interval is zero.  */
                        if (interface_record -> nx_dhcp_rtr_interval == 0)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <_nx_dhcp_timeout_process+0xf6>
                        {

                            /* Set the interval to min retransmission timeout.  */
                            interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24
 8005de8:	e007      	b.n	8005dfa <_nx_dhcp_timeout_process+0x106>
                        }
                        else
                        {

                            /* Record the retransmission interval for next retransmission.  */
                            interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 ff84 	bl	8006cfc <_nx_dhcp_update_timeout>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
                        }

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 ff4a 	bl	8006ca0 <_nx_dhcp_add_randomize>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f040 80e3 	bne.w	8005fe2 <_nx_dhcp_timeout_process+0x2ee>
                            interface_record -> nx_dhcp_timeout = 1;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	621a      	str	r2, [r3, #32]

                        break;
 8005e22:	e0de      	b.n	8005fe2 <_nx_dhcp_timeout_process+0x2ee>
                    case NX_DHCP_STATE_SELECTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Retransmit the Discover message.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8005e24:	2201      	movs	r2, #1
 8005e26:	6939      	ldr	r1, [r7, #16]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f917 	bl	800605c <_nx_dhcp_send_request_internal>
                        /* Retransmit the BOOTP Request message.  */ 
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif

                        /* Update the retransmision interval.   */
                        interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 ff62 	bl	8006cfc <_nx_dhcp_update_timeout>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 ff28 	bl	8006ca0 <_nx_dhcp_add_randomize>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f040 80c3 	bne.w	8005fe6 <_nx_dhcp_timeout_process+0x2f2>
                            interface_record -> nx_dhcp_timeout = 1;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	2201      	movs	r2, #1
 8005e64:	621a      	str	r2, [r3, #32]

                        break;
 8005e66:	e0be      	b.n	8005fe6 <_nx_dhcp_timeout_process+0x2f2>
                    case NX_DHCP_STATE_REQUESTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Send a DHCP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005e68:	2203      	movs	r2, #3
 8005e6a:	6939      	ldr	r1, [r7, #16]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8f5 	bl	800605c <_nx_dhcp_send_request_internal>
                        /* Send a BOOTP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif
                                                
                        /* Update the retransmision interval.   */
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 ff40 	bl	8006cfc <_nx_dhcp_update_timeout>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Reset the timeout for next retransmision. */
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 ff06 	bl	8006ca0 <_nx_dhcp_add_randomize>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f040 80a3 	bne.w	8005fea <_nx_dhcp_timeout_process+0x2f6>
                            interface_record -> nx_dhcp_timeout = 1;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	621a      	str	r2, [r3, #32]

                        break;
 8005eaa:	e09e      	b.n	8005fea <_nx_dhcp_timeout_process+0x2f6>

                    case NX_DHCP_STATE_BOUND:
                    {

                        /* Reset the seconds field for starting the DHCP request process. */
                        interface_record -> nx_dhcp_seconds = 0;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	609a      	str	r2, [r3, #8]

                        /* The lease has timed out. Time to renew.  */

                        /* And change to the Renewing state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2206      	movs	r2, #6
 8005eb6:	705a      	strb	r2, [r3, #1]

                        /* Send the renewal request.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005eb8:	2203      	movs	r2, #3
 8005eba:	6939      	ldr	r1, [r7, #16]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f8cd 	bl	800605c <_nx_dhcp_send_request_internal>

                        /* Set the time remaining based on RFC 2131 when T1 expires. */
                        interface_record -> nx_dhcp_renewal_remain_time = interface_record -> nx_dhcp_rebind_time - interface_record -> nx_dhcp_renewal_time;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 ff28 	bl	8006d2a <_nx_dhcp_update_renewal_timeout>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	621a      	str	r2, [r3, #32]

                        /* Record the retransmission interval.  */
                        interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24

                        break;
 8005ee8:	e080      	b.n	8005fec <_nx_dhcp_timeout_process+0x2f8>

                    case NX_DHCP_STATE_RENEWING:
                    {

                        /* Check if we have reached the end of the renewal time.  */
                        if (interface_record -> nx_dhcp_renewal_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d307      	bcc.n	8005f06 <_nx_dhcp_timeout_process+0x212>
                        {
                            interface_record -> nx_dhcp_renewal_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
 8005f04:	e002      	b.n	8005f0c <_nx_dhcp_timeout_process+0x218>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_renewal_remain_time = 0;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 ff0a 	bl	8006d2a <_nx_dhcp_update_renewal_timeout>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11b      	bne.n	8005f5c <_nx_dhcp_timeout_process+0x268>
                        {

                            /* And change to the Rebinding state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2207      	movs	r2, #7
 8005f28:	705a      	strb	r2, [r3, #1]

                            /* Send the rebind request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005f2a:	2203      	movs	r2, #3
 8005f2c:	6939      	ldr	r1, [r7, #16]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f894 	bl	800605c <_nx_dhcp_send_request_internal>

                            /* Calculate the rebind time based on the RFC 2131. */
                            interface_record -> nx_dhcp_rebind_remain_time = interface_record -> nx_dhcp_lease_time - interface_record -> nx_dhcp_rebind_time;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3c:	1ad2      	subs	r2, r2, r3
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	63da      	str	r2, [r3, #60]	; 0x3c
                                                                                        
                            /* Calculate the timeout for the response.  */
                            interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 feef 	bl	8006d2a <_nx_dhcp_update_renewal_timeout>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	621a      	str	r2, [r3, #32]

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6a1a      	ldr	r2, [r3, #32]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }

                        break;
 8005f5a:	e047      	b.n	8005fec <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	6939      	ldr	r1, [r7, #16]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f87b 	bl	800605c <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 8005f6e:	e03d      	b.n	8005fec <_nx_dhcp_timeout_process+0x2f8>
                    {

                        /* No response yet, the response must have timed out, 
                            update the timeout and check if we have reached the 
                            end of the rebinding time.  */
                        if (interface_record -> nx_dhcp_rebind_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d307      	bcc.n	8005f8c <_nx_dhcp_timeout_process+0x298>
                        {
                            interface_record -> nx_dhcp_rebind_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	1ad2      	subs	r2, r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f8a:	e002      	b.n	8005f92 <_nx_dhcp_timeout_process+0x29e>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_rebind_remain_time = 0;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	63da      	str	r2, [r3, #60]	; 0x3c
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fec7 	bl	8006d2a <_nx_dhcp_update_renewal_timeout>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10f      	bne.n	8005fca <_nx_dhcp_timeout_process+0x2d6>
                        {

                            /* Timeout. Restart DHCP service for this interface record.  */

                            /* Reinitialize DHCP.  */
                            _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff f909 	bl	80051c8 <_nx_dhcp_interface_reinitialize>

                            /* Start the DHCP protocol again by setting the state back to INIT. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	705a      	strb	r2, [r3, #1]
                            /* The client begins in INIT state and forms a DHCPDISCOVER message.
                               The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                               RFC2131, Section4.4.1, Page36.  */

                            /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2264      	movs	r2, #100	; 0x64
 8005fc0:	621a      	str	r2, [r3, #32]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }
                        break;
 8005fc8:	e010      	b.n	8005fec <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005fca:	2203      	movs	r2, #3
 8005fcc:	6939      	ldr	r1, [r7, #16]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f844 	bl	800605c <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 8005fdc:	e006      	b.n	8005fec <_nx_dhcp_timeout_process+0x2f8>
                    }

                    default:
                    {

                        break;
 8005fde:	bf00      	nop
 8005fe0:	e004      	b.n	8005fec <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8005fe2:	bf00      	nop
 8005fe4:	e002      	b.n	8005fec <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8005fe6:	bf00      	nop
 8005fe8:	e000      	b.n	8005fec <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8005fea:	bf00      	nop
                    }
                }

                /* Check if the state is changed.  */
                if (original_state != interface_record -> nx_dhcp_state)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d024      	beq.n	8006042 <_nx_dhcp_timeout_process+0x34e>
                {

                    /* Determine if the application has specified a routine for DHCP state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005ffe:	4413      	add	r3, r2
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <_nx_dhcp_timeout_process+0x326>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	f641 7338 	movw	r3, #7992	; 0x1f38
 800600c:	4413      	add	r3, r2
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	7852      	ldrb	r2, [r2, #1]
 8006014:	4611      	mov	r1, r2
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
                    }

                    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8006020:	4413      	add	r3, r2
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00c      	beq.n	8006042 <_nx_dhcp_timeout_process+0x34e>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800602e:	4413      	add	r3, r2
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	69d1      	ldr	r1, [r2, #28]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	7852      	ldrb	r2, [r2, #1]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
 800603e:	e000      	b.n	8006042 <_nx_dhcp_timeout_process+0x34e>
             continue;
 8006040:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	3301      	adds	r3, #1
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f43f ae5b 	beq.w	8005d06 <_nx_dhcp_timeout_process+0x12>

            } /* End of switch statement. */ 
        }

    } /* Try the next interface record.  */ 
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop

0800605c <_nx_dhcp_send_request_internal>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_send_request_internal(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UINT dhcp_message_type)
{
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b093      	sub	sp, #76	; 0x4c
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
ULONG           targetIP;
UINT            status;
ULONG           dhcp_client_mac_msw;
ULONG           dhcp_client_mac_lsw;
UINT            iface_index;
UINT            index = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
UINT            user_option_length;
UINT            name_length;


    /* Set the interface idnex.  */
    iface_index = interface_record -> nx_dhcp_interface_index;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	637b      	str	r3, [r7, #52]	; 0x34

    /* Allocate a DHCP packet.  */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 8006078:	f107 0120 	add.w	r1, r7, #32
 800607c:	2300      	movs	r3, #0
 800607e:	222c      	movs	r2, #44	; 0x2c
 8006080:	f005 fae0 	bl	800b644 <_nx_packet_allocate>
 8006084:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Was the packet allocation successful?  */
    if (status != NX_SUCCESS)
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <_nx_dhcp_send_request_internal+0x42>
    {

        /* Increment the DHCP internal error counter.  */
        interface_record -> nx_dhcp_internal_errors++;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

        /* Return status.  */
        return(status);
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	e2a4      	b.n	80065e8 <_nx_dhcp_send_request_internal+0x58c>
    }

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6899      	ldr	r1, [r3, #8]
 80060a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	633b      	str	r3, [r7, #48]	; 0x30
    dhcp_client_mac_lsw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6899      	ldr	r1, [r3, #8]
 80060ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	440b      	add	r3, r1
 80060c6:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Setup the buffer pointer.  */
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Clear the buffer out... just in case.  */
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 80060d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060d8:	2100      	movs	r1, #0
 80060da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060dc:	f00f fb08 	bl	80156f0 <memset>
    
    /* Setup the standard BootP fields.  */
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HTYPE] =     NX_BOOTP_TYPE_ETHERNET;     
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	3301      	adds	r3, #1
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HLEN] =      NX_BOOTP_HLEN_ETHERNET;
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	3302      	adds	r3, #2
 80060f2:	2206      	movs	r2, #6
 80060f4:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HOPS] =      0;
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	3303      	adds	r3, #3
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_SERVER_NM] = 0;  
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	332c      	adds	r3, #44	; 0x2c
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_BOOT_FILE] = 0;  
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	336c      	adds	r3, #108	; 0x6c
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]

    /* Setup the 'Xid' field.  */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_XID, 4, interface_record -> nx_dhcp_xid);
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	1d18      	adds	r0, r3, #4
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	461a      	mov	r2, r3
 8006118:	2104      	movs	r1, #4
 800611a:	f000 fe89 	bl	8006e30 <_nx_dhcp_store_data>

    /* Set the 'secs' field according to RFC2131, Secion4.4.1, Page37, Table5. */ 
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d002      	beq.n	800612a <_nx_dhcp_send_request_internal+0xce>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b07      	cmp	r3, #7
 8006128:	d107      	bne.n	800613a <_nx_dhcp_send_request_internal+0xde>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, 0);
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	3308      	adds	r3, #8
 800612e:	2200      	movs	r2, #0
 8006130:	2102      	movs	r1, #2
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fe7c 	bl	8006e30 <_nx_dhcp_store_data>
 8006138:	e008      	b.n	800614c <_nx_dhcp_send_request_internal+0xf0>
    }
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, interface_record -> nx_dhcp_seconds);
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	f103 0008 	add.w	r0, r3, #8
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	461a      	mov	r2, r3
 8006146:	2102      	movs	r1, #2
 8006148:	f000 fe72 	bl	8006e30 <_nx_dhcp_store_data>
    }

    /* Set the broadcast flag according to RFC2131, Secion4.4.1, Page38, Table5.  */

    /* Set the broadcast flag to 0 for DHCP Decline and DHCP Release.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b04      	cmp	r3, #4
 8006150:	d002      	beq.n	8006158 <_nx_dhcp_send_request_internal+0xfc>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b07      	cmp	r3, #7
 8006156:	d107      	bne.n	8006168 <_nx_dhcp_send_request_internal+0x10c>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	330a      	adds	r3, #10
 800615c:	2200      	movs	r2, #0
 800615e:	2101      	movs	r1, #1
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fe65 	bl	8006e30 <_nx_dhcp_store_data>
 8006166:	e012      	b.n	800618e <_nx_dhcp_send_request_internal+0x132>
    }

    /* Set the 'broadcast' flag according to user requirement for DHCP Discover, DHCP Request and DHCP Inform.  */
    else if (interface_record -> nx_dhcp_clear_broadcast == NX_TRUE)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	2b01      	cmp	r3, #1
 800616e:	d107      	bne.n	8006180 <_nx_dhcp_send_request_internal+0x124>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	330a      	adds	r3, #10
 8006174:	2200      	movs	r2, #0
 8006176:	2101      	movs	r1, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fe59 	bl	8006e30 <_nx_dhcp_store_data>
 800617e:	e006      	b.n	800618e <_nx_dhcp_send_request_internal+0x132>
    }
    else
    {

        /* Request the response be sent broadcast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_BROADCAST);
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	330a      	adds	r3, #10
 8006184:	2280      	movs	r2, #128	; 0x80
 8006186:	2101      	movs	r1, #1
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fe51 	bl	8006e30 <_nx_dhcp_store_data>
    }

    /* RFC 2131 4.4.1: Do not set the Client IP ("ciaddr" field) address...*/
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b08      	cmp	r3, #8
 8006192:	d007      	beq.n	80061a4 <_nx_dhcp_send_request_internal+0x148>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, NX_BOOTP_NO_ADDRESS);
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	330c      	adds	r3, #12
 8006198:	2200      	movs	r2, #0
 800619a:	2104      	movs	r1, #4
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fe47 	bl	8006e30 <_nx_dhcp_store_data>
 80061a2:	e008      	b.n	80061b6 <_nx_dhcp_send_request_internal+0x15a>
    }
    /* ...unless this is an INFORM REQUEST message. */
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f103 000c 	add.w	r0, r3, #12
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	461a      	mov	r2, r3
 80061b0:	2104      	movs	r1, #4
 80061b2:	f000 fe3d 	bl	8006e30 <_nx_dhcp_store_data>
    }

    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_YOUR_IP, 4, NX_BOOTP_NO_ADDRESS);   
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	3310      	adds	r3, #16
 80061ba:	2200      	movs	r2, #0
 80061bc:	2104      	movs	r1, #4
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fe36 	bl	8006e30 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SERVER_IP, 4, NX_BOOTP_NO_ADDRESS); 
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	3314      	adds	r3, #20
 80061c8:	2200      	movs	r2, #0
 80061ca:	2104      	movs	r1, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fe2f 	bl	8006e30 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_GATEWAY_IP, 4, NX_BOOTP_NO_ADDRESS);
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	3318      	adds	r3, #24
 80061d6:	2200      	movs	r2, #0
 80061d8:	2104      	movs	r1, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fe28 	bl	8006e30 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW, 2, dhcp_client_mac_msw);
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	331c      	adds	r3, #28
 80061e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e6:	2102      	movs	r1, #2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fe21 	bl	8006e30 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW + 2, 4, dhcp_client_mac_lsw);
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	331e      	adds	r3, #30
 80061f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f4:	2104      	movs	r1, #4
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fe1a 	bl	8006e30 <_nx_dhcp_store_data>

#ifndef NX_DHCP_ENABLE_BOOTP        
    /* Update the index.  */
    index = NX_BOOTP_OFFSET_OPTIONS; 
 80061fc:	23f0      	movs	r3, #240	; 0xf0
 80061fe:	61fb      	str	r3, [r7, #28]

    /*  A BOOTP Client should not request DHCP option data. */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_VENDOR, 4, NX_BOOTP_MAGIC_COOKIE);
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	33ec      	adds	r3, #236	; 0xec
 8006204:	4aa7      	ldr	r2, [pc, #668]	; (80064a4 <_nx_dhcp_send_request_internal+0x448>)
 8006206:	2104      	movs	r1, #4
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fe11 	bl	8006e30 <_nx_dhcp_store_data>

    /* Add the actual DHCP request.  */
    _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, NX_DHCP_OPTION_DHCP_TYPE_SIZE, dhcp_message_type, &index);
 800620e:	f107 031c 	add.w	r3, r7, #28
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	2135      	movs	r1, #53	; 0x35
 800621a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621c:	f000 fcd9 	bl	8006bd2 <_nx_dhcp_add_option_value>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3b01      	subs	r3, #1
 8006224:	2b07      	cmp	r3, #7
 8006226:	f200 815f 	bhi.w	80064e8 <_nx_dhcp_send_request_internal+0x48c>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <_nx_dhcp_send_request_internal+0x1d4>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006251 	.word	0x08006251
 8006234:	080064e9 	.word	0x080064e9
 8006238:	080062ef 	.word	0x080062ef
 800623c:	08006401 	.word	0x08006401
 8006240:	080064e9 	.word	0x080064e9
 8006244:	080064e9 	.word	0x080064e9
 8006248:	08006441 	.word	0x08006441
 800624c:	08006479 	.word	0x08006479

        case NX_DHCP_TYPE_DHCPDISCOVER:


            /* Determine if we have a valid IP address.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00f      	beq.n	8006278 <_nx_dhcp_send_request_internal+0x21c>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d00a      	beq.n	8006278 <_nx_dhcp_send_request_internal+0x21c>
            {

                /* Add a IP request option if we have a valid IP address */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	f107 031c 	add.w	r3, r7, #28
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	2204      	movs	r2, #4
 8006270:	2132      	movs	r1, #50	; 0x32
 8006272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006274:	f000 fcad 	bl	8006bd2 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add an option request for an infinite lease.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 8006278:	f107 031c 	add.w	r3, r7, #28
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	f04f 33ff 	mov.w	r3, #4294967295
 8006282:	2204      	movs	r2, #4
 8006284:	2133      	movs	r1, #51	; 0x33
 8006286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006288:	f000 fca3 	bl	8006bd2 <_nx_dhcp_add_option_value>

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <_nx_dhcp_send_request_internal+0x270>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f107 0114 	add.w	r1, r7, #20
 800629c:	22ff      	movs	r2, #255	; 0xff
 800629e:	4618      	mov	r0, r3
 80062a0:	f00a fac2 	bl	8010828 <_nx_utility_string_length_check>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <_nx_dhcp_send_request_internal+0x25a>
                {
                    nx_packet_release(packet_ptr);
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f005 fe21 	bl	800bef4 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 80062b2:	23a8      	movs	r3, #168	; 0xa8
 80062b4:	e198      	b.n	80065e8 <_nx_dhcp_send_request_internal+0x58c>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 80062b6:	697a      	ldr	r2, [r7, #20]
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6859      	ldr	r1, [r3, #4]
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 80062bc:	f107 031c 	add.w	r3, r7, #28
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	460b      	mov	r3, r1
 80062c4:	210c      	movs	r1, #12
 80062c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c8:	f000 fcb6 	bl	8006c38 <_nx_dhcp_add_option_string>
            }

            /* Add an option request for DHCP parameters (gateway, subnet mask, etc.).  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, NX_DHCP_REQUEST_PARAMETER_SIZE, _nx_dhcp_request_parameters, &index);
 80062cc:	f107 031c 	add.w	r3, r7, #28
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4b75      	ldr	r3, [pc, #468]	; (80064a8 <_nx_dhcp_send_request_internal+0x44c>)
 80062d4:	2203      	movs	r2, #3
 80062d6:	2137      	movs	r1, #55	; 0x37
 80062d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062da:	f000 fcad 	bl	8006c38 <_nx_dhcp_add_option_string>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Discovery messages sent.  */
            interface_record -> nx_dhcp_discoveries_sent++;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 80062ec:	e0fd      	b.n	80064ea <_nx_dhcp_send_request_internal+0x48e>
      
        case NX_DHCP_TYPE_DHCPREQUEST:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01b      	beq.n	800632e <_nx_dhcp_send_request_internal+0x2d2>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f107 0114 	add.w	r1, r7, #20
 80062fe:	22ff      	movs	r2, #255	; 0xff
 8006300:	4618      	mov	r0, r3
 8006302:	f00a fa91 	bl	8010828 <_nx_utility_string_length_check>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <_nx_dhcp_send_request_internal+0x2bc>
                {
                    nx_packet_release(packet_ptr);
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	4618      	mov	r0, r3
 8006310:	f005 fdf0 	bl	800bef4 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8006314:	23a8      	movs	r3, #168	; 0xa8
 8006316:	e167      	b.n	80065e8 <_nx_dhcp_send_request_internal+0x58c>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6859      	ldr	r1, [r3, #4]
 800631e:	f107 031c 	add.w	r3, r7, #28
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	460b      	mov	r3, r1
 8006326:	210c      	movs	r1, #12
 8006328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632a:	f000 fc85 	bl	8006c38 <_nx_dhcp_add_option_string>
            }

            /* Determine if we have a valid IP address. Must not include if Renewing or Rebinding RCV 2131 4.3.2.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d017      	beq.n	8006366 <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d012      	beq.n	8006366 <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 8006344:	2b06      	cmp	r3, #6
 8006346:	d00e      	beq.n	8006366 <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 800634c:	2b07      	cmp	r3, #7
 800634e:	d00a      	beq.n	8006366 <_nx_dhcp_send_request_internal+0x30a>
            {

                /* Add an IP request option if we have a valid IP address.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	f107 031c 	add.w	r3, r7, #28
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	2204      	movs	r2, #4
 800635e:	2132      	movs	r1, #50	; 0x32
 8006360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006362:	f000 fc36 	bl	8006bd2 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add a request for an infinite lease if we haven't already set the timers.  */
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <_nx_dhcp_send_request_internal+0x31a>
                (interface_record -> nx_dhcp_renewal_time == 0))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <_nx_dhcp_send_request_internal+0x32e>
            {

                /* Add the infinite lease option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 8006376:	f107 031c 	add.w	r3, r7, #28
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	2204      	movs	r2, #4
 8006382:	2133      	movs	r1, #51	; 0x33
 8006384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006386:	f000 fc24 	bl	8006bd2 <_nx_dhcp_add_option_value>
            }

            /* Should add server ID if not renewing.  */
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d014      	beq.n	80063bc <_nx_dhcp_send_request_internal+0x360>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	785b      	ldrb	r3, [r3, #1]
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 8006396:	2b07      	cmp	r3, #7
 8006398:	d010      	beq.n	80063bc <_nx_dhcp_send_request_internal+0x360>
                (interface_record -> nx_dhcp_server_ip != NX_BOOTP_BC_ADDRESS)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	695b      	ldr	r3, [r3, #20]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d00b      	beq.n	80063bc <_nx_dhcp_send_request_internal+0x360>
               )
            {

                /* Add Server identifier option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	f107 031c 	add.w	r3, r7, #28
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4613      	mov	r3, r2
 80063b0:	2204      	movs	r2, #4
 80063b2:	2136      	movs	r1, #54	; 0x36
 80063b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b6:	f000 fc0c 	bl	8006bd2 <_nx_dhcp_add_option_value>
 80063ba:	e010      	b.n	80063de <_nx_dhcp_send_request_internal+0x382>
                                          interface_record -> nx_dhcp_server_ip, &index);
            }
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b06      	cmp	r3, #6
 80063c2:	d003      	beq.n	80063cc <_nx_dhcp_send_request_internal+0x370>
                     (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	785b      	ldrb	r3, [r3, #1]
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 80063c8:	2b07      	cmp	r3, #7
 80063ca:	d108      	bne.n	80063de <_nx_dhcp_send_request_internal+0x382>

            {

                /* Ensure the renewal message fields are correct.  */
                _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	f103 000c 	add.w	r0, r3, #12
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	2104      	movs	r1, #4
 80063da:	f000 fd29 	bl	8006e30 <_nx_dhcp_store_data>
            }

            /* Add the request for the DHCP parameters (gateway, subnet mask, etc.) if not renewing.  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, NX_DHCP_REQUEST_PARAMETER_SIZE, _nx_dhcp_request_parameters, &index);
 80063de:	f107 031c 	add.w	r3, r7, #28
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <_nx_dhcp_send_request_internal+0x44c>)
 80063e6:	2203      	movs	r2, #3
 80063e8:	2137      	movs	r1, #55	; 0x37
 80063ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ec:	f000 fc24 	bl	8006c38 <_nx_dhcp_add_option_string>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Request messages sent.  */
            interface_record -> nx_dhcp_requests_sent++;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            break;
 80063fe:	e074      	b.n	80064ea <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPDECLINE:      

            /* Does the Client have a nonzero requested address it is declining? */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00f      	beq.n	8006428 <_nx_dhcp_send_request_internal+0x3cc>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d00a      	beq.n	8006428 <_nx_dhcp_send_request_internal+0x3cc>
            {

                /* Yes; add Request IP address option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	f107 031c 	add.w	r3, r7, #28
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	4613      	mov	r3, r2
 800641e:	2204      	movs	r2, #4
 8006420:	2132      	movs	r1, #50	; 0x32
 8006422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006424:	f000 fbd5 	bl	8006bd2 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }     

            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	695a      	ldr	r2, [r3, #20]
 800642c:	f107 031c 	add.w	r3, r7, #28
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	4613      	mov	r3, r2
 8006434:	2204      	movs	r2, #4
 8006436:	2136      	movs	r1, #54	; 0x36
 8006438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800643a:	f000 fbca 	bl	8006bd2 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            break;
 800643e:	e054      	b.n	80064ea <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPRELEASE:       

            /* Added the 'ciaddr', Indicate the IP address being released.  */
            _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	f103 000c 	add.w	r0, r3, #12
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	2104      	movs	r1, #4
 800644e:	f000 fcef 	bl	8006e30 <_nx_dhcp_store_data>
                                       
            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	f107 031c 	add.w	r3, r7, #28
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	2204      	movs	r2, #4
 8006460:	2136      	movs	r1, #54	; 0x36
 8006462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006464:	f000 fbb5 	bl	8006bd2 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            /* Increment the number of Release messages sent.  */
            interface_record -> nx_dhcp_releases_sent++;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            break;
 8006476:	e038      	b.n	80064ea <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPINFORM:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d020      	beq.n	80064c2 <_nx_dhcp_send_request_internal+0x466>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f107 0114 	add.w	r1, r7, #20
 8006488:	22ff      	movs	r2, #255	; 0xff
 800648a:	4618      	mov	r0, r3
 800648c:	f00a f9cc 	bl	8010828 <_nx_utility_string_length_check>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <_nx_dhcp_send_request_internal+0x450>
                {
                    nx_packet_release(packet_ptr);
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	4618      	mov	r0, r3
 800649a:	f005 fd2b 	bl	800bef4 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 800649e:	23a8      	movs	r3, #168	; 0xa8
 80064a0:	e0a2      	b.n	80065e8 <_nx_dhcp_send_request_internal+0x58c>
 80064a2:	bf00      	nop
 80064a4:	63825363 	.word	0x63825363
 80064a8:	24000010 	.word	0x24000010
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6859      	ldr	r1, [r3, #4]
 80064b2:	f107 031c 	add.w	r3, r7, #28
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	460b      	mov	r3, r1
 80064ba:	210c      	movs	r1, #12
 80064bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064be:	f000 fbbb 	bl	8006c38 <_nx_dhcp_add_option_string>
            }

            /* Add an option request for DHCP parameters (gateway, subnet mask, etc.).  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, 1, &(interface_record -> nx_dhcp_user_option), &index);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	f107 031c 	add.w	r3, r7, #28
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	2201      	movs	r2, #1
 80064d0:	2137      	movs	r1, #55	; 0x37
 80064d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d4:	f000 fbb0 	bl	8006c38 <_nx_dhcp_add_option_string>

            /* Increment the number of Inform messages sent.  */
            interface_record -> nx_dhcp_informs_sent++;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

            break;
 80064e6:	e000      	b.n	80064ea <_nx_dhcp_send_request_internal+0x48e>

        default:
            break;
 80064e8:	bf00      	nop
    }

    /* Add any user supplied options to the buffer.  */
    if (dhcp_ptr -> nx_dhcp_user_option_add)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d023      	beq.n	800653e <_nx_dhcp_send_request_internal+0x4e2>
    {

        /* Set the pointer for adding user option.  */
        user_option_ptr = buffer + index;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fa:	4413      	add	r3, r2
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the available length for user options. Minus 1 to add the END option.  */
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	61bb      	str	r3, [r7, #24]

        /* Add the specific DHCP option user wanted.  */
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8006510:	681c      	ldr	r4, [r3, #0]
 8006512:	f107 0318 	add.w	r3, r7, #24
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	47a0      	blx	r4
 8006522:	4603      	mov	r3, r0
 8006524:	2b01      	cmp	r3, #1
 8006526:	d104      	bne.n	8006532 <_nx_dhcp_send_request_internal+0x4d6>
        {

            /* Update the index to include the user options.  */
            index += user_option_length;
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	4413      	add	r3, r2
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	e005      	b.n	800653e <_nx_dhcp_send_request_internal+0x4e2>
        }
        else
        {

            /* Invalid user options. Release the packet.  */
            nx_packet_release(packet_ptr);
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	4618      	mov	r0, r3
 8006536:	f005 fcdd 	bl	800bef4 <_nx_packet_release>
            return(NX_DHCP_UNKNOWN_OPTION);
 800653a:	239f      	movs	r3, #159	; 0x9f
 800653c:	e054      	b.n	80065e8 <_nx_dhcp_send_request_internal+0x58c>
        }
    }

    /* Setup the packet pointers.  */
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006544:	625a      	str	r2, [r3, #36]	; 0x24
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8006550:	60da      	str	r2, [r3, #12]

#ifndef NX_DHCP_ENABLE_BOOTP

    /* Added the END option.  */
    *(buffer + index) = NX_DHCP_OPTION_END;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006556:	4413      	add	r3, r2
 8006558:	22ff      	movs	r2, #255	; 0xff
 800655a:	701a      	strb	r2, [r3, #0]
    index ++;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	3301      	adds	r3, #1
 8006560:	61fb      	str	r3, [r7, #28]

    /* Check the option length.  */
    if (index > NX_BOOTP_OFFSET_END)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006568:	d908      	bls.n	800657c <_nx_dhcp_send_request_internal+0x520>
    {
        packet_ptr -> nx_packet_length = index;
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	625a      	str	r2, [r3, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	6899      	ldr	r1, [r3, #8]
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	440a      	add	r2, r1
 800657a:	60da      	str	r2, [r3, #12]
    }
#endif

    /* Set the target address according to RFC2131, Section4.3.6, Page33, Table4 and Section4.4.4, Page40.  
       DHCP Request for renewing and DHCP Release message must be unicast.  */
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b03      	cmp	r3, #3
 8006580:	d103      	bne.n	800658a <_nx_dhcp_send_request_internal+0x52e>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	2b06      	cmp	r3, #6
 8006588:	d002      	beq.n	8006590 <_nx_dhcp_send_request_internal+0x534>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b07      	cmp	r3, #7
 800658e:	d103      	bne.n	8006598 <_nx_dhcp_send_request_internal+0x53c>
        (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
    {

        /* Use the current server's IP address.  */
        targetIP = interface_record -> nx_dhcp_server_ip;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006596:	e002      	b.n	800659e <_nx_dhcp_send_request_internal+0x542>
    }
    else
    {

        /* Set the server target IP address to broadcast.  */
        targetIP = NX_BOOTP_BC_ADDRESS;
 8006598:	f04f 33ff 	mov.w	r3, #4294967295
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* DHCP messages broadcast by a client prior to that client obtaining
       its IP address must have the source address field in the IP header
       set to 0. RFC2131, Section4.1, Page23.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDISCOVER) ||
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d006      	beq.n	80065b2 <_nx_dhcp_send_request_internal+0x556>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d10b      	bne.n	80065c2 <_nx_dhcp_send_request_internal+0x566>
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d807      	bhi.n	80065c2 <_nx_dhcp_send_request_internal+0x566>
    {

        /* Call function to send the special packet with zero source address.*/
        status = _nx_dhcp_client_send_with_zero_source_address(dhcp_ptr, iface_index, packet_ptr);
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f819 	bl	80065f0 <_nx_dhcp_client_send_with_zero_source_address>
 80065be:	63b8      	str	r0, [r7, #56]	; 0x38
 80065c0:	e00a      	b.n	80065d8 <_nx_dhcp_send_request_internal+0x57c>
    }
    else
    {

        /* Send the packet.  */
        status = nx_udp_socket_interface_send(&(dhcp_ptr -> nx_dhcp_socket), packet_ptr, targetIP, NX_DHCP_SERVER_UDP_PORT, iface_index);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f603 30dc 	addw	r0, r3, #3036	; 0xbdc
 80065c8:	6a39      	ldr	r1, [r7, #32]
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2343      	movs	r3, #67	; 0x43
 80065d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065d2:	f009 ff9c 	bl	801050e <_nx_udp_socket_source_send>
 80065d6:	63b8      	str	r0, [r7, #56]	; 0x38
    }

    /* If an error is detected, release the packet. */
    if (status != NX_SUCCESS)
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <_nx_dhcp_send_request_internal+0x58a>
    {

        /* Release the packet.  */
        nx_packet_release(packet_ptr);
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f005 fc87 	bl	800bef4 <_nx_packet_release>
    }

    /* Return completion status.  */
    return(status);
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3744      	adds	r7, #68	; 0x44
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd90      	pop	{r4, r7, pc}

080065f0 <_nx_dhcp_client_send_with_zero_source_address>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_client_send_with_zero_source_address(NX_DHCP *dhcp_ptr, UINT iface_index, NX_PACKET *packet_ptr)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b098      	sub	sp, #96	; 0x60
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
ULONG           checksum;
ULONG           val;
NX_IP_DRIVER    driver_request;
      
    /* Set up the pointer to the associated IP instance.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Set up the pointer to the associated socket.  */
    socket_ptr = &dhcp_ptr -> nx_dhcp_socket;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8006608:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Set up the pointer to the interface.  */
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8006618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800661a:	4413      	add	r3, r2
 800661c:	3304      	adds	r3, #4
 800661e:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr -> nx_packet_ip_interface = interface_ptr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006624:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set up the address.  */
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 8006626:	2300      	movs	r3, #0
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 800662a:	f04f 33ff 	mov.w	r3, #4294967295
 800662e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the interface.  */
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8006630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006632:	791b      	ldrb	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <_nx_dhcp_client_send_with_zero_source_address+0x50>
 8006638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663a:	799b      	ldrb	r3, [r3, #6]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <_nx_dhcp_client_send_with_zero_source_address+0x54>
    {

        /* None found; return the error status. */
        return(NX_INVALID_INTERFACE);
 8006640:	234c      	movs	r3, #76	; 0x4c
 8006642:	e160      	b.n	8006906 <_nx_dhcp_client_send_with_zero_source_address+0x316>
    }

    /* Build UDP header.  */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f1a3 0208 	sub.w	r2, r3, #8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2204      	movs	r2, #4
 8006654:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    
#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 8006658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 8006666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006668:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	441a      	add	r2, r3
 8006672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 8006678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006680:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 8006682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006684:	695a      	ldr	r2, [r3, #20]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	441a      	add	r2, r3
 800668c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800668e:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	f103 0208 	add.w	r2, r3, #8
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    udp_header_ptr =  (NX_UDP_HEADER *) packet_ptr -> nx_packet_prepend_ptr;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80066a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	041b      	lsls	r3, r3, #16
 80066a8:	f043 0243 	orr.w	r2, r3, #67	; 0x43
 80066ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ae:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	041a      	lsls	r2, r3, #16
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	605a      	str	r2, [r3, #4]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80066ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	ba1a      	rev	r2, r3
 80066c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80066c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	ba1a      	rev	r2, r3
 80066ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066cc:	605a      	str	r2, [r3, #4]

#ifdef NX_DISABLE_UDP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_UDP_TX_CHECKSUM */
    compute_checksum = 1;
 80066ce:	2301      	movs	r3, #1
 80066d0:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 80066d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <_nx_dhcp_client_send_with_zero_source_address+0xf4>
        compute_checksum = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	657b      	str	r3, [r7, #84]	; 0x54
 80066e2:	e001      	b.n	80066e8 <_nx_dhcp_client_send_with_zero_source_address+0xf8>
    else
        compute_checksum = 1;
 80066e4:	2301      	movs	r3, #1
 80066e6:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 80066e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d028      	beq.n	8006740 <_nx_dhcp_client_send_with_zero_source_address+0x150>
    {
        /* Yes, we need to compute the UDP checksum.  */
        checksum = _nx_ip_checksum_compute(packet_ptr,
                                           NX_PROTOCOL_UDP,
                                           (UINT)packet_ptr -> nx_packet_length,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr,
 80066f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80066f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	460b      	mov	r3, r1
 80066fe:	2111      	movs	r1, #17
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 fe3d 	bl	8009380 <_nx_ip_checksum_compute>
 8006706:	4603      	mov	r3, r0
 8006708:	653b      	str	r3, [r7, #80]	; 0x50
                                           &ip_src_addr,
                                           &ip_dest_addr);

        checksum = ~checksum & NX_LOWER_16_MASK;
 800670a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800670c:	43db      	mvns	r3, r3
 800670e:	b29b      	uxth	r3, r3
 8006710:	653b      	str	r3, [r7, #80]	; 0x50

        /* If the computed checksum is zero, it will be transmitted as all ones. */
        /* RFC 768, page 2. */
        if (checksum == 0)
 8006712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <_nx_dhcp_client_send_with_zero_source_address+0x12e>
            checksum = 0xFFFF;
 8006718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800671c:	653b      	str	r3, [r7, #80]	; 0x50

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800671e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	ba1a      	rev	r2, r3
 8006724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006726:	605a      	str	r2, [r3, #4]

        udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8006728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672e:	431a      	orrs	r2, r3
 8006730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006732:	605a      	str	r2, [r3, #4]

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	ba1a      	rev	r2, r3
 800673a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	e005      	b.n	800674c <_nx_dhcp_client_send_with_zero_source_address+0x15c>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
        /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f043 0210 	orr.w	r2, r3, #16
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800674c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006752:	f04f 31ff 	mov.w	r1, #4294967295
 8006756:	4618      	mov	r0, r3
 8006758:	f00e f98a 	bl	8014a70 <_txe_mutex_get>

    /* Build the IP header.  */

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f1a3 0214 	sub.w	r2, r3, #20
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	f103 0214 	add.w	r2, r3, #20
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the IP header pointer.  */
    ip_header_ptr =  (NX_IPV4_HEADER *) packet_ptr -> nx_packet_prepend_ptr; 
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Build the first 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800677a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	b29b      	uxth	r3, r3
 8006784:	4313      	orrs	r3, r2
 8006786:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800678a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678c:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 800678e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006790:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006794:	1c59      	adds	r1, r3, #1
 8006796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006798:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 800679c:	041a      	lsls	r2, r3, #16
 800679e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	431a      	orrs	r2, r3
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 80067a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	f443 1288 	orr.w	r2, r3, #1114112	; 0x110000
 80067b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b4:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  ip_src_addr;
 80067b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ba:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  ip_dest_addr;
 80067bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c0:	611a      	str	r2, [r3, #16]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	ba1a      	rev	r2, r3
 80067c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ca:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	ba1a      	rev	r2, r3
 80067d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d4:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 80067d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	ba1a      	rev	r2, r3
 80067dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067de:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 80067e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	ba1a      	rev	r2, r3
 80067e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e8:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	ba1a      	rev	r2, r3
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	611a      	str	r2, [r3, #16]
     
#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_IP_TX_CHECKSUM */
    compute_checksum = 1;
 80067f4:	2301      	movs	r3, #1
 80067f6:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_DISABLE_IP_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <_nx_dhcp_client_send_with_zero_source_address+0x21c>
        compute_checksum = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	657b      	str	r3, [r7, #84]	; 0x54
 800680a:	e001      	b.n	8006810 <_nx_dhcp_client_send_with_zero_source_address+0x220>
    else
        compute_checksum = 1;
 800680c:	2301      	movs	r3, #1
 800680e:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8006810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006812:	2b00      	cmp	r3, #0
 8006814:	d019      	beq.n	800684a <_nx_dhcp_client_send_with_zero_source_address+0x25a>
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4, 20, NULL, NULL);
 8006816:	2300      	movs	r3, #0
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	2214      	movs	r2, #20
 800681e:	2104      	movs	r1, #4
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 fdad 	bl	8009380 <_nx_ip_checksum_compute>
 8006826:	4603      	mov	r3, r0
 8006828:	653b      	str	r3, [r7, #80]	; 0x50

        val = (ULONG)(~checksum);
 800682a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800682c:	43db      	mvns	r3, r3
 800682e:	63bb      	str	r3, [r7, #56]	; 0x38
        val = val & NX_LOWER_16_MASK;
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	b29b      	uxth	r3, r3
 8006834:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	ba1b      	rev	r3, r3
 800683a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	431a      	orrs	r2, r3
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	609a      	str	r2, [r3, #8]
 8006848:	e005      	b.n	8006856 <_nx_dhcp_client_send_with_zero_source_address+0x266>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }
#endif /* NX_ENABLE_IP_PACKET_FILTER */

    /* Build the driver request.  */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8006856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_packet =                packet_ptr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_ip_interface;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8006864:	2304      	movs	r3, #4
 8006866:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8006868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800686c:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800686e:	f04f 33ff 	mov.w	r3, #4294967295
 8006872:	61fb      	str	r3, [r7, #28]

    /* Determine if fragmentation is needed.  */
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	429a      	cmp	r2, r3
 8006880:	d925      	bls.n	80068ce <_nx_dhcp_client_send_with_zero_source_address+0x2de>
    {

#ifndef NX_DISABLE_FRAGMENTATION
        /* Check the DF bit flag.  */
        if ((ip_ptr -> nx_ip_fragment_processing) && (socket_ptr -> nx_udp_socket_fragment_enable != NX_DONT_FRAGMENT))
 8006882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006884:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006888:	2b00      	cmp	r3, #0
 800688a:	d013      	beq.n	80068b4 <_nx_dhcp_client_send_with_zero_source_address+0x2c4>
 800688c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006894:	d00e      	beq.n	80068b4 <_nx_dhcp_client_send_with_zero_source_address+0x2c4>
        {

            /* Fragmentation is needed, call the IP fragment processing routine.  */
            (ip_ptr -> nx_ip_fragment_processing) (&driver_request);
 8006896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006898:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800689c:	f107 0210 	add.w	r2, r7, #16
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80068aa:	4618      	mov	r0, r3
 80068ac:	f00e f93a 	bl	8014b24 <_txe_mutex_put>

            /* Return a successful status.  */
            return(NX_SUCCESS);
 80068b0:	2300      	movs	r3, #0
 80068b2:	e028      	b.n	8006906 <_nx_dhcp_client_send_with_zero_source_address+0x316>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80068b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80068c4:	4618      	mov	r0, r3
 80068c6:	f00e f92d 	bl	8014b24 <_txe_mutex_put>

            /* Return a not successful status.  */
            return(NX_NOT_SUCCESSFUL);
 80068ca:	2343      	movs	r3, #67	; 0x43
 80068cc:	e01b      	b.n	8006906 <_nx_dhcp_client_send_with_zero_source_address+0x316>
    }

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP packet sent count.  */
    ip_ptr -> nx_ip_total_packets_sent++;
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d6:	615a      	str	r2, [r3, #20]

    /* Increment the IP bytes sent count.  */
    ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - 20;
 80068d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068da:	699a      	ldr	r2, [r3, #24]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	4413      	add	r3, r2
 80068e2:	f1a3 0214 	sub.w	r2, r3, #20
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	619a      	str	r2, [r3, #24]
#endif

    /* Broadcast packet.  */
    (packet_ptr -> nx_packet_ip_interface -> nx_interface_link_driver_entry) (&driver_request);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f0:	f107 0210 	add.w	r2, r7, #16
 80068f4:	4610      	mov	r0, r2
 80068f6:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80068fe:	4618      	mov	r0, r3
 8006900:	f00e f910 	bl	8014b24 <_txe_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3758      	adds	r7, #88	; 0x58
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <_nx_dhcp_extract_information>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b086      	sub	sp, #24
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	603b      	str	r3, [r7, #0]

ULONG       value;


    /* Extract the IP address.  */
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3310      	adds	r3, #16
 8006920:	2104      	movs	r1, #4
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fa68 	bl	8006df8 <_nx_dhcp_get_data>
 8006928:	4603      	mov	r3, r0
 800692a:	617b      	str	r3, [r7, #20]

    /* Determine if it is valid.  */
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d01c      	beq.n	800696c <_nx_dhcp_extract_information+0x5e>
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006932:	697b      	ldr	r3, [r7, #20]
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006934:	2b00      	cmp	r3, #0
 8006936:	da0b      	bge.n	8006950 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 800693e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006942:	d005      	beq.n	8006950 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 800694a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800694e:	d10d      	bne.n	800696c <_nx_dhcp_extract_information+0x5e>
    {

        /* Store the IP address.  */
        interface_record -> nx_dhcp_ip_address =  value;
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	60da      	str	r2, [r3, #12]
        return(NX_DHCP_BAD_IP_ADDRESS);
    }
                       
    /* Determine if there is a subnet mask. Note a DHCP Server receiving a BOOTP request
       may send DHCP option data for subnet masks as per RFC 1534 Section 2.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_SUBNET_MASK, &value, length) == NX_SUCCESS)
 8006956:	f107 0214 	add.w	r2, r7, #20
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2101      	movs	r1, #1
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8f5 	bl	8006b4e <_nx_dhcp_get_option_value>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <_nx_dhcp_extract_information+0x62>
 800696a:	e012      	b.n	8006992 <_nx_dhcp_extract_information+0x84>
        return(NX_DHCP_BAD_IP_ADDRESS);
 800696c:	2392      	movs	r3, #146	; 0x92
 800696e:	e0ea      	b.n	8006b46 <_nx_dhcp_extract_information+0x238>
    {

        /* Make sure there is a valid IP address too.  */
        if (value != NX_BOOTP_NO_ADDRESS)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <_nx_dhcp_extract_information+0x70>
        {

            interface_record -> nx_dhcp_network_mask =  value;
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	619a      	str	r2, [r3, #24]
 800697c:	e009      	b.n	8006992 <_nx_dhcp_extract_information+0x84>
        {
            ULONG ip_address;

            /* No valid network mask info supplied; use the current network mask if any. Don't
               care about current IP address for now. */
            nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, 
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6898      	ldr	r0, [r3, #8]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	69d9      	ldr	r1, [r3, #28]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	3318      	adds	r3, #24
 800698a:	f107 0210 	add.w	r2, r7, #16
 800698e:	f003 fc41 	bl	800a214 <_nx_ip_interface_address_get>
#else  

    /* NX_DHCP_ENABLE_BOOTP  not defined */

    /* Overwrite the server ID if there is a DHCP option for Server ID */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_SERVER, &value, length) == NX_SUCCESS)
 8006992:	f107 0214 	add.w	r2, r7, #20
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2136      	movs	r1, #54	; 0x36
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8d7 	bl	8006b4e <_nx_dhcp_get_option_value>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d117      	bne.n	80069d6 <_nx_dhcp_extract_information+0xc8>
    {

        /* Determine if it is valid.  */
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d012      	beq.n	80069d2 <_nx_dhcp_extract_information+0xc4>
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80069ac:	697b      	ldr	r3, [r7, #20]
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da0b      	bge.n	80069ca <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80069b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069bc:	d005      	beq.n	80069ca <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80069c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80069c8:	d103      	bne.n	80069d2 <_nx_dhcp_extract_information+0xc4>
        {

            /* Store the server IP address.  */
            interface_record -> nx_dhcp_server_ip = value;
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	615a      	str	r2, [r3, #20]
 80069d0:	e001      	b.n	80069d6 <_nx_dhcp_extract_information+0xc8>
        }
        else
        {
            return(NX_DHCP_BAD_IP_ADDRESS);
 80069d2:	2392      	movs	r3, #146	; 0x92
 80069d4:	e0b7      	b.n	8006b46 <_nx_dhcp_extract_information+0x238>
        }
    }

    /* Get the lease time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_LEASE, &value, length) == NX_SUCCESS)
 80069d6:	f107 0214 	add.w	r2, r7, #20
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2133      	movs	r1, #51	; 0x33
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f8b5 	bl	8006b4e <_nx_dhcp_get_option_value>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d120      	bne.n	8006a2c <_nx_dhcp_extract_information+0x11e>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d109      	bne.n	8006a06 <_nx_dhcp_extract_information+0xf8>
        {
            /* Store the 'infinite' lease time . */
            interface_record -> nx_dhcp_lease_time = value;
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	62da      	str	r2, [r3, #44]	; 0x2c
            interface_record -> nx_dhcp_renewal_time = value;
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time = value;
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	635a      	str	r2, [r3, #52]	; 0x34
 8006a04:	e012      	b.n	8006a2c <_nx_dhcp_extract_information+0x11e>
        }
        else
        {            

            /* Store the lease time in timer ticks.  */
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2264      	movs	r2, #100	; 0x64
 8006a0a:	fb02 f203 	mul.w	r2, r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	62da      	str	r2, [r3, #44]	; 0x2c
    
            /* Set the renew and rebind times.  */
            interface_record -> nx_dhcp_renewal_time = interface_record -> nx_dhcp_lease_time / 2;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	085a      	lsrs	r2, r3, #1
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time =  interface_record -> nx_dhcp_lease_time - (interface_record -> nx_dhcp_lease_time / 8);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	08db      	lsrs	r3, r3, #3
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }
 
    /* Overwrite the renew and rebind times with the specified values if the options are present.  */
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8006a2c:	f107 0214 	add.w	r2, r7, #20
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	213a      	movs	r1, #58	; 0x3a
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f88a 	bl	8006b4e <_nx_dhcp_get_option_value>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d112      	bne.n	8006a66 <_nx_dhcp_extract_information+0x158>
        (value <= interface_record -> nx_dhcp_lease_time))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	697b      	ldr	r3, [r7, #20]
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d30d      	bcc.n	8006a66 <_nx_dhcp_extract_information+0x158>
    {       

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d103      	bne.n	8006a5a <_nx_dhcp_extract_information+0x14c>
        {
            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_renewal_time = value;
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
 8006a58:	e005      	b.n	8006a66 <_nx_dhcp_extract_information+0x158>
        }
        else
        {

            /* Store the renewal time in timer ticks  */
            interface_record -> nx_dhcp_renewal_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2264      	movs	r2, #100	; 0x64
 8006a5e:	fb02 f203 	mul.w	r2, r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
  
    /* Determine if there is a rebind time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_REBIND, &value, length) == NX_SUCCESS)
 8006a66:	f107 0214 	add.w	r2, r7, #20
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	213b      	movs	r1, #59	; 0x3b
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f86d 	bl	8006b4e <_nx_dhcp_get_option_value>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d119      	bne.n	8006aae <_nx_dhcp_extract_information+0x1a0>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a80:	d103      	bne.n	8006a8a <_nx_dhcp_extract_information+0x17c>
        {

            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_rebind_time = value;
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	635a      	str	r2, [r3, #52]	; 0x34
 8006a88:	e011      	b.n	8006aae <_nx_dhcp_extract_information+0x1a0>
        }
        else
        {

            /* Convert to timer ticks. */
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2264      	movs	r2, #100	; 0x64
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	617b      	str	r3, [r7, #20]

            /* Sanity check*/
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d307      	bcc.n	8006aae <_nx_dhcp_extract_information+0x1a0>
                (value >= interface_record -> nx_dhcp_renewal_time))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa2:	697b      	ldr	r3, [r7, #20]
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d802      	bhi.n	8006aae <_nx_dhcp_extract_information+0x1a0>
            {
        
                /* Store the rebind time.  */
                interface_record -> nx_dhcp_rebind_time =  value;
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	635a      	str	r2, [r3, #52]	; 0x34
            }
        }
    }

    /* Determine if this is an ACK from a server response, which can only happen from a handful of states.  */
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d007      	beq.n	8006ac6 <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8006aba:	2b06      	cmp	r3, #6
 8006abc:	d003      	beq.n	8006ac6 <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	785b      	ldrb	r3, [r3, #1]
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8006ac2:	2b07      	cmp	r3, #7
 8006ac4:	d121      	bne.n	8006b0a <_nx_dhcp_extract_information+0x1fc>
    {

        /* Determine if the IP gateway/router IP address is present.  */
        if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_GATEWAYS, &value, length) == NX_SUCCESS)
 8006ac6:	f107 0214 	add.w	r2, r7, #20
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2103      	movs	r1, #3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f83d 	bl	8006b4e <_nx_dhcp_get_option_value>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d117      	bne.n	8006b0a <_nx_dhcp_extract_information+0x1fc>
        {

            /* Determine if it is valid.  */
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d012      	beq.n	8006b06 <_nx_dhcp_extract_information+0x1f8>
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006ae0:	697b      	ldr	r3, [r7, #20]
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	da0b      	bge.n	8006afe <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af0:	d005      	beq.n	8006afe <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006af8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006afc:	d103      	bne.n	8006b06 <_nx_dhcp_extract_information+0x1f8>
            {

                /* Store the gateway/Router IP address to the Client record.  */
                interface_record -> nx_dhcp_gateway_address = value;
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	611a      	str	r2, [r3, #16]
 8006b04:	e001      	b.n	8006b0a <_nx_dhcp_extract_information+0x1fc>
            }
            else
            {
                return(NX_DHCP_BAD_IP_ADDRESS);
 8006b06:	2392      	movs	r3, #146	; 0x92
 8006b08:	e01d      	b.n	8006b46 <_nx_dhcp_extract_information+0x238>
            }
        }
    }

     /* Check the DHCP options size.  */
     if ((length - NX_BOOTP_OFFSET_OPTIONS) > NX_DHCP_OPTIONS_BUFFER_SIZE)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	3bf0      	subs	r3, #240	; 0xf0
 8006b0e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8006b12:	d905      	bls.n	8006b20 <_nx_dhcp_extract_information+0x212>
         interface_record -> nx_dhcp_options_size = NX_DHCP_OPTIONS_BUFFER_SIZE;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006b1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8006b1e:	e005      	b.n	8006b2c <_nx_dhcp_extract_information+0x21e>
     else
         interface_record -> nx_dhcp_options_size = length - NX_BOOTP_OFFSET_OPTIONS;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f1a3 02f0 	sub.w	r2, r3, #240	; 0xf0
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

     /* Copy the DHCP options into DHCP Client options buffer.  */
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f103 0048 	add.w	r0, r3, #72	; 0x48
            &dhcp_message[NX_BOOTP_OFFSET_OPTIONS], interface_record -> nx_dhcp_options_size);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f00e fdae 	bl	80156a0 <memcpy>

#endif  /* NX_DHCP_ENABLE_BOOTP */

    return (NX_SUCCESS);
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <_nx_dhcp_get_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_get_option_value(UCHAR *bootp_message, UINT option, ULONG *value, UINT length)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b088      	sub	sp, #32
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
 8006b5a:	603b      	str	r3, [r7, #0]
UCHAR *option_message;
UINT   option_length;


    /* Setup buffer pointer.  */
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	33f0      	adds	r3, #240	; 0xf0
 8006b60:	61fb      	str	r3, [r7, #28]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	3bf0      	subs	r3, #240	; 0xf0
 8006b66:	61bb      	str	r3, [r7, #24]

    /* Find the option.  */
    if ((option != NX_DHCP_OPTION_PAD) && (option != NX_DHCP_OPTION_END))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d02c      	beq.n	8006bc8 <_nx_dhcp_get_option_value+0x7a>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2bff      	cmp	r3, #255	; 0xff
 8006b72:	d029      	beq.n	8006bc8 <_nx_dhcp_get_option_value+0x7a>
    {

        /* Search the buffer for the option.  */
        data =  _nx_dhcp_search_buffer(option_message, option, option_length);
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	69f8      	ldr	r0, [r7, #28]
 8006b7a:	f000 f8f5 	bl	8006d68 <_nx_dhcp_search_buffer>
 8006b7e:	6178      	str	r0, [r7, #20]

        /* Check to see if the option was found.  */
        if (data != NX_NULL)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d020      	beq.n	8006bc8 <_nx_dhcp_get_option_value+0x7a>
        {

            /* Check for the proper size.  */
            if (*data > 4)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d90f      	bls.n	8006bae <_nx_dhcp_get_option_value+0x60>
            {

                /* Check for the gateway option.  */
                if (option == NX_DHCP_OPTION_GATEWAYS)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d10a      	bne.n	8006baa <_nx_dhcp_get_option_value+0x5c>
                {

                    /* Pickup the first gateway address.  */
                    *value =  _nx_dhcp_get_data(data + 1, 4);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	3301      	adds	r3, #1
 8006b98:	2104      	movs	r1, #4
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 f92c 	bl	8006df8 <_nx_dhcp_get_data>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	601a      	str	r2, [r3, #0]

                    /* For now, just disregard any additional gateway addresses.  */
                    return(NX_SUCCESS);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e00f      	b.n	8006bca <_nx_dhcp_get_option_value+0x7c>
                }
                else
                {

                    /* Invalid size, return error.  */
                    return(NX_SIZE_ERROR);
 8006baa:	2309      	movs	r3, #9
 8006bac:	e00d      	b.n	8006bca <_nx_dhcp_get_option_value+0x7c>
            }
            else
            {

                /* Get the actual value.  */
                *value = _nx_dhcp_get_data(data + 1, *data);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f000 f91d 	bl	8006df8 <_nx_dhcp_get_data>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
                return(NX_SUCCESS);  
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e000      	b.n	8006bca <_nx_dhcp_get_option_value+0x7c>
            }
        }
    }

    /* Return an error if not found.  */
    return(NX_OPTION_ERROR);
 8006bc8:	230a      	movs	r3, #10
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_nx_dhcp_add_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_add_option_value(UCHAR *bootp_message, UINT option, UINT size, ULONG value, UINT *index)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
 8006bde:	603b      	str	r3, [r7, #0]


    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_store_data(bootp_message + (*index), size, value);
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 f907 	bl	8006e30 <_nx_dhcp_store_data>
    (*index) += size;    
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	441a      	add	r2, r3
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <_nx_dhcp_add_option_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_string(UCHAR *bootp_message, UINT option, UINT size, UCHAR *value, UINT *index)
{                                              
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f90c 	bl	8006ea0 <_nx_dhcp_move_string>
    (*index) += size;    
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	441a      	add	r2, r3
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <_nx_dhcp_add_randomize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_add_randomize(ULONG timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
ULONG adjustment;

    /* Uniform random number chosen from the range -1 to +1 second as recommended by RFC2131, Section4.1, Page24. */

    /* Calculate random time adjustment in timer ticks from the range 0 to NX_IP_PERIODIC_RATE * 2.  */
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8006ca8:	f00e fdb8 	bl	801581c <rand>
 8006cac:	4603      	mov	r3, r0
 8006cae:	4a12      	ldr	r2, [pc, #72]	; (8006cf8 <_nx_dhcp_add_randomize+0x58>)
 8006cb0:	fba2 1203 	umull	r1, r2, r2, r3
 8006cb4:	0852      	lsrs	r2, r2, #1
 8006cb6:	21c9      	movs	r1, #201	; 0xc9
 8006cb8:	fb01 f202 	mul.w	r2, r1, r2
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]

    /* Check for adjustment.  */
    if (adjustment < NX_IP_PERIODIC_RATE)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b63      	cmp	r3, #99	; 0x63
 8006cc4:	d80e      	bhi.n	8006ce4 <_nx_dhcp_add_randomize+0x44>
    {

        /* Updated timeout, minus NX_IP_PERIODIC_RATE - adjustment.  */

        /* Check for timeout.  */
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d905      	bls.n	8006cde <_nx_dhcp_add_randomize+0x3e>
            timeout -= (ULONG)(NX_IP_PERIODIC_RATE - adjustment);
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3b64      	subs	r3, #100	; 0x64
 8006cda:	607b      	str	r3, [r7, #4]
 8006cdc:	e007      	b.n	8006cee <_nx_dhcp_add_randomize+0x4e>
        else
            timeout = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	e004      	b.n	8006cee <_nx_dhcp_add_randomize+0x4e>
    }
    else
    {

        /* Updated timeout, add adjustment- NX_IP_PERIODIC_RATE.  */
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	3b64      	subs	r3, #100	; 0x64
 8006cec:	607b      	str	r3, [r7, #4]
    }

    return timeout;
 8006cee:	687b      	ldr	r3, [r7, #4]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	028c1979 	.word	0x028c1979

08006cfc <_nx_dhcp_update_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_timeout(ULONG timeout)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]

    /* Timed out, double the timeout, limited to NX_DHCP_MAX_RETRANS_TIMEOUT */
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8006d0c:	d303      	bcc.n	8006d16 <_nx_dhcp_update_timeout+0x1a>
    {

        /* Set the timeout as NX_DHCP_MAX_RETRANS_TIMEOUT.  */
        timeout = NX_DHCP_MAX_RETRANS_TIMEOUT;  
 8006d0e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006d12:	607b      	str	r3, [r7, #4]
 8006d14:	e002      	b.n	8006d1c <_nx_dhcp_update_timeout+0x20>
    }
    else
    {

        /* Double timeout value.  */
        timeout = timeout * 2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	607b      	str	r3, [r7, #4]
    }

    /* Return the sequence timeout.  */
    return(timeout);
 8006d1c:	687b      	ldr	r3, [r7, #4]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <_nx_dhcp_update_renewal_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_renewal_timeout(ULONG timeout)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]

    /* check if the timeout is non zero */
    if (timeout != 0)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d010      	beq.n	8006d5a <_nx_dhcp_update_renewal_timeout+0x30>
    {

        /* Timed out, halve the timeout, limited to NX_DHCP_MIN_RENEW_TIMEOUT or
          the remaining timeout if it is less than NX_DHCP_MIN_RENEW_TIMEOUT */
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f241 7270 	movw	r2, #6000	; 0x1770
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d90b      	bls.n	8006d5a <_nx_dhcp_update_renewal_timeout+0x30>
        {

            /* Timeout can still decrease, either
               force it to the minimum or halve it */
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d903      	bls.n	8006d54 <_nx_dhcp_update_renewal_timeout+0x2a>
            {

                /* Halve timeout.  */
                timeout = timeout / 2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	e002      	b.n	8006d5a <_nx_dhcp_update_renewal_timeout+0x30>
            }
            else
            {

                /* set timeout to minimum.  */
                timeout =  NX_DHCP_MIN_RENEW_TIMEOUT ;
 8006d54:	f241 7370 	movw	r3, #6000	; 0x1770
 8006d58:	607b      	str	r3, [r7, #4]
            }
        }
    }

    /* Return the sequence timeout.  */
    return(timeout);
 8006d5a:	687b      	ldr	r3, [r7, #4]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <_nx_dhcp_search_buffer>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UCHAR  *_nx_dhcp_search_buffer(UCHAR *option_message, UINT option, UINT length)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	; 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
UCHAR   *data;
UINT    i;
UINT    size;

    /* Setup buffer pointer.  */
    data = option_message;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	61fb      	str	r3, [r7, #28]
    i = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]

    /* Search as long as there are valid options.   */
    while (i < length - 1)
 8006d7c:	e030      	b.n	8006de0 <_nx_dhcp_search_buffer+0x78>
    {

        /* Simply skip any padding */
        if (*data == NX_DHCP_OPTION_PAD)
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <_nx_dhcp_search_buffer+0x2c>
        {

            data++;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
            i++;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	e025      	b.n	8006de0 <_nx_dhcp_search_buffer+0x78>
        }

        /* On a match, return a pointer to the size.  */
        else if (*data == option)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10f      	bne.n	8006dc0 <_nx_dhcp_search_buffer+0x58>
        {

            size = *(data + 1);
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	3301      	adds	r3, #1
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	617b      	str	r3, [r7, #20]

            /* Check if the option data is in the packet.  */
            if ((i + size + 1) > length)
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	4413      	add	r3, r2
 8006dae:	3301      	adds	r3, #1
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d201      	bcs.n	8006dba <_nx_dhcp_search_buffer+0x52>
                return(NX_NULL);
 8006db6:	2300      	movs	r3, #0
 8006db8:	e018      	b.n	8006dec <_nx_dhcp_search_buffer+0x84>

            /* Return a pointer to the option size byte.  */
            return(data + 1);
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	e015      	b.n	8006dec <_nx_dhcp_search_buffer+0x84>

        /* Otherwise skip the option by adding the size to the pointer.  */
        else
        {

            size = *(++data);
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	617b      	str	r3, [r7, #20]

            /* skip the data plus the size byte */
            data += size + 1;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	61fb      	str	r3, [r7, #28]
            i += size + 1;
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	4413      	add	r3, r2
 8006ddc:	3301      	adds	r3, #1
 8006dde:	61bb      	str	r3, [r7, #24]
    while (i < length - 1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d3c9      	bcc.n	8006d7e <_nx_dhcp_search_buffer+0x16>
        }
    }

    /* Return NULL to indicate the option was not found.  */
    return(NX_NULL);
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3724      	adds	r7, #36	; 0x24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <_nx_dhcp_get_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG  _nx_dhcp_get_data(UCHAR *data, UINT size)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]

ULONG   value = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]

   
    /* Process the data retrieval request.  */
    while (size-- > 0)
 8006e06:	e007      	b.n	8006e18 <_nx_dhcp_get_data+0x20>
    {

        /* Build return value.  */
        value = (value << 8) | *data++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	021a      	lsls	r2, r3, #8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1c59      	adds	r1, r3, #1
 8006e10:	6079      	str	r1, [r7, #4]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
    while (size-- > 0)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	1e5a      	subs	r2, r3, #1
 8006e1c:	603a      	str	r2, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f2      	bne.n	8006e08 <_nx_dhcp_get_data+0x10>
    }

    /* Return value.  */
    return(value);
 8006e22:	68fb      	ldr	r3, [r7, #12]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <_nx_dhcp_store_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_store_data(UCHAR *data, UINT size, ULONG value)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]

    /* Make sure that data is left justified.  */
    switch (size)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d011      	beq.n	8006e66 <_nx_dhcp_store_data+0x36>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d812      	bhi.n	8006e6e <_nx_dhcp_store_data+0x3e>
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d003      	beq.n	8006e56 <_nx_dhcp_store_data+0x26>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d004      	beq.n	8006e5e <_nx_dhcp_store_data+0x2e>
      
            value <<= 8;
            break;

        default:
            break;
 8006e54:	e00b      	b.n	8006e6e <_nx_dhcp_store_data+0x3e>
            value <<= 24;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	061b      	lsls	r3, r3, #24
 8006e5a:	607b      	str	r3, [r7, #4]
            break;
 8006e5c:	e008      	b.n	8006e70 <_nx_dhcp_store_data+0x40>
            value <<= 16;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	607b      	str	r3, [r7, #4]
            break;
 8006e64:	e004      	b.n	8006e70 <_nx_dhcp_store_data+0x40>
            value <<= 8;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	021b      	lsls	r3, r3, #8
 8006e6a:	607b      	str	r3, [r7, #4]
            break;
 8006e6c:	e000      	b.n	8006e70 <_nx_dhcp_store_data+0x40>
            break;
 8006e6e:	bf00      	nop
    }

    /* Store the value.  */
    while (size-- > 0)
 8006e70:	e00a      	b.n	8006e88 <_nx_dhcp_store_data+0x58>
    {

        *data = (UCHAR) ((value >> 24) & 0xff);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0e1b      	lsrs	r3, r3, #24
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	701a      	strb	r2, [r3, #0]
        data++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
        value <<= 8;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	607b      	str	r3, [r7, #4]
    while (size-- > 0)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	1e5a      	subs	r2, r3, #1
 8006e8c:	60ba      	str	r2, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1ef      	bne.n	8006e72 <_nx_dhcp_store_data+0x42>
    }
}
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <_nx_dhcp_move_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_move_string(UCHAR *dest, UCHAR *source, UINT size)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]

    /* Loop to copy all bytes.  */
    while (size-- > 0)
 8006eac:	e007      	b.n	8006ebe <_nx_dhcp_move_string+0x1e>
    {
        
        /* Copy a byte.  */
        *dest++ = *source++;
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	1c53      	adds	r3, r2, #1
 8006eb2:	60bb      	str	r3, [r7, #8]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	1c59      	adds	r1, r3, #1
 8006eb8:	60f9      	str	r1, [r7, #12]
 8006eba:	7812      	ldrb	r2, [r2, #0]
 8006ebc:	701a      	strb	r2, [r3, #0]
    while (size-- > 0)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	1e5a      	subs	r2, r3, #1
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f2      	bne.n	8006eae <_nx_dhcp_move_string+0xe>
    }
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <_nx_dhcp_interface_record_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_dhcp_interface_record_find(NX_DHCP *dhcp_ptr, UINT iface_index, NX_DHCP_INTERFACE_RECORD **interface_record)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b087      	sub	sp, #28
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]

UINT i;

    /* Find which DHCP Client interface record is assigned the input interface. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	e02c      	b.n	8006f42 <_nx_dhcp_interface_record_find+0x6c>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006ef0:	fb01 f303 	mul.w	r3, r1, r3
 8006ef4:	441a      	add	r2, r3
 8006ef6:	f641 5388 	movw	r3, #7560	; 0x1d88
 8006efa:	4413      	add	r3, r2
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01b      	beq.n	8006f3a <_nx_dhcp_interface_record_find+0x64>
            continue;

        /* Check if the interface index matches.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	441a      	add	r2, r3
 8006f10:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8006f14:	4413      	add	r3, r2
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d10e      	bne.n	8006f3c <_nx_dhcp_interface_record_find+0x66>
        {

            /* Yes, we found the record.  */
            *interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8006f24:	fb02 f203 	mul.w	r2, r2, r3
 8006f28:	f641 5388 	movw	r3, #7560	; 0x1d88
 8006f2c:	4413      	add	r3, r2
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	441a      	add	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]

            /* Return.  */
            return (NX_SUCCESS);
 8006f36:	2300      	movs	r3, #0
 8006f38:	e007      	b.n	8006f4a <_nx_dhcp_interface_record_find+0x74>
            continue;
 8006f3a:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0cf      	beq.n	8006ee8 <_nx_dhcp_interface_record_find+0x12>
        }
    }

    /* No matching record found.  */
    return (NX_DHCP_INTERFACE_NOT_ENABLED);
 8006f48:	23a4      	movs	r3, #164	; 0xa4
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
	...

08006f58 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8006f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f62:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006f64:	4908      	ldr	r1, [pc, #32]	; (8006f88 <nx_eth_phy_init+0x30>)
 8006f66:	4809      	ldr	r0, [pc, #36]	; (8006f8c <nx_eth_phy_init+0x34>)
 8006f68:	f7fa f95d 	bl	8001226 <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8006f6c:	4807      	ldr	r0, [pc, #28]	; (8006f8c <nx_eth_phy_init+0x34>)
 8006f6e:	f7fa f98c 	bl	800128a <LAN8742_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	607b      	str	r3, [r7, #4]
    {
      LAN8742_StartAutoNego(&LAN8742);
    }
#endif

    return ret;
 8006f7c:	687b      	ldr	r3, [r7, #4]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	24000014 	.word	0x24000014
 8006f8c:	240020c8 	.word	0x240020c8

08006f90 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8006f96:	4804      	ldr	r0, [pc, #16]	; (8006fa8 <nx_eth_phy_get_link_state+0x18>)
 8006f98:	f7fa fa1f 	bl	80013da <LAN8742_GetLinkState>
 8006f9c:	6078      	str	r0, [r7, #4]

    return linkstate;
 8006f9e:	687b      	ldr	r3, [r7, #4]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	240020c8 	.word	0x240020c8

08006fac <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8006fb0:	4802      	ldr	r0, [pc, #8]	; (8006fbc <lan8742_io_init+0x10>)
 8006fb2:	f7fb fca9 	bl	8002908 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	24002174 	.word	0x24002174

08006fc0 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	68f9      	ldr	r1, [r7, #12]
 8006fe2:	4807      	ldr	r0, [pc, #28]	; (8007000 <lan8742_io_read_reg+0x30>)
 8006fe4:	f7fb f9e2 	bl	80023ac <HAL_ETH_ReadPHYRegister>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff2:	e000      	b.n	8006ff6 <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	24002174 	.word	0x24002174

08007004 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	68f9      	ldr	r1, [r7, #12]
 8007016:	4807      	ldr	r0, [pc, #28]	; (8007034 <lan8742_io_write_reg+0x30>)
 8007018:	f7fb fa1c 	bl	8002454 <HAL_ETH_WritePHYRegister>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8007022:	f04f 33ff 	mov.w	r3, #4294967295
 8007026:	e000      	b.n	800702a <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	24002174 	.word	0x24002174

08007038 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800703c:	f7fa faa4 	bl	8001588 <HAL_GetTick>
 8007040:	4603      	mov	r3, r0
}
 8007042:	4618      	mov	r0, r3
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b16      	cmp	r3, #22
 800705c:	d85c      	bhi.n	8007118 <nx_stm32_eth_driver+0xd0>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <nx_stm32_eth_driver+0x1c>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	080070e1 	.word	0x080070e1
 8007068:	080070c9 	.word	0x080070c9
 800706c:	080070d1 	.word	0x080070d1
 8007070:	080070d9 	.word	0x080070d9
 8007074:	080070e1 	.word	0x080070e1
 8007078:	080070e1 	.word	0x080070e1
 800707c:	080070e1 	.word	0x080070e1
 8007080:	080070e1 	.word	0x080070e1
 8007084:	080070e9 	.word	0x080070e9
 8007088:	080070f1 	.word	0x080070f1
 800708c:	080070f9 	.word	0x080070f9
 8007090:	08007119 	.word	0x08007119
 8007094:	08007119 	.word	0x08007119
 8007098:	08007119 	.word	0x08007119
 800709c:	08007119 	.word	0x08007119
 80070a0:	08007119 	.word	0x08007119
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007119 	.word	0x08007119
 80070ac:	08007101 	.word	0x08007101
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	08007119 	.word	0x08007119
 80070b8:	08007109 	.word	0x08007109
 80070bc:	08007111 	.word	0x08007111
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f835 	bl	8007130 <_nx_driver_interface_attach>
    break;
 80070c6:	e02e      	b.n	8007126 <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f849 	bl	8007160 <_nx_driver_initialize>
      break;
 80070ce:	e02a      	b.n	8007126 <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f8a7 	bl	8007224 <_nx_driver_enable>
      break;
 80070d6:	e026      	b.n	8007126 <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f8d5 	bl	8007288 <_nx_driver_disable>
      break;
 80070de:	e022      	b.n	8007126 <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f8fb 	bl	80072dc <_nx_driver_packet_send>
      break;
 80070e6:	e01e      	b.n	8007126 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f9b9 	bl	8007460 <_nx_driver_multicast_join>
      break;
 80070ee:	e01a      	b.n	8007126 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f9cb 	bl	800748c <_nx_driver_multicast_leave>
      break;
 80070f6:	e016      	b.n	8007126 <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f9dd 	bl	80074b8 <_nx_driver_get_status>
      break;
 80070fe:	e012      	b.n	8007126 <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa17 	bl	8007534 <_nx_driver_deferred_processing>

      break;
 8007106:	e00e      	b.n	8007126 <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9eb 	bl	80074e4 <_nx_driver_capability_get>
      break;
 800710e:	e00a      	b.n	8007126 <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f9f9 	bl	8007508 <_nx_driver_capability_set>
      break;
 8007116:	e006      	b.n	8007126 <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2244      	movs	r2, #68	; 0x44
 800711c:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	225a      	movs	r2, #90	; 0x5a
 8007122:	605a      	str	r2, [r3, #4]
  }
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop

08007130 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	4a07      	ldr	r2, [pc, #28]	; (800715c <_nx_driver_interface_attach+0x2c>)
 800713e:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007148:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	605a      	str	r2, [r3, #4]
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	240020e8 	.word	0x240020e8

08007160 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  NX_INTERFACE    *interface_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	617b      	str	r3, [r7, #20]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	613b      	str	r3, [r7, #16]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8007174:	4b29      	ldr	r3, [pc, #164]	; (800721c <_nx_driver_initialize+0xbc>)
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 800717a:	4b28      	ldr	r3, [pc, #160]	; (800721c <_nx_driver_initialize+0xbc>)
 800717c:	2201      	movs	r2, #1
 800717e:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007186:	4a25      	ldr	r2, [pc, #148]	; (800721c <_nx_driver_initialize+0xbc>)
 8007188:	6093      	str	r3, [r2, #8]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 800718a:	4b24      	ldr	r3, [pc, #144]	; (800721c <_nx_driver_initialize+0xbc>)
 800718c:	2200      	movs	r2, #0
 800718e:	611a      	str	r2, [r3, #16]
  nx_driver_information.nx_driver_transmit_queue_head =      NX_NULL;
  nx_driver_information.nx_driver_transmit_queue_tail =      NX_NULL;
#endif /* NX_DRIVER_INTERNAL_TRANSMIT_QUEUE */

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fa65 	bl	8007660 <_nx_driver_hardware_initialize>
 8007196:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d136      	bne.n	800720c <_nx_driver_initialize+0xac>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	4a1e      	ldr	r2, [pc, #120]	; (800721c <_nx_driver_initialize+0xbc>)
 80071a4:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 80071ae:	4b1c      	ldr	r3, [pc, #112]	; (8007220 <_nx_driver_initialize+0xc0>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	4a1a      	ldr	r2, [pc, #104]	; (8007220 <_nx_driver_initialize+0xc0>)
 80071b8:	6852      	ldr	r2, [r2, #4]
 80071ba:	3201      	adds	r2, #1
 80071bc:	7812      	ldrb	r2, [r2, #0]
 80071be:	4313      	orrs	r3, r2
 80071c0:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80071c6:	4b16      	ldr	r3, [pc, #88]	; (8007220 <_nx_driver_initialize+0xc0>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	3302      	adds	r3, #2
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	061a      	lsls	r2, r3, #24
 80071d0:	4b13      	ldr	r3, [pc, #76]	; (8007220 <_nx_driver_initialize+0xc0>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	3303      	adds	r3, #3
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 80071dc:	4b10      	ldr	r3, [pc, #64]	; (8007220 <_nx_driver_initialize+0xc0>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	3304      	adds	r3, #4
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80071e6:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 80071e8:	4a0d      	ldr	r2, [pc, #52]	; (8007220 <_nx_driver_initialize+0xc0>)
 80071ea:	6852      	ldr	r2, [r2, #4]
 80071ec:	3205      	adds	r2, #5
 80071ee:	7812      	ldrb	r2, [r2, #0]
 80071f0:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80071f2:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2201      	movs	r2, #1
 80071fc:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 80071fe:	4b07      	ldr	r3, [pc, #28]	; (800721c <_nx_driver_initialize+0xbc>)
 8007200:	2203      	movs	r2, #3
 8007202:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 800720a:	e002      	b.n	8007212 <_nx_driver_initialize+0xb2>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	225a      	movs	r2, #90	; 0x5a
 8007210:	605a      	str	r2, [r3, #4]
}
 8007212:	bf00      	nop
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	240020e8 	.word	0x240020e8
 8007220:	24002174 	.word	0x24002174

08007224 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	60fb      	str	r3, [r7, #12]

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8007232:	4b14      	ldr	r3, [pc, #80]	; (8007284 <_nx_driver_enable+0x60>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d803      	bhi.n	8007242 <_nx_driver_enable+0x1e>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	225a      	movs	r2, #90	; 0x5a
 800723e:	605a      	str	r2, [r3, #4]
    return;
 8007240:	e01c      	b.n	800727c <_nx_driver_enable+0x58>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8007242:	4b10      	ldr	r3, [pc, #64]	; (8007284 <_nx_driver_enable+0x60>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b03      	cmp	r3, #3
 8007248:	d903      	bls.n	8007252 <_nx_driver_enable+0x2e>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2215      	movs	r2, #21
 800724e:	605a      	str	r2, [r3, #4]
    return;
 8007250:	e014      	b.n	800727c <_nx_driver_enable+0x58>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fb7e 	bl	8007954 <_nx_driver_hardware_enable>
 8007258:	60b8      	str	r0, [r7, #8]

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <_nx_driver_enable+0x52>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8007260:	4b08      	ldr	r3, [pc, #32]	; (8007284 <_nx_driver_enable+0x60>)
 8007262:	2204      	movs	r2, #4
 8007264:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 8007274:	e002      	b.n	800727c <_nx_driver_enable+0x58>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	225a      	movs	r2, #90	; 0x5a
 800727a:	605a      	str	r2, [r3, #4]
  }
}
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	240020e8 	.word	0x240020e8

08007288 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8007296:	4b10      	ldr	r3, [pc, #64]	; (80072d8 <_nx_driver_disable+0x50>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b04      	cmp	r3, #4
 800729c:	d003      	beq.n	80072a6 <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	225a      	movs	r2, #90	; 0x5a
 80072a2:	605a      	str	r2, [r3, #4]
    return;
 80072a4:	e014      	b.n	80072d0 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fb62 	bl	8007970 <_nx_driver_hardware_disable>
 80072ac:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 80072bc:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <_nx_driver_disable+0x50>)
 80072be:	2203      	movs	r2, #3
 80072c0:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	605a      	str	r2, [r3, #4]
 80072c8:	e002      	b.n	80072d0 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	225a      	movs	r2, #90	; 0x5a
 80072ce:	605a      	str	r2, [r3, #4]
  }
}
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	240020e8 	.word	0x240020e8

080072dc <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 80072ea:	4b5c      	ldr	r3, [pc, #368]	; (800745c <_nx_driver_packet_send+0x180>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d008      	beq.n	8007304 <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	225a      	movs	r2, #90	; 0x5a
 80072f6:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3310      	adds	r3, #16
 80072fc:	4618      	mov	r0, r3
 80072fe:	f009 ff35 	bl	801116c <_nxe_packet_transmit_release>
    return;
 8007302:	e0a7      	b.n	8007454 <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 800730e:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007310:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 8007312:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	320e      	adds	r2, #14
 800731c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	3b02      	subs	r3, #2
 8007324:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3304      	adds	r3, #4
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	68d2      	ldr	r2, [r2, #12]
 8007336:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 800733e:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8007346:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	3308      	adds	r3, #8
 800734c:	430a      	orrs	r2, r1
 800734e:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f8d3 272c 	ldr.w	r2, [r3, #1836]	; 0x72c
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	330c      	adds	r3, #12
 800735a:	0412      	lsls	r2, r2, #16
 800735c:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b05      	cmp	r3, #5
 8007364:	d003      	beq.n	800736e <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 800736a:	2b06      	cmp	r3, #6
 800736c:	d10a      	bne.n	8007384 <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	330c      	adds	r3, #12
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f103 020c 	add.w	r2, r3, #12
 800737a:	f640 0306 	movw	r3, #2054	; 0x806
 800737e:	430b      	orrs	r3, r1
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e016      	b.n	80073b2 <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b07      	cmp	r3, #7
 800738a:	d10a      	bne.n	80073a2 <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	330c      	adds	r3, #12
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f103 020c 	add.w	r2, r3, #12
 8007398:	f248 0335 	movw	r3, #32821	; 0x8035
 800739c:	430b      	orrs	r3, r1
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	e007      	b.n	80073b2 <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	330c      	adds	r3, #12
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	330c      	adds	r3, #12
 80073ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b0:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	ba1a      	rev	r2, r3
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3304      	adds	r3, #4
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	3304      	adds	r3, #4
 80073c6:	ba12      	rev	r2, r2
 80073c8:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3308      	adds	r3, #8
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	3308      	adds	r3, #8
 80073d4:	ba12      	rev	r2, r2
 80073d6:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	330c      	adds	r3, #12
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	330c      	adds	r3, #12
 80073e2:	ba12      	rev	r2, r2
 80073e4:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d912      	bls.n	8007418 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	320e      	adds	r2, #14
 80073fa:	609a      	str	r2, [r3, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3a0e      	subs	r2, #14
 8007404:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	225a      	movs	r2, #90	; 0x5a
 800740a:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 800740c:	f107 0308 	add.w	r3, r7, #8
 8007410:	4618      	mov	r0, r3
 8007412:	f009 feab 	bl	801116c <_nxe_packet_transmit_release>
    return;
 8007416:	e01d      	b.n	8007454 <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fab6 	bl	800798c <_nx_driver_hardware_packet_send>
 8007420:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d012      	beq.n	800744e <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	320e      	adds	r2, #14
 8007430:	609a      	str	r2, [r3, #8]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	3a0e      	subs	r2, #14
 800743a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	225a      	movs	r2, #90	; 0x5a
 8007440:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8007442:	f107 0308 	add.w	r3, r7, #8
 8007446:	4618      	mov	r0, r3
 8007448:	f009 fe90 	bl	801116c <_nxe_packet_transmit_release>
 800744c:	e002      	b.n	8007454 <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	605a      	str	r2, [r3, #4]
  }
}
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	240020e8 	.word	0x240020e8

08007460 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb59 	bl	8007b20 <_nx_driver_hardware_multicast_join>
 800746e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	225a      	movs	r2, #90	; 0x5a
 800747a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 800747c:	e002      	b.n	8007484 <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	605a      	str	r2, [r3, #4]
}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fb5f 	bl	8007b58 <_nx_driver_hardware_multicast_leave>
 800749a:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	225a      	movs	r2, #90	; 0x5a
 80074a6:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80074a8:	e002      	b.n	80074b0 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	605a      	str	r2, [r3, #4]
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb69 	bl	8007b98 <_nx_driver_hardware_get_status>
 80074c6:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	225a      	movs	r2, #90	; 0x5a
 80074d2:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80074d4:	e002      	b.n	80074dc <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	605a      	str	r2, [r3, #4]
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80074f4:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	605a      	str	r2, [r3, #4]
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fc59 	bl	8007dc8 <_nx_driver_hardware_capability_set>
 8007516:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	225a      	movs	r2, #90	; 0x5a
 8007522:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8007524:	e002      	b.n	800752c <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	605a      	str	r2, [r3, #4]
}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800753c:	f3ef 8310 	mrs	r3, PRIMASK
 8007540:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 8007542:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8007544:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8007546:	b672      	cpsid	i
#endif
    return(int_posture);
 8007548:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 800754a:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <_nx_driver_deferred_processing+0x5c>)
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 8007552:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <_nx_driver_deferred_processing+0x5c>)
 8007554:	2200      	movs	r2, #0
 8007556:	611a      	str	r2, [r3, #16]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f383 8810 	msr	PRIMASK, r3
}
 8007562:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f003 0304 	and.w	r3, r3, #4
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      _nx_driver_hardware_packet_transmitted(&eth_handle);
 800756e:	4809      	ldr	r0, [pc, #36]	; (8007594 <_nx_driver_deferred_processing+0x60>)
 8007570:	f000 fb1e 	bl	8007bb0 <_nx_driver_hardware_packet_transmitted>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 800757e:	f000 fb75 	bl	8007c6c <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	605a      	str	r2, [r3, #4]
}
 8007588:	bf00      	nop
 800758a:	3720      	adds	r7, #32
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	240020e8 	.word	0x240020e8
 8007594:	24002174 	.word	0x24002174

08007598 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	4a2d      	ldr	r2, [pc, #180]	; (800765c <_nx_driver_transfer_to_netx+0xc4>)
 80075a6:	68d2      	ldr	r2, [r2, #12]
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	330c      	adds	r3, #12
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	330d      	adds	r3, #13
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80075c2:	4313      	orrs	r3, r2
 80075c4:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 80075c6:	89fb      	ldrh	r3, [r7, #14]
 80075c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075cc:	d004      	beq.n	80075d8 <_nx_driver_transfer_to_netx+0x40>
 80075ce:	89fb      	ldrh	r3, [r7, #14]
 80075d0:	f248 62dd 	movw	r2, #34525	; 0x86dd
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10f      	bne.n	80075f8 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	320e      	adds	r2, #14
 80075e0:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	3a0e      	subs	r2, #14
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f003 f867 	bl	800a6c4 <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 80075f6:	e02d      	b.n	8007654 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 80075f8:	89fb      	ldrh	r3, [r7, #14]
 80075fa:	f640 0206 	movw	r2, #2054	; 0x806
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10f      	bne.n	8007622 <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	320e      	adds	r2, #14
 800760a:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	3a0e      	subs	r2, #14
 8007614:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fdb3 	bl	8008186 <_nx_arp_packet_deferred_receive>
}
 8007620:	e018      	b.n	8007654 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	f248 0235 	movw	r2, #32821	; 0x8035
 8007628:	4293      	cmp	r3, r2
 800762a:	d10f      	bne.n	800764c <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	320e      	adds	r2, #14
 8007634:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	3a0e      	subs	r2, #14
 800763e:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f004 fd53 	bl	800c0f0 <_nx_rarp_packet_deferred_receive>
}
 800764a:	e003      	b.n	8007654 <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 800764c:	463b      	mov	r3, r7
 800764e:	4618      	mov	r0, r3
 8007650:	f009 fd54 	bl	80110fc <_nxe_packet_release>
}
 8007654:	bf00      	nop
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	240020e8 	.word	0x240020e8

08007660 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b0aa      	sub	sp, #168	; 0xa8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef  *DMARxDesc;
#else
  ETH_MACConfigTypeDef MACConf;
#endif
  INT PHYLinkState;
  UINT duplex, speed = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 8007674:	4bb1      	ldr	r3, [pc, #708]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 8007676:	2200      	movs	r2, #0
 8007678:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 800767a:	4bb0      	ldr	r3, [pc, #704]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 800767c:	2200      	movs	r2, #0
 800767e:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 8007680:	4bae      	ldr	r3, [pc, #696]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 8007682:	2200      	movs	r2, #0
 8007684:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 8007686:	4bad      	ldr	r3, [pc, #692]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 8007688:	2200      	movs	r2, #0
 800768a:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 800768c:	4bab      	ldr	r3, [pc, #684]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <_nx_driver_hardware_initialize+0x38>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 8007694:	235a      	movs	r3, #90	; 0x5a
 8007696:	e14d      	b.n	8007934 <_nx_driver_hardware_initialize+0x2d4>
  }

  nx_eth_init();
 8007698:	f7f9 f98c 	bl	80009b4 <MX_ETH_Init>

#ifndef STM32_ETH_HAL_LEGACY
  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800769c:	2301      	movs	r3, #1
 800769e:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80076a0:	2301      	movs	r3, #1
 80076a2:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	767b      	strb	r3, [r7, #25]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	763b      	strb	r3, [r7, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80076b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80076c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076c6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 80076ce:	f44f 7306 	mov.w	r3, #536	; 0x218
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 80076d4:	f107 030c 	add.w	r3, r7, #12
 80076d8:	4619      	mov	r1, r3
 80076da:	4899      	ldr	r0, [pc, #612]	; (8007940 <_nx_driver_hardware_initialize+0x2e0>)
 80076dc:	f7fb f8fb 	bl	80028d6 <HAL_ETH_SetDMAConfig>

  FilterConfig.PromiscuousMode = DISABLE;
 80076e0:	4b98      	ldr	r3, [pc, #608]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
  FilterConfig.HashUnicast = DISABLE;
 80076e6:	4b97      	ldr	r3, [pc, #604]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 80076ec:	4b95      	ldr	r3, [pc, #596]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 80076f2:	4b94      	ldr	r3, [pc, #592]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 80076f8:	4b92      	ldr	r3, [pc, #584]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 80076fe:	4b91      	ldr	r3, [pc, #580]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 8007700:	2201      	movs	r2, #1
 8007702:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 8007704:	4b8f      	ldr	r3, [pc, #572]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 8007706:	2200      	movs	r2, #0
 8007708:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 800770a:	4b8e      	ldr	r3, [pc, #568]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 800770c:	2200      	movs	r2, #0
 800770e:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 8007710:	4b8c      	ldr	r3, [pc, #560]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 8007712:	2200      	movs	r2, #0
 8007714:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 8007716:	4b8b      	ldr	r3, [pc, #556]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 8007718:	2200      	movs	r2, #0
 800771a:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 800771c:	4b89      	ldr	r3, [pc, #548]	; (8007944 <_nx_driver_hardware_initialize+0x2e4>)
 800771e:	2200      	movs	r2, #0
 8007720:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 8007722:	2234      	movs	r2, #52	; 0x34
 8007724:	2100      	movs	r1, #0
 8007726:	4888      	ldr	r0, [pc, #544]	; (8007948 <_nx_driver_hardware_initialize+0x2e8>)
 8007728:	f00d ffe2 	bl	80156f0 <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 800772c:	4b86      	ldr	r3, [pc, #536]	; (8007948 <_nx_driver_hardware_initialize+0x2e8>)
 800772e:	2201      	movs	r2, #1
 8007730:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 8007732:	4b85      	ldr	r3, [pc, #532]	; (8007948 <_nx_driver_hardware_initialize+0x2e8>)
 8007734:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007738:	611a      	str	r2, [r3, #16]
#endif

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 800773a:	f7ff fc0d 	bl	8006f58 <nx_eth_phy_init>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <_nx_driver_hardware_initialize+0xe8>
  {
    return(NX_DRIVER_ERROR);
 8007744:	235a      	movs	r3, #90	; 0x5a
 8007746:	e0f5      	b.n	8007934 <_nx_driver_hardware_initialize+0x2d4>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 8007748:	f7ff fc22 	bl	8006f90 <nx_eth_phy_get_link_state>
 800774c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8007750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007754:	2b01      	cmp	r3, #1
 8007756:	dc09      	bgt.n	800776c <_nx_driver_hardware_initialize+0x10c>
  {

    while((PHYLinkState = nx_eth_phy_get_link_state())<= ETH_PHY_STATUS_LINK_DOWN);
 8007758:	bf00      	nop
 800775a:	f7ff fc19 	bl	8006f90 <nx_eth_phy_get_link_state>
 800775e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 8007762:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007766:	2b01      	cmp	r3, #1
 8007768:	ddf7      	ble.n	800775a <_nx_driver_hardware_initialize+0xfa>
 800776a:	e04a      	b.n	8007802 <_nx_driver_hardware_initialize+0x1a2>
 800776c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007770:	3b02      	subs	r3, #2
 8007772:	2b03      	cmp	r3, #3
 8007774:	d82a      	bhi.n	80077cc <_nx_driver_hardware_initialize+0x16c>
 8007776:	a201      	add	r2, pc, #4	; (adr r2, 800777c <_nx_driver_hardware_initialize+0x11c>)
 8007778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777c:	0800778d 	.word	0x0800778d
 8007780:	0800779f 	.word	0x0800779f
 8007784:	080077af 	.word	0x080077af
 8007788:	080077bf 	.word	0x080077bf
  else
  {
    switch (PHYLinkState)
    {
    case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800778c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 8007794:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 800779c:	e01f      	b.n	80077de <_nx_driver_hardware_initialize+0x17e>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800779e:	2300      	movs	r3, #0
 80077a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 80077a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 80077ac:	e017      	b.n	80077de <_nx_driver_hardware_initialize+0x17e>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80077ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_10M;
 80077b6:	2300      	movs	r3, #0
 80077b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 80077bc:	e00f      	b.n	80077de <_nx_driver_hardware_initialize+0x17e>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80077be:	2300      	movs	r3, #0
 80077c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_10M;
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 80077ca:	e008      	b.n	80077de <_nx_driver_hardware_initialize+0x17e>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 80077cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 80077d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 80077dc:	bf00      	nop
    eth_handle.Init.Speed = speed;
    eth_handle.Init.DuplexMode = duplex;
    HAL_ETH_ConfigMAC(&eth_handle, NULL);
#else
    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 80077de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077e2:	4619      	mov	r1, r3
 80077e4:	4856      	ldr	r0, [pc, #344]	; (8007940 <_nx_driver_hardware_initialize+0x2e0>)
 80077e6:	f7fa fe89 	bl	80024fc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80077ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
    MACConf.Speed = speed;
 80077f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 80077f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077fa:	4619      	mov	r1, r3
 80077fc:	4850      	ldr	r0, [pc, #320]	; (8007940 <_nx_driver_hardware_initialize+0x2e0>)
 80077fe:	f7fb f851 	bl	80028a4 <HAL_ETH_SetMACConfig>
#endif
  }

  for(i = 0; i < NX_DRIVER_TX_DESCRIPTORS; i++)
 8007802:	2300      	movs	r3, #0
 8007804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007808:	e030      	b.n	800786c <_nx_driver_hardware_initialize+0x20c>
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            DMATxDesc -> Buffer2NextDescAddr = (ULONG) nx_driver_information.nx_driver_information_dma_tx_descriptors;
        }
        nx_driver_information.nx_driver_information_transmit_packets[i] = NX_NULL;
#else
    DMARxDscrTab[i].DESC0 = 0;
 800780a:	4950      	ldr	r1, [pc, #320]	; (800794c <_nx_driver_hardware_initialize+0x2ec>)
 800780c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007810:	4613      	mov	r3, r2
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	4413      	add	r3, r2
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	440b      	add	r3, r1
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
    DMARxDscrTab[i].DESC1 = 0;
 800781e:	494b      	ldr	r1, [pc, #300]	; (800794c <_nx_driver_hardware_initialize+0x2ec>)
 8007820:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007824:	4613      	mov	r3, r2
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4413      	add	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	440b      	add	r3, r1
 800782e:	3304      	adds	r3, #4
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
    DMATxDscrTab[i].DESC2 = (uint32_t)1<<31;
 8007834:	4946      	ldr	r1, [pc, #280]	; (8007950 <_nx_driver_hardware_initialize+0x2f0>)
 8007836:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800783a:	4613      	mov	r3, r2
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4413      	add	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	440b      	add	r3, r1
 8007844:	3308      	adds	r3, #8
 8007846:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800784a:	601a      	str	r2, [r3, #0]
    DMATxDscrTab[i].DESC3 = 0;
 800784c:	4940      	ldr	r1, [pc, #256]	; (8007950 <_nx_driver_hardware_initialize+0x2f0>)
 800784e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007852:	4613      	mov	r3, r2
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4413      	add	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	440b      	add	r3, r1
 800785c:	330c      	adds	r3, #12
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
  for(i = 0; i < NX_DRIVER_TX_DESCRIPTORS; i++)
 8007862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007866:	3301      	adds	r3, #1
 8007868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800786c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007870:	2b03      	cmp	r3, #3
 8007872:	d9ca      	bls.n	800780a <_nx_driver_hardware_initialize+0x1aa>

    /* Initialize RX Descriptors list: Ring Mode  */
    DMARxDesc = nx_driver_information.nx_driver_information_dma_rx_descriptors;
#endif

  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS; i++)
 8007874:	2300      	movs	r3, #0
 8007876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800787a:	e049      	b.n	8007910 <_nx_driver_hardware_initialize+0x2b0>
  {

    /* Allocate a packet for the receive buffers.  */
    if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 800787c:	4b2f      	ldr	r3, [pc, #188]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 800787e:	6898      	ldr	r0, [r3, #8]
 8007880:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8007884:	2300      	movs	r3, #0
 8007886:	2200      	movs	r2, #0
 8007888:	f009 fb28 	bl	8010edc <_nxe_packet_allocate>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d137      	bne.n	8007902 <_nx_driver_hardware_initialize+0x2a2>
                           NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
    {

      /* Adjust the packet.  */
      packet_ptr -> nx_packet_prepend_ptr += 2;
 8007892:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800789c:	3202      	adds	r2, #2
 800789e:	609a      	str	r2, [r3, #8]
#ifdef STM32_ETH_HAL_LEGACY
      DMARxDesc[i].Buffer1Addr = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
      DMARxDesc[i].ControlBufferSize = ETH_DMARXDESC_RCH | (packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#else
      DMARxDscrTab[i].DESC0 = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
 80078a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	4618      	mov	r0, r3
 80078a8:	4928      	ldr	r1, [pc, #160]	; (800794c <_nx_driver_hardware_initialize+0x2ec>)
 80078aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80078ae:	4613      	mov	r3, r2
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	4413      	add	r3, r2
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	440b      	add	r3, r1
 80078b8:	6018      	str	r0, [r3, #0]
      DMARxDscrTab[i].BackupAddr0 = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
 80078ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	4618      	mov	r0, r3
 80078c2:	4922      	ldr	r1, [pc, #136]	; (800794c <_nx_driver_hardware_initialize+0x2ec>)
 80078c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80078c8:	4613      	mov	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	440b      	add	r3, r1
 80078d2:	3310      	adds	r3, #16
 80078d4:	6018      	str	r0, [r3, #0]
#endif

      /* Remember the receive packet pointer.  */
      nx_driver_information.nx_driver_information_receive_packets[i] =  packet_ptr;
 80078d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078da:	4918      	ldr	r1, [pc, #96]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 80078dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078e0:	330c      	adds	r3, #12
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	605a      	str	r2, [r3, #4]

#ifdef STM32_ETH_HAL_LEGACY
      DMARxDesc[i].Status = ETH_DMARXDESC_OWN;
#else
      DMARxDscrTab[i].DESC3 = ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V|ETH_DMARXNDESCRF_IOC;
 80078e8:	4918      	ldr	r1, [pc, #96]	; (800794c <_nx_driver_hardware_initialize+0x2ec>)
 80078ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	440b      	add	r3, r1
 80078f8:	330c      	adds	r3, #12
 80078fa:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e001      	b.n	8007906 <_nx_driver_hardware_initialize+0x2a6>

    }
    else
    {
      /* Cannot allocate packets from the packet pool. */
      return(NX_DRIVER_ERROR);
 8007902:	235a      	movs	r3, #90	; 0x5a
 8007904:	e016      	b.n	8007934 <_nx_driver_hardware_initialize+0x2d4>
  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS; i++)
 8007906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800790a:	3301      	adds	r3, #1
 800790c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007910:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007914:	2b03      	cmp	r3, #3
 8007916:	d9b1      	bls.n	800787c <_nx_driver_hardware_initialize+0x21c>
#endif

  }

  /* Save the size of one rx buffer.  */
  nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start;
 8007918:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800791c:	695a      	ldr	r2, [r3, #20]
 800791e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	461a      	mov	r2, r3
 8007928:	4b04      	ldr	r3, [pc, #16]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 800792a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 800792c:	4b03      	ldr	r3, [pc, #12]	; (800793c <_nx_driver_hardware_initialize+0x2dc>)
 800792e:	2200      	movs	r2, #0
 8007930:	649a      	str	r2, [r3, #72]	; 0x48
  /* Set Receive Descriptor List Address Register */
  ETH -> DMARDLAR = (ULONG) nx_driver_information.nx_driver_information_dma_rx_descriptors;
#endif

  /* Return success!  */
  return(NX_SUCCESS);
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	37a8      	adds	r7, #168	; 0xa8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	240020e8 	.word	0x240020e8
 8007940:	24002174 	.word	0x24002174
 8007944:	240022bc 	.word	0x240022bc
 8007948:	24002288 	.word	0x24002288
 800794c:	30000000 	.word	0x30000000
 8007950:	30000060 	.word	0x30000060

08007954 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Call STM32 library to start Ethernet operation.  */
#ifdef STM32_ETH_HAL_LEGACY
  HAL_ETH_Start(&eth_handle);
  __HAL_ETH_DMA_ENABLE_IT((&eth_handle), ETH_DMA_IT_NIS | ETH_DMA_IT_R | ETH_DMA_IT_T);
#else
  HAL_ETH_Start_IT(&eth_handle);
 800795c:	4803      	ldr	r0, [pc, #12]	; (800796c <_nx_driver_hardware_enable+0x18>)
 800795e:	f7fa f8b6 	bl	8001ace <HAL_ETH_Start_IT>
#endif

  /* Return success!  */
  return(NX_SUCCESS);
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	24002174 	.word	0x24002174

08007970 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 8007978:	4803      	ldr	r0, [pc, #12]	; (8007988 <_nx_driver_hardware_disable+0x18>)
 800797a:	f7fa f92c 	bl	8001bd6 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	24002174 	.word	0x24002174

0800798c <_nx_driver_hardware_packet_send>:
}

#else

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b096      	sub	sp, #88	; 0x58
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	653b      	str	r3, [r7, #80]	; 0x50

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007998:	f107 030c 	add.w	r3, r7, #12
 800799c:	2230      	movs	r2, #48	; 0x30
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f00d fea5 	bl	80156f0 <memset>


  int i = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	64fb      	str	r3, [r7, #76]	; 0x4c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	657b      	str	r3, [r7, #84]	; 0x54
 80079ae:	e07f      	b.n	8007ab0 <_nx_driver_hardware_packet_send+0x124>
  {
    if (i >= ETH_TX_DESC_CNT)
 80079b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	dd01      	ble.n	80079ba <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 80079b6:	235a      	movs	r3, #90	; 0x5a
 80079b8:	e0a7      	b.n	8007b0a <_nx_driver_hardware_packet_send+0x17e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 80079ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079bc:	6899      	ldr	r1, [r3, #8]
 80079be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079c0:	4613      	mov	r3, r2
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80079cc:	4413      	add	r3, r2
 80079ce:	3b4c      	subs	r3, #76	; 0x4c
 80079d0:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 80079d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079e0:	4613      	mov	r3, r2
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80079ec:	4413      	add	r3, r2
 80079ee:	3b48      	subs	r3, #72	; 0x48
 80079f0:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 80079f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a00:	4413      	add	r3, r2
 8007a02:	653b      	str	r3, [r7, #80]	; 0x50

    if(i>0)
 8007a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dd12      	ble.n	8007a30 <_nx_driver_hardware_packet_send+0xa4>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0c:	1e5a      	subs	r2, r3, #1
 8007a0e:	f107 000c 	add.w	r0, r7, #12
 8007a12:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a14:	460b      	mov	r3, r1
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	440b      	add	r3, r1
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	18c1      	adds	r1, r0, r3
 8007a1e:	4613      	mov	r3, r2
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3b44      	subs	r3, #68	; 0x44
 8007a2e:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 8007a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <_nx_driver_hardware_packet_send+0xc2>
    {
      Txbuffer[i].next = NULL;
 8007a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007a46:	4413      	add	r3, r2
 8007a48:	3b44      	subs	r3, #68	; 0x44
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a50:	3301      	adds	r3, #1
 8007a52:	64fb      	str	r3, [r7, #76]	; 0x4c
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
 8007a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5a:	6959      	ldr	r1, [r3, #20]
 8007a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	1acb      	subs	r3, r1, r3
 8007a62:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a64:	647b      	str	r3, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 8007a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	dd1d      	ble.n	8007aa8 <_nx_driver_hardware_packet_send+0x11c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6e:	f003 021f 	and.w	r2, r3, #31
 8007a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a74:	4413      	add	r3, r2
 8007a76:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8007a7c:	f3bf 8f4f 	dsb	sy
}
 8007a80:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007a82:	4a24      	ldr	r2, [pc, #144]	; (8007b14 <_nx_driver_hardware_packet_send+0x188>)
 8007a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a86:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8c:	3320      	adds	r3, #32
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a92:	3b20      	subs	r3, #32
 8007a94:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8007a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dcf2      	bgt.n	8007a82 <_nx_driver_hardware_packet_send+0xf6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007a9c:	f3bf 8f4f 	dsb	sy
}
 8007aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007aa2:	f3bf 8f6f 	isb	sy
}
 8007aa6:	bf00      	nop
}
 8007aa8:	bf00      	nop
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8007aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	657b      	str	r3, [r7, #84]	; 0x54
 8007ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f47f af7c 	bne.w	80079b0 <_nx_driver_hardware_packet_send+0x24>
#endif
  }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	f403 7315 	and.w	r3, r3, #596	; 0x254
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <_nx_driver_hardware_packet_send+0x142>
                                                           NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                               NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
  {
    TxPacketCfg.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007ac4:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <_nx_driver_hardware_packet_send+0x18c>)
 8007ac6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007aca:	615a      	str	r2, [r3, #20]
 8007acc:	e009      	b.n	8007ae2 <_nx_driver_hardware_packet_send+0x156>
  }
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <_nx_driver_hardware_packet_send+0x156>
  {

    TxPacketCfg.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_INSERT;
 8007ada:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <_nx_driver_hardware_packet_send+0x18c>)
 8007adc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ae0:	615a      	str	r2, [r3, #20]
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_DISABLE;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 8007ae2:	4a0d      	ldr	r2, [pc, #52]	; (8007b18 <_nx_driver_hardware_packet_send+0x18c>)
 8007ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae6:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 8007ae8:	4a0b      	ldr	r2, [pc, #44]	; (8007b18 <_nx_driver_hardware_packet_send+0x18c>)
 8007aea:	f107 030c 	add.w	r3, r7, #12
 8007aee:	6093      	str	r3, [r2, #8]

  /* Save the packet pointer to release.  */
  eth_handle.TxDescList.CurrentPacketAddress = (uint32_t *)packet_ptr;
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <_nx_driver_hardware_packet_send+0x190>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	63d3      	str	r3, [r2, #60]	; 0x3c

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 8007af6:	4908      	ldr	r1, [pc, #32]	; (8007b18 <_nx_driver_hardware_packet_send+0x18c>)
 8007af8:	4808      	ldr	r0, [pc, #32]	; (8007b1c <_nx_driver_hardware_packet_send+0x190>)
 8007afa:	f7fa f8bc 	bl	8001c76 <HAL_ETH_Transmit_IT>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <_nx_driver_hardware_packet_send+0x17c>
  {
    return(NX_DRIVER_ERROR);
 8007b04:	235a      	movs	r3, #90	; 0x5a
 8007b06:	e000      	b.n	8007b0a <_nx_driver_hardware_packet_send+0x17e>
  }

  return(NX_SUCCESS);
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3758      	adds	r7, #88	; 0x58
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	e000ed00 	.word	0xe000ed00
 8007b18:	24002288 	.word	0x24002288
 8007b1c:	24002174 	.word	0x24002174

08007b20 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <_nx_driver_hardware_multicast_join+0x2c>)
 8007b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	4a07      	ldr	r2, [pc, #28]	; (8007b4c <_nx_driver_hardware_multicast_join+0x2c>)
 8007b30:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
#ifdef STM32_ETH_HAL_LEGACY
  ETH->MACFFR |= ETH_MACFFR_PAM;
#else
  FilterConfig.PassAllMulticast = ENABLE;
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <_nx_driver_hardware_multicast_join+0x30>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8007b38:	4905      	ldr	r1, [pc, #20]	; (8007b50 <_nx_driver_hardware_multicast_join+0x30>)
 8007b3a:	4806      	ldr	r0, [pc, #24]	; (8007b54 <_nx_driver_hardware_multicast_join+0x34>)
 8007b3c:	f7fa ff3c 	bl	80029b8 <HAL_ETH_SetMACFilterConfig>
#endif

  /* Return success.  */
  return(NX_SUCCESS);
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	240020e8 	.word	0x240020e8
 8007b50:	240022bc 	.word	0x240022bc
 8007b54:	24002174 	.word	0x24002174

08007b58 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <_nx_driver_hardware_multicast_leave+0x34>)
 8007b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b64:	3b01      	subs	r3, #1
 8007b66:	4a09      	ldr	r2, [pc, #36]	; (8007b8c <_nx_driver_hardware_multicast_leave+0x34>)
 8007b68:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 8007b6a:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <_nx_driver_hardware_multicast_leave+0x34>)
 8007b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <_nx_driver_hardware_multicast_leave+0x28>

    /* Disable multicast frame reception.  */
#ifdef STM32_ETH_HAL_LEGACY
    ETH->MACFFR &= ~ETH_MACFFR_PAM;
#else
    FilterConfig.PassAllMulticast = DISABLE;
 8007b72:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <_nx_driver_hardware_multicast_leave+0x38>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8007b78:	4905      	ldr	r1, [pc, #20]	; (8007b90 <_nx_driver_hardware_multicast_leave+0x38>)
 8007b7a:	4806      	ldr	r0, [pc, #24]	; (8007b94 <_nx_driver_hardware_multicast_leave+0x3c>)
 8007b7c:	f7fa ff1c 	bl	80029b8 <HAL_ETH_SetMACFilterConfig>
#endif
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	240020e8 	.word	0x240020e8
 8007b90:	240022bc 	.word	0x240022bc
 8007b94:	24002174 	.word	0x24002174

08007b98 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

  /* Return success.  */
  return(NX_SUCCESS);
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <_nx_driver_hardware_packet_transmitted>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_hardware_packet_transmitted(ETH_HandleTypeDef *heth)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
#ifdef STM32_ETH_HAL_LEGACY
  ETH_DMADescTypeDef *dmatxdescs = nx_driver_information.nx_driver_information_dma_tx_descriptors;
  ULONG numOfBuf =  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use;
  NX_PACKET **nx_packets = nx_driver_information.nx_driver_information_transmit_packets;
#else
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3318      	adds	r3, #24
 8007bbc:	60fb      	str	r3, [r7, #12]
  ULONG numOfBuf =  dmatxdesclist->BuffersInUse;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc2:	617b      	str	r3, [r7, #20]
#endif
  ULONG idx =       nx_driver_information.nx_driver_information_transmit_release_index;
 8007bc4:	4b27      	ldr	r3, [pc, #156]	; (8007c64 <_nx_driver_hardware_packet_transmitted+0xb4>)
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	613b      	str	r3, [r7, #16]
  /* Loop through buffers in use.  */
  while (numOfBuf--)
 8007bca:	e040      	b.n	8007c4e <_nx_driver_hardware_packet_transmitted+0x9e>
  {
    /* If no packet, just examine the next packet.  */
#ifdef STM32_ETH_HAL_LEGACY
    if (nx_packets[idx] == NX_NULL)
#else
    if (dmatxdesclist->PacketAddress[idx] == NX_NULL)
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <_nx_driver_hardware_packet_transmitted+0x38>
#endif
    {

      /* No packet in use, skip to next.  */
      idx = (idx + 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	3301      	adds	r3, #1
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	613b      	str	r3, [r7, #16]
      continue;
 8007be6:	e032      	b.n	8007c4e <_nx_driver_hardware_packet_transmitted+0x9e>

    /* Determine if the packet has been transmitted.  */
#ifdef STM32_ETH_HAL_LEGACY
    if ((dmatxdescs[idx].Status & ETH_DMATXDESC_OWN) == 0)
#else
    if ((DMATxDscrTab[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0)
 8007be8:	491f      	ldr	r1, [pc, #124]	; (8007c68 <_nx_driver_hardware_packet_transmitted+0xb8>)
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	440b      	add	r3, r1
 8007bf6:	330c      	adds	r3, #12
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	db2d      	blt.n	8007c5a <_nx_driver_hardware_packet_transmitted+0xaa>

      /* Yes, packet has been transmitted.  */
#ifdef STM32_ETH_HAL_LEGACY
      release_packet = nx_packets[idx];
#else
      release_packet = (NX_PACKET *)dmatxdesclist->PacketAddress[idx];
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	3304      	adds	r3, #4
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	60bb      	str	r3, [r7, #8]
#endif

      /* Remove the Ethernet header and release the packet.  */
      NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	320e      	adds	r2, #14
 8007c14:	609a      	str	r2, [r3, #8]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	3a0e      	subs	r2, #14
 8007c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Release the packet.  */
      nx_packet_transmit_release(release_packet);
 8007c20:	f107 0308 	add.w	r3, r7, #8
 8007c24:	4618      	mov	r0, r3
 8007c26:	f009 faa1 	bl	801116c <_nxe_packet_transmit_release>

      /* Clear the entry in the in-use array.  */
#ifdef STM32_ETH_HAL_LEGACY
      nx_packets[idx] = NX_NULL;
#else
      dmatxdesclist->PacketAddress[idx] = NX_NULL;
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	2200      	movs	r2, #0
 8007c36:	605a      	str	r2, [r3, #4]
#endif

      /* Update the transmit relesae index and number of buffers in use.  */
      idx = (idx + 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	613b      	str	r3, [r7, #16]
#ifdef STM32_ETH_HAL_LEGACY
      nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = numOfBuf;
#else
      dmatxdesclist->BuffersInUse = numOfBuf;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	629a      	str	r2, [r3, #40]	; 0x28
#endif
      nx_driver_information.nx_driver_information_transmit_release_index = idx;
 8007c48:	4a06      	ldr	r2, [pc, #24]	; (8007c64 <_nx_driver_hardware_packet_transmitted+0xb4>)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	61d3      	str	r3, [r2, #28]
  while (numOfBuf--)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	1e5a      	subs	r2, r3, #1
 8007c52:	617a      	str	r2, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1b9      	bne.n	8007bcc <_nx_driver_hardware_packet_transmitted+0x1c>
    {
      /* Get out of the loop!  */
      break;
    }
  }
}
 8007c58:	e000      	b.n	8007c5c <_nx_driver_hardware_packet_transmitted+0xac>
      break;
 8007c5a:	bf00      	nop
}
 8007c5c:	bf00      	nop
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	240020e8 	.word	0x240020e8
 8007c68:	30000060 	.word	0x30000060

08007c6c <_nx_driver_hardware_packet_received>:
}

#else

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08a      	sub	sp, #40	; 0x28
 8007c70:	af00      	add	r7, sp, #0

  NX_PACKET     *packet_ptr;
  NX_PACKET  *received_packet_ptr;
  INT            i;
  uint32_t framelength = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	603b      	str	r3, [r7, #0]
  static ETH_BufferTypeDef RxBuff[NX_DRIVER_RX_DESCRIPTORS];
  memset(RxBuff, 0 , NX_DRIVER_RX_DESCRIPTORS*sizeof(ETH_BufferTypeDef));
 8007c76:	2230      	movs	r2, #48	; 0x30
 8007c78:	2100      	movs	r1, #0
 8007c7a:	484e      	ldr	r0, [pc, #312]	; (8007db4 <_nx_driver_hardware_packet_received+0x148>)
 8007c7c:	f00d fd38 	bl	80156f0 <memset>
  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS -1; i++)
 8007c80:	2300      	movs	r3, #0
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
 8007c84:	e013      	b.n	8007cae <_nx_driver_hardware_packet_received+0x42>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4a48      	ldr	r2, [pc, #288]	; (8007db4 <_nx_driver_hardware_packet_received+0x148>)
 8007c94:	1899      	adds	r1, r3, r2
 8007c96:	4847      	ldr	r0, [pc, #284]	; (8007db4 <_nx_driver_hardware_packet_received+0x148>)
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4403      	add	r3, r0
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	6019      	str	r1, [r3, #0]
  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS -1; i++)
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	3301      	adds	r3, #1
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	dde8      	ble.n	8007c86 <_nx_driver_hardware_packet_received+0x1a>
  }

  while (HAL_ETH_GetRxDataBuffer(&eth_handle, RxBuff) == HAL_OK)
 8007cb4:	e071      	b.n	8007d9a <_nx_driver_hardware_packet_received+0x12e>
  {
    HAL_ETH_GetRxDataLength(&eth_handle, &framelength);
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	4619      	mov	r1, r3
 8007cba:	483f      	ldr	r0, [pc, #252]	; (8007db8 <_nx_driver_hardware_packet_received+0x14c>)
 8007cbc:	f7fa f9ad 	bl	800201a <HAL_ETH_GetRxDataLength>
    ETH_RxDescListTypeDef *dmarxdesclist = &eth_handle.RxDescList;
 8007cc0:	4b3e      	ldr	r3, [pc, #248]	; (8007dbc <_nx_driver_hardware_packet_received+0x150>)
 8007cc2:	623b      	str	r3, [r7, #32]
    uint32_t FirstAppDesc = dmarxdesclist->FirstAppDesc;
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	61fb      	str	r3, [r7, #28]

    /* This driver assumes the received packet size is 1536 bytes */
    received_packet_ptr = nx_driver_information.nx_driver_information_receive_packets[FirstAppDesc];
 8007cca:	4a3d      	ldr	r2, [pc, #244]	; (8007dc0 <_nx_driver_hardware_packet_received+0x154>)
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	61bb      	str	r3, [r7, #24]
    received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + framelength;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	441a      	add	r2, r3
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	60da      	str	r2, [r3, #12]
    received_packet_ptr->nx_packet_length = framelength;
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	625a      	str	r2, [r3, #36]	; 0x24
    received_packet_ptr->nx_packet_next = NULL;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2200      	movs	r2, #0
 8007cee:	605a      	str	r2, [r3, #4]
    if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8007cf0:	4b33      	ldr	r3, [pc, #204]	; (8007dc0 <_nx_driver_hardware_packet_received+0x154>)
 8007cf2:	6898      	ldr	r0, [r3, #8]
 8007cf4:	1d39      	adds	r1, r7, #4
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f009 f8ef 	bl	8010edc <_nxe_packet_allocate>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d147      	bne.n	8007d94 <_nx_driver_hardware_packet_received+0x128>
                           NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
    {
      /* Adjust the packet.  */
      packet_ptr -> nx_packet_prepend_ptr += 2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3202      	adds	r2, #2
 8007d0c:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
      SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6959      	ldr	r1, [r3, #20]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	1acb      	subs	r3, r1, r3
 8007d1c:	617a      	str	r2, [r7, #20]
 8007d1e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dd1d      	ble.n	8007d62 <_nx_driver_hardware_packet_received+0xf6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f003 021f 	and.w	r2, r3, #31
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	4413      	add	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8007d36:	f3bf 8f4f 	dsb	sy
}
 8007d3a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007d3c:	4a21      	ldr	r2, [pc, #132]	; (8007dc4 <_nx_driver_hardware_packet_received+0x158>)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	3320      	adds	r3, #32
 8007d48:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3b20      	subs	r3, #32
 8007d4e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dcf2      	bgt.n	8007d3c <_nx_driver_hardware_packet_received+0xd0>
  __ASM volatile ("dsb 0xF":::"memory");
 8007d56:	f3bf 8f4f 	dsb	sy
}
 8007d5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007d5c:	f3bf 8f6f 	isb	sy
}
 8007d60:	bf00      	nop
}
 8007d62:	bf00      	nop
#endif
      HAL_ETH_DescAssignMemory(&eth_handle, FirstAppDesc, packet_ptr -> nx_packet_prepend_ptr, NULL);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	69f9      	ldr	r1, [r7, #28]
 8007d6c:	4812      	ldr	r0, [pc, #72]	; (8007db8 <_nx_driver_hardware_packet_received+0x14c>)
 8007d6e:	f7f9 fe6d 	bl	8001a4c <HAL_ETH_DescAssignMemory>
      nx_driver_information.nx_driver_information_receive_packets[FirstAppDesc] = packet_ptr;
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	4912      	ldr	r1, [pc, #72]	; (8007dc0 <_nx_driver_hardware_packet_received+0x154>)
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	605a      	str	r2, [r3, #4]

      /* Build Rx descriptor to be ready for next data reception */
      HAL_ETH_BuildRxDescriptors(&eth_handle);
 8007d80:	480d      	ldr	r0, [pc, #52]	; (8007db8 <_nx_driver_hardware_packet_received+0x14c>)
 8007d82:	f7fa f97d 	bl	8002080 <HAL_ETH_BuildRxDescriptors>

      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 8007d86:	4b0e      	ldr	r3, [pc, #56]	; (8007dc0 <_nx_driver_hardware_packet_received+0x154>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69b9      	ldr	r1, [r7, #24]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff fc03 	bl	8007598 <_nx_driver_transfer_to_netx>
 8007d92:	e002      	b.n	8007d9a <_nx_driver_hardware_packet_received+0x12e>
    }
    else
    {
      HAL_ETH_BuildRxDescriptors(&eth_handle);
 8007d94:	4808      	ldr	r0, [pc, #32]	; (8007db8 <_nx_driver_hardware_packet_received+0x14c>)
 8007d96:	f7fa f973 	bl	8002080 <HAL_ETH_BuildRxDescriptors>
  while (HAL_ETH_GetRxDataBuffer(&eth_handle, RxBuff) == HAL_OK)
 8007d9a:	4906      	ldr	r1, [pc, #24]	; (8007db4 <_nx_driver_hardware_packet_received+0x148>)
 8007d9c:	4806      	ldr	r0, [pc, #24]	; (8007db8 <_nx_driver_hardware_packet_received+0x14c>)
 8007d9e:	f7fa f89e 	bl	8001ede <HAL_ETH_GetRxDataBuffer>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d086      	beq.n	8007cb6 <_nx_driver_hardware_packet_received+0x4a>
    }
  }
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	3728      	adds	r7, #40	; 0x28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	24002134 	.word	0x24002134
 8007db8:	24002174 	.word	0x24002174
 8007dbc:	240021b8 	.word	0x240021b8
 8007dc0:	240020e8 	.word	0x240020e8
 8007dc4:	e000ed00 	.word	0xe000ed00

08007dc8 <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <HAL_ETH_RxCpltCallback+0x34>)
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <HAL_ETH_RxCpltCallback+0x34>)
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f043 0301 	orr.w	r3, r3, #1
 8007df6:	4a07      	ldr	r2, [pc, #28]	; (8007e14 <HAL_ETH_RxCpltCallback+0x34>)
 8007df8:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8007e00:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <HAL_ETH_RxCpltCallback+0x34>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 fdf5 	bl	80099f4 <_nx_ip_driver_deferred_processing>
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	240020e8 	.word	0x240020e8

08007e18 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <HAL_ETH_TxCpltCallback+0x34>)
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 8007e26:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <HAL_ETH_TxCpltCallback+0x34>)
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f043 0304 	orr.w	r3, r3, #4
 8007e2e:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <HAL_ETH_TxCpltCallback+0x34>)
 8007e30:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d104      	bne.n	8007e42 <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8007e38:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <HAL_ETH_TxCpltCallback+0x34>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 fdd9 	bl	80099f4 <_nx_ip_driver_deferred_processing>
  }
}
 8007e42:	bf00      	nop
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	240020e8 	.word	0x240020e8

08007e50 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d050      	beq.n	8007f04 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e62:	f3ef 8310 	mrs	r3, PRIMASK
 8007e66:	613b      	str	r3, [r7, #16]
    return(posture);
 8007e68:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007e6a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e6c:	b672      	cpsid	i
    return(int_posture);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8007e70:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d104      	bne.n	8007e86 <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e014      	b.n	8007eb0 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d104      	bne.n	8007e9c <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	6952      	ldr	r2, [r2, #20]
 8007e9a:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	6992      	ldr	r2, [r2, #24]
 8007ea4:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	6952      	ldr	r2, [r2, #20]
 8007eae:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8007ebc:	1e5a      	subs	r2, r3, #1
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	631a      	str	r2, [r3, #48]	; 0x30
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f383 8810 	msr	PRIMASK, r3
}
 8007eda:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 8007edc:	e00f      	b.n	8007efe <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2200      	movs	r2, #0
 8007eec:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 8007ef8:	6978      	ldr	r0, [r7, #20]
 8007efa:	f004 f8b3 	bl	800c064 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1ec      	bne.n	8007ede <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68b8      	ldr	r0, [r7, #8]
 8007f22:	f00d fbe5 	bl	80156f0 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a2d      	ldr	r2, [pc, #180]	; (8007fe4 <_nx_arp_enable+0xd4>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	091b      	lsrs	r3, r3, #4
 8007f34:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	61fb      	str	r3, [r7, #28]
 8007f3a:	e00a      	b.n	8007f52 <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	3334      	adds	r3, #52	; 0x34
 8007f4a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d3ef      	bcc.n	8007f3c <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	e00a      	b.n	8007f7e <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	3b34      	subs	r3, #52	; 0x34
 8007f76:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d3ef      	bcc.n	8007f68 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2234      	movs	r2, #52	; 0x34
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	3b34      	subs	r3, #52	; 0x34
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	441a      	add	r2, r3
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4a0a      	ldr	r2, [pc, #40]	; (8007fe8 <_nx_arp_enable+0xd8>)
 8007fbe:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4a09      	ldr	r2, [pc, #36]	; (8007fec <_nx_arp_enable+0xdc>)
 8007fc6:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a08      	ldr	r2, [pc, #32]	; (8007ff0 <_nx_arp_enable+0xe0>)
 8007fce:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a07      	ldr	r2, [pc, #28]	; (8007ff4 <_nx_arp_enable+0xe4>)
 8007fd6:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8007fda:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3720      	adds	r7, #32
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	4ec4ec4f 	.word	0x4ec4ec4f
 8007fe8:	080087d1 	.word	0x080087d1
 8007fec:	080089d3 	.word	0x080089d3
 8007ff0:	0800868d 	.word	0x0800868d
 8007ff4:	08007ff9 	.word	0x08007ff9

08007ff8 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	; 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 80b4 	beq.w	8008178 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 800801a:	6a39      	ldr	r1, [r7, #32]
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff ff17 	bl	8007e50 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008022:	f3ef 8310 	mrs	r3, PRIMASK
 8008026:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008028:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800802a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800802c:	b672      	cpsid	i
    return(int_posture);
 800802e:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 8008030:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d014      	beq.n	8008064 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699a      	ldr	r2, [r3, #24]
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6a3a      	ldr	r2, [r7, #32]
 8008060:	619a      	str	r2, [r3, #24]
 8008062:	e00b      	b.n	800807c <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	6a3a      	ldr	r2, [r7, #32]
 800806e:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	6a3a      	ldr	r2, [r7, #32]
 8008074:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6a3a      	ldr	r2, [r7, #32]
 800807a:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d141      	bne.n	8008106 <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	6a3a      	ldr	r2, [r7, #32]
 8008088:	429a      	cmp	r2, r3
 800808a:	d104      	bne.n	8008096 <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 8008094:	e009      	b.n	80080aa <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	6a3a      	ldr	r2, [r7, #32]
 800809c:	6912      	ldr	r2, [r2, #16]
 800809e:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	68d2      	ldr	r2, [r2, #12]
 80080a8:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	6a3a      	ldr	r2, [r7, #32]
 80080b8:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	6a3a      	ldr	r2, [r7, #32]
 80080be:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a3a      	ldr	r2, [r7, #32]
 80080c4:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
 80080c8:	e015      	b.n	80080f6 <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 26cc 	ldr.w	r2, [r3, #1740]	; 0x6cc
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 80080da:	691a      	ldr	r2, [r3, #16]
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	6a3a      	ldr	r2, [r7, #32]
 80080ea:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 80080f2:	6a3a      	ldr	r2, [r7, #32]
 80080f4:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008104:	e02c      	b.n	8008160 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800810c:	6a3a      	ldr	r2, [r7, #32]
 800810e:	429a      	cmp	r2, r3
 8008110:	d01f      	beq.n	8008152 <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	6912      	ldr	r2, [r2, #16]
 800811a:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	6a3a      	ldr	r2, [r7, #32]
 8008122:	68d2      	ldr	r2, [r2, #12]
 8008124:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	6a3a      	ldr	r2, [r7, #32]
 8008140:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	6a3a      	ldr	r2, [r7, #32]
 8008148:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a3a      	ldr	r2, [r7, #32]
 800814e:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f383 8810 	msr	PRIMASK, r3
}
 8008170:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
 8008176:	e001      	b.n	800817c <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 8008178:	2317      	movs	r3, #23
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800817e:	4618      	mov	r0, r3
 8008180:	3728      	adds	r7, #40	; 0x28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b088      	sub	sp, #32
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008190:	f3ef 8310 	mrs	r3, PRIMASK
 8008194:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008196:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008198:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800819a:	b672      	cpsid	i
    return(int_posture);
 800819c:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800819e:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d110      	bne.n	80081cc <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f383 8810 	msr	PRIMASK, r3
}
 80081c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80081c4:	6838      	ldr	r0, [r7, #0]
 80081c6:	f003 fe95 	bl	800bef4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80081ca:	e02f      	b.n	800822c <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d011      	beq.n	80081fa <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f383 8810 	msr	PRIMASK, r3
}
 80081f8:	e018      	b.n	800822c <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2200      	movs	r2, #0
 800820e:	61da      	str	r2, [r3, #28]
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f383 8810 	msr	PRIMASK, r3
}
 800821a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008222:	2200      	movs	r2, #0
 8008224:	2110      	movs	r1, #16
 8008226:	4618      	mov	r0, r3
 8008228:	f009 fce4 	bl	8011bf4 <_tx_event_flags_set>
    }
}
 800822c:	3720      	adds	r7, #32
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <_nx_arp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008234:	b590      	push	{r4, r7, lr}
 8008236:	b097      	sub	sp, #92	; 0x5c
 8008238:	af02      	add	r7, sp, #8
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 800823e:	2300      	movs	r3, #0
 8008240:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b1b      	cmp	r3, #27
 800824a:	d80a      	bhi.n	8008262 <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 800825a:	6838      	ldr	r0, [r7, #0]
 800825c:	f003 fe4a 	bl	800bef4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008260:	e20f      	b.n	8008682 <_nx_arp_packet_receive+0x44e>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	3304      	adds	r3, #4
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008270:	3304      	adds	r3, #4
 8008272:	ba12      	rev	r2, r2
 8008274:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8008276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008278:	3308      	adds	r3, #8
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827e:	3308      	adds	r3, #8
 8008280:	ba12      	rev	r2, r2
 8008282:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8008284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008286:	330c      	adds	r3, #12
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800828c:	330c      	adds	r3, #12
 800828e:	ba12      	rev	r2, r2
 8008290:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8008292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008294:	3310      	adds	r3, #16
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829a:	3310      	adds	r3, #16
 800829c:	ba12      	rev	r2, r2
 800829e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80082a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a2:	3314      	adds	r3, #20
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a8:	3314      	adds	r3, #20
 80082aa:	ba12      	rev	r2, r2
 80082ac:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80082ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b0:	3318      	adds	r3, #24
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b6:	3318      	adds	r3, #24
 80082b8:	ba12      	rev	r2, r2
 80082ba:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 80082bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082be:	3304      	adds	r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 80082c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d00d      	beq.n	80082e8 <_nx_arp_packet_receive+0xb4>
 80082cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d00a      	beq.n	80082e8 <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d8:	1c5a      	adds	r2, r3, #1
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 80082e0:	6838      	ldr	r0, [r7, #0]
 80082e2:	f003 fe07 	bl	800bef4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80082e6:	e1cc      	b.n	8008682 <_nx_arp_packet_receive+0x44e>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 80082e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ea:	3308      	adds	r3, #8
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	0c1b      	lsrs	r3, r3, #16
 80082f0:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 80082f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f4:	3308      	adds	r3, #8
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	041a      	lsls	r2, r3, #16
 80082fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082fc:	330c      	adds	r3, #12
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	0c1b      	lsrs	r3, r3, #16
 8008302:	4313      	orrs	r3, r2
 8008304:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 8008306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008308:	330c      	adds	r3, #12
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	041a      	lsls	r2, r3, #16
 800830e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008310:	3310      	adds	r3, #16
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	4313      	orrs	r3, r2
 8008318:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 800831a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008324:	2b00      	cmp	r3, #0
 8008326:	d104      	bne.n	8008332 <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f203 721c 	addw	r2, r3, #1820	; 0x71c
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d12e      	bne.n	800839e <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8008344:	2b00      	cmp	r3, #0
 8008346:	d02a      	beq.n	800839e <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 800834c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800834e:	429a      	cmp	r2, r3
 8008350:	d007      	beq.n	8008362 <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	2b00      	cmp	r3, #0
 8008356:	d122      	bne.n	800839e <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800835e:	429a      	cmp	r2, r3
 8008360:	d11d      	bne.n	800839e <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008368:	429a      	cmp	r2, r3
 800836a:	d104      	bne.n	8008376 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8008370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008372:	429a      	cmp	r2, r3
 8008374:	d00f      	beq.n	8008396 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8008376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008384:	79db      	ldrb	r3, [r3, #7]
 8008386:	4619      	mov	r1, r3
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 8008396:	6838      	ldr	r0, [r7, #0]
 8008398:	f003 fdac 	bl	800bef4 <_nx_packet_release>

        return;
 800839c:	e171      	b.n	8008682 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d040      	beq.n	8008426 <_nx_arp_packet_receive+0x1f2>
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d13b      	bne.n	8008426 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d105      	bne.n	80083c6 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083be:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 80083c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d02b      	beq.n	800841e <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	220a      	movs	r2, #10
 80083d6:	645a      	str	r2, [r3, #68]	; 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	461a      	mov	r2, r3
 80083de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f953 	bl	800868c <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00b      	beq.n	8008406 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	79db      	ldrb	r3, [r3, #7]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d006      	beq.n	800841e <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3

                return;
 800841c:	e131      	b.n	8008682 <_nx_arp_packet_receive+0x44e>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 800841e:	6838      	ldr	r0, [r7, #0]
 8008420:	f003 fd68 	bl	800bef4 <_nx_packet_release>

        return;
 8008424:	e12d      	b.n	8008682 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8008426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008428:	2b01      	cmp	r3, #1
 800842a:	f040 808f 	bne.w	800854c <_nx_arp_packet_receive+0x318>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008436:	429a      	cmp	r2, r3
 8008438:	f040 8088 	bne.w	800854c <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8008450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008452:	3304      	adds	r3, #4
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	4b8c      	ldr	r3, [pc, #560]	; (8008688 <_nx_arp_packet_receive+0x454>)
 8008458:	4013      	ands	r3, r2
 800845a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800845c:	3204      	adds	r2, #4
 800845e:	f043 0302 	orr.w	r3, r3, #2
 8008462:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8008474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008476:	3308      	adds	r3, #8
 8008478:	430a      	orrs	r2, r1
 800847a:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 800848c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800848e:	330c      	adds	r3, #12
 8008490:	430a      	orrs	r2, r1
 8008492:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	0419      	lsls	r1, r3, #16
 800849c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800849e:	3310      	adds	r3, #16
 80084a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a2:	430a      	orrs	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 80084a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a8:	3314      	adds	r3, #20
 80084aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ac:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 80084ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b0:	3318      	adds	r3, #24
 80084b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b4:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80084b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b8:	3304      	adds	r3, #4
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084be:	3304      	adds	r3, #4
 80084c0:	ba12      	rev	r2, r2
 80084c2:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80084c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c6:	3308      	adds	r3, #8
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084cc:	3308      	adds	r3, #8
 80084ce:	ba12      	rev	r2, r2
 80084d0:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80084d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084d4:	330c      	adds	r3, #12
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084da:	330c      	adds	r3, #12
 80084dc:	ba12      	rev	r2, r2
 80084de:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80084e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e2:	3310      	adds	r3, #16
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e8:	3310      	adds	r3, #16
 80084ea:	ba12      	rev	r2, r2
 80084ec:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80084ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f0:	3314      	adds	r3, #20
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f6:	3314      	adds	r3, #20
 80084f8:	ba12      	rev	r2, r2
 80084fa:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80084fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084fe:	3318      	adds	r3, #24
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008504:	3318      	adds	r3, #24
 8008506:	ba12      	rev	r2, r2
 8008508:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	221c      	movs	r2, #28
 800850e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f103 021c 	add.w	r2, r3, #28
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8008520:	2306      	movs	r3, #6
 8008522:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853c:	f107 0208 	add.w	r2, r7, #8
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800854a:	e00d      	b.n	8008568 <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 800854c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854e:	2b01      	cmp	r3, #1
 8008550:	d105      	bne.n	800855e <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	671a      	str	r2, [r3, #112]	; 0x70
 800855c:	e004      	b.n	8008568 <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	0a1a      	lsrs	r2, r3, #8
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	4413      	add	r3, r2
 8008570:	f003 031f 	and.w	r3, r3, #31
 8008574:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	2b00      	cmp	r3, #0
 800857e:	d03c      	beq.n	80085fa <_nx_arp_packet_receive+0x3c6>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	0a1a      	lsrs	r2, r3, #8
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	4413      	add	r3, r2
 8008588:	f003 031f 	and.w	r3, r3, #31
 800858c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008592:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 800859e:	e02c      	b.n	80085fa <_nx_arp_packet_receive+0x3c6>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 80085a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d117      	bne.n	80085da <_nx_arp_packet_receive+0x3a6>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 80085aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d127      	bne.n	8008602 <_nx_arp_packet_receive+0x3ce>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 80085b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b6:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 80085b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085bc:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 80085be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c0:	2200      	movs	r2, #0
 80085c2:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 80085c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c6:	2200      	movs	r2, #0
 80085c8:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 80085ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ce:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 80085d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa30 	bl	8008a38 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 80085d8:	e014      	b.n	8008604 <_nx_arp_packet_receive+0x3d0>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 80085da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e4:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d102      	bne.n	80085fa <_nx_arp_packet_receive+0x3c6>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 80085f8:	e004      	b.n	8008604 <_nx_arp_packet_receive+0x3d0>
    while (arp_ptr)
 80085fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1cf      	bne.n	80085a0 <_nx_arp_packet_receive+0x36c>
 8008600:	e000      	b.n	8008604 <_nx_arp_packet_receive+0x3d0>
                break;
 8008602:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8008604:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <_nx_arp_packet_receive+0x3de>
    {
        _nx_packet_release(packet_ptr);
 800860c:	6838      	ldr	r0, [r7, #0]
 800860e:	f003 fc71 	bl	800bef4 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8008612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008614:	2b00      	cmp	r3, #0
 8008616:	d134      	bne.n	8008682 <_nx_arp_packet_receive+0x44e>
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	2b00      	cmp	r3, #0
 800861c:	d031      	beq.n	8008682 <_nx_arp_packet_receive+0x44e>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	0a1a      	lsrs	r2, r3, #8
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	4413      	add	r3, r2
 8008626:	f003 031f 	and.w	r3, r3, #31
 800862a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8008632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008634:	f502 72c9 	add.w	r2, r2, #402	; 0x192
 8008638:	0092      	lsls	r2, r2, #2
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	440a      	add	r2, r1
 800863e:	1d11      	adds	r1, r2, #4
 8008640:	2200      	movs	r2, #0
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d11a      	bne.n	8008682 <_nx_arp_packet_receive+0x44e>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008650:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 800865e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008662:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8008664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008668:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 800866a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800866e:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8008670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008672:	2200      	movs	r2, #0
 8008674:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8008676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008678:	2200      	movs	r2, #0
 800867a:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008680:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8008682:	3754      	adds	r7, #84	; 0x54
 8008684:	46bd      	mov	sp, r7
 8008686:	bd90      	pop	{r4, r7, pc}
 8008688:	ffff0000 	.word	0xffff0000

0800868c <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08e      	sub	sp, #56	; 0x38
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d104      	bne.n	80086a8 <_nx_arp_packet_send+0x1c>
 800869e:	f04f 30ff 	mov.w	r0, #4294967295
 80086a2:	f00b f871 	bl	8013788 <_tx_thread_sleep>
 80086a6:	e7fa      	b.n	800869e <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 80086ae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80086b2:	2300      	movs	r3, #0
 80086b4:	222c      	movs	r2, #44	; 0x2c
 80086b6:	f002 ffc5 	bl	800b644 <_nx_packet_allocate>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f040 8081 	bne.w	80087c4 <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	221c      	movs	r2, #28
 80086d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	3a1c      	subs	r2, #28
 80086e0:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 80086ee:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	3304      	adds	r3, #4
 80086f4:	4a35      	ldr	r2, [pc, #212]	; (80087cc <_nx_arp_packet_send+0x140>)
 80086f6:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8008704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008706:	3308      	adds	r3, #8
 8008708:	430a      	orrs	r2, r1
 800870a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	330c      	adds	r3, #12
 800871c:	430a      	orrs	r2, r1
 800871e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	695a      	ldr	r2, [r3, #20]
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	3310      	adds	r3, #16
 8008728:	0412      	lsls	r2, r2, #16
 800872a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 800872c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872e:	3314      	adds	r3, #20
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008736:	3318      	adds	r3, #24
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	ba1a      	rev	r2, r3
 8008742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008744:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8008746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008748:	3304      	adds	r3, #4
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874e:	3304      	adds	r3, #4
 8008750:	ba12      	rev	r2, r2
 8008752:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8008754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008756:	3308      	adds	r3, #8
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875c:	3308      	adds	r3, #8
 800875e:	ba12      	rev	r2, r2
 8008760:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8008762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008764:	330c      	adds	r3, #12
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876a:	330c      	adds	r3, #12
 800876c:	ba12      	rev	r2, r2
 800876e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8008770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008772:	3310      	adds	r3, #16
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	3310      	adds	r3, #16
 800877a:	ba12      	rev	r2, r2
 800877c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008780:	3314      	adds	r3, #20
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008786:	3314      	adds	r3, #20
 8008788:	ba12      	rev	r2, r2
 800878a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	3318      	adds	r3, #24
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	3318      	adds	r3, #24
 8008796:	ba12      	rev	r2, r2
 8008798:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 800879e:	2305      	movs	r3, #5
 80087a0:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80087a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087aa:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80087ac:	f04f 33ff 	mov.w	r3, #4294967295
 80087b0:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ba:	f107 0210 	add.w	r2, r7, #16
 80087be:	4610      	mov	r0, r2
 80087c0:	4798      	blx	r3
 80087c2:	e000      	b.n	80087c6 <_nx_arp_packet_send+0x13a>
                return;
 80087c4:	bf00      	nop
}
 80087c6:	3738      	adds	r7, #56	; 0x38
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	06040001 	.word	0x06040001

080087d0 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80087de:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80087e0:	2300      	movs	r3, #0
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
 80087e4:	e0af      	b.n	8008946 <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 80a5 	beq.w	800893a <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	1e5a      	subs	r2, r3, #1
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 809b 	bne.w	800893a <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	2b12      	cmp	r3, #18
 800880a:	f040 8086 	bne.w	800891a <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800880e:	f3ef 8310 	mrs	r3, PRIMASK
 8008812:	613b      	str	r3, [r7, #16]
    return(posture);
 8008814:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8008816:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008818:	b672      	cpsid	i
    return(int_posture);
 800881a:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 800881c:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d028      	beq.n	8008878 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	6a3a      	ldr	r2, [r7, #32]
 800882c:	429a      	cmp	r2, r3
 800882e:	d104      	bne.n	800883a <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	e014      	b.n	8008864 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a3a      	ldr	r2, [r7, #32]
 8008842:	429a      	cmp	r2, r3
 8008844:	d104      	bne.n	8008850 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	6a3a      	ldr	r2, [r7, #32]
 800884c:	6952      	ldr	r2, [r2, #20]
 800884e:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 8008854:	6a3a      	ldr	r2, [r7, #32]
 8008856:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8008858:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8008862:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800886a:	1e5a      	subs	r2, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	2200      	movs	r2, #0
 8008876:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	429a      	cmp	r2, r3
 8008880:	d02a      	beq.n	80088d8 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 8008886:	6a3a      	ldr	r2, [r7, #32]
 8008888:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 800888a:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8008890:	6a3a      	ldr	r2, [r7, #32]
 8008892:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8008894:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800889c:	6a3a      	ldr	r2, [r7, #32]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d104      	bne.n	80088ac <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
                        arp_entry -> nx_arp_pool_next =
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80088bc:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	6a3a      	ldr	r2, [r7, #32]
 80088cc:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80088d4:	6a3a      	ldr	r2, [r7, #32]
 80088d6:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088dc:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	2200      	movs	r2, #0
 80088e2:	631a      	str	r2, [r3, #48]	; 0x30
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f383 8810 	msr	PRIMASK, r3
}
 80088ee:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 80088f0:	e00f      	b.n	8008912 <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2200      	movs	r2, #0
 8008900:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 800890c:	6978      	ldr	r0, [r7, #20]
 800890e:	f003 fba9 	bl	800c064 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1ec      	bne.n	80088f2 <_nx_arp_periodic_update+0x122>
 8008918:	e00f      	b.n	800893a <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	220a      	movs	r2, #10
 8008928:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	6a19      	ldr	r1, [r3, #32]
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008932:	461a      	mov	r2, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fea9 	bl	800868c <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	3301      	adds	r3, #1
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800894c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894e:	429a      	cmp	r2, r3
 8008950:	f4ff af49 	bcc.w	80087e6 <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008954:	2300      	movs	r3, #0
 8008956:	627b      	str	r3, [r7, #36]	; 0x24
 8008958:	e033      	b.n	80089c2 <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	440b      	add	r3, r1
 8008968:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d021      	beq.n	80089b6 <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	440b      	add	r3, r1
 8008980:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d017      	beq.n	80089ba <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	440b      	add	r3, r1
 8008998:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	1e59      	subs	r1, r3, #1
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	4403      	add	r3, r0
 80089ae:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80089b2:	6019      	str	r1, [r3, #0]
 80089b4:	e002      	b.n	80089bc <_nx_arp_periodic_update+0x1ec>
            continue;
 80089b6:	bf00      	nop
 80089b8:	e000      	b.n	80089bc <_nx_arp_periodic_update+0x1ec>
            continue;
 80089ba:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	3301      	adds	r3, #1
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0c8      	beq.n	800895a <_nx_arp_periodic_update+0x18a>
    }
}
 80089c8:	bf00      	nop
 80089ca:	bf00      	nop
 80089cc:	3728      	adds	r7, #40	; 0x28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b088      	sub	sp, #32
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80089da:	e023      	b.n	8008a24 <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089dc:	f3ef 8310 	mrs	r3, PRIMASK
 80089e0:	617b      	str	r3, [r7, #20]
    return(posture);
 80089e2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80089e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80089e6:	b672      	cpsid	i
    return(int_posture);
 80089e8:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 80089ea:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 80089f2:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	69da      	ldr	r2, [r3, #28]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d103      	bne.n	8008a10 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f383 8810 	msr	PRIMASK, r3
}
 8008a1a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 8008a1c:	69b9      	ldr	r1, [r7, #24]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7ff fc08 	bl	8008234 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1d6      	bne.n	80089dc <_nx_arp_queue_process+0xa>
    }
}
 8008a2e:	bf00      	nop
 8008a30:	bf00      	nop
 8008a32:	3720      	adds	r7, #32
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b090      	sub	sp, #64	; 0x40
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a46:	f3ef 8310 	mrs	r3, PRIMASK
 8008a4a:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a50:	b672      	cpsid	i
    return(int_posture);
 8008a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 8008a54:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2200      	movs	r2, #0
 8008a68:	631a      	str	r2, [r3, #48]	; 0x30
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	f383 8810 	msr	PRIMASK, r3
}
 8008a74:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 8008a76:	e04c      	b.n	8008b12 <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 8008a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 8008a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	2200      	movs	r2, #0
 8008a86:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9a:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa6:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d915      	bls.n	8008ae8 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d007      	beq.n	8008ad6 <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008acc:	f107 0208 	add.w	r2, r7, #8
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	e01d      	b.n	8008b12 <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 8008ae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008ae2:	f003 fabf 	bl	800c064 <_nx_packet_transmit_release>
 8008ae6:	e014      	b.n	8008b12 <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	4413      	add	r3, r2
 8008afc:	f1a3 0214 	sub.w	r2, r3, #20
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8008b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0a:	f107 0208 	add.w	r2, r7, #8
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4798      	blx	r3
    while (queued_list_head)
 8008b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1af      	bne.n	8008a78 <_nx_arp_queue_send+0x40>
        }
    }
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	3740      	adds	r7, #64	; 0x40
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a09      	ldr	r2, [pc, #36]	; (8008b54 <_nx_icmp_enable+0x30>)
 8008b30:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a08      	ldr	r2, [pc, #32]	; (8008b58 <_nx_icmp_enable+0x34>)
 8008b38:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a07      	ldr	r2, [pc, #28]	; (8008b5c <_nx_icmp_enable+0x38>)
 8008b40:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8008b44:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	08008c5d 	.word	0x08008c5d
 8008b58:	08008b9d 	.word	0x08008b9d
 8008b5c:	08008cbb 	.word	0x08008cbb

08008b60 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d006      	beq.n	8008b82 <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3
        return;
 8008b80:	e009      	b.n	8008b96 <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 8008b90:	6838      	ldr	r0, [r7, #0]
 8008b92:	f003 f9af 	bl	800bef4 <_nx_packet_release>
}
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b07      	cmp	r3, #7
 8008bba:	d80a      	bhi.n	8008bd2 <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8008bca:	6838      	ldr	r0, [r7, #0]
 8008bcc:	f003 f992 	bl	800bef4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8008bd0:	e03c      	b.n	8008c4c <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008bd2:	f3ef 8305 	mrs	r3, IPSR
 8008bd6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008bd8:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 8008bda:	4b1e      	ldr	r3, [pc, #120]	; (8008c54 <_nx_icmp_packet_receive+0xb8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <_nx_icmp_packet_receive+0x56>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8008bea:	4b1b      	ldr	r3, [pc, #108]	; (8008c58 <_nx_icmp_packet_receive+0xbc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d028      	beq.n	8008c44 <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bf6:	617b      	str	r3, [r7, #20]
    return(posture);
 8008bf8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008bfa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008bfc:	b672      	cpsid	i
    return(int_posture);
 8008bfe:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8008c00:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	61da      	str	r2, [r3, #28]
 8008c16:	e002      	b.n	8008c1e <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f383 8810 	msr	PRIMASK, r3
}
 8008c30:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2104      	movs	r1, #4
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f008 ffd9 	bl	8011bf4 <_tx_event_flags_set>
 8008c42:	e003      	b.n	8008c4c <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff ff8a 	bl	8008b60 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	2400008c 	.word	0x2400008c
 8008c58:	240023d0 	.word	0x240023d0

08008c5c <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c64:	f3ef 8310 	mrs	r3, PRIMASK
 8008c68:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008c6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c6e:	b672      	cpsid	i
    return(int_posture);
 8008c70:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 8008c72:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8008c7a:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f383 8810 	msr	PRIMASK, r3
}
 8008c8e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8008c90:	e00b      	b.n	8008caa <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8008ca2:	6979      	ldr	r1, [r7, #20]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff ff5b 	bl	8008b60 <_nx_icmp_packet_process>
    while (queue_head)
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f0      	bne.n	8008c92 <_nx_icmp_queue_process+0x36>
    }
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b088      	sub	sp, #32
 8008cbe:	af02      	add	r7, sp, #8
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
USHORT            checksum;
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	613b      	str	r3, [r7, #16]
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <_nx_icmpv4_packet_process+0x26>
    {
        compute_checksum = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
    {
        compute_checksum = 1;
    }
#endif
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d023      	beq.n	8008d2e <_nx_icmpv4_packet_process+0x74>
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8008cea:	2300      	movs	r3, #0
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008cf4:	6838      	ldr	r0, [r7, #0]
 8008cf6:	f000 fb43 	bl	8009380 <_nx_ip_checksum_compute>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	81fb      	strh	r3, [r7, #14]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 8008cfe:	89fb      	ldrh	r3, [r7, #14]
 8008d00:	43db      	mvns	r3, r3
 8008d02:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d011      	beq.n	8008d2e <_nx_icmpv4_packet_process+0x74>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 8008d26:	6838      	ldr	r0, [r7, #0]
 8008d28:	f003 f8e4 	bl	800bef4 <_nx_packet_release>
            return;
 8008d2c:	e01b      	b.n	8008d66 <_nx_icmpv4_packet_process+0xac>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <_nx_icmpv4_packet_process+0x86>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f817 	bl	8008d6c <_nx_icmpv4_process_echo_reply>
 8008d3e:	e012      	b.n	8008d66 <_nx_icmpv4_packet_process+0xac>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d104      	bne.n	8008d52 <_nx_icmpv4_packet_process+0x98>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f8cc 	bl	8008ee8 <_nx_icmpv4_process_echo_request>
 8008d50:	e009      	b.n	8008d66 <_nx_icmpv4_packet_process+0xac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 8008d60:	6838      	ldr	r0, [r7, #0]
 8008d62:	f003 f8c7 	bl	800bef4 <_nx_packet_release>
    }
}
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b090      	sub	sp, #64	; 0x40
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8c:	88db      	ldrh	r3, [r3, #6]
 8008d8e:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8008d90:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008d92:	ba5b      	rev16	r3, r3
 8008d94:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d96:	f3ef 8310 	mrs	r3, PRIMASK
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8008d9e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008da0:	b672      	cpsid	i
    return(int_posture);
 8008da2:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008db4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008db6:	4b4b      	ldr	r3, [pc, #300]	; (8008ee4 <_nx_icmpv4_process_echo_reply+0x178>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	4a49      	ldr	r2, [pc, #292]	; (8008ee4 <_nx_icmpv4_process_echo_reply+0x178>)
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	f383 8810 	msr	PRIMASK, r3
}
 8008dca:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 8008dcc:	e05e      	b.n	8008e8c <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d155      	bne.n	8008e86 <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008dda:	f3ef 8310 	mrs	r3, PRIMASK
 8008dde:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008de0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008de2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008de4:	b672      	cpsid	i
    return(int_posture);
 8008de6:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8008dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d104      	bne.n	8008dfe <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8008dfc:	e014      	b.n	8008e28 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d104      	bne.n	8008e14 <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8008e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008e1c:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8008e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e24:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008e26:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e2e:	1e5a      	subs	r2, r3, #1
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	2200      	movs	r2, #0
 8008e3a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008e3c:	4b29      	ldr	r3, [pc, #164]	; (8008ee4 <_nx_icmpv4_process_echo_reply+0x178>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3301      	adds	r3, #1
 8008e42:	4a28      	ldr	r2, [pc, #160]	; (8008ee4 <_nx_icmpv4_process_echo_reply+0x178>)
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f383 8810 	msr	PRIMASK, r3
}
 8008e50:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	f1a3 0208 	sub.w	r2, r3, #8
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f103 0208 	add.w	r2, r3, #8
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8008e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8008e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8008e7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e80:	f00a fd3c 	bl	80138fc <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 8008e84:	e007      	b.n	8008e96 <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8008e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	1e5a      	subs	r2, r3, #1
 8008e90:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d19b      	bne.n	8008dce <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d009      	beq.n	8008eb0 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8008eaa:	6838      	ldr	r0, [r7, #0]
 8008eac:	f003 f822 	bl	800bef4 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb4:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008eb8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008eba:	b672      	cpsid	i
    return(int_posture);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8008ec0:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <_nx_icmpv4_process_echo_reply+0x178>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	4a07      	ldr	r2, [pc, #28]	; (8008ee4 <_nx_icmpv4_process_echo_reply+0x178>)
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f383 8810 	msr	PRIMASK, r3
}
 8008ed4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8008ed6:	f00a fcd7 	bl	8013888 <_tx_thread_system_preempt_check>
}
 8008eda:	bf00      	nop
 8008edc:	3740      	adds	r7, #64	; 0x40
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	240023cc 	.word	0x240023cc

08008ee8 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08c      	sub	sp, #48	; 0x30
 8008eec:	af04      	add	r7, sp, #16
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
ULONG             checksum;
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60bb      	str	r3, [r7, #8]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	61bb      	str	r3, [r7, #24]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f04:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <_nx_icmpv4_process_echo_request+0x44>
    {
        compute_checksum = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61fb      	str	r3, [r7, #28]
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d02c      	beq.n	8008f8c <_nx_icmpv4_process_echo_request+0xa4>
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	885b      	ldrh	r3, [r3, #2]
 8008f36:	ba5b      	rev16	r3, r3
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	885b      	ldrh	r3, [r3, #2]
 8008f42:	613b      	str	r3, [r7, #16]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 8008f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f48:	60fb      	str	r3, [r7, #12]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	43db      	mvns	r3, r3
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	4413      	add	r3, r2
 8008f58:	613b      	str	r3, [r7, #16]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	0c1a      	lsrs	r2, r3, #16
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4413      	add	r3, r2
 8008f64:	613b      	str	r3, [r7, #16]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	0c1a      	lsrs	r2, r3, #16
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	4413      	add	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	43db      	mvns	r3, r3
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	885b      	ldrh	r3, [r3, #2]
 8008f82:	ba5b      	rev16	r3, r3
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	805a      	strh	r2, [r3, #2]
 8008f8a:	e008      	b.n	8008f9e <_nx_icmpv4_process_echo_request+0xb6>
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    else
    {

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	805a      	strh	r2, [r3, #2]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8008fa8:	f107 0308 	add.w	r3, r7, #8
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 fc7f 	bl	800a8b0 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	9303      	str	r3, [sp, #12]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	9302      	str	r3, [sp, #8]
 8008fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	2380      	movs	r3, #128	; 0x80
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 fbf6 	bl	800a7cc <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 8008fe0:	bf00      	nop
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b096      	sub	sp, #88	; 0x58
 8008fec:	af04      	add	r7, sp, #16
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	647b      	str	r3, [r7, #68]	; 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 8113 	beq.w	8009230 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900e:	633b      	str	r3, [r7, #48]	; 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009024:	f000 8106 	beq.w	8009234 <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8009030:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009034:	f000 80fe 	beq.w	8009234 <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	691a      	ldr	r2, [r3, #16]
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8009046:	429a      	cmp	r2, r3
 8009048:	d10b      	bne.n	8009062 <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	691a      	ldr	r2, [r3, #16]
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	43db      	mvns	r3, r3
 8009054:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 800905c:	429a      	cmp	r2, r3
 800905e:	f000 80eb 	beq.w	8009238 <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800906a:	2b00      	cmp	r3, #0
 800906c:	f040 80e6 	bne.w	800923c <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 80e3 	beq.w	8009240 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 800907e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009082:	d304      	bcc.n	800908e <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009088:	2b00      	cmp	r3, #0
 800908a:	f280 80d9 	bge.w	8009240 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	f000 80d3 	beq.w	8009240 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 80090a2:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80090a6:	f000 80cb 	beq.w	8009240 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 80090b0:	f107 0118 	add.w	r1, r7, #24
 80090b4:	2300      	movs	r3, #0
 80090b6:	2224      	movs	r2, #36	; 0x24
 80090b8:	f002 fac4 	bl	800b644 <_nx_packet_allocate>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f040 80c0 	bne.w	8009244 <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2204      	movs	r2, #4
 80090c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	0e1b      	lsrs	r3, r3, #24
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	0c1b      	lsrs	r3, r3, #16
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	2200      	movs	r2, #0
 80090ea:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	061a      	lsls	r2, r3, #24
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	ba1a      	rev	r2, r3
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	0e1b      	lsrs	r3, r3, #24
 8009104:	f003 030f 	and.w	r3, r3, #15
 8009108:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	3302      	adds	r3, #2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009116:	3208      	adds	r2, #8
 8009118:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	6899      	ldr	r1, [r3, #8]
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	440a      	add	r2, r1
 8009126:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912c:	63bb      	str	r3, [r7, #56]	; 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	3308      	adds	r3, #8
 8009132:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009134:	2300      	movs	r3, #0
 8009136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009138:	e00a      	b.n	8009150 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	ba1a      	rev	r2, r3
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	601a      	str	r2, [r3, #0]
        src_packet++;
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	3304      	adds	r3, #4
 8009148:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800914a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914c:	3301      	adds	r3, #1
 800914e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009152:	2b04      	cmp	r3, #4
 8009154:	d9f1      	bls.n	800913a <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800915c:	e00a      	b.n	8009174 <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 800915e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009160:	1d13      	adds	r3, r2, #4
 8009162:	63bb      	str	r3, [r7, #56]	; 0x38
 8009164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009166:	1d19      	adds	r1, r3, #4
 8009168:	6379      	str	r1, [r7, #52]	; 0x34
 800916a:	6812      	ldr	r2, [r2, #0]
 800916c:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800916e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009170:	3b04      	subs	r3, #4
 8009172:	643b      	str	r3, [r7, #64]	; 0x40
 8009174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f1      	bne.n	800915e <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009180:	2300      	movs	r3, #0
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009184:	e00a      	b.n	800919c <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	ba1a      	rev	r2, r3
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	601a      	str	r2, [r3, #0]
        src_packet++;
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	3304      	adds	r3, #4
 8009194:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	3301      	adds	r3, #1
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d9f1      	bls.n	8009186 <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80091a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 80091b0:	f107 0314 	add.w	r3, r7, #20
 80091b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f001 fb7a 	bl	800a8b0 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	647b      	str	r3, [r7, #68]	; 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80091ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d017      	beq.n	8009204 <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 80091d4:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 80091da:	2300      	movs	r3, #0
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	2300      	movs	r3, #0
 80091e0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80091e4:	f000 f8cc 	bl	8009380 <_nx_ip_checksum_compute>
 80091e8:	4603      	mov	r3, r0
 80091ea:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 80091ec:	8bfb      	ldrh	r3, [r7, #30]
 80091ee:	43db      	mvns	r3, r3
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	885b      	ldrh	r3, [r3, #2]
 80091fa:	ba5b      	rev16	r3, r3
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	805a      	strh	r2, [r3, #2]
 8009202:	e005      	b.n	8009210 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800920e:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8009210:	69b9      	ldr	r1, [r7, #24]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	9303      	str	r3, [sp, #12]
 8009216:	2300      	movs	r3, #0
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	23ff      	movs	r3, #255	; 0xff
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f001 facf 	bl	800a7cc <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 800922e:	e00a      	b.n	8009246 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8009230:	bf00      	nop
 8009232:	e008      	b.n	8009246 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8009234:	bf00      	nop
 8009236:	e006      	b.n	8009246 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8009238:	bf00      	nop
 800923a:	e004      	b.n	8009246 <_nx_icmpv4_send_error_message+0x25e>
        return;
 800923c:	bf00      	nop
 800923e:	e002      	b.n	8009246 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8009240:	bf00      	nop
 8009242:	e000      	b.n	8009246 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8009244:	bf00      	nop
}
 8009246:	3748      	adds	r7, #72	; 0x48
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4a18      	ldr	r2, [pc, #96]	; (80092bc <_nx_igmp_multicast_check+0x70>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d101      	bne.n	8009264 <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 8009260:	2301      	movs	r3, #1
 8009262:	e025      	b.n	80092b0 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	e01e      	b.n	80092a8 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	440b      	add	r3, r1
 8009278:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	429a      	cmp	r2, r3
 8009282:	d10e      	bne.n	80092a2 <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 8009284:	68f9      	ldr	r1, [r7, #12]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8009296:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	429a      	cmp	r2, r3
 800929c:	d101      	bne.n	80092a2 <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 800929e:	2301      	movs	r3, #1
 80092a0:	e006      	b.n	80092b0 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	3301      	adds	r3, #1
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2b06      	cmp	r3, #6
 80092ac:	d9dd      	bls.n	800926a <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	e0000001 	.word	0xe0000001

080092c0 <_nx_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_CHANGE_NOTIFY, ip_ptr, ip_address_change_notify, additional_info, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80092d2:	f04f 31ff 	mov.w	r1, #4294967295
 80092d6:	4618      	mov	r0, r3
 80092d8:	f009 f8d0 	bl	801247c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80092dc:	f3ef 8310 	mrs	r3, PRIMASK
 80092e0:	617b      	str	r3, [r7, #20]
    return(posture);
 80092e2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80092e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80092e6:	b672      	cpsid	i
    return(int_posture);
 80092e8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80092ea:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address change callback function and the additional information pointers. */
    ip_ptr -> nx_ip_address_change_notify =                  ip_address_change_notify;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    ip_ptr -> nx_ip_address_change_notify_additional_info =  additional_info;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	f383 8810 	msr	PRIMASK, r3
}
 8009306:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800930e:	4618      	mov	r0, r3
 8009310:	f009 fb2c 	bl	801296c <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009314:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009316:	4618      	mov	r0, r3
 8009318:	3720      	adds	r7, #32
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b088      	sub	sp, #32
 8009322:	af00      	add	r7, sp, #0
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	60b9      	str	r1, [r7, #8]
 8009328:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009330:	f04f 31ff 	mov.w	r1, #4294967295
 8009334:	4618      	mov	r0, r3
 8009336:	f009 f8a1 	bl	801247c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800933a:	f3ef 8310 	mrs	r3, PRIMASK
 800933e:	617b      	str	r3, [r7, #20]
    return(posture);
 8009340:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009342:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009344:	b672      	cpsid	i
    return(int_posture);
 8009346:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009348:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	f383 8810 	msr	PRIMASK, r3
}
 8009368:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009370:	4618      	mov	r0, r3
 8009372:	f009 fafb 	bl	801296c <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009376:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009378:	4618      	mov	r0, r3
 800937a:	3720      	adds	r7, #32
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08e      	sub	sp, #56	; 0x38
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b11      	cmp	r3, #17
 8009396:	d002      	beq.n	800939e <_nx_ip_checksum_compute+0x1e>
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b06      	cmp	r3, #6
 800939c:	d141      	bne.n	8009422 <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <_nx_ip_checksum_compute+0x2e>
 80093a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d104      	bne.n	80093b8 <_nx_ip_checksum_compute+0x38>
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295
 80093b2:	f00a f9e9 	bl	8013788 <_tx_thread_sleep>
 80093b6:	e7fa      	b.n	80093ae <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 80093bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093be:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c8:	4413      	add	r3, r2
 80093ca:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	3302      	adds	r3, #2
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d6:	4413      	add	r3, r2
 80093d8:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e2:	4413      	add	r3, r2
 80093e4:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	3302      	adds	r3, #2
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f0:	4413      	add	r3, r2
 80093f2:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 80093f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4413      	add	r3, r2
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	0c1a      	lsrs	r2, r3, #16
 8009400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009402:	b29b      	uxth	r3, r3
 8009404:	4413      	add	r3, r2
 8009406:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940a:	0c1a      	lsrs	r2, r3, #16
 800940c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940e:	b29b      	uxth	r3, r3
 8009410:	4413      	add	r3, r2
 8009412:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 8009414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009416:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8009418:	8b7b      	ldrh	r3, [r7, #26]
 800941a:	ba5b      	rev16	r3, r3
 800941c:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 800941e:	8b7b      	ldrh	r3, [r7, #26]
 8009420:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 800942c:	e058      	b.n	80094e0 <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	429a      	cmp	r2, r3
 8009440:	d905      	bls.n	800944e <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8009442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f023 0303 	bic.w	r3, r3, #3
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
 800944c:	e006      	b.n	800945c <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4413      	add	r3, r2
 8009458:	3b03      	subs	r3, #3
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009466:	429a      	cmp	r2, r3
 8009468:	d91c      	bls.n	80094a4 <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 800946a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	3303      	adds	r3, #3
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	4413      	add	r3, r2
 800947a:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 800947c:	e00e      	b.n	800949c <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009486:	4413      	add	r3, r2
 8009488:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	0c1b      	lsrs	r3, r3, #16
 8009490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009492:	4413      	add	r3, r2
 8009494:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 8009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009498:	3304      	adds	r3, #4
 800949a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 800949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d8ec      	bhi.n	800947e <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d018      	beq.n	80094dc <_nx_ip_checksum_compute+0x15c>
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d014      	beq.n	80094dc <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 80094b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d10a      	bne.n	80094d4 <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ca:	4413      	add	r3, r2
 80094cc:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3b02      	subs	r3, #2
 80094d2:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094da:	e001      	b.n	80094e0 <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1a3      	bne.n	800942e <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01f      	beq.n	800952c <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d104      	bne.n	8009500 <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	3301      	adds	r3, #1
 80094fa:	2200      	movs	r2, #0
 80094fc:	701a      	strb	r2, [r3, #0]
 80094fe:	e00f      	b.n	8009520 <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b03      	cmp	r3, #3
 8009504:	d10c      	bne.n	8009520 <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950e:	4413      	add	r3, r2
 8009510:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	3302      	adds	r3, #2
 8009516:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	3301      	adds	r3, #1
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	461a      	mov	r2, r3
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	4413      	add	r3, r2
 800952a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800952c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952e:	0c1a      	lsrs	r2, r3, #16
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	b29b      	uxth	r3, r3
 8009534:	4413      	add	r3, r2
 8009536:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953a:	0c1a      	lsrs	r2, r3, #16
 800953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953e:	b29b      	uxth	r3, r3
 8009540:	4413      	add	r3, r2
 8009542:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 8009544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009546:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8009548:	8b7b      	ldrh	r3, [r7, #26]
 800954a:	ba5b      	rev16	r3, r3
 800954c:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 800954e:	8b7b      	ldrh	r3, [r7, #26]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3738      	adds	r7, #56	; 0x38
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b092      	sub	sp, #72	; 0x48
 800955c:	af06      	add	r7, sp, #24
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800956a:	4b8a      	ldr	r3, [pc, #552]	; (8009794 <_nx_ip_create+0x23c>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b8a      	ldr	r3, [pc, #552]	; (8009798 <_nx_ip_create+0x240>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	431a      	orrs	r2, r3
 8009574:	4b89      	ldr	r3, [pc, #548]	; (800979c <_nx_ip_create+0x244>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 800957a:	4b89      	ldr	r3, [pc, #548]	; (80097a0 <_nx_ip_create+0x248>)
 800957c:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800957e:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8009580:	4b88      	ldr	r3, [pc, #544]	; (80097a4 <_nx_ip_create+0x24c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4313      	orrs	r3, r2
 8009586:	4a88      	ldr	r2, [pc, #544]	; (80097a8 <_nx_ip_create+0x250>)
 8009588:	7812      	ldrb	r2, [r2, #0]
 800958a:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 8009590:	234a      	movs	r3, #74	; 0x4a
 8009592:	e0fb      	b.n	800978c <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8009594:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f00c f8a8 	bl	80156f0 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	f8c3 2730 	str.w	r2, [r3, #1840]	; 0x730

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	401a      	ands	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095d0:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4a75      	ldr	r2, [pc, #468]	; (80097ac <_nx_ip_create+0x254>)
 80095d8:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80095dc:	2300      	movs	r3, #0
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e0:	e00f      	b.n	8009602 <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	b2d8      	uxtb	r0, r3
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	440b      	add	r3, r1
 80095f4:	f203 7323 	addw	r3, r3, #1827	; 0x723
 80095f8:	4602      	mov	r2, r0
 80095fa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	3301      	adds	r3, #1
 8009600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	2b01      	cmp	r3, #1
 8009606:	d9ec      	bls.n	80095e2 <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4a69      	ldr	r2, [pc, #420]	; (80097b0 <_nx_ip_create+0x258>)
 800960c:	f8c3 276c 	str.w	r2, [r3, #1900]	; 0x76c


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4a66      	ldr	r2, [pc, #408]	; (80097b4 <_nx_ip_create+0x25c>)
 800961c:	f8c3 2780 	str.w	r2, [r3, #1920]	; 0x780
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009626:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8009630:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f8c3 27a8 	str.w	r2, [r3, #1960]	; 0x7a8

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800964a:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f640 72ff 	movw	r2, #4095	; 0xfff
 800965c:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2201      	movs	r2, #1
 800966a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009672:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800967c:	2200      	movs	r2, #0
 800967e:	68b9      	ldr	r1, [r7, #8]
 8009680:	4618      	mov	r0, r3
 8009682:	f008 fdf7 	bl	8012274 <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	4618      	mov	r0, r3
 8009690:	f008 f980 	bl	8011994 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8009694:	f009 fe98 	bl	80133c8 <_tx_thread_identify>
 8009698:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 80096a0:	f107 0310 	add.w	r3, r7, #16
 80096a4:	461a      	mov	r2, r3
 80096a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80096a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096aa:	f009 fee7 	bl	801347c <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	2301      	movs	r3, #1
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	2301      	movs	r3, #1
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c0:	9303      	str	r3, [sp, #12]
 80096c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c4:	9302      	str	r3, [sp, #8]
 80096c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	4613      	mov	r3, r2
 80096d0:	4a39      	ldr	r2, [pc, #228]	; (80097b8 <_nx_ip_create+0x260>)
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	f009 fd28 	bl	8013128 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2201      	movs	r2, #1
 80096e2:	9202      	str	r2, [sp, #8]
 80096e4:	2264      	movs	r2, #100	; 0x64
 80096e6:	9201      	str	r2, [sp, #4]
 80096e8:	2264      	movs	r2, #100	; 0x64
 80096ea:	9200      	str	r2, [sp, #0]
 80096ec:	4a33      	ldr	r2, [pc, #204]	; (80097bc <_nx_ip_create+0x264>)
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	f00a fbd6 	bl	8013ea0 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	4a32      	ldr	r2, [pc, #200]	; (80097c0 <_nx_ip_create+0x268>)
 80096f8:	f8c3 27bc 	str.w	r2, [r3, #1980]	; 0x7bc
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009700:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009702:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009704:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009706:	b672      	cpsid	i
    return(int_posture);
 8009708:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 800970a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4a2d      	ldr	r2, [pc, #180]	; (80097c4 <_nx_ip_create+0x26c>)
 8009710:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8009712:	4b2d      	ldr	r3, [pc, #180]	; (80097c8 <_nx_ip_create+0x270>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d017      	beq.n	800974a <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 800971a:	4b2b      	ldr	r3, [pc, #172]	; (80097c8 <_nx_ip_create+0x270>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8009722:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8009724:	4b28      	ldr	r3, [pc, #160]	; (80097c8 <_nx_ip_create+0x270>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6a3a      	ldr	r2, [r7, #32]
 800973a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 800973e:	4b22      	ldr	r3, [pc, #136]	; (80097c8 <_nx_ip_create+0x270>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 8009748:	e00a      	b.n	8009760 <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 800974a:	4a1f      	ldr	r2, [pc, #124]	; (80097c8 <_nx_ip_create+0x270>)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8009760:	4b1a      	ldr	r3, [pc, #104]	; (80097cc <_nx_ip_create+0x274>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	4a19      	ldr	r2, [pc, #100]	; (80097cc <_nx_ip_create+0x274>)
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f383 8810 	msr	PRIMASK, r3
}
 8009774:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f107 0210 	add.w	r2, r7, #16
 8009782:	4619      	mov	r1, r3
 8009784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009786:	f009 fe79 	bl	801347c <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3730      	adds	r7, #48	; 0x30
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	240022dc 	.word	0x240022dc
 8009798:	240022ec 	.word	0x240022ec
 800979c:	240022e4 	.word	0x240022e4
 80097a0:	240022e0 	.word	0x240022e0
 80097a4:	240022e8 	.word	0x240022e8
 80097a8:	24000028 	.word	0x24000028
 80097ac:	08016b38 	.word	0x08016b38
 80097b0:	08016b3c 	.word	0x08016b3c
 80097b4:	7f000001 	.word	0x7f000001
 80097b8:	0800abb9 	.word	0x0800abb9
 80097bc:	0800a88d 	.word	0x0800a88d
 80097c0:	0800b181 	.word	0x0800b181
 80097c4:	49502020 	.word	0x49502020
 80097c8:	240022d0 	.word	0x240022d0
 80097cc:	240022cc 	.word	0x240022cc

080097d0 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	; 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d053      	beq.n	800988a <_nx_ip_deferred_link_status_process+0xba>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80097e2:	2300      	movs	r3, #0
 80097e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097e6:	e04c      	b.n	8009882 <_nx_ip_deferred_link_status_process+0xb2>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	011b      	lsls	r3, r3, #4
 80097f4:	440b      	add	r3, r1
 80097f6:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d03d      	beq.n	800987c <_nx_ip_deferred_link_status_process+0xac>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	440b      	add	r3, r1
 800980e:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009812:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009814:	2b00      	cmp	r3, #0
 8009816:	d031      	beq.n	800987c <_nx_ip_deferred_link_status_process+0xac>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	440b      	add	r3, r1
 8009826:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800982a:	2200      	movs	r2, #0
 800982c:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8009832:	230a      	movs	r3, #10
 8009834:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8009836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	4413      	add	r3, r2
 8009848:	3304      	adds	r3, #4
 800984a:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 800984c:	f107 0308 	add.w	r3, r7, #8
 8009850:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	011b      	lsls	r3, r3, #4
 800985e:	440b      	add	r3, r1
 8009860:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f107 020c 	add.w	r2, r7, #12
 800986a:	4610      	mov	r0, r2
 800986c:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987e:	3301      	adds	r3, #1
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0af      	beq.n	80097e8 <_nx_ip_deferred_link_status_process+0x18>
 8009888:	e000      	b.n	800988c <_nx_ip_deferred_link_status_process+0xbc>
        return;
 800988a:	bf00      	nop
        }
    }
}
 800988c:	3730      	adds	r7, #48	; 0x30
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <_nx_ip_dispatch_process>:
/*                                            destination header check,   */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 80098a4:	e09a      	b.n	80099dc <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b32      	cmp	r3, #50	; 0x32
 80098aa:	d005      	beq.n	80098b8 <_nx_ip_dispatch_process+0x24>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b33      	cmp	r3, #51	; 0x33
 80098b0:	d104      	bne.n	80098bc <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 80098b2:	2301      	movs	r3, #1
 80098b4:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 80098b6:	e07d      	b.n	80099b4 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 80098b8:	2301      	movs	r3, #1
 80098ba:	e094      	b.n	80099e6 <_nx_ip_dispatch_process+0x152>
                    return(NX_INVALID_PACKET);
                }
            }
#endif /* NX_IPSEC_ENABLE */

            if (protocol == NX_PROTOCOL_TCP)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b06      	cmp	r3, #6
 80098c0:	d10f      	bne.n	80098e2 <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d007      	beq.n	80098dc <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80098d2:	68b9      	ldr	r1, [r7, #8]
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 80098d8:	2300      	movs	r3, #0
 80098da:	e084      	b.n	80099e6 <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 80098dc:	2301      	movs	r3, #1
 80098de:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 80098e0:	e067      	b.n	80099b2 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098e8:	2b04      	cmp	r3, #4
 80098ea:	d112      	bne.n	8009912 <_nx_ip_dispatch_process+0x7e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d10f      	bne.n	8009912 <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d007      	beq.n	800990c <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	4798      	blx	r3
                    return(0);
 8009908:	2300      	movs	r3, #0
 800990a:	e06c      	b.n	80099e6 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 800990c:	2301      	movs	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e04f      	b.n	80099b2 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009918:	2b04      	cmp	r3, #4
 800991a:	d112      	bne.n	8009942 <_nx_ip_dispatch_process+0xae>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d10f      	bne.n	8009942 <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8009928:	2b00      	cmp	r3, #0
 800992a:	d007      	beq.n	800993c <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8009932:	68b9      	ldr	r1, [r7, #8]
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	4798      	blx	r3
                    return(0);
 8009938:	2300      	movs	r3, #0
 800993a:	e054      	b.n	80099e6 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	e037      	b.n	80099b2 <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b11      	cmp	r3, #17
 8009946:	d10f      	bne.n	8009968 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800994e:	2b00      	cmp	r3, #0
 8009950:	d007      	beq.n	8009962 <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	4798      	blx	r3
                        return(0);
 800995e:	2300      	movs	r3, #0
 8009960:	e041      	b.n	80099e6 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8009962:	2301      	movs	r3, #1
 8009964:	617b      	str	r3, [r7, #20]
            break;
 8009966:	e024      	b.n	80099b2 <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00c      	beq.n	800998c <_nx_ip_dispatch_process+0xf8>
                    if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	0411      	lsls	r1, r2, #16
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	4798      	blx	r3
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <_nx_ip_dispatch_process+0xf8>
                        return(0);
 8009988:	2300      	movs	r3, #0
 800998a:	e02c      	b.n	80099e6 <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009992:	2b04      	cmp	r3, #4
 8009994:	d105      	bne.n	80099a2 <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 8009996:	2300      	movs	r3, #0
 8009998:	4a15      	ldr	r2, [pc, #84]	; (80099f0 <_nx_ip_dispatch_process+0x15c>)
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff fb23 	bl	8008fe8 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 80099ac:	2301      	movs	r3, #1
 80099ae:	617b      	str	r3, [r7, #20]
            break;
 80099b0:	e7ff      	b.n	80099b2 <_nx_ip_dispatch_process+0x11e>
 80099b2:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	1e5a      	subs	r2, r3, #1
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	1ad2      	subs	r2, r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f43f af61 	beq.w	80098a6 <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 80099e4:	697b      	ldr	r3, [r7, #20]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	03020000 	.word	0x03020000

080099f4 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009a02:	2200      	movs	r2, #0
 8009a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f008 f8f3 	bl	8011bf4 <_tx_event_flags_set>
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b09e      	sub	sp, #120	; 0x78
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]
 8009a22:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a36:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	795b      	ldrb	r3, [r3, #5]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 8179 	beq.w	8009d3a <_nx_ip_driver_packet_send+0x324>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d00d      	beq.n	8009a7c <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a64:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8009a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d110      	bne.n	8009a8e <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 8009a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a6e:	43da      	mvns	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	401a      	ands	r2, r3
 8009a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a76:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d108      	bne.n	8009a8e <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8009a7c:	2304      	movs	r3, #4
 8009a7e:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8009a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a84:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8009a86:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a8c:	e167      	b.n	8009d5e <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a92:	695b      	ldr	r3, [r3, #20]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d105      	bne.n	8009aa6 <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa4:	e15b      	b.n	8009d5e <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009aac:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009ab0:	d133      	bne.n	8009b1a <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8009ab6:	e00f      	b.n	8009ad8 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 8009ab8:	68f9      	ldr	r1, [r7, #12]
 8009aba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	440b      	add	r3, r1
 8009ac6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d006      	beq.n	8009ae0 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 8009ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8009ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ada:	2b06      	cmp	r3, #6
 8009adc:	d9ec      	bls.n	8009ab8 <_nx_ip_driver_packet_send+0xa2>
 8009ade:	e000      	b.n	8009ae2 <_nx_ip_driver_packet_send+0xcc>
                    break;
 8009ae0:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 8009ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ae4:	2b06      	cmp	r3, #6
 8009ae6:	d80e      	bhi.n	8009b06 <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 8009ae8:	68f9      	ldr	r1, [r7, #12]
 8009aea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8009b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0a:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009b12:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
 8009b18:	e121      	b.n	8009d5e <_nx_ip_driver_packet_send+0x348>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 8009b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b1e:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	0a1a      	lsrs	r2, r3, #8
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4413      	add	r3, r2
 8009b28:	f003 031f 	and.w	r3, r3, #31
 8009b2c:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b32:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 8009b3e:	e014      	b.n	8009b6a <_nx_ip_driver_packet_send+0x154>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8009b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d013      	beq.n	8009b72 <_nx_ip_driver_packet_send+0x15c>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 8009b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b54:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d102      	bne.n	8009b6a <_nx_ip_driver_packet_send+0x154>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 8009b68:	e004      	b.n	8009b74 <_nx_ip_driver_packet_send+0x15e>
            while (arp_ptr)
 8009b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e7      	bne.n	8009b40 <_nx_ip_driver_packet_send+0x12a>
 8009b70:	e000      	b.n	8009b74 <_nx_ip_driver_packet_send+0x15e>
                    break;
 8009b72:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 8009b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d023      	beq.n	8009bc2 <_nx_ip_driver_packet_send+0x1ac>
 8009b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b82:	4313      	orrs	r3, r2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01c      	beq.n	8009bc2 <_nx_ip_driver_packet_send+0x1ac>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b88:	f3ef 8310 	mrs	r3, PRIMASK
 8009b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8009b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8009b90:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b92:	b672      	cpsid	i
    return(int_posture);
 8009b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 8009b96:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8009b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8009b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba2:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ba8:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009bb2:	605a      	str	r2, [r3, #4]
 8009bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bb6:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bba:	f383 8810 	msr	PRIMASK, r3
}
 8009bbe:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 8009bc0:	e0cd      	b.n	8009d5e <_nx_ip_driver_packet_send+0x348>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d910      	bls.n	8009bf2 <_nx_ip_driver_packet_send+0x1dc>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d002      	beq.n	8009be0 <_nx_ip_driver_packet_send+0x1ca>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d008      	beq.n	8009bf2 <_nx_ip_driver_packet_send+0x1dc>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 8009bea:	68b8      	ldr	r0, [r7, #8]
 8009bec:	f002 fa3a 	bl	800c064 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 8009bf0:	e134      	b.n	8009e5c <_nx_ip_driver_packet_send+0x446>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 8009bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d052      	beq.n	8009c9e <_nx_ip_driver_packet_send+0x288>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8009bfc:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8009bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 8009c00:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c02:	b672      	cpsid	i
    return(int_posture);
 8009c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 8009c06:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 8009c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <_nx_ip_driver_packet_send+0x214>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8009c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8009c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c22:	f383 8810 	msr	PRIMASK, r3
}
 8009c26:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 8009c28:	e117      	b.n	8009e5a <_nx_ip_driver_packet_send+0x444>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 8009c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2e:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 8009c30:	2301      	movs	r3, #1
 8009c32:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 8009c34:	e005      	b.n	8009c42 <_nx_ip_driver_packet_send+0x22c>
                            queued_count++;
 8009c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c38:	3301      	adds	r3, #1
 8009c3a:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 8009c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 8009c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1f5      	bne.n	8009c36 <_nx_ip_driver_packet_send+0x220>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 8009c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8009c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d913      	bls.n	8009c82 <_nx_ip_driver_packet_send+0x26c>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 8009c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5e:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 8009c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c66:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 8009c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	655a      	str	r2, [r3, #84]	; 0x54
 8009c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c84:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	f383 8810 	msr	PRIMASK, r3
}
 8009c8c:	bf00      	nop
                        if (remove_packet)
 8009c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 80e2 	beq.w	8009e5a <_nx_ip_driver_packet_send+0x444>
                            _nx_packet_transmit_release(remove_packet);
 8009c96:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009c98:	f002 f9e4 	bl	800c064 <_nx_packet_transmit_release>
                return;
 8009c9c:	e0dd      	b.n	8009e5a <_nx_ip_driver_packet_send+0x444>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00f      	beq.n	8009cc8 <_nx_ip_driver_packet_send+0x2b2>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8009cae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009cb0:	f502 72c9 	add.w	r2, r2, #402	; 0x192
 8009cb4:	0092      	lsls	r2, r2, #2
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	440a      	add	r2, r1
 8009cba:	1d11      	adds	r1, r2, #4
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	4798      	blx	r3
 8009cc2:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00d      	beq.n	8009ce4 <_nx_ip_driver_packet_send+0x2ce>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 8009cdc:	68b8      	ldr	r0, [r7, #8]
 8009cde:	f002 f9c1 	bl	800c064 <_nx_packet_transmit_release>
                        return;
 8009ce2:	e0bb      	b.n	8009e5c <_nx_ip_driver_packet_send+0x446>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ce8:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 8009cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 8009cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfe:	2200      	movs	r2, #0
 8009d00:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 8009d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d04:	2200      	movs	r2, #0
 8009d06:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 8009d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d0a:	220a      	movs	r2, #10
 8009d0c:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 8009d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d10:	2200      	movs	r2, #0
 8009d12:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d1a:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8009d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	4798      	blx	r3
                return;
 8009d38:	e08f      	b.n	8009e5a <_nx_ip_driver_packet_send+0x444>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009d40:	d302      	bcc.n	8009d48 <_nx_ip_driver_packet_send+0x332>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8009d42:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	da05      	bge.n	8009d54 <_nx_ip_driver_packet_send+0x33e>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d104      	bne.n	8009d5e <_nx_ip_driver_packet_send+0x348>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 8009d5e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d131      	bne.n	8009dca <_nx_ip_driver_packet_send+0x3b4>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8009d6c:	f107 0114 	add.w	r1, r7, #20
 8009d70:	2300      	movs	r3, #0
 8009d72:	68b8      	ldr	r0, [r7, #8]
 8009d74:	f001 fd30 	bl	800b7d8 <_nx_packet_copy>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d11b      	bne.n	8009db6 <_nx_ip_driver_packet_send+0x3a0>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <_nx_ip_driver_packet_send+0x378>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fb0f 	bl	800a3ac <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	699a      	ldr	r2, [r3, #24]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	4413      	add	r3, r2
 8009da2:	f1a3 0214 	sub.w	r2, r3, #20
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	4619      	mov	r1, r3
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 fc88 	bl	800a6c4 <_nx_ip_packet_deferred_receive>
 8009db4:	e009      	b.n	8009dca <_nx_ip_driver_packet_send+0x3b4>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d040      	beq.n	8009e52 <_nx_ip_driver_packet_send+0x43c>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d919      	bls.n	8009e12 <_nx_ip_driver_packet_send+0x3fc>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <_nx_ip_driver_packet_send+0x3ea>
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dee:	d007      	beq.n	8009e00 <_nx_ip_driver_packet_send+0x3ea>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009df6:	f107 0218 	add.w	r2, r7, #24
 8009dfa:	4610      	mov	r0, r2
 8009dfc:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 8009dfe:	e02d      	b.n	8009e5c <_nx_ip_driver_packet_send+0x446>
                ip_ptr -> nx_ip_send_packets_dropped++;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 8009e0a:	68b8      	ldr	r0, [r7, #8]
 8009e0c:	f002 f92a 	bl	800c064 <_nx_packet_transmit_release>
            return;
 8009e10:	e024      	b.n	8009e5c <_nx_ip_driver_packet_send+0x446>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	4413      	add	r3, r2
 8009e26:	f1a3 0214 	sub.w	r2, r3, #20
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d104      	bne.n	8009e42 <_nx_ip_driver_packet_send+0x42c>
 8009e38:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3c:	f009 fca4 	bl	8013788 <_tx_thread_sleep>
 8009e40:	e7fa      	b.n	8009e38 <_nx_ip_driver_packet_send+0x422>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e48:	f107 0218 	add.w	r2, r7, #24
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	4798      	blx	r3
 8009e50:	e004      	b.n	8009e5c <_nx_ip_driver_packet_send+0x446>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 8009e52:	68b8      	ldr	r0, [r7, #8]
 8009e54:	f002 f906 	bl	800c064 <_nx_packet_transmit_release>
 8009e58:	e000      	b.n	8009e5c <_nx_ip_driver_packet_send+0x446>
                return;
 8009e5a:	bf00      	nop
    }
}
 8009e5c:	3778      	adds	r7, #120	; 0x78
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <_nx_ip_fast_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_ip_fast_periodic_timer_entry(ULONG ip_address)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_FAST_EVENT, TX_OR);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009e74:	2200      	movs	r2, #0
 8009e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f007 feba 	bl	8011bf4 <_tx_event_flags_set>
}
 8009e80:	bf00      	nop
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <_nx_ip_fast_periodic_timer_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_fast_periodic_timer_create(NX_IP *ip_ptr)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af04      	add	r7, sp, #16
 8009e8e:	6078      	str	r0, [r7, #4]

ULONG _nx_ip_fast_timer_rate;

    if (ip_ptr -> nx_ip_fast_periodic_timer_created)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d116      	bne.n	8009ec8 <_nx_ip_fast_periodic_timer_create+0x40>
    {
        return;
    }

    _nx_ip_fast_timer_rate =  (NX_IP_PERIODIC_RATE + (NX_IP_FAST_TIMER_RATE - 1)) / NX_IP_FAST_TIMER_RATE;
 8009e9a:	230a      	movs	r3, #10
 8009e9c:	60fb      	str	r3, [r7, #12]

    /* Create the fast TCP timer.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f503 60c4 	add.w	r0, r3, #1568	; 0x620
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6859      	ldr	r1, [r3, #4]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	2301      	movs	r3, #1
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	4a05      	ldr	r2, [pc, #20]	; (8009ed0 <_nx_ip_fast_periodic_timer_create+0x48>)
 8009eba:	f009 fff1 	bl	8013ea0 <_tx_timer_create>
                    _nx_ip_fast_timer_rate, _nx_ip_fast_timer_rate, TX_AUTO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr)

    /* Set the flag to indicate that the fast timer has been created. */
    ip_ptr -> nx_ip_fast_periodic_timer_created = 1;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 8009ec6:	e000      	b.n	8009eca <_nx_ip_fast_periodic_timer_create+0x42>
        return;
 8009ec8:	bf00      	nop
}
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	08009e63 	.word	0x08009e63

08009ed4 <_nx_ip_gateway_address_clear>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_clear(NX_IP *ip_ptr)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be cleared.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f008 fac8 	bl	801247c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009eec:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef0:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009ef4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ef6:	b672      	cpsid	i
    return(int_posture);
 8009ef8:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts.  */
    TX_DISABLE
 8009efa:	617b      	str	r3, [r7, #20]

    /* Clear the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  0;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = NX_NULL;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	60da      	str	r2, [r3, #12]
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f383 8810 	msr	PRIMASK, r3
}
 8009f12:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f008 fd26 	bl	801296c <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009f20:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <_nx_ip_gateway_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_get(NX_IP *ip_ptr, ULONG *ip_address)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
UINT status;


    /* Initialize the return value to be NX_NOT_FOUND.  If the gateway address
       is set, the return value changes to NX_SUCCESS. */
    status = NX_NOT_FOUND;
 8009f34:	234e      	movs	r3, #78	; 0x4e
 8009f36:	60fb      	str	r3, [r7, #12]

    /* Obtain the IP internal mutex to get the Gateway IP address.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8009f42:	4618      	mov	r0, r3
 8009f44:	f008 fa9a 	bl	801247c <_tx_mutex_get>

    if (ip_ptr -> nx_ip_gateway_address)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d005      	beq.n	8009f5c <_nx_ip_gateway_address_get+0x32>
    {

        /* Setup the Gateway IP address.  */
        *ip_address = ip_ptr -> nx_ip_gateway_address;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	601a      	str	r2, [r3, #0]

        status = NX_SUCCESS;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f62:	4618      	mov	r0, r3
 8009f64:	f008 fd02 	bl	801296c <_tx_mutex_put>

    /* Return completion status.  */
    return(status);
 8009f68:	68fb      	ldr	r3, [r7, #12]
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <_nx_ip_gateway_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_set(NX_IP *ip_ptr, ULONG ip_address)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b088      	sub	sp, #32
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]

#ifndef NX_DISABLE_IPV4
INT           i;
TX_INTERRUPT_SAVE_AREA

NX_INTERFACE *ip_interface_ptr = NX_NULL;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	61bb      	str	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, ip_address, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be setup.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f86:	f04f 31ff 	mov.w	r1, #4294967295
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f008 fa76 	bl	801247c <_tx_mutex_get>

    /* Loop through all the interfaces to find the one for the input gateway address. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009f90:	2300      	movs	r3, #0
 8009f92:	61fb      	str	r3, [r7, #28]
 8009f94:	e033      	b.n	8009ffe <_nx_ip_gateway_address_set+0x8c>
    {

        /* Must be a valid interface. Match the network subnet of the interface and input address. */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	011b      	lsls	r3, r3, #4
 8009fa2:	440b      	add	r3, r1
 8009fa4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d024      	beq.n	8009ff8 <_nx_ip_gateway_address_set+0x86>
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	440b      	add	r3, r1
 8009fbc:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	ea02 0103 	and.w	r1, r2, r3
             ip_ptr -> nx_ip_interface[i].nx_interface_ip_network))
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	69fa      	ldr	r2, [r7, #28]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	011b      	lsls	r3, r3, #4
 8009fd4:	4403      	add	r3, r0
 8009fd6:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8009fda:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009fdc:	4299      	cmp	r1, r3
 8009fde:	d10b      	bne.n	8009ff8 <_nx_ip_gateway_address_set+0x86>
        {

            /* This is the interface for the gateway.  */
            ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	61bb      	str	r3, [r7, #24]

            /* Break out of the search. */
            break;
 8009ff6:	e005      	b.n	800a004 <_nx_ip_gateway_address_set+0x92>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	2b00      	cmp	r3, #0
 800a002:	ddc8      	ble.n	8009f96 <_nx_ip_gateway_address_set+0x24>
        }
    }

    /* Check if we found an interface. */
    if (ip_interface_ptr == NX_NULL)
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d107      	bne.n	800a01a <_nx_ip_gateway_address_set+0xa8>
    {

        /* None found. Unlock the mutex, and return the error status. */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a010:	4618      	mov	r0, r3
 800a012:	f008 fcab 	bl	801296c <_tx_mutex_put>

        return(NX_IP_ADDRESS_ERROR);
 800a016:	2321      	movs	r3, #33	; 0x21
 800a018:	e01a      	b.n	800a050 <_nx_ip_gateway_address_set+0xde>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a01a:	f3ef 8310 	mrs	r3, PRIMASK
 800a01e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a020:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800a022:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a024:	b672      	cpsid	i
    return(int_posture);
 800a026:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a028:	617b      	str	r3, [r7, #20]

    /* Setup the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  ip_address;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = ip_interface_ptr;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	60da      	str	r2, [r3, #12]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f383 8810 	msr	PRIMASK, r3
}
 800a040:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a048:	4618      	mov	r0, r3
 800a04a:	f008 fc8f 	bl	801296c <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a04e:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a050:	4618      	mov	r0, r3
 800a052:	3720      	adds	r7, #32
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <_nx_ip_header_add>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08c      	sub	sp, #48	; 0x30
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 800a06a:	2301      	movs	r3, #1
 800a06c:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 800a06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a074:	d106      	bne.n	800a084 <_nx_ip_header_add+0x2c>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d101      	bne.n	800a084 <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 800a080:	2304      	movs	r3, #4
 800a082:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a08a:	f06f 0313 	mvn.w	r3, #19
 800a08e:	1a5b      	subs	r3, r3, r1
 800a090:	441a      	add	r2, r3
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	4413      	add	r3, r2
 800a09e:	f103 0214 	add.w	r2, r3, #20
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d204      	bcs.n	800a0bc <_nx_ip_header_add+0x64>
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b6:	f009 fb67 	bl	8013788 <_tx_thread_sleep>
 800a0ba:	e7fa      	b.n	800a0b2 <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800a0d8:	3314      	adds	r3, #20
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d101      	bne.n	800a0f0 <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e08b      	b.n	800a208 <_nx_ip_header_add+0x1b0>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d009      	beq.n	800a10a <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	e008      	b.n	800a11c <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	b29a      	uxth	r2, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	4313      	orrs	r3, r2
 800a114:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a122:	1c59      	adds	r1, r3, #1
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 800a12a:	041a      	lsls	r2, r3, #16
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	431a      	orrs	r2, r3
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 800a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a136:	061a      	lsls	r2, r3, #24
 800a138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13a:	431a      	orrs	r2, r3
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a144:	695a      	ldr	r2, [r3, #20]
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	2b00      	cmp	r3, #0
 800a154:	d004      	beq.n	800a160 <_nx_ip_header_add+0x108>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	3314      	adds	r3, #20
 800a15c:	4a2c      	ldr	r2, [pc, #176]	; (800a210 <_nx_ip_header_add+0x1b8>)
 800a15e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	ba1a      	rev	r2, r3
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	ba1a      	rev	r2, r3
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	ba1a      	rev	r2, r3
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	ba1a      	rev	r2, r3
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	ba1a      	rev	r2, r3
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	2b00      	cmp	r3, #0
 800a196:	d008      	beq.n	800a1aa <_nx_ip_header_add+0x152>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	3314      	adds	r3, #20
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	3314      	adds	r3, #20
 800a1a6:	ba12      	rev	r2, r2
 800a1a8:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <_nx_ip_header_add+0x164>
    {
        compute_checksum = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01b      	beq.n	800a1fa <_nx_ip_header_add+0x1a2>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	2104      	movs	r1, #4
 800a1d0:	68b8      	ldr	r0, [r7, #8]
 800a1d2:	f7ff f8d5 	bl	8009380 <_nx_ip_checksum_compute>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	43db      	mvns	r3, r3
 800a1de:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	ba1b      	rev	r3, r3
 800a1ea:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	689a      	ldr	r2, [r3, #8]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	609a      	str	r2, [r3, #8]
 800a1f8:	e005      	b.n	800a206 <_nx_ip_header_add+0x1ae>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	f043 0201 	orr.w	r2, r3, #1
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3728      	adds	r7, #40	; 0x28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	94040000 	.word	0x94040000

0800a214 <_nx_ip_interface_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_get(NX_IP *ip_ptr, UINT interface_index, ULONG *ip_address, ULONG *network_mask)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	603b      	str	r3, [r7, #0]
                            ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);



    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a228:	f04f 31ff 	mov.w	r1, #4294967295
 800a22c:	4618      	mov	r0, r3
 800a22e:	f008 f925 	bl	801247c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a232:	f3ef 8310 	mrs	r3, PRIMASK
 800a236:	617b      	str	r3, [r7, #20]
    return(posture);
 800a238:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a23a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a23c:	b672      	cpsid	i
    return(int_posture);
 800a23e:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a240:	61fb      	str	r3, [r7, #28]


    /* Pickup the IP address and the network mask. */
    *ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	011b      	lsls	r3, r3, #4
 800a24e:	440b      	add	r3, r1
 800a250:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	440b      	add	r3, r1
 800a268:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	f383 8810 	msr	PRIMASK, r3
}
 800a27c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a284:	4618      	mov	r0, r3
 800a286:	f008 fb71 	bl	801296c <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a28a:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3720      	adds	r7, #32
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <_nx_ip_interface_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_set(NX_IP *ip_ptr, UINT interface_index, ULONG ip_address, ULONG network_mask)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08c      	sub	sp, #48	; 0x30
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_SET, ip_ptr, ip_address, network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a2a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f008 f8e5 	bl	801247c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2b6:	617b      	str	r3, [r7, #20]
    return(posture);
 800a2b8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a2ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2bc:	b672      	cpsid	i
    return(int_posture);
 800a2be:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a2c0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save previous IP address and network mask.  */
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	440b      	add	r3, r1
 800a2d0:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	62bb      	str	r3, [r7, #40]	; 0x28
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 800a2d8:	68f9      	ldr	r1, [r7, #12]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	011b      	lsls	r3, r3, #4
 800a2e4:	440b      	add	r3, r1
 800a2e6:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the current notification callback and additional information pointers.  */
    address_change_notify =  ip_ptr -> nx_ip_address_change_notify;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f4:	623b      	str	r3, [r7, #32]
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2fc:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address and the network mask. */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	011b      	lsls	r3, r3, #4
 800a30a:	440b      	add	r3, r1
 800a30c:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
 800a314:	68f9      	ldr	r1, [r7, #12]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	4613      	mov	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	440b      	add	r3, r1
 800a322:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	ea02 0103 	and.w	r1, r2, r3
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	4403      	add	r3, r0
 800a340:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 800a344:	6019      	str	r1, [r3, #0]

    /* Ensure the RARP function is disabled.  */
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
    ip_ptr -> nx_ip_rarp_queue_process =    NX_NULL;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	f383 8810 	msr	PRIMASK, r3
}
 800a360:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a368:	4618      	mov	r0, r3
 800a36a:	f008 faff 	bl	801296c <_tx_mutex_put>

    /* Determine if the application should be notified of the IP address and/or
       network mask change.  */
    if ((address_change_notify) &&
 800a36e:	6a3b      	ldr	r3, [r7, #32]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <_nx_ip_interface_address_set+0xf8>
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a378:	429a      	cmp	r2, r3
 800a37a:	d103      	bne.n	800a384 <_nx_ip_interface_address_set+0xf0>
        ((ip_address != previous_ip_address) || (network_mask != previous_network_mask)))
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	429a      	cmp	r2, r3
 800a382:	d003      	beq.n	800a38c <_nx_ip_interface_address_set+0xf8>
    {

        /* Yes, call the application's IP address change notify function.  */
        (address_change_notify)(ip_ptr, additional_info);
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	69f9      	ldr	r1, [r7, #28]
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	4798      	blx	r3
    }

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 800a38c:	68f9      	ldr	r1, [r7, #12]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	440b      	add	r3, r1
 800a39a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800a39e:	2200      	movs	r2, #0
 800a3a0:	601a      	str	r2, [r3, #0]

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a3a2:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3730      	adds	r7, #48	; 0x30
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b098      	sub	sp, #96	; 0x60
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 800a3be:	2304      	movs	r3, #4
 800a3c0:	657b      	str	r3, [r7, #84]	; 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop to process headers. */
    while (!is_done)
 800a3c8:	e170      	b.n	800a6ac <_nx_ip_packet_checksum_compute+0x300>
 800a3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	f200 8168 	bhi.w	800a6a4 <_nx_ip_packet_checksum_compute+0x2f8>
 800a3d4:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <_nx_ip_packet_checksum_compute+0x30>)
 800a3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3da:	bf00      	nop
 800a3dc:	0800a59f 	.word	0x0800a59f
 800a3e0:	0800a5ff 	.word	0x0800a5ff
 800a3e4:	0800a6a5 	.word	0x0800a6a5
 800a3e8:	0800a421 	.word	0x0800a421
 800a3ec:	0800a6a5 	.word	0x0800a6a5
 800a3f0:	0800a4d1 	.word	0x0800a4d1
 800a3f4:	0800a6a5 	.word	0x0800a6a5
 800a3f8:	0800a6a5 	.word	0x0800a6a5
 800a3fc:	0800a6a5 	.word	0x0800a6a5
 800a400:	0800a6a5 	.word	0x0800a6a5
 800a404:	0800a6a5 	.word	0x0800a6a5
 800a408:	0800a6a5 	.word	0x0800a6a5
 800a40c:	0800a6a5 	.word	0x0800a6a5
 800a410:	0800a6a5 	.word	0x0800a6a5
 800a414:	0800a6a5 	.word	0x0800a6a5
 800a418:	0800a6a5 	.word	0x0800a6a5
 800a41c:	0800a53b 	.word	0x0800a53b
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 800a42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42e:	ba1b      	rev	r3, r3
 800a430:	637b      	str	r3, [r7, #52]	; 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	0e1b      	lsrs	r3, r3, #24
 800a436:	f003 030f 	and.w	r3, r3, #15
 800a43a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a440:	f003 0301 	and.w	r3, r3, #1
 800a444:	2b00      	cmp	r3, #0
 800a446:	d01f      	beq.n	800a488 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800a44c:	2300      	movs	r3, #0
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	2300      	movs	r3, #0
 800a452:	2104      	movs	r1, #4
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7fe ff93 	bl	8009380 <_nx_ip_checksum_compute>
 800a45a:	4603      	mov	r3, r0
 800a45c:	647b      	str	r3, [r7, #68]	; 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 800a45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a460:	43db      	mvns	r3, r3
 800a462:	637b      	str	r3, [r7, #52]	; 0x34
                val = val & NX_LOWER_16_MASK;
 800a464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a466:	b29b      	uxth	r3, r3
 800a468:	637b      	str	r3, [r7, #52]	; 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 800a46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46c:	ba1b      	rev	r3, r3
 800a46e:	637b      	str	r3, [r7, #52]	; 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	689a      	ldr	r2, [r3, #8]
 800a474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a476:	431a      	orrs	r2, r3
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	f023 0201 	bic.w	r2, r3, #1
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	639a      	str	r2, [r3, #56]	; 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	ba1b      	rev	r3, r3
 800a498:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	ba1b      	rev	r3, r3
 800a49e:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	ba1b      	rev	r3, r3
 800a4aa:	637b      	str	r3, [r7, #52]	; 0x34
            next_protocol = (val >> 16) & 0xFF;
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ae:	0c1b      	lsrs	r3, r3, #16
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	441a      	add	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	64fb      	str	r3, [r7, #76]	; 0x4c
            break;
 800a4ce:	e0ed      	b.n	800a6ac <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d02a      	beq.n	800a532 <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800a4dc:	f107 0218 	add.w	r2, r7, #24
 800a4e0:	f107 0308 	add.w	r3, r7, #8
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4ea:	2106      	movs	r1, #6
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7fe ff47 	bl	8009380 <_nx_ip_checksum_compute>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 800a4fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4fe:	43db      	mvns	r3, r3
 800a500:	b29b      	uxth	r3, r3
 800a502:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800a504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	ba1a      	rev	r2, r3
 800a50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a50c:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 800a50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a510:	691a      	ldr	r2, [r3, #16]
 800a512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a514:	041b      	lsls	r3, r3, #16
 800a516:	431a      	orrs	r2, r3
 800a518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a51a:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800a51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	ba1a      	rev	r2, r3
 800a522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a524:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52a:	f023 0204 	bic.w	r2, r3, #4
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800a532:	2301      	movs	r3, #1
 800a534:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a538:	e0b8      	b.n	800a6ac <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53e:	f003 0310 	and.w	r3, r3, #16
 800a542:	2b00      	cmp	r3, #0
 800a544:	d027      	beq.n	800a596 <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 800a546:	f107 0218 	add.w	r2, r7, #24
 800a54a:	f107 0308 	add.w	r3, r7, #8
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a554:	2111      	movs	r1, #17
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7fe ff12 	bl	8009380 <_nx_ip_checksum_compute>
 800a55c:	4603      	mov	r3, r0
 800a55e:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	643b      	str	r3, [r7, #64]	; 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	ba1a      	rev	r2, r3
 800a56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a56e:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 800a570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a576:	43db      	mvns	r3, r3
 800a578:	b29b      	uxth	r3, r3
 800a57a:	431a      	orrs	r2, r3
 800a57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a57e:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	ba1a      	rev	r2, r3
 800a586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a588:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58e:	f023 0210 	bic.w	r2, r3, #16
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800a596:	2301      	movs	r3, #1
 800a598:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a59c:	e086      	b.n	800a6ac <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d025      	beq.n	800a5f6 <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7fe fee2 	bl	8009380 <_nx_ip_checksum_compute>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	647b      	str	r3, [r7, #68]	; 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	ba1a      	rev	r2, r3
 800a5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ce:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5d6:	43db      	mvns	r3, r3
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	ba1a      	rev	r2, r3
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a5fc:	e056      	b.n	800a6ac <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a606:	2b00      	cmp	r3, #0
 800a608:	d048      	beq.n	800a69c <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	ba1a      	rev	r2, r3
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	ba1a      	rev	r2, r3
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	637b      	str	r3, [r7, #52]	; 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 800a62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62c:	0c1b      	lsrs	r3, r3, #16
 800a62e:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 800a630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a632:	b29b      	uxth	r3, r3
 800a634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a636:	4413      	add	r3, r2
 800a638:	647b      	str	r3, [r7, #68]	; 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 800a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 800a640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a642:	0c1b      	lsrs	r3, r3, #16
 800a644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a646:	4413      	add	r3, r2
 800a648:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 800a64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a650:	4413      	add	r3, r2
 800a652:	647b      	str	r3, [r7, #68]	; 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 800a654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a656:	0c1a      	lsrs	r2, r3, #16
 800a658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4413      	add	r3, r2
 800a65e:	647b      	str	r3, [r7, #68]	; 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 800a660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a662:	0c1a      	lsrs	r2, r3, #16
 800a664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a666:	b29b      	uxth	r3, r3
 800a668:	4413      	add	r3, r2
 800a66a:	647b      	str	r3, [r7, #68]	; 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a672:	43db      	mvns	r3, r3
 800a674:	b29b      	uxth	r3, r3
 800a676:	431a      	orrs	r2, r3
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 800a67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	ba1a      	rev	r2, r3
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	ba1a      	rev	r2, r3
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a694:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a6a2:	e003      	b.n	800a6ac <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a6aa:	bf00      	nop
    while (!is_done)
 800a6ac:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f43f ae8a 	beq.w	800a3ca <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ba:	609a      	str	r2, [r3, #8]
    return;
 800a6bc:	bf00      	nop
}
 800a6be:	3758      	adds	r7, #88	; 0x58
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b088      	sub	sp, #32
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a6ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a6d2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a6d4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a6d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a6d8:	b672      	cpsid	i
    return(int_posture);
 800a6da:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800a6dc:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d011      	beq.n	800a70c <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	f383 8810 	msr	PRIMASK, r3
}
 800a70a:	e019      	b.n	800a740 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2200      	movs	r2, #0
 800a720:	61da      	str	r2, [r3, #28]
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f383 8810 	msr	PRIMASK, r3
}
 800a72c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a734:	2200      	movs	r2, #0
 800a736:	2108      	movs	r1, #8
 800a738:	4618      	mov	r0, r3
 800a73a:	f007 fa5b 	bl	8011bf4 <_tx_event_flags_set>
    }
}
 800a73e:	bf00      	nop
 800a740:	bf00      	nop
 800a742:	3720      	adds	r7, #32
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <_nx_ip_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	1c5a      	adds	r2, r3, #1
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a760:	2b00      	cmp	r3, #0
 800a762:	d104      	bne.n	800a76e <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f203 721c 	addw	r2, r3, #1820	; 0x71c
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 800a776:	7bfb      	ldrb	r3, [r7, #15]
 800a778:	091b      	lsrs	r3, r3, #4
 800a77a:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	7bba      	ldrb	r2, [r7, #14]
 800a780:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	689a      	ldr	r2, [r3, #8]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d10b      	bne.n	800a7aa <_nx_ip_packet_receive+0x62>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d006      	beq.n	800a7aa <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
        return;
 800a7a8:	e00d      	b.n	800a7c6 <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ae:	1c5a      	adds	r2, r3, #1
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 800a7be:	6838      	ldr	r0, [r7, #0]
 800a7c0:	f001 fb98 	bl	800bef4 <_nx_packet_release>

    return;
 800a7c4:	bf00      	nop
}
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af04      	add	r7, sp, #16
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	1c5a      	adds	r2, r3, #1
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d114      	bne.n	800a816 <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f1a3 0214 	sub.w	r2, r3, #20
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	f103 0214 	add.w	r2, r3, #20
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800a80e:	68b8      	ldr	r0, [r7, #8]
 800a810:	f001 fc28 	bl	800c064 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 800a814:	e037      	b.n	800a886 <_nx_ip_packet_send+0xba>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, destination_ip, type_of_service, time_to_live, protocol, fragment);
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	9302      	str	r3, [sp, #8]
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7ff fc15 	bl	800a058 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	d120      	bne.n	800a876 <_nx_ip_packet_send+0xaa>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00b      	beq.n	800a856 <_nx_ip_packet_send+0x8a>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2200      	movs	r2, #0
 800a842:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a84a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f000 f82d 	bl	800a8b0 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <_nx_ip_packet_send+0x98>
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	2b00      	cmp	r3, #0
 800a862:	d108      	bne.n	800a876 <_nx_ip_packet_send+0xaa>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 800a86e:	68b8      	ldr	r0, [r7, #8]
 800a870:	f001 fbf8 	bl	800c064 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 800a874:	e007      	b.n	800a886 <_nx_ip_packet_send+0xba>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7ff f8c8 	bl	8009a16 <_nx_ip_driver_packet_send>
}
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f007 f9a6 	bl	8011bf4 <_tx_event_flags_set>
}
 800a8a8:	bf00      	nop
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8ca:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800a8ce:	d003      	beq.n	800a8d8 <_nx_ip_route_find+0x28>
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d6:	d133      	bne.n	800a940 <_nx_ip_route_find+0x90>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d123      	bne.n	800a92e <_nx_ip_route_find+0x7e>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	e01c      	b.n	800a926 <_nx_ip_route_find+0x76>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 800a8ec:	68f9      	ldr	r1, [r7, #12]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	440b      	add	r3, r1
 800a8fa:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00d      	beq.n	800a920 <_nx_ip_route_find+0x70>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	4413      	add	r3, r2
 800a916:	1d1a      	adds	r2, r3, #4
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 800a91c:	2300      	movs	r3, #0
 800a91e:	e141      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	3301      	adds	r3, #1
 800a924:	617b      	str	r3, [r7, #20]
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0df      	beq.n	800a8ec <_nx_ip_route_find+0x3c>
 800a92c:	e006      	b.n	800a93c <_nx_ip_route_find+0x8c>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	799b      	ldrb	r3, [r3, #6]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <_nx_ip_route_find+0x8c>
        {
            return(NX_SUCCESS);
 800a938:	2300      	movs	r3, #0
 800a93a:	e133      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 800a93c:	2321      	movs	r3, #33	; 0x21
 800a93e:	e131      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e02b      	b.n	800a99e <_nx_ip_route_find+0xee>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4613      	mov	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	4413      	add	r3, r2
 800a958:	3304      	adds	r3, #4
 800a95a:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	791b      	ldrb	r3, [r3, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d019      	beq.n	800a998 <_nx_ip_route_find+0xe8>
            (interface_ptr -> nx_interface_link_up) &&
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d015      	beq.n	800a998 <_nx_ip_route_find+0xe8>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	429a      	cmp	r2, r3
 800a974:	d110      	bne.n	800a998 <_nx_ip_route_find+0xe8>
            ((*ip_interface_ptr == NX_NULL) ||
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d004      	beq.n	800a988 <_nx_ip_route_find+0xd8>
             (*ip_interface_ptr == interface_ptr)))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	429a      	cmp	r2, r3
 800a986:	d107      	bne.n	800a998 <_nx_ip_route_find+0xe8>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800a994:	2300      	movs	r3, #0
 800a996:	e105      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	3301      	adds	r3, #1
 800a99c:	617b      	str	r3, [r7, #20]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0d0      	beq.n	800a946 <_nx_ip_route_find+0x96>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	e037      	b.n	800aa1a <_nx_ip_route_find+0x16a>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	011b      	lsls	r3, r3, #4
 800a9b4:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	3304      	adds	r3, #4
 800a9be:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	791b      	ldrb	r3, [r3, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d025      	beq.n	800aa14 <_nx_ip_route_find+0x164>
            (interface_ptr -> nx_interface_link_up) &&
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d021      	beq.n	800aa14 <_nx_ip_route_find+0x164>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	699a      	ldr	r2, [r3, #24]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	401a      	ands	r2, r3
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d119      	bne.n	800aa14 <_nx_ip_route_find+0x164>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d103      	bne.n	800a9f0 <_nx_ip_route_find+0x140>
            {
                *ip_interface_ptr = interface_ptr;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	e00b      	b.n	800aa08 <_nx_ip_route_find+0x158>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d103      	bne.n	800a9fe <_nx_ip_route_find+0x14e>
            {
                *ip_interface_ptr = interface_ptr;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	e004      	b.n	800aa08 <_nx_ip_route_find+0x158>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d104      	bne.n	800aa12 <_nx_ip_route_find+0x162>
            {
                continue;
            }

            *next_hop_address = destination_address;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e0c8      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
                continue;
 800aa12:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	3301      	adds	r3, #1
 800aa18:	617b      	str	r3, [r7, #20]
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d9c4      	bls.n	800a9aa <_nx_ip_route_find+0xfa>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	4b63      	ldr	r3, [pc, #396]	; (800abb0 <_nx_ip_route_find+0x300>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	4a63      	ldr	r2, [pc, #396]	; (800abb4 <_nx_ip_route_find+0x304>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d144      	bne.n	800aab6 <_nx_ip_route_find+0x206>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00e      	beq.n	800aa52 <_nx_ip_route_find+0x1a2>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	791b      	ldrb	r3, [r3, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d03b      	beq.n	800aab6 <_nx_ip_route_find+0x206>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d036      	beq.n	800aab6 <_nx_ip_route_find+0x206>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e0a8      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	e02b      	b.n	800aab0 <_nx_ip_route_find+0x200>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800aa58:	68f9      	ldr	r1, [r7, #12]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	011b      	lsls	r3, r3, #4
 800aa64:	440b      	add	r3, r1
 800aa66:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01c      	beq.n	800aaaa <_nx_ip_route_find+0x1fa>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 800aa70:	68f9      	ldr	r1, [r7, #12]
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	4613      	mov	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	011b      	lsls	r3, r3, #4
 800aa7c:	440b      	add	r3, r1
 800aa7e:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800aa82:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d010      	beq.n	800aaaa <_nx_ip_route_find+0x1fa>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	4413      	add	r3, r2
 800aa9a:	1d1a      	adds	r2, r3, #4
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e07c      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	3301      	adds	r3, #1
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d9d0      	bls.n	800aa58 <_nx_ip_route_find+0x1a8>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d02b      	beq.n	800ab16 <_nx_ip_route_find+0x266>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d027      	beq.n	800ab16 <_nx_ip_route_find+0x266>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d022      	beq.n	800ab16 <_nx_ip_route_find+0x266>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 800aae2:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d001      	beq.n	800aaec <_nx_ip_route_find+0x23c>
        {
            return(NX_IP_ADDRESS_ERROR);
 800aae8:	2321      	movs	r3, #33	; 0x21
 800aaea:	e05b      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d103      	bne.n	800aafc <_nx_ip_route_find+0x24c>
        {
            *ip_interface_ptr = interface_ptr;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	e006      	b.n	800ab0a <_nx_ip_route_find+0x25a>
        }
        else if (*ip_interface_ptr != interface_ptr)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d001      	beq.n	800ab0a <_nx_ip_route_find+0x25a>
        {
            return(NX_IP_ADDRESS_ERROR);
 800ab06:	2321      	movs	r3, #33	; 0x21
 800ab08:	e04c      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 800ab12:	2300      	movs	r3, #0
 800ab14:	e046      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d016      	beq.n	800ab4c <_nx_ip_route_find+0x29c>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	791b      	ldrb	r3, [r3, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d03c      	beq.n	800aba2 <_nx_ip_route_find+0x2f2>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d037      	beq.n	800aba2 <_nx_ip_route_find+0x2f2>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	695a      	ldr	r2, [r3, #20]
 800ab38:	4b1d      	ldr	r3, [pc, #116]	; (800abb0 <_nx_ip_route_find+0x300>)
 800ab3a:	4013      	ands	r3, r2
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800ab3c:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <_nx_ip_route_find+0x304>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d12f      	bne.n	800aba2 <_nx_ip_route_find+0x2f2>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e02b      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	e024      	b.n	800ab9c <_nx_ip_route_find+0x2ec>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	011b      	lsls	r3, r3, #4
 800ab5c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	4413      	add	r3, r2
 800ab64:	3304      	adds	r3, #4
 800ab66:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	791b      	ldrb	r3, [r3, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <_nx_ip_route_find+0x2e6>
                (interface_ptr -> nx_interface_link_up) &&
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00e      	beq.n	800ab96 <_nx_ip_route_find+0x2e6>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	695a      	ldr	r2, [r3, #20]
 800ab7c:	4b0c      	ldr	r3, [pc, #48]	; (800abb0 <_nx_ip_route_find+0x300>)
 800ab7e:	4013      	ands	r3, r2
                (interface_ptr -> nx_interface_link_up) &&
 800ab80:	4a0c      	ldr	r2, [pc, #48]	; (800abb4 <_nx_ip_route_find+0x304>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d107      	bne.n	800ab96 <_nx_ip_route_find+0x2e6>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800ab92:	2300      	movs	r3, #0
 800ab94:	e006      	b.n	800aba4 <_nx_ip_route_find+0x2f4>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	617b      	str	r3, [r7, #20]
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d9d7      	bls.n	800ab52 <_nx_ip_route_find+0x2a2>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 800aba2:	2321      	movs	r3, #33	; 0x21
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	371c      	adds	r7, #28
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	ffff0000 	.word	0xffff0000
 800abb4:	a9fe0000 	.word	0xa9fe0000

0800abb8 <_nx_ip_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b096      	sub	sp, #88	; 0x58
 800abbc:	af02      	add	r7, sp, #8
 800abbe:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800abc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abc6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800abca:	f04f 31ff 	mov.w	r1, #4294967295
 800abce:	4618      	mov	r0, r3
 800abd0:	f007 fc54 	bl	801247c <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 800abd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd6:	2201      	movs	r2, #1
 800abd8:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800abdc:	2300      	movs	r3, #0
 800abde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abe0:	e071      	b.n	800acc6 <_nx_ip_thread_entry+0x10e>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 800abe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abe6:	4613      	mov	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	011b      	lsls	r3, r3, #4
 800abee:	440b      	add	r3, r1
 800abf0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d062      	beq.n	800acc0 <_nx_ip_thread_entry+0x108>
 800abfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abfe:	4613      	mov	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	011b      	lsls	r3, r3, #4
 800ac06:	440b      	add	r3, r1
 800ac08:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d056      	beq.n	800acc0 <_nx_ip_thread_entry+0x108>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 800ac12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac16:	4613      	mov	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	011b      	lsls	r3, r3, #4
 800ac1e:	440b      	add	r3, r1
 800ac20:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ac24:	2200      	movs	r2, #0
 800ac26:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 800ac28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	440b      	add	r3, r1
 800ac36:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 800ac3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac40:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 800ac42:	2313      	movs	r3, #19
 800ac44:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 800ac46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800ac54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac56:	4413      	add	r3, r2
 800ac58:	3304      	adds	r3, #4
 800ac5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800ac5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac60:	4613      	mov	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	011b      	lsls	r3, r3, #4
 800ac68:	440b      	add	r3, r1
 800ac6a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f107 0210 	add.w	r2, r7, #16
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800ac78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800ac80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	440b      	add	r3, r1
 800ac8e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f107 0210 	add.w	r2, r7, #16
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800ac9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac9e:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 800aca0:	2302      	movs	r3, #2
 800aca2:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800aca4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	011b      	lsls	r3, r3, #4
 800acb0:	440b      	add	r3, r1
 800acb2:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f107 0210 	add.w	r2, r7, #16
 800acbc:	4610      	mov	r0, r2
 800acbe:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800acc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc2:	3301      	adds	r3, #1
 800acc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d08a      	beq.n	800abe2 <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800accc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800acd2:	4618      	mov	r0, r3
 800acd4:	f007 fe4a 	bl	801296c <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 800acd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acda:	f503 7012 	add.w	r0, r3, #584	; 0x248
 800acde:	f107 030c 	add.w	r3, r7, #12
 800ace2:	f04f 32ff 	mov.w	r2, #4294967295
 800ace6:	9200      	str	r2, [sp, #0]
 800ace8:	2201      	movs	r2, #1
 800acea:	f04f 31ff 	mov.w	r1, #4294967295
 800acee:	f006 fe9f 	bl	8011a30 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800acf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acf4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800acf8:	f04f 31ff 	mov.w	r1, #4294967295
 800acfc:	4618      	mov	r0, r3
 800acfe:	f007 fbbd 	bl	801247c <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f003 0308 	and.w	r3, r3, #8
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d031      	beq.n	800ad70 <_nx_ip_thread_entry+0x1b8>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800ad0c:	e023      	b.n	800ad56 <_nx_ip_thread_entry+0x19e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad0e:	f3ef 8310 	mrs	r3, PRIMASK
 800ad12:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800ad16:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad18:	b672      	cpsid	i
    return(int_posture);
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 800ad1c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 800ad1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad20:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800ad24:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 800ad26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad28:	69da      	ldr	r2, [r3, #28]
 800ad2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad2c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 800ad30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad32:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <_nx_ip_thread_entry+0x18a>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800ad3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800ad42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad44:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	f383 8810 	msr	PRIMASK, r3
}
 800ad4c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 800ad4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad52:	f7ff fcf9 	bl	800a748 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800ad56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad58:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1d6      	bne.n	800ad0e <_nx_ip_thread_entry+0x156>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f023 0308 	bic.w	r3, r3, #8
 800ad66:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 8133 	beq.w	800afd6 <_nx_ip_thread_entry+0x41e>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00c      	beq.n	800ad94 <_nx_ip_thread_entry+0x1dc>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800ad7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad7c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800ad80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad82:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad8a:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f000 8123 	beq.w	800afda <_nx_ip_thread_entry+0x422>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d011      	beq.n	800adc2 <_nx_ip_thread_entry+0x20a>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 800ad9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <_nx_ip_thread_entry+0x1fa>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800ada8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adaa:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800adae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adb0:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adb8:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 810e 	beq.w	800afde <_nx_ip_thread_entry+0x426>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d039      	beq.n	800ae40 <_nx_ip_thread_entry+0x288>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800adcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adce:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800add2:	2b00      	cmp	r3, #0
 800add4:	d004      	beq.n	800ade0 <_nx_ip_thread_entry+0x228>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 800add6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800add8:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800addc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adde:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 800ade0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ade2:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d004      	beq.n	800adf4 <_nx_ip_thread_entry+0x23c>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800adea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adec:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 800adf0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adf2:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 800adf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf6:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d004      	beq.n	800ae08 <_nx_ip_thread_entry+0x250>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 800adfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae00:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800ae04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae06:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800ae08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae0a:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d004      	beq.n	800ae1c <_nx_ip_thread_entry+0x264>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 800ae12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae14:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800ae18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae1a:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 800ae1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae1e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d004      	beq.n	800ae30 <_nx_ip_thread_entry+0x278>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 800ae26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae28:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800ae2c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae2e:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f023 0301 	bic.w	r3, r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 80d1 	beq.w	800afe2 <_nx_ip_thread_entry+0x42a>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f003 0310 	and.w	r3, r3, #16
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d009      	beq.n	800ae5e <_nx_ip_thread_entry+0x2a6>
 800ae4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae4c:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d004      	beq.n	800ae5e <_nx_ip_thread_entry+0x2a6>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 800ae54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae56:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 800ae5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae5c:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f003 0320 	and.w	r3, r3, #32
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d009      	beq.n	800ae7c <_nx_ip_thread_entry+0x2c4>
 800ae68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae6a:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d004      	beq.n	800ae7c <_nx_ip_thread_entry+0x2c4>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 800ae72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae74:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800ae78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae7a:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d004      	beq.n	800ae90 <_nx_ip_thread_entry+0x2d8>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 800ae86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae88:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 800ae8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae8e:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d036      	beq.n	800af08 <_nx_ip_thread_entry+0x350>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae9e:	e030      	b.n	800af02 <_nx_ip_thread_entry+0x34a>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 800aea0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aea4:	4613      	mov	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4413      	add	r3, r2
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	440b      	add	r3, r1
 800aeae:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d021      	beq.n	800aefc <_nx_ip_thread_entry+0x344>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800aeb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeba:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800aebc:	2308      	movs	r3, #8
 800aebe:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 800aec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aec4:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 800aec6:	4b48      	ldr	r3, [pc, #288]	; (800afe8 <_nx_ip_thread_entry+0x430>)
 800aec8:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 800aeca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800aed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeda:	4413      	add	r3, r2
 800aedc:	3304      	adds	r3, #4
 800aede:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800aee0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aee4:	4613      	mov	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	440b      	add	r3, r1
 800aeee:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f107 0210 	add.w	r2, r7, #16
 800aef8:	4610      	mov	r0, r2
 800aefa:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800aefc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aefe:	3301      	adds	r3, #1
 800af00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0cb      	beq.n	800aea0 <_nx_ip_thread_entry+0x2e8>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <_nx_ip_thread_entry+0x36e>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 800af12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af14:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d004      	beq.n	800af26 <_nx_ip_thread_entry+0x36e>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 800af1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af1e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800af22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af24:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <_nx_ip_thread_entry+0x382>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 800af30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af32:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800af36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af38:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af40:	2b00      	cmp	r3, #0
 800af42:	d034      	beq.n	800afae <_nx_ip_thread_entry+0x3f6>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800af44:	2300      	movs	r3, #0
 800af46:	64bb      	str	r3, [r7, #72]	; 0x48
 800af48:	e02e      	b.n	800afa8 <_nx_ip_thread_entry+0x3f0>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 800af4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af4e:	4613      	mov	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4413      	add	r3, r2
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	440b      	add	r3, r1
 800af58:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d01f      	beq.n	800afa2 <_nx_ip_thread_entry+0x3ea>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 800af62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af64:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 800af66:	2312      	movs	r3, #18
 800af68:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800af6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af6c:	4613      	mov	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800af78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af7a:	4413      	add	r3, r2
 800af7c:	3304      	adds	r3, #4
 800af7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800af86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	011b      	lsls	r3, r3, #4
 800af92:	440b      	add	r3, r1
 800af94:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f107 0210 	add.w	r2, r7, #16
 800af9e:	4610      	mov	r0, r2
 800afa0:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800afa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afa4:	3301      	adds	r3, #1
 800afa6:	64bb      	str	r3, [r7, #72]	; 0x48
 800afa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0cd      	beq.n	800af4a <_nx_ip_thread_entry+0x392>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d004      	beq.n	800afc2 <_nx_ip_thread_entry+0x40a>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 800afb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afba:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 800afbe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800afc0:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f43f ae7f 	beq.w	800accc <_nx_ip_thread_entry+0x114>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 800afce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800afd0:	f7fe fbfe 	bl	80097d0 <_nx_ip_deferred_link_status_process>
 800afd4:	e67a      	b.n	800accc <_nx_ip_thread_entry+0x114>
                continue;
 800afd6:	bf00      	nop
 800afd8:	e678      	b.n	800accc <_nx_ip_thread_entry+0x114>
                continue;
 800afda:	bf00      	nop
 800afdc:	e676      	b.n	800accc <_nx_ip_thread_entry+0x114>
                continue;
 800afde:	bf00      	nop
 800afe0:	e674      	b.n	800accc <_nx_ip_thread_entry+0x114>
                continue;
 800afe2:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800afe4:	e672      	b.n	800accc <_nx_ip_thread_entry+0x114>
 800afe6:	bf00      	nop
 800afe8:	5e000001 	.word	0x5e000001

0800afec <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08a      	sub	sp, #40	; 0x28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 800aff6:	2314      	movs	r3, #20
 800aff8:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	3314      	adds	r3, #20
 800b00e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	0e1b      	lsrs	r3, r3, #24
 800b016:	f003 030f 	and.w	r3, r3, #15
 800b01a:	3b05      	subs	r3, #5
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 800b022:	e0a3      	b.n	800b16c <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b44      	cmp	r3, #68	; 0x44
 800b02e:	d010      	beq.n	800b052 <_nx_ipv4_option_process+0x66>
 800b030:	2b44      	cmp	r3, #68	; 0x44
 800b032:	f300 8082 	bgt.w	800b13a <_nx_ipv4_option_process+0x14e>
 800b036:	2b00      	cmp	r3, #0
 800b038:	d002      	beq.n	800b040 <_nx_ipv4_option_process+0x54>
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d002      	beq.n	800b044 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800b03e:	e07c      	b.n	800b13a <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 800b040:	2301      	movs	r3, #1
 800b042:	e099      	b.n	800b178 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	3301      	adds	r3, #1
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	3301      	adds	r3, #1
 800b04e:	623b      	str	r3, [r7, #32]
            continue;
 800b050:	e08c      	b.n	800b16c <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	3301      	adds	r3, #1
 800b056:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d90b      	bls.n	800b076 <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	4413      	add	r3, r2
 800b064:	3302      	adds	r3, #2
 800b066:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7fd ffbb 	bl	8008fe8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b072:	2300      	movs	r3, #0
 800b074:	e080      	b.n	800b178 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	785b      	ldrb	r3, [r3, #1]
 800b07a:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	789b      	ldrb	r3, [r3, #2]
 800b080:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	3303      	adds	r3, #3
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	091b      	lsrs	r3, r3, #4
 800b08a:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	3303      	adds	r3, #3
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	f003 030f 	and.w	r3, r3, #15
 800b096:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	2b07      	cmp	r3, #7
 800b09c:	d908      	bls.n	800b0b0 <_nx_ipv4_option_process+0xc4>
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	2b28      	cmp	r3, #40	; 0x28
 800b0a2:	d805      	bhi.n	800b0b0 <_nx_ipv4_option_process+0xc4>
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	f003 0303 	and.w	r3, r3, #3
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00b      	beq.n	800b0c8 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	3302      	adds	r3, #2
 800b0b8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7fd ff92 	bl	8008fe8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e057      	b.n	800b178 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 800b0c8:	7b7b      	ldrb	r3, [r7, #13]
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	d905      	bls.n	800b0da <_nx_ipv4_option_process+0xee>
 800b0ce:	7b7b      	ldrb	r3, [r7, #13]
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10b      	bne.n	800b0f2 <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	4413      	add	r3, r2
 800b0e0:	3303      	adds	r3, #3
 800b0e2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7fd ff7d 	bl	8008fe8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e042      	b.n	800b178 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 800b0f2:	7b3b      	ldrb	r3, [r7, #12]
 800b0f4:	2b0f      	cmp	r3, #15
 800b0f6:	d10b      	bne.n	800b110 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800b0f8:	69ba      	ldr	r2, [r7, #24]
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	3304      	adds	r3, #4
 800b100:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7fd ff6e 	bl	8008fe8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b10c:	2300      	movs	r3, #0
 800b10e:	e033      	b.n	800b178 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d013      	beq.n	800b13e <_nx_ipv4_option_process+0x152>
 800b116:	7afb      	ldrb	r3, [r7, #11]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d010      	beq.n	800b13e <_nx_ipv4_option_process+0x152>
 800b11c:	7afb      	ldrb	r3, [r7, #11]
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d00d      	beq.n	800b13e <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	4413      	add	r3, r2
 800b128:	3304      	adds	r3, #4
 800b12a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7fd ff59 	bl	8008fe8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b136:	2300      	movs	r3, #0
 800b138:	e01e      	b.n	800b178 <_nx_ipv4_option_process+0x18c>
            break;
 800b13a:	bf00      	nop
 800b13c:	e000      	b.n	800b140 <_nx_ipv4_option_process+0x154>
            break;
 800b13e:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	785b      	ldrb	r3, [r3, #1]
 800b144:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d905      	bls.n	800b158 <_nx_ipv4_option_process+0x16c>
 800b14c:	7bba      	ldrb	r2, [r7, #14]
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	4413      	add	r3, r2
 800b152:	693a      	ldr	r2, [r7, #16]
 800b154:	429a      	cmp	r2, r3
 800b156:	d201      	bcs.n	800b15c <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 800b158:	2300      	movs	r3, #0
 800b15a:	e00d      	b.n	800b178 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b160:	4413      	add	r3, r2
 800b162:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 800b164:	7bbb      	ldrb	r3, [r7, #14]
 800b166:	6a3a      	ldr	r2, [r7, #32]
 800b168:	4413      	add	r3, r2
 800b16a:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 800b16c:	6a3a      	ldr	r2, [r7, #32]
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	429a      	cmp	r2, r3
 800b172:	f4ff af57 	bcc.w	800b024 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 800b176:	2301      	movs	r3, #1
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3728      	adds	r7, #40	; 0x28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b098      	sub	sp, #96	; 0x60
 800b184:	af02      	add	r7, sp, #8
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 800b18a:	2301      	movs	r3, #1
 800b18c:	64bb      	str	r3, [r7, #72]	; 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	653b      	str	r3, [r7, #80]	; 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 800b194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	647b      	str	r3, [r7, #68]	; 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 800b19a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b19c:	ba1b      	rev	r3, r3
 800b19e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800b1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d066      	beq.n	800b27e <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d90d      	bls.n	800b1d6 <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 800b1ce:	6838      	ldr	r0, [r7, #0]
 800b1d0:	f000 fe90 	bl	800bef4 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800b1d4:	e233      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e6:	1ad2      	subs	r2, r2, r3
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 800b1ec:	e044      	b.n	800b278 <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d107      	bne.n	800b206 <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1fc:	425b      	negs	r3, r3
 800b1fe:	441a      	add	r2, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 800b204:	e03b      	b.n	800b27e <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 800b20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20e:	68da      	ldr	r2, [r3, #12]
 800b210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	461a      	mov	r2, r3
 800b218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d207      	bcs.n	800b22e <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 800b21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b224:	425b      	negs	r3, r3
 800b226:	441a      	add	r2, r3
 800b228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22a:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 800b22c:	e027      	b.n	800b27e <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800b22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b230:	68da      	ldr	r2, [r3, #12]
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	461a      	mov	r2, r3
 800b23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23c:	1a9b      	subs	r3, r3, r2
 800b23e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 800b244:	e002      	b.n	800b24c <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 800b246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 800b24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b252:	429a      	cmp	r2, r3
 800b254:	d1f7      	bne.n	800b246 <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 800b256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b258:	2200      	movs	r2, #0
 800b25a:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b260:	429a      	cmp	r2, r3
 800b262:	d003      	beq.n	800b26c <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b268:	619a      	str	r2, [r3, #24]
 800b26a:	e002      	b.n	800b272 <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2200      	movs	r2, #0
 800b270:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800b272:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b274:	f000 fe3e 	bl	800bef4 <_nx_packet_release>
        while (delta)
 800b278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1b7      	bne.n	800b1ee <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800b284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b286:	0e1b      	lsrs	r3, r3, #24
 800b288:	f003 030f 	and.w	r3, r3, #15
 800b28c:	637b      	str	r3, [r7, #52]	; 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	429a      	cmp	r2, r3
 800b298:	d902      	bls.n	800b2a0 <_nx_ipv4_packet_receive+0x120>
 800b29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	d80d      	bhi.n	800b2bc <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800b2b4:	6838      	ldr	r0, [r7, #0]
 800b2b6:	f000 fe1d 	bl	800bef4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800b2ba:	e1c0      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c0:	f003 0302 	and.w	r3, r3, #2
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	64bb      	str	r3, [r7, #72]	; 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 800b2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d124      	bne.n	800b31c <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d4:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2104      	movs	r1, #4
 800b2de:	6838      	ldr	r0, [r7, #0]
 800b2e0:	f7fe f84e 	bl	8009380 <_nx_ip_checksum_compute>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	633b      	str	r3, [r7, #48]	; 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	43db      	mvns	r3, r3
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the checksum again.  */
        if (checksum)
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d012      	beq.n	800b31c <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b304:	1c5a      	adds	r2, r3, #1
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 800b314:	6838      	ldr	r0, [r7, #0]
 800b316:	f000 fded 	bl	800bef4 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800b31a:	e190      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800b31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	ba1a      	rev	r2, r3
 800b322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b324:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800b326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	ba1a      	rev	r2, r3
 800b32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b32e:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800b330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	ba1a      	rev	r2, r3
 800b336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b338:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800b33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	ba1a      	rev	r2, r3
 800b340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b342:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800b344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	ba1a      	rev	r2, r3
 800b34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b34c:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800b34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b350:	2b05      	cmp	r3, #5
 800b352:	d949      	bls.n	800b3e8 <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff fe48 	bl	800afec <_nx_ipv4_option_process>
 800b35c:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d108      	bne.n	800b376 <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 800b36e:	6838      	ldr	r0, [r7, #0]
 800b370:	f000 fdc0 	bl	800bef4 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800b374:	e163      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 800b376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b378:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b37c:	4413      	add	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b382:	4413      	add	r3, r2
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 800b386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b388:	1f1a      	subs	r2, r3, #4
 800b38a:	62ba      	str	r2, [r7, #40]	; 0x28
 800b38c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b38e:	6912      	ldr	r2, [r2, #16]
 800b390:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	1f1a      	subs	r2, r3, #4
 800b396:	62ba      	str	r2, [r7, #40]	; 0x28
 800b398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b39a:	68d2      	ldr	r2, [r2, #12]
 800b39c:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	1f1a      	subs	r2, r3, #4
 800b3a2:	62ba      	str	r2, [r7, #40]	; 0x28
 800b3a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3a6:	6892      	ldr	r2, [r2, #8]
 800b3a8:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	1f1a      	subs	r2, r3, #4
 800b3ae:	62ba      	str	r2, [r7, #40]	; 0x28
 800b3b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3b2:	6852      	ldr	r2, [r2, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 800b3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 800b3be:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	653b      	str	r3, [r7, #80]	; 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ce:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	689a      	ldr	r2, [r3, #8]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3de:	3b05      	subs	r3, #5
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	1ad2      	subs	r2, r2, r3
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800b3e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3ea:	691a      	ldr	r2, [r3, #16]
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d02f      	beq.n	800b454 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800b3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3f6:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d02b      	beq.n	800b454 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800b3fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3fe:	691a      	ldr	r2, [r3, #16]
 800b400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 800b406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b408:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d10a      	bne.n	800b424 <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800b40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b410:	691a      	ldr	r2, [r3, #16]
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	43db      	mvns	r3, r3
 800b418:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 800b420:	429a      	cmp	r2, r3
 800b422:	d017      	beq.n	800b454 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800b424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b426:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42c:	d012      	beq.n	800b454 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800b42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b430:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800b432:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b436:	d303      	bcc.n	800b440 <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800b438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43a:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	da09      	bge.n	800b454 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800b440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b446:	4619      	mov	r1, r3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7fd feff 	bl	800924c <_nx_igmp_multicast_check>
 800b44e:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800b450:	2b00      	cmp	r3, #0
 800b452:	d076      	beq.n	800b542 <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 800b454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d046      	beq.n	800b4ee <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b464:	1c5a      	adds	r2, r3, #1
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800b470:	2b00      	cmp	r3, #0
 800b472:	d033      	beq.n	800b4dc <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b474:	f3ef 8310 	mrs	r3, PRIMASK
 800b478:	617b      	str	r3, [r7, #20]
    return(posture);
 800b47a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b47c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b47e:	b672      	cpsid	i
    return(int_posture);
 800b480:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 800b482:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00c      	beq.n	800b4a8 <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 800b4a6:	e00a      	b.n	800b4be <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	61da      	str	r2, [r3, #28]
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f383 8810 	msr	PRIMASK, r3
}
 800b4c8:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	2102      	movs	r1, #2
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f006 fb8d 	bl	8011bf4 <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800b4da:	e0b0      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 800b4e6:	6838      	ldr	r0, [r7, #0]
 800b4e8:	f000 fd04 	bl	800bef4 <_nx_packet_release>
            return;
 800b4ec:	e0a7      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 800b4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	0c1b      	lsrs	r3, r3, #16
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	f103 0214 	add.w	r2, r3, #20
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	f1a3 0214 	sub.w	r2, r3, #20
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a1b      	ldr	r3, [r3, #32]
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	441a      	add	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800b528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7fe f9b1 	bl	8009894 <_nx_ip_dispatch_process>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 8082 	beq.w	800b63e <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 800b53a:	6838      	ldr	r0, [r7, #0]
 800b53c:	f000 fcda 	bl	800bef4 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800b540:	e07d      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 800b542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d15a      	bne.n	800b600 <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 800b54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b552:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800b55a:	d137      	bne.n	800b5cc <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	f103 0214 	add.w	r2, r3, #20
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	f1a3 0214 	sub.w	r2, r3, #20
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a1b      	ldr	r3, [r3, #32]
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	441a      	add	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800b592:	6a3b      	ldr	r3, [r7, #32]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	ba1a      	rev	r2, r3
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800b59c:	6a3b      	ldr	r3, [r7, #32]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	ba1a      	rev	r2, r3
 800b5aa:	6a3b      	ldr	r3, [r7, #32]
 800b5ac:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2b44      	cmp	r3, #68	; 0x44
 800b5b2:	d10b      	bne.n	800b5cc <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d006      	beq.n	800b5cc <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	4798      	blx	r3

                    return;
 800b5ca:	e038      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a1b      	ldr	r3, [r3, #32]
 800b5d0:	1e5a      	subs	r2, r3, #1
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800b5f8:	6838      	ldr	r0, [r7, #0]
 800b5fa:	f000 fc7b 	bl	800bef4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800b5fe:	e01e      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00b      	beq.n	800b622 <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	4798      	blx	r3
 800b620:	e00d      	b.n	800b63e <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800b636:	6838      	ldr	r0, [r7, #0]
 800b638:	f000 fc5c 	bl	800bef4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800b63c:	bf00      	nop
    }
}
 800b63e:	3758      	adds	r7, #88	; 0x58
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08c      	sub	sp, #48	; 0x30
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d901      	bls.n	800b660 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 800b65c:	234d      	movs	r3, #77	; 0x4d
 800b65e:	e0b1      	b.n	800b7c4 <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b666:	f3ef 8310 	mrs	r3, PRIMASK
 800b66a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b66c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b66e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b670:	b672      	cpsid	i
    return(int_posture);
 800b672:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 800b674:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d03d      	beq.n	800b6fa <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	1e5a      	subs	r2, r3, #1
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	69da      	ldr	r2, [r3, #28]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	2200      	movs	r2, #0
 800b69a:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 800b69c:	6a3b      	ldr	r3, [r7, #32]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	691a      	ldr	r2, [r3, #16]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	441a      	add	r2, r3
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	689a      	ldr	r2, [r3, #8]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800b6d4:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	2204      	movs	r2, #4
 800b6da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	6a3a      	ldr	r2, [r7, #32]
 800b6f2:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6f8:	e05d      	b.n	800b7b6 <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d053      	beq.n	800b7b2 <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	1c5a      	adds	r2, r3, #1
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 800b714:	4b2d      	ldr	r3, [pc, #180]	; (800b7cc <_nx_packet_allocate+0x188>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 800b71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71c:	4a2c      	ldr	r2, [pc, #176]	; (800b7d0 <_nx_packet_allocate+0x18c>)
 800b71e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	2b00      	cmp	r3, #0
 800b738:	d012      	beq.n	800b760 <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b754:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b75c:	675a      	str	r2, [r3, #116]	; 0x74
 800b75e:	e008      	b.n	800b772 <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b764:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b76a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b770:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	220c      	movs	r2, #12
 800b780:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	2201      	movs	r2, #1
 800b786:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b788:	4b12      	ldr	r3, [pc, #72]	; (800b7d4 <_nx_packet_allocate+0x190>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3301      	adds	r3, #1
 800b78e:	4a11      	ldr	r2, [pc, #68]	; (800b7d4 <_nx_packet_allocate+0x190>)
 800b790:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	64da      	str	r2, [r3, #76]	; 0x4c
 800b798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f383 8810 	msr	PRIMASK, r3
}
 800b7a2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b7a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7a6:	f008 f9a9 	bl	8013afc <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7b0:	e008      	b.n	800b7c4 <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	f383 8810 	msr	PRIMASK, r3
}
 800b7c0:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 800b7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3730      	adds	r7, #48	; 0x30
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	240023d0 	.word	0x240023d0
 800b7d0:	0800bb79 	.word	0x0800bb79
 800b7d4:	240023cc 	.word	0x240023cc

0800b7d8 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08e      	sub	sp, #56	; 0x38
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 800b7f8:	2312      	movs	r3, #18
 800b7fa:	e079      	b.n	800b8f0 <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800b7fc:	f107 0114 	add.w	r1, r7, #20
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2200      	movs	r2, #0
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7ff ff1d 	bl	800b644 <_nx_packet_allocate>
 800b80a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	e06c      	b.n	800b8f0 <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b81c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b824:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d110      	bne.n	800b852 <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	68da      	ldr	r2, [r3, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 800b83c:	6978      	ldr	r0, [r7, #20]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6919      	ldr	r1, [r3, #16]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a3a      	ldr	r2, [r7, #32]
 800b84a:	f000 f855 	bl	800b8f8 <_nx_packet_data_append>
 800b84e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b850:	e00f      	b.n	800b872 <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	68da      	ldr	r2, [r3, #12]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 800b85e:	6978      	ldr	r0, [r7, #20]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6899      	ldr	r1, [r3, #8]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a3a      	ldr	r2, [r7, #32]
 800b86c:	f000 f844 	bl	800b8f8 <_nx_packet_data_append>
 800b870:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	2b00      	cmp	r3, #0
 800b876:	d005      	beq.n	800b884 <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 fb3a 	bl	800bef4 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 800b880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b882:	e035      	b.n	800b8f0 <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1ca      	bne.n	800b82a <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	689a      	ldr	r2, [r3, #8]
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	6919      	ldr	r1, [r3, #16]
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	69fa      	ldr	r2, [r7, #28]
 800b8a8:	440a      	add	r2, r1
 800b8aa:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	69fa      	ldr	r2, [r7, #28]
 800b8b4:	1a8a      	subs	r2, r1, r2
 800b8b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	6919      	ldr	r1, [r3, #16]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	69ba      	ldr	r2, [r7, #24]
 800b8cc:	440a      	add	r2, r1
 800b8ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d005      	beq.n	800b8e8 <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 fb08 	bl	800bef4 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 800b8e4:	2312      	movs	r3, #18
 800b8e6:	e003      	b.n	800b8f0 <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 800b8ee:	2300      	movs	r3, #0
    }
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3730      	adds	r7, #48	; 0x30
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08c      	sub	sp, #48	; 0x30
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 800b906:	2300      	movs	r3, #0
 800b908:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d016      	beq.n	800b940 <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 800b912:	2300      	movs	r3, #0
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	695a      	ldr	r2, [r3, #20]
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	4413      	add	r3, r2
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1ee      	bne.n	800b91c <_nx_packet_data_append+0x24>
 800b93e:	e005      	b.n	800b94c <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	695a      	ldr	r2, [r3, #20]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 800b94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	429a      	cmp	r2, r3
 800b952:	d247      	bcs.n	800b9e4 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 800b958:	e033      	b.n	800b9c2 <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800b95a:	f107 0114 	add.w	r1, r7, #20
 800b95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b960:	2200      	movs	r2, #0
 800b962:	6838      	ldr	r0, [r7, #0]
 800b964:	f7ff fe6e 	bl	800b644 <_nx_packet_allocate>
 800b968:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d007      	beq.n	800b980 <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 800b976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b978:	f000 fabc 	bl	800bef4 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	e078      	b.n	800ba72 <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	2b00      	cmp	r3, #0
 800b984:	d012      	beq.n	800b9ac <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d007      	beq.n	800b99e <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99a:	619a      	str	r2, [r3, #24]
 800b99c:	e008      	b.n	800b9b0 <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a8:	605a      	str	r2, [r3, #4]
 800b9aa:	e001      	b.n	800b9b0 <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	695a      	ldr	r2, [r3, #20]
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	4413      	add	r3, r2
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 800b9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d3c7      	bcc.n	800b95a <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9d4:	605a      	str	r2, [r3, #4]
 800b9d6:	e002      	b.n	800b9de <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	441a      	add	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	699b      	ldr	r3, [r3, #24]
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	e032      	b.n	800ba6a <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 800ba08:	e02f      	b.n	800ba6a <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	695a      	ldr	r2, [r3, #20]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	461a      	mov	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d202      	bcs.n	800ba22 <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	623b      	str	r3, [r7, #32]
 800ba20:	e005      	b.n	800ba2e <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	695a      	ldr	r2, [r3, #20]
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified. */
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	6a3a      	ldr	r2, [r7, #32]
 800ba34:	69f9      	ldr	r1, [r7, #28]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f009 fe32 	bl	80156a0 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	68d9      	ldr	r1, [r3, #12]
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	6a3a      	ldr	r2, [r7, #32]
 800ba4c:	440a      	add	r2, r1
 800ba4e:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d009      	beq.n	800ba6a <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 800ba56:	69fa      	ldr	r2, [r7, #28]
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	619a      	str	r2, [r3, #24]
    while (data_size)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1cc      	bne.n	800ba0a <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3730      	adds	r7, #48	; 0x30
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <_nx_packet_data_extract_offset>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_extract_offset(NX_PACKET *packet_ptr, ULONG offset, VOID *buffer_start, ULONG buffer_length, ULONG *bytes_copied)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b08c      	sub	sp, #48	; 0x30
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	60f8      	str	r0, [r7, #12]
 800ba82:	60b9      	str	r1, [r7, #8]
 800ba84:	607a      	str	r2, [r7, #4]
 800ba86:	603b      	str	r3, [r7, #0]
#endif /* NX_DISABLE_PACKET_CHAIN */
ULONG      bytes_to_copy;
NX_PACKET *working_packet_ptr;


    working_packet_ptr =  packet_ptr;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	61bb      	str	r3, [r7, #24]

    /* Check for an invalid offset or packet length.  */
    if (offset >= working_packet_ptr -> nx_packet_length)
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d309      	bcc.n	800baaa <_nx_packet_data_extract_offset+0x30>
    {

        /* Note: A zero offset with a packet of zero length is ok. */
        if (offset == 0)
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d104      	bne.n	800baa6 <_nx_packet_data_extract_offset+0x2c>
        {

            *bytes_copied = 0;
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800baa2:	2300      	movs	r3, #0
 800baa4:	e064      	b.n	800bb70 <_nx_packet_data_extract_offset+0xf6>
        }

        /* Otherwise, this is an invalid offset or packet length. */
        return(NX_PACKET_OFFSET_ERROR);
 800baa6:	2353      	movs	r3, #83	; 0x53
 800baa8:	e062      	b.n	800bb70 <_nx_packet_data_extract_offset+0xf6>
    }


    /* Initialize the source pointer to NULL.  */
    source_ptr =  NX_NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Traverse packet chain to offset.  */
    offset_bytes =  offset;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	623b      	str	r3, [r7, #32]
#ifndef NX_DISABLE_PACKET_CHAIN
    while (working_packet_ptr)
 800bab2:	e016      	b.n	800bae2 <_nx_packet_data_extract_offset+0x68>
    {

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_fragment_length =  (ULONG)((working_packet_ptr -> nx_packet_append_ptr - working_packet_ptr -> nx_packet_prepend_ptr));
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	68da      	ldr	r2, [r3, #12]
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	617b      	str	r3, [r7, #20]

        /* Determine if we are at the offset location fragment in the packet chain  */
        if (packet_fragment_length > offset_bytes)
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d905      	bls.n	800bad4 <_nx_packet_data_extract_offset+0x5a>
        {

            /* Setup loop to copy from this packet.  */
            source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	689a      	ldr	r2, [r3, #8]
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	4413      	add	r3, r2
 800bad0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Yes, get out of this  loop.  */
            break;
 800bad2:	e009      	b.n	800bae8 <_nx_packet_data_extract_offset+0x6e>
        }


        /* Decrement the remaining offset bytes*/
        offset_bytes = offset_bytes - packet_fragment_length;
 800bad4:	6a3a      	ldr	r2, [r7, #32]
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	623b      	str	r3, [r7, #32]

        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	61bb      	str	r3, [r7, #24]
    while (working_packet_ptr)
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1e5      	bne.n	800bab4 <_nx_packet_data_extract_offset+0x3a>
    source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;

#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Check for a valid source pointer.  */
    if (source_ptr == NX_NULL)
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <_nx_packet_data_extract_offset+0x78>
    {
        return(NX_PACKET_OFFSET_ERROR);
 800baee:	2353      	movs	r3, #83	; 0x53
 800baf0:	e03e      	b.n	800bb70 <_nx_packet_data_extract_offset+0xf6>
    }

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	627b      	str	r3, [r7, #36]	; 0x24
    bytes_to_copy =   (packet_ptr -> nx_packet_length - offset);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	61fb      	str	r3, [r7, #28]

    /* Pickup the amount of bytes to copy.  */
    if (bytes_to_copy < buffer_length)
 800bb00:	69fa      	ldr	r2, [r7, #28]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d205      	bcs.n	800bb14 <_nx_packet_data_extract_offset+0x9a>
    {
        *bytes_copied =  bytes_to_copy;     /* the amount of bytes returned to the caller */
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	69fa      	ldr	r2, [r7, #28]
 800bb0c:	601a      	str	r2, [r3, #0]
        remaining_bytes =  bytes_to_copy;   /* for use in the copy loop */
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb12:	e026      	b.n	800bb62 <_nx_packet_data_extract_offset+0xe8>
    }
    else
    {
        *bytes_copied =  buffer_length;
 800bb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	601a      	str	r2, [r3, #0]
        remaining_bytes =  buffer_length;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (working_packet_ptr && remaining_bytes)
 800bb1e:	e020      	b.n	800bb62 <_nx_packet_data_extract_offset+0xe8>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate bytes to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(working_packet_ptr -> nx_packet_append_ptr - source_ptr);
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	68da      	ldr	r2, [r3, #12]
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	61fb      	str	r3, [r7, #28]
        if (remaining_bytes < bytes_to_copy)
 800bb2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d201      	bcs.n	800bb36 <_nx_packet_data_extract_offset+0xbc>
        {
            bytes_to_copy = remaining_bytes;
 800bb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb34:	61fb      	str	r3, [r7, #28]
        }

        /* Copy data from this packet.  */
        memcpy(destination_ptr, source_ptr, bytes_to_copy); /* Use case of memcpy is verified. */
 800bb36:	69fa      	ldr	r2, [r7, #28]
 800bb38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb3c:	f009 fdb0 	bl	80156a0 <memcpy>

        /* Update the pointers. */
        destination_ptr += bytes_to_copy;
 800bb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	4413      	add	r3, r2
 800bb46:	627b      	str	r3, [r7, #36]	; 0x24
        remaining_bytes -= bytes_to_copy;
 800bb48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	61bb      	str	r3, [r7, #24]

        /* Check for a next packet.  */
        if (working_packet_ptr)
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <_nx_packet_data_extract_offset+0xe8>
        {

            /* Setup new source pointer.  */
            source_ptr = working_packet_ptr -> nx_packet_prepend_ptr;
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	62bb      	str	r3, [r7, #40]	; 0x28
    while (working_packet_ptr && remaining_bytes)
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <_nx_packet_data_extract_offset+0xf4>
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1d8      	bne.n	800bb20 <_nx_packet_data_extract_offset+0xa6>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_EXTRACT_OFFSET, packet_ptr, buffer_length, *bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3730      	adds	r7, #48	; 0x30
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b088      	sub	sp, #32
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb88:	f3ef 8310 	mrs	r3, PRIMASK
 800bb8c:	617b      	str	r3, [r7, #20]
    return(posture);
 800bb8e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bb90:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb92:	b672      	cpsid	i
    return(int_posture);
 800bb94:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 800bb96:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d042      	beq.n	800bc26 <_nx_packet_pool_cleanup+0xae>
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d03f      	beq.n	800bc26 <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800bbaa:	4a23      	ldr	r2, [pc, #140]	; (800bc38 <_nx_packet_pool_cleanup+0xc0>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d13a      	bne.n	800bc26 <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d103      	bne.n	800bbc8 <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	62da      	str	r2, [r3, #44]	; 0x2c
 800bbc6:	e012      	b.n	800bbee <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d103      	bne.n	800bbda <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bbe2:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bbec:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf2:	1e5a      	subs	r2, r3, #1
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbfc:	2b0c      	cmp	r3, #12
 800bbfe:	d112      	bne.n	800bc26 <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bc08:	4b0c      	ldr	r3, [pc, #48]	; (800bc3c <_nx_packet_pool_cleanup+0xc4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	4a0b      	ldr	r2, [pc, #44]	; (800bc3c <_nx_packet_pool_cleanup+0xc4>)
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f383 8810 	msr	PRIMASK, r3
}
 800bc1c:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f007 fe6c 	bl	80138fc <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800bc24:	e005      	b.n	800bc32 <_nx_packet_pool_cleanup+0xba>
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f383 8810 	msr	PRIMASK, r3
}
 800bc30:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800bc32:	3720      	adds	r7, #32
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	5041434b 	.word	0x5041434b
 800bc3c:	240023cc 	.word	0x240023cc

0800bc40 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b092      	sub	sp, #72	; 0x48
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	3303      	adds	r3, #3
 800bc56:	f023 0303 	bic.w	r3, r3, #3
 800bc5a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc60:	1ad2      	subs	r2, r2, r3
 800bc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc64:	4413      	add	r3, r2
 800bc66:	f023 0303 	bic.w	r3, r3, #3
 800bc6a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 800bc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6e:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800bc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc72:	333c      	adds	r3, #60	; 0x3c
 800bc74:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	3303      	adds	r3, #3
 800bc7a:	f023 0303 	bic.w	r3, r3, #3
 800bc7e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800bc80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800bc88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	3303      	adds	r3, #3
 800bc90:	f023 0203 	bic.w	r2, r3, #3
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 800bc9a:	223c      	movs	r2, #60	; 0x3c
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f009 fd26 	bl	80156f0 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcc0:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bccc:	4413      	add	r3, r2
 800bcce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 800bcd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd6:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcdc:	4413      	add	r3, r2
 800bcde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bce0:	4413      	add	r3, r2
 800bce2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 800bce4:	e023      	b.n	800bd2e <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 800bce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bce8:	3301      	adds	r3, #1
 800bcea:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 800bcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcf0:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 800bcf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 800bcf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800bcfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd00:	f04f 32ff 	mov.w	r2, #4294967295
 800bd04:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 800bd06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0a:	441a      	add	r2, r3
 800bd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd0e:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 800bd10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	4413      	add	r3, r2
 800bd16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd18:	441a      	add	r2, r3
 800bd1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd1c:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 800bd1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd20:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd26:	4413      	add	r3, r2
 800bd28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd2a:	4413      	add	r3, r2
 800bd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 800bd2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d9d7      	bls.n	800bce6 <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3a:	4413      	add	r3, r2
 800bd3c:	425b      	negs	r3, r3
 800bd3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd40:	4413      	add	r3, r2
 800bd42:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 800bd44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd46:	2200      	movs	r2, #0
 800bd48:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd4e:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd54:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd5c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd60:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bd62:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bd64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd66:	b672      	cpsid	i
    return(int_posture);
 800bd68:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800bd6a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4a19      	ldr	r2, [pc, #100]	; (800bdd4 <_nx_packet_pool_create+0x194>)
 800bd70:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 800bd72:	4b19      	ldr	r3, [pc, #100]	; (800bdd8 <_nx_packet_pool_create+0x198>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d012      	beq.n	800bda0 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800bd7a:	4b17      	ldr	r3, [pc, #92]	; (800bdd8 <_nx_packet_pool_create+0x198>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd80:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800bd82:	4b15      	ldr	r3, [pc, #84]	; (800bdd8 <_nx_packet_pool_create+0x198>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a3a      	ldr	r2, [r7, #32]
 800bd94:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 800bd96:	4b10      	ldr	r3, [pc, #64]	; (800bdd8 <_nx_packet_pool_create+0x198>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	635a      	str	r2, [r3, #52]	; 0x34
 800bd9e:	e008      	b.n	800bdb2 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 800bda0:	4a0d      	ldr	r2, [pc, #52]	; (800bdd8 <_nx_packet_pool_create+0x198>)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 800bdb2:	4b0a      	ldr	r3, [pc, #40]	; (800bddc <_nx_packet_pool_create+0x19c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	4a08      	ldr	r2, [pc, #32]	; (800bddc <_nx_packet_pool_create+0x19c>)
 800bdba:	6013      	str	r3, [r2, #0]
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	f383 8810 	msr	PRIMASK, r3
}
 800bdc6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3748      	adds	r7, #72	; 0x48
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	5041434b 	.word	0x5041434b
 800bdd8:	240022d8 	.word	0x240022d8
 800bddc:	240022d4 	.word	0x240022d4

0800bde0 <_nx_packet_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_delete(NX_PACKET_POOL *pool_ptr)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08e      	sub	sp, #56	; 0x38
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bde8:	f3ef 8310 	mrs	r3, PRIMASK
 800bdec:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bdf0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdf2:	b672      	cpsid	i
    return(int_posture);
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28

TX_THREAD *thread_ptr;      /* Working thread pointer  */


    /* Disable interrupts to remove the packet pool from the created list.  */
    TX_DISABLE
 800bdf6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Decrement the number of packet pools created.  */
    _nx_packet_pool_created_count--;
 800bdf8:	4b3b      	ldr	r3, [pc, #236]	; (800bee8 <_nx_packet_pool_delete+0x108>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	4a3a      	ldr	r2, [pc, #232]	; (800bee8 <_nx_packet_pool_delete+0x108>)
 800be00:	6013      	str	r3, [r2, #0]

    /* Clear the packet pool ID to make it invalid.  */
    pool_ptr -> nx_packet_pool_id =  0;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	601a      	str	r2, [r3, #0]

    /* See if the packet pool only one on the list.  */
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d103      	bne.n	800be1a <_nx_packet_pool_delete+0x3a>
    {

        /* Only created packet pool, just set the created list to NULL.  */
        _nx_packet_pool_created_ptr =  NX_NULL;
 800be12:	4b36      	ldr	r3, [pc, #216]	; (800beec <_nx_packet_pool_delete+0x10c>)
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	e012      	b.n	800be40 <_nx_packet_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            pool_ptr -> nx_packet_pool_created_previous;
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	6b92      	ldr	r2, [r2, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800be22:	639a      	str	r2, [r3, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            pool_ptr -> nx_packet_pool_created_next;
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800be2c:	635a      	str	r2, [r3, #52]	; 0x34

        /* See if we have to update the created list head pointer.  */
        if (_nx_packet_pool_created_ptr == pool_ptr)
 800be2e:	4b2f      	ldr	r3, [pc, #188]	; (800beec <_nx_packet_pool_delete+0x10c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	429a      	cmp	r2, r3
 800be36:	d103      	bne.n	800be40 <_nx_packet_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be3c:	4a2b      	ldr	r2, [pc, #172]	; (800beec <_nx_packet_pool_delete+0x10c>)
 800be3e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800be40:	4b2b      	ldr	r3, [pc, #172]	; (800bef0 <_nx_packet_pool_delete+0x110>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3301      	adds	r3, #1
 800be46:	4a2a      	ldr	r2, [pc, #168]	; (800bef0 <_nx_packet_pool_delete+0x110>)
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	f383 8810 	msr	PRIMASK, r3
}
 800be54:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the packet pool suspension list to resume any and all
       threads suspended on this packet pool.  */
    thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5a:	637b      	str	r3, [r7, #52]	; 0x34
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800be5c:	e026      	b.n	800beac <_nx_packet_pool_delete+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be5e:	f3ef 8310 	mrs	r3, PRIMASK
 800be62:	61fb      	str	r3, [r7, #28]
    return(posture);
 800be64:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800be66:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be68:	b672      	cpsid	i
    return(int_posture);
 800be6a:	69bb      	ldr	r3, [r7, #24]
    {
        /* Lockout interrupts.  */
        TX_DISABLE
 800be6c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800be6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be70:	2200      	movs	r2, #0
 800be72:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800be74:	4b1e      	ldr	r3, [pc, #120]	; (800bef0 <_nx_packet_pool_delete+0x110>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3301      	adds	r3, #1
 800be7a:	4a1d      	ldr	r2, [pc, #116]	; (800bef0 <_nx_packet_pool_delete+0x110>)
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	f383 8810 	msr	PRIMASK, r3
}
 800be88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the return status in the thread to NX_POOL_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	2230      	movs	r2, #48	; 0x30
 800be8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be96:	637b      	str	r3, [r7, #52]	; 0x34

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800be98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be9c:	4618      	mov	r0, r3
 800be9e:	f007 fd2d 	bl	80138fc <_tx_thread_system_resume>

        /* Decrease the suspended count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea6:	1e5a      	subs	r2, r3, #1
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	631a      	str	r2, [r3, #48]	; 0x30
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1d4      	bne.n	800be5e <_nx_packet_pool_delete+0x7e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800beb4:	f3ef 8310 	mrs	r3, PRIMASK
 800beb8:	613b      	str	r3, [r7, #16]
    return(posture);
 800beba:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bebc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bebe:	b672      	cpsid	i
    return(int_posture);
 800bec0:	68fb      	ldr	r3, [r7, #12]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800bec2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800bec4:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <_nx_packet_pool_delete+0x110>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3b01      	subs	r3, #1
 800beca:	4a09      	ldr	r2, [pc, #36]	; (800bef0 <_nx_packet_pool_delete+0x110>)
 800becc:	6013      	str	r3, [r2, #0]
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	f383 8810 	msr	PRIMASK, r3
}
 800bed8:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(pool_ptr);

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800beda:	f007 fcd5 	bl	8013888 <_tx_thread_system_preempt_check>

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3738      	adds	r7, #56	; 0x38
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	240022d4 	.word	0x240022d4
 800beec:	240022d8 	.word	0x240022d8
 800bef0:	240023cc 	.word	0x240023cc

0800bef4 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08a      	sub	sp, #40	; 0x28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 800befc:	e0a5      	b.n	800c04a <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800bf06:	d011      	beq.n	800bf2c <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d009      	beq.n	800bf28 <_nx_packet_release+0x34>
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a50      	ldr	r2, [pc, #320]	; (800c05c <_nx_packet_release+0x168>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d104      	bne.n	800bf28 <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	1c5a      	adds	r2, r3, #1
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 800bf28:	2307      	movs	r3, #7
 800bf2a:	e093      	b.n	800c054 <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf32:	f3ef 8310 	mrs	r3, PRIMASK
 800bf36:	617b      	str	r3, [r7, #20]
    return(posture);
 800bf38:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bf3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf3c:	b672      	cpsid	i
    return(int_posture);
 800bf3e:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 800bf40:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4c:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d062      	beq.n	800c01a <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf58:	69ba      	ldr	r2, [r7, #24]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d103      	bne.n	800bf66 <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	2200      	movs	r2, #0
 800bf62:	62da      	str	r2, [r3, #44]	; 0x2c
 800bf64:	e00d      	b.n	800bf82 <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bf76:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800bf7c:	69ba      	ldr	r2, [r7, #24]
 800bf7e:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bf80:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf86:	1e5a      	subs	r2, r3, #1
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bf92:	4b33      	ldr	r3, [pc, #204]	; (800c060 <_nx_packet_release+0x16c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3301      	adds	r3, #1
 800bf98:	4a31      	ldr	r2, [pc, #196]	; (800c060 <_nx_packet_release+0x16c>)
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
 800bf9e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f383 8810 	msr	PRIMASK, r3
}
 800bfa6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	691a      	ldr	r2, [r3, #16]
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfc8:	441a      	add	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689a      	ldr	r2, [r3, #8]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800bfe8:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c012:	69b8      	ldr	r0, [r7, #24]
 800c014:	f007 fc72 	bl	80138fc <_tx_thread_system_resume>
 800c018:	e015      	b.n	800c046 <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f04f 32ff 	mov.w	r2, #4294967295
 800c020:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	69da      	ldr	r2, [r3, #28]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	609a      	str	r2, [r3, #8]
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	f383 8810 	msr	PRIMASK, r3
}
 800c044:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f47f af56 	bne.w	800befe <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3728      	adds	r7, #40	; 0x28
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	5041434b 	.word	0x5041434b
 800c060:	240023cc 	.word	0x240023cc

0800c064 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c06c:	f3ef 8310 	mrs	r3, PRIMASK
 800c070:	617b      	str	r3, [r7, #20]
    return(posture);
 800c072:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c074:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c076:	b672      	cpsid	i
    return(int_posture);
 800c078:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800c07a:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800c084:	d025      	beq.n	800c0d2 <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800c08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08e:	d020      	beq.n	800c0d2 <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 800c096:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c0a2:	441a      	add	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c0b2:	1a9a      	subs	r2, r3, r2
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	61fb      	str	r3, [r7, #28]
 800c0d0:	e009      	b.n	800c0e6 <_nx_packet_transmit_release+0x82>
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	f383 8810 	msr	PRIMASK, r3
}
 800c0dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff ff08 	bl	800bef4 <_nx_packet_release>
 800c0e4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800c0e6:	69fb      	ldr	r3, [r7, #28]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3720      	adds	r7, #32
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800c0fe:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c100:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c102:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c104:	b672      	cpsid	i
    return(int_posture);
 800c106:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800c108:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800c110:	2b00      	cmp	r3, #0
 800c112:	d110      	bne.n	800c136 <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c11a:	1c5a      	adds	r2, r3, #1
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f383 8810 	msr	PRIMASK, r3
}
 800c12c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800c12e:	6838      	ldr	r0, [r7, #0]
 800c130:	f7ff fee0 	bl	800bef4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800c134:	e02f      	b.n	800c196 <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d011      	beq.n	800c164 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2200      	movs	r2, #0
 800c14e:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f383 8810 	msr	PRIMASK, r3
}
 800c162:	e018      	b.n	800c196 <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2200      	movs	r2, #0
 800c178:	61da      	str	r2, [r3, #28]
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	f383 8810 	msr	PRIMASK, r3
}
 800c184:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c18c:	2200      	movs	r2, #0
 800c18e:	2120      	movs	r1, #32
 800c190:	4618      	mov	r0, r3
 800c192:	f005 fd2f 	bl	8011bf4 <_tx_event_flags_set>
    }
}
 800c196:	3720      	adds	r7, #32
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <_nx_tcp_cleanup_deferred>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_cleanup_deferred(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
    NX_PARAMETER_NOT_USED(thread_ptr);

    NX_CLEANUP_EXTENSION
    /* This function is never called... so do nothing!  */
}
 800c1a6:	bf00      	nop
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
	...

0800c1b4 <_nx_tcp_client_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_client_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	; 0x38
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1be:	f3ef 8310 	mrs	r3, PRIMASK
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c1c6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1c8:	b672      	cpsid	i
    return(int_posture);
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
NX_TCP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts to remove the suspended thread from the TCP socket.  */
    TX_DISABLE
 800c1cc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d004      	beq.n	800c1e4 <_nx_tcp_client_bind_cleanup+0x30>
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a42      	ldr	r2, [pc, #264]	; (800c2e8 <_nx_tcp_client_bind_cleanup+0x134>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d006      	beq.n	800c1f2 <_nx_tcp_client_bind_cleanup+0x3e>
 800c1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	f383 8810 	msr	PRIMASK, r3
}
 800c1ee:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c1f0:	e077      	b.n	800c2e2 <_nx_tcp_client_bind_cleanup+0x12e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <_nx_tcp_client_bind_cleanup+0x54>
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	f383 8810 	msr	PRIMASK, r3
}
 800c204:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c206:	e06c      	b.n	800c2e2 <_nx_tcp_client_bind_cleanup+0x12e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c208:	f3ef 8305 	mrs	r3, IPSR
 800c20c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c20e:	697a      	ldr	r2, [r7, #20]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800c210:	4b36      	ldr	r3, [pc, #216]	; (800c2ec <_nx_tcp_client_bind_cleanup+0x138>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4313      	orrs	r3, r2
 800c216:	2b00      	cmp	r3, #0
 800c218:	d104      	bne.n	800c224 <_nx_tcp_client_bind_cleanup+0x70>
 800c21a:	4b35      	ldr	r3, [pc, #212]	; (800c2f0 <_nx_tcp_client_bind_cleanup+0x13c>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a35      	ldr	r2, [pc, #212]	; (800c2f4 <_nx_tcp_client_bind_cleanup+0x140>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d116      	bne.n	800c252 <_nx_tcp_client_bind_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a34      	ldr	r2, [pc, #208]	; (800c2f8 <_nx_tcp_client_bind_cleanup+0x144>)
 800c228:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c230:	62bb      	str	r3, [r7, #40]	; 0x28
 800c232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c234:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	f383 8810 	msr	PRIMASK, r3
}
 800c23c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c244:	2200      	movs	r2, #0
 800c246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c24a:	4618      	mov	r0, r3
 800c24c:	f005 fcd2 	bl	8011bf4 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800c250:	e047      	b.n	800c2e2 <_nx_tcp_client_bind_cleanup+0x12e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	2200      	movs	r2, #0
 800c256:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_tcp_socket_bound_previous;
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c266:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d104      	bne.n	800c27c <_nx_tcp_client_bind_cleanup+0xc8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	2200      	movs	r2, #0
 800c276:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800c27a:	e00e      	b.n	800c29a <_nx_tcp_client_bind_cleanup+0xe6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c28e:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c298:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c2a0:	1e5a      	subs	r2, r3, #1
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ac:	2b0c      	cmp	r3, #12
 800c2ae:	d112      	bne.n	800c2d6 <_nx_tcp_client_bind_cleanup+0x122>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2223      	movs	r2, #35	; 0x23
 800c2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c2b8:	4b10      	ldr	r3, [pc, #64]	; (800c2fc <_nx_tcp_client_bind_cleanup+0x148>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	4a0f      	ldr	r2, [pc, #60]	; (800c2fc <_nx_tcp_client_bind_cleanup+0x148>)
 800c2c0:	6013      	str	r3, [r2, #0]
 800c2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f383 8810 	msr	PRIMASK, r3
}
 800c2cc:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f007 fb14 	bl	80138fc <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c2d4:	e005      	b.n	800c2e2 <_nx_tcp_client_bind_cleanup+0x12e>
 800c2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	f383 8810 	msr	PRIMASK, r3
}
 800c2e0:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c2e2:	3738      	adds	r7, #56	; 0x38
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	54435020 	.word	0x54435020
 800c2ec:	2400008c 	.word	0x2400008c
 800c2f0:	240023d0 	.word	0x240023d0
 800c2f4:	24002470 	.word	0x24002470
 800c2f8:	0800c19d 	.word	0x0800c19d
 800c2fc:	240023cc 	.word	0x240023cc

0800c300 <_nx_tcp_connect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_connect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08e      	sub	sp, #56	; 0x38
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c30a:	f3ef 8310 	mrs	r3, PRIMASK
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c314:	b672      	cpsid	i
    return(int_posture);
 800c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800c318:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c31e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	2b00      	cmp	r3, #0
 800c324:	d004      	beq.n	800c330 <_nx_tcp_connect_cleanup+0x30>
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a3a      	ldr	r2, [pc, #232]	; (800c414 <_nx_tcp_connect_cleanup+0x114>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d006      	beq.n	800c33e <_nx_tcp_connect_cleanup+0x3e>
 800c330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c332:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	f383 8810 	msr	PRIMASK, r3
}
 800c33a:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c33c:	e067      	b.n	800c40e <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <_nx_tcp_connect_cleanup+0x54>
 800c346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c348:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	f383 8810 	msr	PRIMASK, r3
}
 800c350:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c352:	e05c      	b.n	800c40e <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Pickup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800c354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c35a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c35c:	f3ef 8305 	mrs	r3, IPSR
 800c360:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c362:	69ba      	ldr	r2, [r7, #24]

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800c364:	4b2c      	ldr	r3, [pc, #176]	; (800c418 <_nx_tcp_connect_cleanup+0x118>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4313      	orrs	r3, r2
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d104      	bne.n	800c378 <_nx_tcp_connect_cleanup+0x78>
 800c36e:	4b2b      	ldr	r3, [pc, #172]	; (800c41c <_nx_tcp_connect_cleanup+0x11c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a2b      	ldr	r2, [pc, #172]	; (800c420 <_nx_tcp_connect_cleanup+0x120>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d112      	bne.n	800c39e <_nx_tcp_connect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a2a      	ldr	r2, [pc, #168]	; (800c424 <_nx_tcp_connect_cleanup+0x124>)
 800c37c:	669a      	str	r2, [r3, #104]	; 0x68
 800c37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c380:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f383 8810 	msr	PRIMASK, r3
}
 800c388:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c390:	2200      	movs	r2, #0
 800c392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c396:	4618      	mov	r0, r3
 800c398:	f005 fc2c 	bl	8011bf4 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800c39c:	e037      	b.n	800c40e <_nx_tcp_connect_cleanup+0x10e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_connect_suspended_thread =  NX_NULL;
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Return to the proper socket state.  */
        if (socket_ptr -> nx_tcp_socket_client_type)
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <_nx_tcp_connect_cleanup+0xc4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Client socket, return to a CLOSED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	2201      	movs	r2, #1
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
 800c3c2:	e007      	b.n	800c3d4 <_nx_tcp_connect_cleanup+0xd4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Server socket, return to LISTEN state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Move back the acknowledgment number just in case there is a retry.  */
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ce:	1e5a      	subs	r2, r3, #1
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	641a      	str	r2, [r3, #64]	; 0x40
        }

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d8:	2b0c      	cmp	r3, #12
 800c3da:	d112      	bne.n	800c402 <_nx_tcp_connect_cleanup+0x102>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2238      	movs	r2, #56	; 0x38
 800c3e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c3e4:	4b10      	ldr	r3, [pc, #64]	; (800c428 <_nx_tcp_connect_cleanup+0x128>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	4a0f      	ldr	r2, [pc, #60]	; (800c428 <_nx_tcp_connect_cleanup+0x128>)
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	f383 8810 	msr	PRIMASK, r3
}
 800c3f8:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f007 fa7e 	bl	80138fc <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c400:	e005      	b.n	800c40e <_nx_tcp_connect_cleanup+0x10e>
 800c402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c404:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f383 8810 	msr	PRIMASK, r3
}
 800c40c:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c40e:	3738      	adds	r7, #56	; 0x38
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	54435020 	.word	0x54435020
 800c418:	2400008c 	.word	0x2400008c
 800c41c:	240023d0 	.word	0x240023d0
 800c420:	24002470 	.word	0x24002470
 800c424:	0800c19d 	.word	0x0800c19d
 800c428:	240023cc 	.word	0x240023cc

0800c42c <_nx_tcp_deferred_cleanup_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_deferred_cleanup_check(NX_IP *ip_ptr)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
NX_TCP_SOCKET *socket_ptr;
TX_THREAD     *thread_ptr;


    /* Pickup the first socket and the created count.  */
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800c43a:	60fb      	str	r3, [r7, #12]
    created_sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800c442:	617b      	str	r3, [r7, #20]

    /* Loop through all created TCP sockets on the IP instance.  */
    while (created_sockets--)
 800c444:	e07a      	b.n	800c53c <_nx_tcp_deferred_cleanup_check+0x110>
    {

        /* Check the socket for deferred bind cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_bind_suspended_count;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c44c:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d015      	beq.n	800c480 <_nx_tcp_deferred_cleanup_check+0x54>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_bind_suspension_list;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c45a:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c460:	4a3c      	ldr	r2, [pc, #240]	; (800c554 <_nx_tcp_deferred_cleanup_check+0x128>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d103      	bne.n	800c46e <_nx_tcp_deferred_cleanup_check+0x42>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_client_bind_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c466:	2100      	movs	r1, #0
 800c468:	68b8      	ldr	r0, [r7, #8]
 800c46a:	f7ff fea3 	bl	800c1b4 <_nx_tcp_client_bind_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c472:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	3b01      	subs	r3, #1
 800c478:	613b      	str	r3, [r7, #16]
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1ed      	bne.n	800c45c <_nx_tcp_deferred_cleanup_check+0x30>
        }

        /* Check the socket for deferred connect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_connect_suspended_thread;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c486:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d008      	beq.n	800c4a0 <_nx_tcp_deferred_cleanup_check+0x74>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c492:	4a30      	ldr	r2, [pc, #192]	; (800c554 <_nx_tcp_deferred_cleanup_check+0x128>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d103      	bne.n	800c4a0 <_nx_tcp_deferred_cleanup_check+0x74>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c498:	2100      	movs	r1, #0
 800c49a:	68b8      	ldr	r0, [r7, #8]
 800c49c:	f7ff ff30 	bl	800c300 <_nx_tcp_connect_cleanup>
            }
        }

        /* Check the socket for deferred disconnect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_disconnect_suspended_thread;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c4a6:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d008      	beq.n	800c4c0 <_nx_tcp_deferred_cleanup_check+0x94>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4b2:	4a28      	ldr	r2, [pc, #160]	; (800c554 <_nx_tcp_deferred_cleanup_check+0x128>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d103      	bne.n	800c4c0 <_nx_tcp_deferred_cleanup_check+0x94>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	68b8      	ldr	r0, [r7, #8]
 800c4bc:	f000 f84c 	bl	800c558 <_nx_tcp_disconnect_cleanup>
            }
        }

        /* Check the socket for deferred receive cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_receive_suspended_count;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4c6:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d015      	beq.n	800c4fa <_nx_tcp_deferred_cleanup_check+0xce>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c4d4:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4da:	4a1e      	ldr	r2, [pc, #120]	; (800c554 <_nx_tcp_deferred_cleanup_check+0x128>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d103      	bne.n	800c4e8 <_nx_tcp_deferred_cleanup_check+0xbc>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_receive_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	68b8      	ldr	r0, [r7, #8]
 800c4e4:	f001 f92e 	bl	800d744 <_nx_tcp_receive_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ec:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	613b      	str	r3, [r7, #16]
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1ed      	bne.n	800c4d6 <_nx_tcp_deferred_cleanup_check+0xaa>
        }

        /* Check the socket for deferred transmit cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_transmit_suspended_count;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c500:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d015      	beq.n	800c534 <_nx_tcp_deferred_cleanup_check+0x108>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_transmit_suspension_list;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c50e:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c514:	4a0f      	ldr	r2, [pc, #60]	; (800c554 <_nx_tcp_deferred_cleanup_check+0x128>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d103      	bne.n	800c522 <_nx_tcp_deferred_cleanup_check+0xf6>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_transmit_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c51a:	2100      	movs	r1, #0
 800c51c:	68b8      	ldr	r0, [r7, #8]
 800c51e:	f003 f839 	bl	800f594 <_nx_tcp_transmit_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c526:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	613b      	str	r3, [r7, #16]
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1ed      	bne.n	800c510 <_nx_tcp_deferred_cleanup_check+0xe4>
        }

        /* Move to next created TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c53a:	60fb      	str	r3, [r7, #12]
    while (created_sockets--)
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	1e5a      	subs	r2, r3, #1
 800c540:	617a      	str	r2, [r7, #20]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f47f af7f 	bne.w	800c446 <_nx_tcp_deferred_cleanup_check+0x1a>
    }
}
 800c548:	bf00      	nop
 800c54a:	bf00      	nop
 800c54c:	3718      	adds	r7, #24
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	0800c19d 	.word	0x0800c19d

0800c558 <_nx_tcp_disconnect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_disconnect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08e      	sub	sp, #56	; 0x38
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c562:	f3ef 8310 	mrs	r3, PRIMASK
 800c566:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c56a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c56c:	b672      	cpsid	i
    return(int_posture);
 800c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800c570:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c576:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d004      	beq.n	800c588 <_nx_tcp_disconnect_cleanup+0x30>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a30      	ldr	r2, [pc, #192]	; (800c644 <_nx_tcp_disconnect_cleanup+0xec>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d006      	beq.n	800c596 <_nx_tcp_disconnect_cleanup+0x3e>
 800c588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	f383 8810 	msr	PRIMASK, r3
}
 800c592:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c594:	e053      	b.n	800c63e <_nx_tcp_disconnect_cleanup+0xe6>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d106      	bne.n	800c5ac <_nx_tcp_disconnect_cleanup+0x54>
 800c59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	f383 8810 	msr	PRIMASK, r3
}
 800c5a8:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c5aa:	e048      	b.n	800c63e <_nx_tcp_disconnect_cleanup+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c5ac:	f3ef 8305 	mrs	r3, IPSR
 800c5b0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c5b2:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800c5b4:	4b24      	ldr	r3, [pc, #144]	; (800c648 <_nx_tcp_disconnect_cleanup+0xf0>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d104      	bne.n	800c5c8 <_nx_tcp_disconnect_cleanup+0x70>
 800c5be:	4b23      	ldr	r3, [pc, #140]	; (800c64c <_nx_tcp_disconnect_cleanup+0xf4>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a23      	ldr	r2, [pc, #140]	; (800c650 <_nx_tcp_disconnect_cleanup+0xf8>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d116      	bne.n	800c5f6 <_nx_tcp_disconnect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a22      	ldr	r2, [pc, #136]	; (800c654 <_nx_tcp_disconnect_cleanup+0xfc>)
 800c5cc:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	f383 8810 	msr	PRIMASK, r3
}
 800c5e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f005 fb00 	bl	8011bf4 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800c5f4:	e023      	b.n	800c63e <_nx_tcp_disconnect_cleanup+0xe6>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_disconnect_suspended_thread =  NX_NULL;
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c608:	2b0c      	cmp	r3, #12
 800c60a:	d112      	bne.n	800c632 <_nx_tcp_disconnect_cleanup+0xda>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2241      	movs	r2, #65	; 0x41
 800c610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c614:	4b10      	ldr	r3, [pc, #64]	; (800c658 <_nx_tcp_disconnect_cleanup+0x100>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	4a0f      	ldr	r2, [pc, #60]	; (800c658 <_nx_tcp_disconnect_cleanup+0x100>)
 800c61c:	6013      	str	r3, [r2, #0]
 800c61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c620:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	f383 8810 	msr	PRIMASK, r3
}
 800c628:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f007 f966 	bl	80138fc <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c630:	e005      	b.n	800c63e <_nx_tcp_disconnect_cleanup+0xe6>
 800c632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c634:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f383 8810 	msr	PRIMASK, r3
}
 800c63c:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c63e:	3738      	adds	r7, #56	; 0x38
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	54435020 	.word	0x54435020
 800c648:	2400008c 	.word	0x2400008c
 800c64c:	240023d0 	.word	0x240023d0
 800c650:	24002470 	.word	0x24002470
 800c654:	0800c19d 	.word	0x0800c19d
 800c658:	240023cc 	.word	0x240023cc

0800c65c <_nx_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_enable(NX_IP *ip_ptr)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);
    /* Place all server listen request structures on the available list.   */

    /* Setup a pointer to the first listen.  */
    listen_ptr =  &(ip_ptr -> nx_ip_tcp_server_listen_reqs[0]);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800c66a:	60bb      	str	r3, [r7, #8]

    /* Setup the available listen requests head pointer.  */
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    /* Loop through the listen requests and link them on the available list.  */
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]
 800c678:	e00d      	b.n	800c696 <_nx_tcp_enable+0x3a>
    {

        /* Link listen request to next listen request.  */
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	61da      	str	r2, [r3, #28]

        /* Determine if we need to move to the next listen request.  */
        if (i < (NX_MAX_LISTEN_REQUESTS - 1))
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b08      	cmp	r3, #8
 800c688:	d802      	bhi.n	800c690 <_nx_tcp_enable+0x34>
        {
            listen_ptr++;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	3324      	adds	r3, #36	; 0x24
 800c68e:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	60fb      	str	r3, [r7, #12]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b09      	cmp	r3, #9
 800c69a:	d9ee      	bls.n	800c67a <_nx_tcp_enable+0x1e>
        }
    }

    /* Make sure the last listen request has a NULL pointer.  */
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	61da      	str	r2, [r3, #28]

    /* Set the TCP packet queue processing function.  */
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a13      	ldr	r2, [pc, #76]	; (800c6f4 <_nx_tcp_enable+0x98>)
 800c6a6:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

    /* Set the TCP periodic processing function.  */
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a12      	ldr	r2, [pc, #72]	; (800c6f8 <_nx_tcp_enable+0x9c>)
 800c6ae:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

    /* Set the TCP fast periodic processing function.  */
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a11      	ldr	r2, [pc, #68]	; (800c6fc <_nx_tcp_enable+0xa0>)
 800c6b6:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

    /* Set the TCP deferred cleanup check function.  */
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a10      	ldr	r2, [pc, #64]	; (800c700 <_nx_tcp_enable+0xa4>)
 800c6be:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718

    /* Setup base timer variables.  */
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 800c6c2:	4b10      	ldr	r3, [pc, #64]	; (800c704 <_nx_tcp_enable+0xa8>)
 800c6c4:	220a      	movs	r2, #10
 800c6c6:	601a      	str	r2, [r3, #0]
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 800c6c8:	4b0f      	ldr	r3, [pc, #60]	; (800c708 <_nx_tcp_enable+0xac>)
 800c6ca:	2214      	movs	r2, #20
 800c6cc:	601a      	str	r2, [r3, #0]

    /*lint -e{778} suppress constant expression, since NX_TCP_TRANSMIT_TIMER_RATE can be redefined. */
    /*lint -e{835} -e{845} suppress operating on zero. */
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	; (800c70c <_nx_tcp_enable+0xb0>)
 800c6d0:	2264      	movs	r2, #100	; 0x64
 800c6d2:	601a      	str	r2, [r3, #0]

    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 800c6d4:	4b0e      	ldr	r3, [pc, #56]	; (800c710 <_nx_tcp_enable+0xb4>)
 800c6d6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800c6da:	601a      	str	r2, [r3, #0]

    _nx_ip_fast_periodic_timer_create(ip_ptr);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7fd fbd3 	bl	8009e88 <_nx_ip_fast_periodic_timer_create>

    /* Set the TCP packet receive function in the IP structure to indicate
       we are ready to receive TCP packets.  */
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a0b      	ldr	r2, [pc, #44]	; (800c714 <_nx_tcp_enable+0xb8>)
 800c6e6:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	0800d6d5 	.word	0x0800d6d5
 800c6f8:	0800d6c1 	.word	0x0800d6c1
 800c6fc:	0800c719 	.word	0x0800c719
 800c700:	0800c42d 	.word	0x0800c42d
 800c704:	240022f0 	.word	0x240022f0
 800c708:	240022fc 	.word	0x240022fc
 800c70c:	240022f4 	.word	0x240022f4
 800c710:	240022f8 	.word	0x240022f8
 800c714:	0800d1bd 	.word	0x0800d1bd

0800c718 <_nx_tcp_fast_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_fast_periodic_processing(NX_IP *ip_ptr)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
ULONG          sockets;
ULONG          timer_rate;


    /* Pickup this timer's periodic rate.  */
    timer_rate =  _nx_tcp_fast_timer_rate;
 800c720:	4b73      	ldr	r3, [pc, #460]	; (800c8f0 <_nx_tcp_fast_periodic_processing+0x1d8>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	60fb      	str	r3, [r7, #12]

    /* Pickup the number of created TCP sockets.  */
    sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800c72c:	613b      	str	r3, [r7, #16]

    /* Pickup the first socket.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800c734:	617b      	str	r3, [r7, #20]

    /* Loop through the created sockets.  */
    while (sockets--)
 800c736:	e0cf      	b.n	800c8d8 <_nx_tcp_fast_periodic_processing+0x1c0>
    {

        /* Determine if the socket is in an established or disconnect state and has delayed sending an ACK
           from a previous receive packet event.  */
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c73c:	2b04      	cmp	r3, #4
 800c73e:	d91d      	bls.n	800c77c <_nx_tcp_fast_periodic_processing+0x64>
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 800c748:	429a      	cmp	r2, r3
 800c74a:	d105      	bne.n	800c758 <_nx_tcp_fast_periodic_processing+0x40>
             (socket_ptr -> nx_tcp_socket_rx_window_last_sent < socket_ptr -> nx_tcp_socket_rx_window_current)))
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 800c754:	429a      	cmp	r2, r3
 800c756:	d211      	bcs.n	800c77c <_nx_tcp_fast_periodic_processing+0x64>
        {

            /* Determine if the ACK has expired.  */
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d306      	bcc.n	800c770 <_nx_tcp_fast_periodic_processing+0x58>
            {

                /* Send the delayed ACK, which also resets the ACK timeout.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c766:	4619      	mov	r1, r3
 800c768:	6978      	ldr	r0, [r7, #20]
 800c76a:	f000 fd95 	bl	800d298 <_nx_tcp_packet_send_ack>
 800c76e:	e005      	b.n	800c77c <_nx_tcp_fast_periodic_processing+0x64>
            }
            else
            {

                /* No, it hasn't expired yet.  Just decrement it for now.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout -= timer_rate;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	1ad2      	subs	r2, r2, r3
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	649a      	str	r2, [r3, #72]	; 0x48
            }
        }

        /* Determine if a timeout is active.  */
        if (socket_ptr -> nx_tcp_socket_timeout)
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 80a4 	beq.w	800c8d0 <_nx_tcp_fast_periodic_processing+0x1b8>
        {

            /* Yes, a timeout is active.  Determine if it has expired.  */
            if (socket_ptr -> nx_tcp_socket_timeout > timer_rate)
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	429a      	cmp	r2, r3
 800c792:	d208      	bcs.n	800c7a6 <_nx_tcp_fast_periodic_processing+0x8e>
            {

                /* No, it hasn't expired yet.  Just decrement the timeout value.  */
                socket_ptr -> nx_tcp_socket_timeout -= timer_rate;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	1ad2      	subs	r2, r2, r3
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800c7a4:	e094      	b.n	800c8d0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d304      	bcc.n	800c7c0 <_nx_tcp_fast_periodic_processing+0xa8>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00c      	beq.n	800c7da <_nx_tcp_fast_periodic_processing+0xc2>
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d308      	bcc.n	800c7e2 <_nx_tcp_fast_periodic_processing+0xca>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE))
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d103      	bne.n	800c7e2 <_nx_tcp_fast_periodic_processing+0xca>
            {

                /* Number of retries has been exceeded.  */

                /* Close the socket via a connection reset.  */
                _nx_tcp_socket_connection_reset(socket_ptr);
 800c7da:	6978      	ldr	r0, [r7, #20]
 800c7dc:	f001 f887 	bl	800d8ee <_nx_tcp_socket_connection_reset>
 800c7e0:	e076      	b.n	800c8d0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* YUXIN MODIFIED HERE */
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d003      	beq.n	800c7f2 <_nx_tcp_fast_periodic_processing+0xda>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800c7ee:	2b04      	cmp	r3, #4
 800c7f0:	d11d      	bne.n	800c82e <_nx_tcp_fast_periodic_processing+0x116>
            {

                /* Yes, the timeout on the SYN message has expired.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c7f8:	1c5a      	adds	r2, r3, #1
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c80c:	6979      	ldr	r1, [r7, #20]
 800c80e:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800c812:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c816:	409a      	lsls	r2, r3
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

                /* Send the initial SYN message again.  Adjust the sequence number before and
                   after to ensure the same sequence as the initial SYN.  */
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c822:	3b01      	subs	r3, #1
 800c824:	4619      	mov	r1, r3
 800c826:	6978      	ldr	r0, [r7, #20]
 800c828:	f000 feda 	bl	800d5e0 <_nx_tcp_packet_send_syn>
 800c82c:	e050      	b.n	800c8d0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* Has the TCP timeout for transmit packet or probing zero window expired?  */
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c834:	2b00      	cmp	r3, #0
 800c836:	d107      	bne.n	800c848 <_nx_tcp_fast_periodic_processing+0x130>
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d116      	bne.n	800c86e <_nx_tcp_fast_periodic_processing+0x156>
                      (socket_ptr -> nx_tcp_socket_state <= NX_TCP_CLOSE_WAIT)))
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 800c844:	2b06      	cmp	r3, #6
 800c846:	d812      	bhi.n	800c86e <_nx_tcp_fast_periodic_processing+0x156>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84c:	1e5a      	subs	r2, r3, #1
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	661a      	str	r2, [r3, #96]	; 0x60

                /* Retransmit the packet. */
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 800c852:	2200      	movs	r2, #0
 800c854:	6979      	ldr	r1, [r7, #20]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f001 fa6c 	bl	800dd34 <_nx_tcp_socket_retransmit>

                /* Exit fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	2200      	movs	r2, #0
 800c860:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	659a      	str	r2, [r3, #88]	; 0x58
 800c86c:	e030      	b.n	800c8d0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c872:	2b07      	cmp	r3, #7
 800c874:	d007      	beq.n	800c886 <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800c87a:	2b09      	cmp	r3, #9
 800c87c:	d003      	beq.n	800c886 <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800c882:	2b0b      	cmp	r3, #11
 800c884:	d11d      	bne.n	800c8c2 <_nx_tcp_fast_periodic_processing+0x1aa>

                /* We have a timeout condition on sending the FIN... so it needs to be
                   retried.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c88c:	1c5a      	adds	r2, r3, #1
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c8a0:	6979      	ldr	r1, [r7, #20]
 800c8a2:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800c8a6:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c8aa:	409a      	lsls	r2, r3
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

                /* Send another FIN packet.  */
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	6978      	ldr	r0, [r7, #20]
 800c8bc:	f000 fe25 	bl	800d50a <_nx_tcp_packet_send_fin>
 800c8c0:	e006      	b.n	800c8d0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c6:	2b0a      	cmp	r3, #10
 800c8c8:	d102      	bne.n	800c8d0 <_nx_tcp_fast_periodic_processing+0x1b8>
            {

                /* Clean the transmission control block.  */
                _nx_tcp_socket_block_cleanup(socket_ptr);
 800c8ca:	6978      	ldr	r0, [r7, #20]
 800c8cc:	f000 ffe2 	bl	800d894 <_nx_tcp_socket_block_cleanup>
            }
        }

        /* Move to the next TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c8d6:	617b      	str	r3, [r7, #20]
    while (sockets--)
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	1e5a      	subs	r2, r3, #1
 800c8dc:	613a      	str	r2, [r7, #16]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f47f af2a 	bne.w	800c738 <_nx_tcp_fast_periodic_processing+0x20>
    }
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	240022f0 	.word	0x240022f0

0800c8f4 <_nx_tcp_mss_option_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_mss_option_get(UCHAR *option_ptr, ULONG option_area_size, ULONG *mss)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]

ULONG option_length;

    /* Initialize the value.  */
    *mss = 0;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]

    /* Loop through the option area looking for the MSS.  */
    while (option_area_size >= 4)
 800c906:	e043      	b.n	800c990 <_nx_tcp_mss_option_get+0x9c>
    {

        /* Is the current character the MSS type?  */
        if (*option_ptr == NX_TCP_MSS_KIND)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d11a      	bne.n	800c946 <_nx_tcp_mss_option_get+0x52>
        {

            /* Yes, we found it!  */

            /* Move the pointer forward by one.  */
            option_ptr++;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3301      	adds	r3, #1
 800c914:	60fb      	str	r3, [r7, #12]

            /* Check the option length, if option length is not equal to 4, return NX_FALSE.  */
            if (*option_ptr++ != 4)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	60fa      	str	r2, [r7, #12]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b04      	cmp	r3, #4
 800c920:	d001      	beq.n	800c926 <_nx_tcp_mss_option_get+0x32>
            {
                return(NX_FALSE);
 800c922:	2300      	movs	r3, #0
 800c924:	e03a      	b.n	800c99c <_nx_tcp_mss_option_get+0xa8>
            }

            /* Build the mss size.  */
            *mss = (ULONG)*option_ptr++;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	60fa      	str	r2, [r7, #12]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	601a      	str	r2, [r3, #0]

            /* Get the LSB of the MSS.  */
            *mss = (*mss << 8) | (ULONG)*option_ptr;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	021b      	lsls	r3, r3, #8
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	7812      	ldrb	r2, [r2, #0]
 800c93e:	431a      	orrs	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	601a      	str	r2, [r3, #0]

            /* Finished, get out of the loop!  */
            break;
 800c944:	e029      	b.n	800c99a <_nx_tcp_mss_option_get+0xa6>
        }

        /* Otherwise, process relative to the option type.  */

        /* Check for end of list.  */
        if (*option_ptr == NX_TCP_EOL_KIND)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d024      	beq.n	800c998 <_nx_tcp_mss_option_get+0xa4>
            /* Yes, end of list, get out!  */
            break;
        }

        /* Check for NOP.  */
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	60fa      	str	r2, [r7, #12]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d103      	bne.n	800c962 <_nx_tcp_mss_option_get+0x6e>
        {

            /* One character option!  */
            option_area_size--;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	60bb      	str	r3, [r7, #8]
 800c960:	e016      	b.n	800c990 <_nx_tcp_mss_option_get+0x9c>
        }
        else
        {

            /* Derive the option length.  */
            option_length =  ((ULONG)*option_ptr);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	617b      	str	r3, [r7, #20]

            /* Return when option length is invalid. */
            if (option_length == 0)
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <_nx_tcp_mss_option_get+0x7e>
            {
                return(NX_FALSE);
 800c96e:	2300      	movs	r3, #0
 800c970:	e014      	b.n	800c99c <_nx_tcp_mss_option_get+0xa8>
            }

            /* Move the option pointer forward.  */
            option_ptr =  option_ptr + (option_length - 1);
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	3b01      	subs	r3, #1
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	4413      	add	r3, r2
 800c97a:	60fb      	str	r3, [r7, #12]

            /* Determine if this is greater than the option area size.  */
            if (option_length > option_area_size)
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	429a      	cmp	r2, r3
 800c982:	d901      	bls.n	800c988 <_nx_tcp_mss_option_get+0x94>
            {
                return(NX_FALSE);
 800c984:	2300      	movs	r3, #0
 800c986:	e009      	b.n	800c99c <_nx_tcp_mss_option_get+0xa8>
            }
            else
            {
                option_area_size =  option_area_size - option_length;
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	60bb      	str	r3, [r7, #8]
    while (option_area_size >= 4)
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2b03      	cmp	r3, #3
 800c994:	d8b8      	bhi.n	800c908 <_nx_tcp_mss_option_get+0x14>
 800c996:	e000      	b.n	800c99a <_nx_tcp_mss_option_get+0xa6>
            break;
 800c998:	bf00      	nop
            }
        }
    }

    /* Return.  */
    return(NX_TRUE);
 800c99a:	2301      	movs	r3, #1
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	371c      	adds	r7, #28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <_nx_tcp_no_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_no_connection_reset(NX_IP *ip_ptr, NX_PACKET *packet_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800c9a8:	b590      	push	{r4, r7, lr}
 800c9aa:	b0d3      	sub	sp, #332	; 0x14c
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	f107 030c 	add.w	r3, r7, #12
 800c9b2:	6018      	str	r0, [r3, #0]
 800c9b4:	f107 0308 	add.w	r3, r7, #8
 800c9b8:	6019      	str	r1, [r3, #0]
 800c9ba:	1d3b      	adds	r3, r7, #4
 800c9bc:	601a      	str	r2, [r3, #0]
ULONG         data_offset = 0;
#endif /* NX_IPSEC_ENABLE */


    /* Clear the fake socket first.  */
    memset((void *)&fake_socket, 0, sizeof(NX_TCP_SOCKET));
 800c9be:	f107 0314 	add.w	r3, r7, #20
 800c9c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f008 fe91 	bl	80156f0 <memset>

    /* Build a fake socket so we can send a reset TCP requests that are not valid.  */
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;
 800c9ce:	f107 0314 	add.w	r3, r7, #20
 800c9d2:	f107 020c 	add.w	r2, r7, #12
 800c9d6:	6812      	ldr	r2, [r2, #0]
 800c9d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* Set the connection IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800c9dc:	f107 0308 	add.w	r3, r7, #8
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c9e6:	2b04      	cmp	r3, #4
 800c9e8:	d12b      	bne.n	800ca42 <_nx_tcp_no_connection_reset+0x9a>
    {
    NX_IPV4_HEADER *ip_header_ptr;

        /* Set the IP header.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800c9ea:	f107 0308 	add.w	r3, r7, #8
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

        /* Set the connection ip.  */
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V4;
 800c9f6:	f107 0314 	add.w	r3, r7, #20
 800c9fa:	2204      	movs	r2, #4
 800c9fc:	615a      	str	r2, [r3, #20]
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 800c9fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ca02:	68da      	ldr	r2, [r3, #12]
 800ca04:	f107 0314 	add.w	r3, r7, #20
 800ca08:	619a      	str	r2, [r3, #24]

        /* Assume the interface that receives the incoming packet is the best interface
           for sending responses. */
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800ca0a:	f107 0308 	add.w	r3, r7, #8
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca12:	f107 0314 	add.w	r3, r7, #20
 800ca16:	629a      	str	r2, [r3, #40]	; 0x28
        fake_socket.nx_tcp_socket_next_hop_address = NX_NULL;
 800ca18:	f107 0314 	add.w	r3, r7, #20
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Find the next hop info. */
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 800ca20:	f107 0314 	add.w	r3, r7, #20
 800ca24:	6999      	ldr	r1, [r3, #24]
 800ca26:	f107 0314 	add.w	r3, r7, #20
 800ca2a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ca2e:	f107 0314 	add.w	r3, r7, #20
 800ca32:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ca36:	f107 000c 	add.w	r0, r7, #12
 800ca3a:	4623      	mov	r3, r4
 800ca3c:	6800      	ldr	r0, [r0, #0]
 800ca3e:	f7fd ff37 	bl	800a8b0 <_nx_ip_route_find>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* FEATURE_NX_IPV6 */

    /* Set the source port and destination port.  */
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800ca42:	1d3b      	adds	r3, r7, #4
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	f107 0314 	add.w	r3, r7, #20
 800ca4e:	60da      	str	r2, [r3, #12]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800ca50:	1d3b      	adds	r3, r7, #4
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	0c1a      	lsrs	r2, r3, #16
 800ca58:	f107 0314 	add.w	r3, r7, #20
 800ca5c:	61da      	str	r2, [r3, #28]

    /* Set the sequence number only if the incoming segment does not have the ACK flag, according to
       Section 3.4, "Reset Generation" on page 37, RFC793. */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800ca5e:	1d3b      	adds	r3, r7, #4
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d122      	bne.n	800cab2 <_nx_tcp_no_connection_reset+0x10a>
    {
        /* Get the header length.  */
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ca6c:	1d3b      	adds	r3, r7, #4
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	0f1b      	lsrs	r3, r3, #28
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Update sequence number to set the reset acknowledge number.  */
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800ca7a:	1d3b      	adds	r3, r7, #4
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	f107 0308 	add.w	r3, r7, #8
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ca88:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ca8c:	1acb      	subs	r3, r1, r3
 800ca8e:	441a      	add	r2, r3
 800ca90:	1d3b      	adds	r3, r7, #4
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	605a      	str	r2, [r3, #4]

        /* Check the SYN and FIN bits.  */
        if (tcp_header_ptr -> nx_tcp_header_word_3 & (NX_TCP_SYN_BIT | NX_TCP_FIN_BIT))
 800ca96:	1d3b      	adds	r3, r7, #4
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d006      	beq.n	800cab2 <_nx_tcp_no_connection_reset+0x10a>
        {

            /* Update sequence number to set the reset acknowledge number.  */
            tcp_header_ptr -> nx_tcp_sequence_number++;
 800caa4:	1d3b      	adds	r3, r7, #4
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	1d3b      	adds	r3, r7, #4
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	605a      	str	r2, [r3, #4]
            fake_socket.nx_tcp_socket_egress_sa_data_offset = 0;
        }
    }
#endif

    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 800cab2:	f107 0314 	add.w	r3, r7, #20
 800cab6:	2280      	movs	r2, #128	; 0x80
 800cab8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Send a RST to indicate the connection was not available.  */
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 800cabc:	1d3b      	adds	r3, r7, #4
 800cabe:	f107 0214 	add.w	r2, r7, #20
 800cac2:	6819      	ldr	r1, [r3, #0]
 800cac4:	4610      	mov	r0, r2
 800cac6:	f000 fd57 	bl	800d578 <_nx_tcp_packet_send_rst>
}
 800caca:	bf00      	nop
 800cacc:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd90      	pop	{r4, r7, pc}

0800cad4 <_nx_tcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b09c      	sub	sp, #112	; 0x70
 800cad8:	af02      	add	r7, sp, #8
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]

UINT                         index;
UINT                         port;
ULONG                       *source_ip = NX_NULL;
 800cade:	2300      	movs	r3, #0
 800cae0:	667b      	str	r3, [r7, #100]	; 0x64
ULONG                       *dest_ip = NX_NULL;
 800cae2:	2300      	movs	r3, #0
 800cae4:	663b      	str	r3, [r7, #96]	; 0x60
NX_TCP_SOCKET               *socket_ptr;
NX_TCP_HEADER               *tcp_header_ptr;
struct NX_TCP_LISTEN_STRUCT *listen_ptr;
VOID                         (*listen_callback)(NX_TCP_SOCKET *socket_ptr, UINT port);
ULONG                        option_words;
ULONG                        mss = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	60bb      	str	r3, [r7, #8]
ULONG                        checksum;
NX_INTERFACE                *interface_ptr = NX_NULL;
 800caea:	2300      	movs	r3, #0
 800caec:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                         compute_checksum = 1;
 800caee:	2301      	movs	r3, #1
 800caf0:	653b      	str	r3, [r7, #80]	; 0x50
NX_PACKET                   *queued_ptr;
NX_PACKET                   *queued_prev_ptr;
ULONG                       *queued_source_ip;
UINT                         queued_source_port;
UINT                         is_a_RST_request;
UINT                         is_valid_option_flag = NX_TRUE;
 800caf2:	2301      	movs	r3, #1
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Pickup the source IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cafc:	2b04      	cmp	r3, #4
 800cafe:	d10e      	bne.n	800cb1e <_nx_tcp_packet_process+0x4a>
    {

    NX_IPV4_HEADER *ip_header_ptr;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb04:	637b      	str	r3, [r7, #52]	; 0x34

        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 800cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb08:	330c      	adds	r3, #12
 800cb0a:	667b      	str	r3, [r7, #100]	; 0x64

        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 800cb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0e:	3310      	adds	r3, #16
 800cb10:	663b      	str	r3, [r7, #96]	; 0x60

        mss = 536;
 800cb12:	f44f 7306 	mov.w	r3, #536	; 0x218
 800cb16:	60bb      	str	r3, [r7, #8]

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb1c:	657b      	str	r3, [r7, #84]	; 0x54
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
    }
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 800cb1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb22:	f003 0308 	and.w	r3, r3, #8
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <_nx_tcp_packet_process+0x5a>
    {
        compute_checksum = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	653b      	str	r3, [r7, #80]	; 0x50
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800cb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d023      	beq.n	800cb7c <_nx_tcp_packet_process+0xa8>
#endif /* defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                           (UINT)packet_ptr -> nx_packet_length,
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800cb38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb3e:	2106      	movs	r1, #6
 800cb40:	6838      	ldr	r0, [r7, #0]
 800cb42:	f7fc fc1d 	bl	8009380 <_nx_ip_checksum_compute>
 800cb46:	4603      	mov	r3, r0
 800cb48:	633b      	str	r3, [r7, #48]	; 0x30
                                           source_ip, dest_ip);

        checksum = NX_LOWER_16_MASK & ~checksum;
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	43db      	mvns	r3, r3
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the checksum.  */
        if (checksum != 0)
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d011      	beq.n	800cb7c <_nx_tcp_packet_process+0xa8>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP invalid packet error count.  */
            ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Increment the TCP packet checksum error count.  */
            ip_ptr -> nx_ip_tcp_checksum_errors++;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cb6c:	1c5a      	adds	r2, r3, #1
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
#endif

            /* Checksum error, just release the packet.  */
            _nx_packet_release(packet_ptr);
 800cb74:	6838      	ldr	r0, [r7, #0]
 800cb76:	f7ff f9bd 	bl	800bef4 <_nx_packet_release>
            return;
 800cb7a:	e31c      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
        }
    }

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	ba1a      	rev	r2, r3
 800cb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	ba1a      	rev	r2, r3
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800cb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	ba1a      	rev	r2, r3
 800cb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9e:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	ba1a      	rev	r2, r3
 800cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba8:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	ba1a      	rev	r2, r3
 800cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb2:	611a      	str	r2, [r3, #16]

    /* Determine if there are any option words...  Note there are always 5 words in a TCP header.  */
    option_words =  (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	0f1b      	lsrs	r3, r3, #28
 800cbba:	3b05      	subs	r3, #5
 800cbbc:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Check for valid packet length.  */
    if (((INT)option_words < 0) || (packet_ptr -> nx_packet_length < (sizeof(NX_TCP_HEADER) + (option_words << 2))))
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	db06      	blt.n	800cbd2 <_nx_tcp_packet_process+0xfe>
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	3314      	adds	r3, #20
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d20a      	bcs.n	800cbe8 <_nx_tcp_packet_process+0x114>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800cbe0:	6838      	ldr	r0, [r7, #0]
 800cbe2:	f7ff f987 	bl	800bef4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800cbe6:	e2e6      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
    }
#endif

    if (option_words)
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d01c      	beq.n	800cc28 <_nx_tcp_packet_process+0x154>
    {

        /* Yes, there are one or more option words.  */

        /* Derive the Maximum Segment Size (MSS) in the option words.  */
        status = _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f103 0014 	add.w	r0, r3, #20
 800cbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	f107 0208 	add.w	r2, r7, #8
 800cbfe:	4619      	mov	r1, r3
 800cc00:	f7ff fe78 	bl	800c8f4 <_nx_tcp_mss_option_get>
 800cc04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Check the status. if status is NX_FALSE, means Option Length is invalid.  */
        if (status == NX_FALSE)
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d102      	bne.n	800cc12 <_nx_tcp_packet_process+0x13e>
        {

            /* The option is invalid.  */
            is_valid_option_flag = NX_FALSE;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc10:	e00a      	b.n	800cc28 <_nx_tcp_packet_process+0x154>
        else
        {

            /* Set the default MSS if the MSS value was not found.  */
            /*lint -e{644} suppress variable might not be initialized, since "mss" was initialized in _nx_tcp_mss_option_get. */
            if (mss == 0)
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d107      	bne.n	800cc28 <_nx_tcp_packet_process+0x154>
            {
#ifndef NX_DISABLE_IPV4
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d102      	bne.n	800cc28 <_nx_tcp_packet_process+0x154>
                {
                    mss = 536;
 800cc22:	f44f 7306 	mov.w	r3, #536	; 0x218
 800cc26:	60bb      	str	r3, [r7, #8]
        }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
    }

    /* Pickup the destination TCP port.  */
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	623b      	str	r3, [r7, #32]

    /* Pickup the source TCP port.  */
    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	0c1b      	lsrs	r3, r3, #16
 800cc36:	61fb      	str	r3, [r7, #28]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800cc38:	6a3b      	ldr	r3, [r7, #32]
 800cc3a:	0a1a      	lsrs	r2, r3, #8
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f003 031f 	and.w	r3, r3, #31
 800cc44:	61bb      	str	r3, [r7, #24]

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	69ba      	ldr	r2, [r7, #24]
 800cc4a:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc52:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if there are any sockets bound on this port index.  */
    if (socket_ptr)
 800cc54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d066      	beq.n	800cd28 <_nx_tcp_packet_process+0x254>

        /*  Yes, loop to examine the list of bound ports on this index.  */
        do
        {

            find_a_match = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if the port has been found.  */
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 800cc5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	6a3a      	ldr	r2, [r7, #32]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d152      	bne.n	800cd0e <_nx_tcp_packet_process+0x23a>
                (socket_ptr -> nx_tcp_socket_connect_port == source_port))
 800cc68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc6a:	69db      	ldr	r3, [r3, #28]
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 800cc6c:	69fa      	ldr	r2, [r7, #28]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d14d      	bne.n	800cd0e <_nx_tcp_packet_process+0x23a>
            {

                /* Make sure they are the same IP protocol */
                if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == packet_ptr -> nx_packet_ip_version)
 800cc72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc74:	695b      	ldr	r3, [r3, #20]
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d10c      	bne.n	800cc9a <_nx_tcp_packet_process+0x1c6>
                {

#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc86:	2b04      	cmp	r3, #4
 800cc88:	d107      	bne.n	800cc9a <_nx_tcp_packet_process+0x1c6>
                    {

                        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 == *source_ip)
 800cc8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc8c:	699a      	ldr	r2, [r3, #24]
 800cc8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d101      	bne.n	800cc9a <_nx_tcp_packet_process+0x1c6>
                        {
                            find_a_match = 1;
 800cc96:	2301      	movs	r3, #1
 800cc98:	63bb      	str	r3, [r7, #56]	; 0x38
                        }
                    }
#endif /* FEATURE_NX_IPV6 */
                }

                if (find_a_match)
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d036      	beq.n	800cd0e <_nx_tcp_packet_process+0x23a>
                    /* Determine if we need to update the tcp port head pointer.  This should
                       only be done if the found socket pointer is not the head pointer and
                       the mutex for this IP instance is available.  */

                    /* Move the port head pointer to this socket.  */
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cca8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ccaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* If this packet contains SYN */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d024      	beq.n	800cd04 <_nx_tcp_packet_process+0x230>
                    {

                        /* Record the MSS value if it is present and the   Otherwise use 536, as
                           outlined in RFC 1122 section 4.2.2.6. */
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccbe:	625a      	str	r2, [r3, #36]	; 0x24

                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 800ccc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccc2:	691a      	ldr	r2, [r3, #16]
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d208      	bcs.n	800ccdc <_nx_tcp_packet_process+0x208>
 800ccca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d004      	beq.n	800ccdc <_nx_tcp_packet_process+0x208>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = socket_ptr -> nx_tcp_socket_mss;
 800ccd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccd4:	691a      	ldr	r2, [r3, #16]
 800ccd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccd8:	621a      	str	r2, [r3, #32]
 800ccda:	e00b      	b.n	800ccf4 <_nx_tcp_packet_process+0x220>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 800ccdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce0:	2b03      	cmp	r3, #3
 800cce2:	d104      	bne.n	800ccee <_nx_tcp_packet_process+0x21a>
                                 (socket_ptr -> nx_tcp_socket_connect_mss > mss))
 800cce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce6:	6a1a      	ldr	r2, [r3, #32]
 800cce8:	68bb      	ldr	r3, [r7, #8]
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d902      	bls.n	800ccf4 <_nx_tcp_packet_process+0x220>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccf2:	621a      	str	r2, [r3, #32]
                        }

                        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
                            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 800ccf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccf6:	6a1b      	ldr	r3, [r3, #32]
 800ccf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccfa:	6a12      	ldr	r2, [r2, #32]
 800ccfc:	fb02 f203 	mul.w	r2, r2, r3
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800cd00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd02:	631a      	str	r2, [r3, #48]	; 0x30
                        socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
                    }

                    /* Process the packet within an existing TCP connection.  */
                    _nx_tcp_socket_packet_process(socket_ptr, packet_ptr);
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cd08:	f000 fe4e 	bl	800d9a8 <_nx_tcp_socket_packet_process>

                    /* Get out of the search loop and this function!  */
                    return;
 800cd0c:	e253      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
                }
            }

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
 800cd0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd14:	65fb      	str	r3, [r7, #92]	; 0x5c
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	69ba      	ldr	r2, [r7, #24]
 800cd1a:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d198      	bne.n	800cc5a <_nx_tcp_packet_process+0x186>
    }

    /* At this point, we know there is not an existing TCP connection.  */

    /* If this packet contains the valid option.  */
    if (is_valid_option_flag == NX_FALSE)
 800cd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10f      	bne.n	800cd4e <_nx_tcp_packet_process+0x27a>
    {

        /* Send RST message.
           TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
           a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 800cd2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff fe38 	bl	800c9a8 <_nx_tcp_no_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error count.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cd3e:	1c5a      	adds	r2, r3, #1
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

        /* Not a connection request, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800cd46:	6838      	ldr	r0, [r7, #0]
 800cd48:	f7ff f8d4 	bl	800bef4 <_nx_packet_release>

        return;
 800cd4c:	e233      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
#endif

    /* Handle new connection requests without ACK bit in NX_TCP_SYN_RECEIVED state.
       NX_TCP_SYN_RECEIVED state is equal of LISTEN state of RFC.
       RFC793, Section3.9, Page65. */
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f040 8209 	bne.w	800d16e <_nx_tcp_packet_process+0x69a>
        (ip_ptr -> nx_ip_tcp_active_listen_requests))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 8203 	beq.w	800d16e <_nx_tcp_packet_process+0x69a>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cd6e:	2b04      	cmp	r3, #4
 800cd70:	d145      	bne.n	800cdfe <_nx_tcp_packet_process+0x32a>
        {

            /* Check for LAND attack packet. This is an incoming packet with matching
               Source and Destination IP address, and matching source and destination port. */
            if ((*source_ip == *dest_ip) && (source_port == port))
 800cd72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d10e      	bne.n	800cd9c <_nx_tcp_packet_process+0x2c8>
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d10a      	bne.n	800cd9c <_nx_tcp_packet_process+0x2c8>

                /* Bogus packet. Drop it! */

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet we will not process any further.  */
                _nx_packet_release(packet_ptr);
 800cd94:	6838      	ldr	r0, [r7, #0]
 800cd96:	f7ff f8ad 	bl	800bef4 <_nx_packet_release>
                return;
 800cd9a:	e20c      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>

            /* It shall not make connections if the source IP address
               is broadcast or multicast.   */
            if (
                /* Check for Multicast address */
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800cd9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
            if (
 800cda4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800cda8:	d01e      	beq.n	800cde8 <_nx_tcp_packet_process+0x314>
                /* Check for subnet-directed broadcast */
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 800cdaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	401a      	ands	r2, r3
 800cdb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb6:	69db      	ldr	r3, [r3, #28]
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d10a      	bne.n	800cdd2 <_nx_tcp_packet_process+0x2fe>
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 800cdbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	43db      	mvns	r3, r3
 800cdc6:	401a      	ands	r2, r3
 800cdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	43db      	mvns	r3, r3
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d00a      	beq.n	800cde8 <_nx_tcp_packet_process+0x314>
                /* Check for local subnet address */
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 800cdd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdd8:	69db      	ldr	r3, [r3, #28]
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d004      	beq.n	800cde8 <_nx_tcp_packet_process+0x314>
                /* Check for limited broadcast */
                (*source_ip == NX_IP_LIMITED_BROADCAST)
 800cdde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cde0:	681b      	ldr	r3, [r3, #0]
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 800cde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde6:	d10a      	bne.n	800cdfe <_nx_tcp_packet_process+0x32a>
               )
            {

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800cdf6:	6838      	ldr	r0, [r7, #0]
 800cdf8:	f7ff f87c 	bl	800bef4 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 800cdfc:	e1db      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
            }
        }
#endif /* FEATURE_NX_IPV6*/

        /* Search all ports in listen mode for a match. */
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800ce04:	65bb      	str	r3, [r7, #88]	; 0x58
        do
        {

            /* Determine if this port is in a listen mode.  */
            if (listen_ptr -> nx_tcp_listen_port == port)
 800ce06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6a3a      	ldr	r2, [r7, #32]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	f040 81a4 	bne.w	800d15a <_nx_tcp_packet_process+0x686>

                /* Determine if the packet is an initial connection request.
                   The incoming SYN packet is a connection request.
                   The incoming RST packet is related to a previous connection request.
                   Fourth other text or control. RFC793, Section3.9, Page66. */
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d110      	bne.n	800ce40 <_nx_tcp_packet_process+0x36c>
                    (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)))
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d10a      	bne.n	800ce40 <_nx_tcp_packet_process+0x36c>
                {

#ifndef NX_DISABLE_TCP_INFO
                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ce30:	1c5a      	adds	r2, r3, #1
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* NX_DISABLE_TCP_INFO */

                    /* Release the packet.  */
                    _nx_packet_release(packet_ptr);
 800ce38:	6838      	ldr	r0, [r7, #0]
 800ce3a:	f7ff f85b 	bl	800bef4 <_nx_packet_release>

                    return;
 800ce3e:	e1ba      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
                }

#ifndef NX_DISABLE_TCP_INFO

                /* Check for a SYN bit set.  */
                if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT))
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00d      	beq.n	800ce68 <_nx_tcp_packet_process+0x394>
                {

                    /* Increment the passive TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_passive_connections++;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ce52:	1c5a      	adds	r2, r3, #1
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

                    /* Increment the TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_connections++;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif

                /* Okay, this port is in a listen mode.  We now need to see if
                   there is an available socket for the new connection request
                   present.  */
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 800ce68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 80b2 	beq.w	800cfd6 <_nx_tcp_packet_process+0x502>
                    ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT) == NX_NULL))
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f040 80ab 	bne.w	800cfd6 <_nx_tcp_packet_process+0x502>
                    /* Yes there is indeed a socket present.  We now need to
                       fill in the appropriate info and call the server callback
                       routine.  */

                    /* Allocate the supplied server socket.  */
                    socket_ptr = listen_ptr -> nx_tcp_listen_socket_ptr;
 800ce80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Clear the server socket pointer in the listen request.  If the
                       application wishes to honor more server connections on this port,
                       the application must call relisten with a new server socket
                       pointer.  */
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 800ce86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce88:	2200      	movs	r2, #0
 800ce8a:	609a      	str	r2, [r3, #8]

                    /* Fill the socket in with the appropriate information.  */


#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce92:	2b04      	cmp	r3, #4
 800ce94:	d116      	bne.n	800cec4 <_nx_tcp_packet_process+0x3f0>
                    {

                        /* Assume the interface that receives the incoming packet is the best interface
                           for sending responses. */
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 800ce96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce9a:	629a      	str	r2, [r3, #40]	; 0x28
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 800ce9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce9e:	2200      	movs	r2, #0
 800cea0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Set the next hop address.  */
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 800cea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cea4:	6819      	ldr	r1, [r3, #0]
 800cea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cea8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ceac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceae:	332c      	adds	r3, #44	; 0x2c
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7fd fcfd 	bl	800a8b0 <_nx_ip_route_find>
                                          &socket_ptr -> nx_tcp_socket_next_hop_address);

                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 800ceb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceb8:	2204      	movs	r2, #4
 800ceba:	615a      	str	r2, [r3, #20]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 800cebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cec2:	619a      	str	r2, [r3, #24]
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
                    }
#endif /* FEATURE_NX_IPV6 */

                    socket_ptr -> nx_tcp_socket_connect_port = source_port;
 800cec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cec6:	69fa      	ldr	r2, [r7, #28]
 800cec8:	61da      	str	r2, [r3, #28]
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 800ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ced0:	641a      	str	r2, [r3, #64]	; 0x40


                    /* Yes, MSS was found, so store it!  */
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ced6:	625a      	str	r2, [r3, #36]	; 0x24
                     */
                    socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

                    /* Set the initial slow start threshold to be the advertised window size. */
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800ced8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cedc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cede:	635a      	str	r2, [r3, #52]	; 0x34

                    /* Slow start:  setup initial window (IW) to be MSS,  RFC 2581, 3.1 */
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = mss;
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cee4:	659a      	str	r2, [r3, #88]	; 0x58

                    /* Initialize the transmit outstanding byte count to zero. */
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800cee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cee8:	2200      	movs	r2, #0
 800ceea:	65da      	str	r2, [r3, #92]	; 0x5c

                    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
                    index = (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	0a1a      	lsrs	r2, r3, #8
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	4413      	add	r3, r2
 800cef4:	f003 031f 	and.w	r3, r3, #31
 800cef8:	61bb      	str	r3, [r7, #24]

                    /* Determine if the list is NULL.  */
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	69ba      	ldr	r2, [r7, #24]
 800cefe:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d028      	beq.n	800cf5c <_nx_tcp_packet_process+0x488>
                    {

                        /* There are already sockets on this list... just add this one
                           to the end.  */
                        socket_ptr -> nx_tcp_socket_bound_next =
                            ip_ptr -> nx_ip_tcp_port_table[index];
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cf12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                        socket_ptr -> nx_tcp_socket_bound_next =
 800cf16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf18:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =
                            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	69ba      	ldr	r2, [r7, #24]
 800cf20:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cf24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf28:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
                        socket_ptr -> nx_tcp_socket_bound_previous =
 800cf2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf2e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	69ba      	ldr	r2, [r7, #24]
 800cf36:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cf42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                            socket_ptr;
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous = socket_ptr;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	69ba      	ldr	r2, [r7, #24]
 800cf4c:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cf50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf56:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800cf5a:	e00e      	b.n	800cf7a <_nx_tcp_packet_process+0x4a6>
                    else
                    {

                        /* Nothing is on the TCP port list.  Add this TCP socket to an
                           empty list.  */
                        socket_ptr -> nx_tcp_socket_bound_next =      socket_ptr;
 800cf5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 800cf64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	69ba      	ldr	r2, [r7, #24]
 800cf70:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cf74:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    }

                    /* Pickup the listen callback function.  */
                    listen_callback = listen_ptr -> nx_tcp_listen_callback;
 800cf7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	617b      	str	r3, [r7, #20]

                    /* Release the incoming packet.  */
                    _nx_packet_release(packet_ptr);
 800cf80:	6838      	ldr	r0, [r7, #0]
 800cf82:	f7fe ffb7 	bl	800bef4 <_nx_packet_release>

                    /* Determine if an accept call with suspension has already been made
                       for this socket.  If so, the SYN message needs to be sent from
                       here.  */
                    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800cf86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	2b04      	cmp	r3, #4
 800cf8c:	d11a      	bne.n	800cfc4 <_nx_tcp_packet_process+0x4f0>
                        /* The application is suspended on an accept call for this socket.
                           Simply send the SYN now and keep the thread suspended until the
                           other side completes the connection.  */

                        /* Send the SYN message, but increment the ACK first.  */
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800cf8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf96:	641a      	str	r2, [r3, #64]	; 0x40

                        /* Increment the sequence number for the SYN message.  */
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 800cf98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa0:	63da      	str	r2, [r3, #60]	; 0x3c

                        /* Setup a timeout so the connection attempt can be sent again.  */
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800cfa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800cfa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfaa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800cfae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                        /* Send the SYN+ACK message.  */
                        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800cfb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cfc0:	f000 fb0e 	bl	800d5e0 <_nx_tcp_packet_send_syn>
                    }

                    /* Determine if there is a listen callback function.  */
                    if (listen_callback)
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f000 80c6 	beq.w	800d158 <_nx_tcp_packet_process+0x684>
                    {
                        /* Call the user's listen callback function.  */
                        (listen_callback)(socket_ptr, port);
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	6a39      	ldr	r1, [r7, #32]
 800cfd0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cfd2:	4798      	blx	r3
                    if (listen_callback)
 800cfd4:	e0c0      	b.n	800d158 <_nx_tcp_packet_process+0x684>
                        /* If trace is enabled, insert this event into the trace buffer.  */
                        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_SYN_RECEIVE, ip_ptr, NX_NULL, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
                    }

                    /* Check for the same connection request already in the queue.  */
                    queued_count = listen_ptr -> nx_tcp_listen_queue_current;
 800cfd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	64fb      	str	r3, [r7, #76]	; 0x4c
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800cfdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfde:	695b      	ldr	r3, [r3, #20]
 800cfe0:	64bb      	str	r3, [r7, #72]	; 0x48
                    queued_prev_ptr = queued_ptr;
 800cfe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfe4:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Initialize the check for queued request to false.*/
                    is_a_RST_request = NX_FALSE;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Loop through the queued list in order to search for duplicate request.  */
                    while (queued_count--)
 800cfea:	e05c      	b.n	800d0a6 <_nx_tcp_packet_process+0x5d2>
                    {

                        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 800cfec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	0c1b      	lsrs	r3, r3, #16
 800cff4:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_IPV4
                        /* Pickup the queued source port and source IP address for comparison.  */
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cff8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cffc:	2b04      	cmp	r3, #4
 800cffe:	d121      	bne.n	800d044 <_nx_tcp_packet_process+0x570>
                        {

                            /*lint -e{929} -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                            queued_source_ip = (ULONG *)(((ULONG *)queued_ptr -> nx_packet_prepend_ptr) - 2);
 800d000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	3b08      	subs	r3, #8
 800d006:	60fb      	str	r3, [r7, #12]

                            /* Determine if this matches the current connection request.  */
                            if ((*queued_source_ip == *source_ip) && (queued_source_port == source_port))
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	429a      	cmp	r2, r3
 800d012:	d117      	bne.n	800d044 <_nx_tcp_packet_process+0x570>
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d113      	bne.n	800d044 <_nx_tcp_packet_process+0x570>
                            {

                                /* Possible duplicate connection request to one that is already queued.  */

                                /* Check for a RST (reset) bit set.  */
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d024:	2b00      	cmp	r3, #0
 800d026:	d002      	beq.n	800d02e <_nx_tcp_packet_process+0x55a>
                                {

                                    /* RST packet matches a previously queued connection request. */
                                    is_a_RST_request = NX_TRUE;
 800d028:	2301      	movs	r3, #1
 800d02a:	643b      	str	r3, [r7, #64]	; 0x40
 800d02c:	e00a      	b.n	800d044 <_nx_tcp_packet_process+0x570>
                                }
                                else
                                {
#ifndef NX_DISABLE_TCP_INFO
                                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
                                    /* Simply release the packet and return.  */
                                    _nx_packet_release(packet_ptr);
 800d03c:	6838      	ldr	r0, [r7, #0]
 800d03e:	f7fe ff59 	bl	800bef4 <_nx_packet_release>

                                    /* Return!  */
                                    return;
 800d042:	e0b8      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
                        }
#endif /* FEATURE_NX_IPV6  */

                        /* Handle the case of the RST packet which cancels a previously received
                           connection request. */
                        if (is_a_RST_request)
 800d044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d046:	2b00      	cmp	r3, #0
 800d048:	d028      	beq.n	800d09c <_nx_tcp_packet_process+0x5c8>
                        {

                            /* A previous connection request needs to be removed from the listen queue. */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 800d04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d050:	429a      	cmp	r2, r3
 800d052:	d104      	bne.n	800d05e <_nx_tcp_packet_process+0x58a>
                            {

                                /* Reset the front (oldest) of the queue to the next request. */
                                listen_ptr -> nx_tcp_listen_queue_head = queued_ptr -> nx_packet_queue_next;
 800d054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d056:	69da      	ldr	r2, [r3, #28]
 800d058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d05a:	615a      	str	r2, [r3, #20]
 800d05c:	e003      	b.n	800d066 <_nx_tcp_packet_process+0x592>
                            else
                            {

                                /* Link around the request we are removing. */
                                /*lint -e{613} suppress possible use of null pointer, since 'queued_prev_ptr' must not be NULL.  */
                                queued_prev_ptr -> nx_packet_queue_next = queued_ptr -> nx_packet_queue_next;
 800d05e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d060:	69da      	ldr	r2, [r3, #28]
 800d062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d064:	61da      	str	r2, [r3, #28]
                            }

                            /* Is the request being removed the tail (most recent connection?)   */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 800d066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d102      	bne.n	800d076 <_nx_tcp_packet_process+0x5a2>
                            {

                                /* Yes, set the previous connection request as the tail. */
                                listen_ptr -> nx_tcp_listen_queue_tail = queued_prev_ptr;
 800d070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d074:	619a      	str	r2, [r3, #24]
                            }

                            /* Release the connection request packet.  */
                            _nx_packet_release(queued_ptr);
 800d076:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d078:	f7fe ff3c 	bl	800bef4 <_nx_packet_release>

                            /* Update the listen queue. */
                            listen_ptr -> nx_tcp_listen_queue_current--;
 800d07c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	1e5a      	subs	r2, r3, #1
 800d082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d084:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_TCP_INFO
                            /* Increment the TCP dropped packet count.  */
                            ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d08c:	1c5a      	adds	r2, r3, #1
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                            /* Simply release the packet and return.  */
                            _nx_packet_release(packet_ptr);
 800d094:	6838      	ldr	r0, [r7, #0]
 800d096:	f7fe ff2d 	bl	800bef4 <_nx_packet_release>

                            /* Return!  */
                            return;
 800d09a:	e08c      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
                        }

                        /* Move to next item in the queue.  */
                        queued_prev_ptr = queued_ptr;
 800d09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d09e:	647b      	str	r3, [r7, #68]	; 0x44
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 800d0a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a2:	69db      	ldr	r3, [r3, #28]
 800d0a4:	64bb      	str	r3, [r7, #72]	; 0x48
                    while (queued_count--)
 800d0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0a8:	1e5a      	subs	r2, r3, #1
 800d0aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d19d      	bne.n	800cfec <_nx_tcp_packet_process+0x518>
                    }

                    /* Not a duplicate connection request, place this request on the listen queue.  */

                    /* Is this a RST packet? */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00a      	beq.n	800d0d2 <_nx_tcp_packet_process+0x5fe>
                    {

                        /* Yes, so not a connection request. Do not place on the listen queue. */
#ifndef NX_DISABLE_TCP_INFO
                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d0c2:	1c5a      	adds	r2, r3, #1
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 800d0ca:	6838      	ldr	r0, [r7, #0]
 800d0cc:	f7fe ff12 	bl	800bef4 <_nx_packet_release>

                        /* Return!  */
                        return;
 800d0d0:	e071      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
                    }

                    /* Set the next pointer of the packet to NULL.  */
                    packet_ptr -> nx_packet_queue_next = NX_NULL;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	61da      	str	r2, [r3, #28]

                    /* Queue the new connection request.  */
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 800d0d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0da:	695b      	ldr	r3, [r3, #20]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d004      	beq.n	800d0ea <_nx_tcp_packet_process+0x616>
                    {

                        /* There is a connection request already queued, just link packet to tail.  */
                        (listen_ptr -> nx_tcp_listen_queue_tail) -> nx_packet_queue_next = packet_ptr;
 800d0e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	61da      	str	r2, [r3, #28]
 800d0e8:	e002      	b.n	800d0f0 <_nx_tcp_packet_process+0x61c>
                    }
                    else
                    {

                        /* The queue is empty.  Setup head pointer to the new packet.  */
                        listen_ptr -> nx_tcp_listen_queue_head = packet_ptr;
 800d0ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	615a      	str	r2, [r3, #20]
                    }

                    /* Setup the tail pointer to the new packet and increment the queue count.  */
                    listen_ptr -> nx_tcp_listen_queue_tail =  packet_ptr;
 800d0f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	619a      	str	r2, [r3, #24]
                    listen_ptr -> nx_tcp_listen_queue_current++;
 800d0f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0fe:	611a      	str	r2, [r3, #16]

                    /* Add debug information. */
                    NX_PACKET_DEBUG(NX_PACKET_TCP_LISTEN_QUEUE, __LINE__, packet_ptr);

                    /* Determine if the queue depth has been exceeded.  */
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 800d100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d102:	691a      	ldr	r2, [r3, #16]
 800d104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d953      	bls.n	800d1b4 <_nx_tcp_packet_process+0x6e0>
                    {

#ifndef NX_DISABLE_TCP_INFO

                        /* Increment the TCP connections dropped count.  */
                        ip_ptr -> nx_ip_tcp_connections_dropped++;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                        ip_ptr -> nx_ip_tcp_connections--;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d120:	1e5a      	subs	r2, r3, #1
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                        /* Save the head packet pointer, since this will be released below.  */
                        packet_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800d136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	603b      	str	r3, [r7, #0]

                        /* Remove the oldest packet from the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_head = (listen_ptr -> nx_tcp_listen_queue_head) -> nx_packet_queue_next;
 800d13c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d13e:	695b      	ldr	r3, [r3, #20]
 800d140:	69da      	ldr	r2, [r3, #28]
 800d142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d144:	615a      	str	r2, [r3, #20]

                        /* Decrement the number of packets in the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_current--;
 800d146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	1e5a      	subs	r2, r3, #1
 800d14c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d14e:	611a      	str	r2, [r3, #16]

                        /* We have exceeded the number of connections that can be
                           queued for this port.  */

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 800d150:	6838      	ldr	r0, [r7, #0]
 800d152:	f7fe fecf 	bl	800bef4 <_nx_packet_release>
                    }
                }

                /* Finished processing, just return.  */
                return;
 800d156:	e02d      	b.n	800d1b4 <_nx_tcp_packet_process+0x6e0>
 800d158:	e02c      	b.n	800d1b4 <_nx_tcp_packet_process+0x6e0>
            }

            /* Move to the next listen request.  */
            listen_ptr = listen_ptr -> nx_tcp_listen_next;
 800d15a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d15c:	69db      	ldr	r3, [r3, #28]
 800d15e:	65bb      	str	r3, [r7, #88]	; 0x58
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800d166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d168:	429a      	cmp	r2, r3
 800d16a:	f47f ae4c 	bne.w	800ce06 <_nx_tcp_packet_process+0x332>
    }

#ifndef NX_DISABLE_TCP_INFO

    /* Determine if a connection request is present.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800d16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d006      	beq.n	800d188 <_nx_tcp_packet_process+0x6b4>
    {

        /* Yes, increment the TCP connections dropped count.  */
        ip_ptr -> nx_ip_tcp_connections_dropped++;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the TCP dropped packet count.  */
    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d18e:	1c5a      	adds	r2, r3, #1
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* NX_DISABLE_TCP_INFO  */

    /* Determine if a RST is present. If so, don't send a RST in response.  */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d104      	bne.n	800d1ac <_nx_tcp_packet_process+0x6d8>
    {

        /* Non RST is present, send reset when no connection is present.  */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 800d1a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a4:	6839      	ldr	r1, [r7, #0]
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fbfe 	bl	800c9a8 <_nx_tcp_no_connection_reset>
    }

    /* Not a connection request, just release the packet.  */
    _nx_packet_release(packet_ptr);
 800d1ac:	6838      	ldr	r0, [r7, #0]
 800d1ae:	f7fe fea1 	bl	800bef4 <_nx_packet_release>

    return;
 800d1b2:	e000      	b.n	800d1b6 <_nx_tcp_packet_process+0x6e2>
                return;
 800d1b4:	bf00      	nop
}
 800d1b6:	3768      	adds	r7, #104	; 0x68
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <_nx_tcp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b088      	sub	sp, #32
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_TCP_HEADER))
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ca:	2b13      	cmp	r3, #19
 800d1cc:	d80a      	bhi.n	800d1e4 <_nx_tcp_packet_receive+0x28>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800d1dc:	6838      	ldr	r0, [r7, #0]
 800d1de:	f7fe fe89 	bl	800bef4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800d1e2:	e052      	b.n	800d28a <_nx_tcp_packet_receive+0xce>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1e4:	f3ef 8305 	mrs	r3, IPSR
 800d1e8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d1ea:	69ba      	ldr	r2, [r7, #24]
    }
#endif

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800d1ec:	4b28      	ldr	r3, [pc, #160]	; (800d290 <_nx_tcp_packet_receive+0xd4>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d106      	bne.n	800d204 <_nx_tcp_packet_receive+0x48>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800d1fc:	4b25      	ldr	r3, [pc, #148]	; (800d294 <_nx_tcp_packet_receive+0xd8>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	429a      	cmp	r2, r3
 800d202:	d03e      	beq.n	800d282 <_nx_tcp_packet_receive+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d204:	f3ef 8310 	mrs	r3, PRIMASK
 800d208:	617b      	str	r3, [r7, #20]
    return(posture);
 800d20a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d20c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d20e:	b672      	cpsid	i
    return(int_posture);
 800d210:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback.  Just place the message at the
           end of the TCP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800d212:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the TCP message queue.  */
        if (ip_ptr -> nx_ip_tcp_queue_head)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d013      	beq.n	800d246 <_nx_tcp_packet_receive+0x8a>
        {

            /* Link the current packet at the end of the queue.  */
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	61da      	str	r2, [r3, #28]
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	2200      	movs	r2, #0
 800d234:	61da      	str	r2, [r3, #28]

            /* Increment the count of incoming TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800d23c:	1c5a      	adds	r2, r3, #1
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800d244:	e00e      	b.n	800d264 <_nx_tcp_packet_receive+0xa8>
        }
        else
        {

            /* Empty queue, add to the head of the TCP message queue.  */
            ip_ptr -> nx_ip_tcp_queue_head =        packet_ptr;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
            ip_ptr -> nx_ip_tcp_queue_tail =        packet_ptr;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
            packet_ptr -> nx_packet_queue_next =    NX_NULL;
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2200      	movs	r2, #0
 800d25a:	61da      	str	r2, [r3, #28]

            /* Set the initial count TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f383 8810 	msr	PRIMASK, r3
}
 800d26e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the TCP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d276:	2200      	movs	r2, #0
 800d278:	2180      	movs	r1, #128	; 0x80
 800d27a:	4618      	mov	r0, r3
 800d27c:	f004 fcba 	bl	8011bf4 <_tx_event_flags_set>
 800d280:	e003      	b.n	800d28a <_nx_tcp_packet_receive+0xce>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the TCP processing directly.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7ff fc25 	bl	800cad4 <_nx_tcp_packet_process>
    }
}
 800d28a:	3720      	adds	r7, #32
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	2400008c 	.word	0x2400008c
 800d294:	240023d0 	.word	0x240023d0

0800d298 <_nx_tcp_packet_send_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_ack(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b086      	sub	sp, #24
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	9202      	str	r2, [sp, #8]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	9201      	str	r2, [sp, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	9200      	str	r2, [sp, #0]
 800d2b2:	683a      	ldr	r2, [r7, #0]
 800d2b4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 f80b 	bl	800d2d4 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800d2be:	4b04      	ldr	r3, [pc, #16]	; (800d2d0 <_nx_tcp_packet_send_ack+0x38>)
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d2c6:	bf00      	nop
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	240022fc 	.word	0x240022fc

0800d2d4 <_nx_tcp_packet_send_control>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_control(NX_TCP_SOCKET *socket_ptr, ULONG control_bits, ULONG tx_sequence,
                                  ULONG ack_number, ULONG option_word_1, ULONG option_word_2, UCHAR *data)
{
 800d2d4:	b5b0      	push	{r4, r5, r7, lr}
 800d2d6:	b092      	sub	sp, #72	; 0x48
 800d2d8:	af04      	add	r7, sp, #16
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
 800d2e0:	603b      	str	r3, [r7, #0]

NX_IP         *ip_ptr;
NX_PACKET     *packet_ptr;
NX_TCP_HEADER *tcp_header_ptr;
ULONG          checksum;
ULONG          data_offset = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	623b      	str	r3, [r7, #32]
ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d2f8:	61fb      	str	r3, [r7, #28]

    if (control_bits & NX_TCP_SYN_BIT)
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d300:	2b00      	cmp	r3, #0
 800d302:	d006      	beq.n	800d312 <_nx_tcp_packet_send_control+0x3e>
    {

        /* Set header size. */
        header_size = NX_TCP_SYN_HEADER;
 800d304:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d308:	62bb      	str	r3, [r7, #40]	; 0x28
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d30e:	627b      	str	r3, [r7, #36]	; 0x24
 800d310:	e005      	b.n	800d31e <_nx_tcp_packet_send_control+0x4a>
    }
    else
    {

        /* Set header size. */
        header_size = NX_TCP_HEADER_SIZE;
 800d312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800d316:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Set window size. */
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current >> socket_ptr -> nx_tcp_rcv_win_scale_value;
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d31c:	627b      	str	r3, [r7, #36]	; 0x24
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {

            /*lint -e{835} -e{845} suppress operating on zero. */
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 800d324:	6a3b      	ldr	r3, [r7, #32]
 800d326:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d32a:	f107 0110 	add.w	r1, r7, #16
 800d32e:	2300      	movs	r3, #0
 800d330:	f7fe f988 	bl	800b644 <_nx_packet_allocate>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	f040 80e3 	bne.w	800d502 <_nx_tcp_packet_send_control+0x22e>
        }
    }
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Check to see if the packet has enough room to fill with the max TCP header (SYN + probe data).  */
    if ((UINT)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr) < (NX_TCP_SYN_SIZE + 1))
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	695a      	ldr	r2, [r3, #20]
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	2b1c      	cmp	r3, #28
 800d348:	d804      	bhi.n	800d354 <_nx_tcp_packet_send_control+0x80>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(packet_ptr);
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fe fdd1 	bl	800bef4 <_nx_packet_release>
        return;
 800d352:	e0d7      	b.n	800d504 <_nx_tcp_packet_send_control+0x230>
    }

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized in _nx_packet_allocate. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	695a      	ldr	r2, [r3, #20]
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	b2d2      	uxtb	r2, r2
 800d35c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Allocate a packet for the control message.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	2b04      	cmp	r3, #4
 800d366:	d103      	bne.n	800d370 <_nx_tcp_packet_send_control+0x9c>
    {

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d36e:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_IPSEC_ENABLE
    packet_ptr -> nx_packet_ipsec_sa_ptr = socket_ptr -> nx_tcp_socket_egress_sa;
#endif

    /* Setup the packet payload pointers and length for a basic TCP packet.  */
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	689a      	ldr	r2, [r3, #8]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	3214      	adds	r2, #20
 800d378:	60da      	str	r2, [r3, #12]

    /* Setup the packet length.  */
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	2214      	movs	r2, #20
 800d37e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	61bb      	str	r3, [r7, #24]

    /* Build the control request in the TCP header.  */
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	041a      	lsls	r2, r3, #16
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	69db      	ldr	r3, [r3, #28]
 800d390:	431a      	orrs	r2, r3
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	601a      	str	r2, [r3, #0]
    tcp_header_ptr -> nx_tcp_sequence_number =      tx_sequence;
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	605a      	str	r2, [r3, #4]
    tcp_header_ptr -> nx_tcp_acknowledgment_number = ack_number;
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	609a      	str	r2, [r3, #8]
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 800d3a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	431a      	orrs	r2, r3
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	431a      	orrs	r2, r3
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	60da      	str	r2, [r3, #12]
    tcp_header_ptr -> nx_tcp_header_word_4 =        0;
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	611a      	str	r2, [r3, #16]

    /* Remember the last ACKed sequence and the last reported window size.  */
    socket_ptr -> nx_tcp_socket_rx_sequence_acked =    ack_number;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	ba1a      	rev	r2, r3
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	ba1a      	rev	r2, r3
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	ba1a      	rev	r2, r3
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	ba1a      	rev	r2, r3
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	ba1a      	rev	r2, r3
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	611a      	str	r2, [r3, #16]

    /* Check whether or not data is set. */
    if (data)
 800d3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00a      	beq.n	800d412 <_nx_tcp_packet_send_control+0x13e>
    {

        /* Zero window probe data exist. */
        *packet_ptr -> nx_packet_append_ptr++ = *data;
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	68d3      	ldr	r3, [r2, #12]
 800d400:	1c59      	adds	r1, r3, #1
 800d402:	60d1      	str	r1, [r2, #12]
 800d404:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d406:	7812      	ldrb	r2, [r2, #0]
 800d408:	701a      	strb	r2, [r3, #0]
        packet_ptr -> nx_packet_length++;
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d40e:	3201      	adds	r2, #1
 800d410:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Whether it is a SYN packet. */
    if (control_bits & NX_TCP_SYN_BIT)
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d018      	beq.n	800d44e <_nx_tcp_packet_send_control+0x17a>
    {

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the TCP header.  */
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 800d41c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d41e:	ba1b      	rev	r3, r3
 800d420:	64bb      	str	r3, [r7, #72]	; 0x48
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 800d422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d424:	ba1b      	rev	r3, r3
 800d426:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Set options. */
        /*lint --e{927} --e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d42e:	601a      	str	r2, [r3, #0]
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	3304      	adds	r3, #4
 800d436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d438:	601a      	str	r2, [r3, #0]

        /* Adjust packet information. */
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	68da      	ldr	r2, [r3, #12]
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	3208      	adds	r2, #8
 800d442:	60da      	str	r2, [r3, #12]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	3208      	adds	r2, #8
 800d44c:	625a      	str	r2, [r3, #36]	; 0x24
    }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d454:	f003 0304 	and.w	r3, r3, #4
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <_nx_tcp_packet_send_control+0x18c>
    {
        compute_checksum = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	62fb      	str	r3, [r7, #44]	; 0x2c
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	2b00      	cmp	r3, #0
 800d464:	d028      	beq.n	800d4b8 <_nx_tcp_packet_send_control+0x1e4>
    {


        /* Set the packet source IP address. */
#ifndef NX_DISABLE_IPV4
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	2b04      	cmp	r3, #4
 800d46c:	d106      	bne.n	800d47c <_nx_tcp_packet_send_control+0x1a8>
        {

            /* For IPv4 the IP instance has only one global address. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d472:	3314      	adds	r3, #20
 800d474:	637b      	str	r3, [r7, #52]	; 0x34

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3318      	adds	r3, #24
 800d47a:	633b      	str	r3, [r7, #48]	; 0x30
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
        }
#endif /* FEATURE_NX_IPV6 */

        /* Calculate the TCP checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800d47c:	6938      	ldr	r0, [r7, #16]
                                            (UINT)packet_ptr -> nx_packet_length, source_ip, dest_ip);
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800d482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d488:	2106      	movs	r1, #6
 800d48a:	f7fb ff79 	bl	8009380 <_nx_ip_checksum_compute>
 800d48e:	4603      	mov	r3, r0
 800d490:	617b      	str	r3, [r7, #20]

        checksum = ~checksum & NX_LOWER_16_MASK;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	43db      	mvns	r3, r3
 800d496:	b29b      	uxth	r3, r3
 800d498:	617b      	str	r3, [r7, #20]

        /* Move the checksum into header.  */
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	ba1a      	rev	r2, r3
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	611a      	str	r2, [r3, #16]
        tcp_header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	041a      	lsls	r2, r3, #16
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	611a      	str	r2, [r3, #16]
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	691b      	ldr	r3, [r3, #16]
 800d4b0:	ba1a      	rev	r2, r3
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	611a      	str	r2, [r3, #16]
 800d4b6:	e005      	b.n	800d4c4 <_nx_tcp_packet_send_control+0x1f0>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	f042 0204 	orr.w	r2, r2, #4
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

#ifndef NX_DISABLE_IPV4
    /* Send the TCP packet to the IP component.  */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	d11b      	bne.n	800d504 <_nx_tcp_packet_send_control+0x230>
    {

        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800d4cc:	6938      	ldr	r0, [r7, #16]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	699c      	ldr	r4, [r3, #24]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                           socket_ptr -> nx_tcp_socket_type_of_service, socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800d4de:	68fa      	ldr	r2, [r7, #12]
 800d4e0:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800d4e4:	68f9      	ldr	r1, [r7, #12]
 800d4e6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800d4e8:	9103      	str	r1, [sp, #12]
 800d4ea:	9202      	str	r2, [sp, #8]
 800d4ec:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800d4f0:	9201      	str	r2, [sp, #4]
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	462b      	mov	r3, r5
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	4601      	mov	r1, r0
 800d4fa:	69f8      	ldr	r0, [r7, #28]
 800d4fc:	f7fd f966 	bl	800a7cc <_nx_ip_packet_send>
 800d500:	e000      	b.n	800d504 <_nx_tcp_packet_send_control+0x230>
                return;
 800d502:	bf00      	nop
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
                             socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
    }
#endif /* FEATURE_NX_IPV6 */
}
 800d504:	3738      	adds	r7, #56	; 0x38
 800d506:	46bd      	mov	sp, r7
 800d508:	bdb0      	pop	{r4, r5, r7, pc}

0800d50a <_nx_tcp_packet_send_fin>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_fin(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b086      	sub	sp, #24
 800d50e:	af04      	add	r7, sp, #16
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d518:	2200      	movs	r2, #0
 800d51a:	9202      	str	r2, [sp, #8]
 800d51c:	2200      	movs	r2, #0
 800d51e:	9201      	str	r2, [sp, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	9200      	str	r2, [sp, #0]
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7ff fed2 	bl	800d2d4 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <_nx_tcp_packet_send_probe>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_probe(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence, UCHAR data)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af04      	add	r7, sp, #16
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	4613      	mov	r3, r2
 800d544:	71fb      	strb	r3, [r7, #7]

    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d54a:	1dfb      	adds	r3, r7, #7
 800d54c:	9302      	str	r3, [sp, #8]
 800d54e:	2300      	movs	r3, #0
 800d550:	9301      	str	r3, [sp, #4]
 800d552:	2300      	movs	r3, #0
 800d554:	9300      	str	r3, [sp, #0]
 800d556:	4613      	mov	r3, r2
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f7ff feb8 	bl	800d2d4 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, &data);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800d564:	4b03      	ldr	r3, [pc, #12]	; (800d574 <_nx_tcp_packet_send_probe+0x3c>)
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d56c:	bf00      	nop
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	240022fc 	.word	0x240022fc

0800d578 <_nx_tcp_packet_send_rst>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_rst(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *header_ptr)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af04      	add	r7, sp, #16
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
    /* Reset Generation, RFC793, Section3.4, Page37, the RST packet is set up based on if the incoming packet has the ACK bit set. */
    /* If the incoming segment has an ACK field, the reset takes its sequence number from the ACK field of the segment,
       otherwise the reset has sequence number zero and the ACK field is set to the sum of the sequence number and segment length of the incoming segment.  */

    /* Check for the ACK bit in the incoming TCP header.  */
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00e      	beq.n	800d5ac <_nx_tcp_packet_send_rst+0x34>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	689a      	ldr	r2, [r3, #8]
 800d592:	2300      	movs	r3, #0
 800d594:	9302      	str	r3, [sp, #8]
 800d596:	2300      	movs	r3, #0
 800d598:	9301      	str	r3, [sp, #4]
 800d59a:	2300      	movs	r3, #0
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7ff fe95 	bl	800d2d4 <_nx_tcp_packet_send_control>
 800d5aa:	e00d      	b.n	800d5c8 <_nx_tcp_packet_send_rst+0x50>
                                    0, 0, 0, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_RST_BIT | NX_TCP_ACK_BIT), 0,
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	9202      	str	r2, [sp, #8]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	9201      	str	r2, [sp, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	9200      	str	r2, [sp, #0]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7ff fe86 	bl	800d2d4 <_nx_tcp_packet_send_control>
                                    header_ptr -> nx_tcp_sequence_number, 0, 0, NX_NULL);
    }

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the resets sent count.  */
    socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_resets_sent++;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d5ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d5d2:	3201      	adds	r2, #1
 800d5d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
#endif /* NX_DISABLE_TCP_INFO */
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <_nx_tcp_packet_send_syn>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_syn(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08a      	sub	sp, #40	; 0x28
 800d5e4:	af04      	add	r7, sp, #16
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
ULONG        option_word_2;
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
UINT         include_window_scaling = NX_FALSE;
UINT         scale_factor;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
ULONG        mss = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	617b      	str	r3, [r7, #20]
    }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
    /* Update the mss value based on IP version type. */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	2b04      	cmp	r3, #4
 800d5f4:	d104      	bne.n	800d600 <_nx_tcp_packet_send_syn+0x20>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fc:	3b28      	subs	r3, #40	; 0x28
 800d5fe:	617b      	str	r3, [r7, #20]
        }
#endif /* NX_IPSEC_ENABLE */
    }
#endif /* FEATURE_NX_IPV6 */

    mss &= 0x0000FFFFUL;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	b29b      	uxth	r3, r3
 800d604:	617b      	str	r3, [r7, #20]

    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d906      	bls.n	800d61e <_nx_tcp_packet_send_syn+0x3e>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <_nx_tcp_packet_send_syn+0x3e>
    {

        /* Use the custom MSS. */
        mss = socket_ptr -> nx_tcp_socket_mss;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	617b      	str	r3, [r7, #20]
    }

    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d622:	2b04      	cmp	r3, #4
 800d624:	d115      	bne.n	800d652 <_nx_tcp_packet_send_syn+0x72>
    {

        /* Update the connect MSS for TCP server socket. */
        if (mss < socket_ptr -> nx_tcp_socket_peer_mss)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d203      	bcs.n	800d638 <_nx_tcp_packet_send_syn+0x58>
        {
            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	697a      	ldr	r2, [r7, #20]
 800d634:	621a      	str	r2, [r3, #32]
 800d636:	e003      	b.n	800d640 <_nx_tcp_packet_send_syn+0x60>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_connect_mss =  socket_ptr -> nx_tcp_socket_peer_mss;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	621a      	str	r2, [r3, #32]
        }

        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
        socket_ptr -> nx_tcp_socket_connect_mss2 =
            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a1b      	ldr	r3, [r3, #32]
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	6a12      	ldr	r2, [r2, #32]
 800d648:	fb02 f203 	mul.w	r2, r2, r3
        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	631a      	str	r2, [r3, #48]	; 0x30
 800d650:	e002      	b.n	800d658 <_nx_tcp_packet_send_syn+0x78>
    }
    else
    {

        /* Set the MSS. */
        socket_ptr -> nx_tcp_socket_connect_mss = mss;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	621a      	str	r2, [r3, #32]
    }

    /* Build the MSS option.  */
    option_word_1 = NX_TCP_MSS_OPTION | mss;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d65e:	613b      	str	r3, [r7, #16]

    /* Set default option word2. */
    option_word_2 = NX_TCP_OPTION_END;
 800d660:	4b16      	ldr	r3, [pc, #88]	; (800d6bc <_nx_tcp_packet_send_syn+0xdc>)
 800d662:	60fb      	str	r3, [r7, #12]
        socket_ptr -> nx_tcp_rcv_win_scale_value = scale_factor;
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Send SYN or SYN+ACK packet according to socket state. */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d668:	2b03      	cmp	r3, #3
 800d66a:	d10d      	bne.n	800d688 <_nx_tcp_packet_send_syn+0xa8>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
 800d66c:	2300      	movs	r3, #0
 800d66e:	9302      	str	r3, [sp, #8]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	2300      	movs	r3, #0
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff fe27 	bl	800d2d4 <_nx_tcp_packet_send_control>
 800d686:	e00e      	b.n	800d6a6 <_nx_tcp_packet_send_syn+0xc6>
                                    0, option_word_1, option_word_2, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_SYN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d68c:	2300      	movs	r3, #0
 800d68e:	9302      	str	r3, [sp, #8]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	9301      	str	r3, [sp, #4]
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	4613      	mov	r3, r2
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff fe17 	bl	800d2d4 <_nx_tcp_packet_send_control>
                                    socket_ptr -> nx_tcp_socket_rx_sequence, option_word_1, option_word_2, NX_NULL);
    }

    /* Initialize recover sequence and previous cumulative acknowledgment. */
    socket_ptr -> nx_tcp_socket_tx_sequence_recover = tx_sequence;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	683a      	ldr	r2, [r7, #0]
 800d6b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d6b2:	bf00      	nop
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	01010100 	.word	0x01010100

0800d6c0 <_nx_tcp_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_periodic_processing(NX_IP *ip_ptr)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
        keepalive_enabled = socket_ptr -> nx_tcp_socket_keepalive_enabled;
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif
}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <_nx_tcp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_queue_process(NX_IP *ip_ptr)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d6dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d6e0:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d6e4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d6e6:	b672      	cpsid	i
    return(int_posture);
 800d6e8:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800d6ea:	61bb      	str	r3, [r7, #24]

    /* Remove the TCP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d6f2:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
    ip_ptr -> nx_ip_tcp_queue_tail =  NX_NULL;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    ip_ptr -> nx_ip_tcp_received_packet_count =  0;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	f383 8810 	msr	PRIMASK, r3
}
 800d716:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire TCP message queue and process packets
       one by one.  */
    while (queue_head)
 800d718:	e00b      	b.n	800d732 <_nx_tcp_queue_process+0x5e>
    {

        /* Pickup the first queue TCP message and remove it from the
           TCP queue.  */
        packet_ptr =  queue_head;
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	69db      	ldr	r3, [r3, #28]
 800d722:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	2200      	movs	r2, #0
 800d728:	61da      	str	r2, [r3, #28]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Process the packet.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800d72a:	6979      	ldr	r1, [r7, #20]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff f9d1 	bl	800cad4 <_nx_tcp_packet_process>
    while (queue_head)
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1f0      	bne.n	800d71a <_nx_tcp_queue_process+0x46>
    }
}
 800d738:	bf00      	nop
 800d73a:	bf00      	nop
 800d73c:	3720      	adds	r7, #32
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <_nx_tcp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08e      	sub	sp, #56	; 0x38
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d74e:	f3ef 8310 	mrs	r3, PRIMASK
 800d752:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d754:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d756:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d758:	b672      	cpsid	i
    return(int_posture);
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800d75c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d762:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d766:	2b00      	cmp	r3, #0
 800d768:	d004      	beq.n	800d774 <_nx_tcp_receive_cleanup+0x30>
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a43      	ldr	r2, [pc, #268]	; (800d87c <_nx_tcp_receive_cleanup+0x138>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d006      	beq.n	800d782 <_nx_tcp_receive_cleanup+0x3e>
 800d774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d776:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	f383 8810 	msr	PRIMASK, r3
}
 800d77e:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800d780:	e078      	b.n	800d874 <_nx_tcp_receive_cleanup+0x130>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d786:	2b00      	cmp	r3, #0
 800d788:	d106      	bne.n	800d798 <_nx_tcp_receive_cleanup+0x54>
 800d78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d78c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	f383 8810 	msr	PRIMASK, r3
}
 800d794:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800d796:	e06d      	b.n	800d874 <_nx_tcp_receive_cleanup+0x130>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d798:	f3ef 8305 	mrs	r3, IPSR
 800d79c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d79e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800d7a0:	4b37      	ldr	r3, [pc, #220]	; (800d880 <_nx_tcp_receive_cleanup+0x13c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d104      	bne.n	800d7b4 <_nx_tcp_receive_cleanup+0x70>
 800d7aa:	4b36      	ldr	r3, [pc, #216]	; (800d884 <_nx_tcp_receive_cleanup+0x140>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a36      	ldr	r2, [pc, #216]	; (800d888 <_nx_tcp_receive_cleanup+0x144>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d116      	bne.n	800d7e2 <_nx_tcp_receive_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a35      	ldr	r2, [pc, #212]	; (800d88c <_nx_tcp_receive_cleanup+0x148>)
 800d7b8:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f383 8810 	msr	PRIMASK, r3
}
 800d7cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f004 fa0a 	bl	8011bf4 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800d7e0:	e048      	b.n	800d874 <_nx_tcp_receive_cleanup+0x130>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d104      	bne.n	800d7fc <_nx_tcp_receive_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  NX_NULL;
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800d7fa:	e00e      	b.n	800d81a <_nx_tcp_receive_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d80e:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d818:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d820:	1e5a      	subs	r2, r3, #1
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d82c:	2b0c      	cmp	r3, #12
 800d82e:	d11b      	bne.n	800d868 <_nx_tcp_receive_cleanup+0x124>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which receive error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d834:	2b05      	cmp	r3, #5
 800d836:	d004      	beq.n	800d842 <_nx_tcp_receive_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2238      	movs	r2, #56	; 0x38
 800d83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d840:	e003      	b.n	800d84a <_nx_tcp_receive_cleanup+0x106>
            }
            else
            {

                /* Setup return status.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d84a:	4b11      	ldr	r3, [pc, #68]	; (800d890 <_nx_tcp_receive_cleanup+0x14c>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3301      	adds	r3, #1
 800d850:	4a0f      	ldr	r2, [pc, #60]	; (800d890 <_nx_tcp_receive_cleanup+0x14c>)
 800d852:	6013      	str	r3, [r2, #0]
 800d854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d856:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	f383 8810 	msr	PRIMASK, r3
}
 800d85e:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f006 f84b 	bl	80138fc <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800d866:	e005      	b.n	800d874 <_nx_tcp_receive_cleanup+0x130>
 800d868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d86a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f383 8810 	msr	PRIMASK, r3
}
 800d872:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800d874:	3738      	adds	r7, #56	; 0x38
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	54435020 	.word	0x54435020
 800d880:	2400008c 	.word	0x2400008c
 800d884:	240023d0 	.word	0x240023d0
 800d888:	24002470 	.word	0x24002470
 800d88c:	0800c19d 	.word	0x0800c19d
 800d890:	240023cc 	.word	0x240023cc

0800d894 <_nx_tcp_socket_block_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_block_cleanup(NX_TCP_SOCKET *socket_ptr)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]

    /* Clean up the connect IP address.  */

    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	615a      	str	r2, [r3, #20]
#ifdef FEATURE_NX_IPV6
    /* Clean up the IP address field. */
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
#else /* FEATURE_NX_IPV6 */
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = 0;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	619a      	str	r2, [r3, #24]
#endif /* FEATURE_NX_IPV6 */

    /* Clean up the connect port.  */
    socket_ptr -> nx_tcp_socket_connect_port = 0;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	61da      	str	r2, [r3, #28]

    /* Reset zero window probe flag. */
    socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

    /* Simply clear the timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = 0;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Reset duplicated ack received. */
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset fast recovery stage. */
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

    /* Connection needs to be closed down immediately.  */
    if (socket_ptr -> nx_tcp_socket_client_type)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d003      	beq.n	800d8dc <_nx_tcp_socket_block_cleanup+0x48>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Client socket, return to a CLOSED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	639a      	str	r2, [r3, #56]	; 0x38
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Server socket, return to LISTEN state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
    }
}
 800d8da:	e002      	b.n	800d8e2 <_nx_tcp_socket_block_cleanup+0x4e>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2202      	movs	r2, #2
 800d8e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d8e2:	bf00      	nop
 800d8e4:	370c      	adds	r7, #12
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr

0800d8ee <_nx_tcp_socket_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_connection_reset(NX_TCP_SOCKET *socket_ptr)
{
 800d8ee:	b580      	push	{r7, lr}
 800d8f0:	b084      	sub	sp, #16
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]

UINT saved_state;

    /* Save the current state of the socket.  */
    saved_state =  socket_ptr -> nx_tcp_socket_state;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fa:	60fb      	str	r3, [r7, #12]

    /* Cleanup the transmission control block.  */
    _nx_tcp_socket_block_cleanup(socket_ptr);
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f7ff ffc9 	bl	800d894 <_nx_tcp_socket_block_cleanup>

    /* Check for queued sent packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <_nx_tcp_socket_connection_reset+0x24>
    {

        /* Release all transmit packets.  */
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f001 fdf9 	bl	800f504 <_nx_tcp_socket_transmit_queue_flush>
    }

    /* Check for queued receive packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00a      	beq.n	800d932 <_nx_tcp_socket_connection_reset+0x44>
    {

        /* Release all received packets.  */
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f9db 	bl	800dcd8 <_nx_tcp_socket_receive_queue_flush>
    }

    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800d922:	e006      	b.n	800d932 <_nx_tcp_socket_connection_reset+0x44>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d92a:	2100      	movs	r1, #0
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7ff ff09 	bl	800d744 <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1f3      	bne.n	800d924 <_nx_tcp_socket_connection_reset+0x36>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800d93c:	e006      	b.n	800d94c <_nx_tcp_socket_connection_reset+0x5e>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d944:	2100      	movs	r1, #0
 800d946:	4618      	mov	r0, r3
 800d948:	f001 fe24 	bl	800f594 <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1f3      	bne.n	800d93e <_nx_tcp_socket_connection_reset+0x50>
    }

    /* Check for suspended connect thread.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d006      	beq.n	800d96e <_nx_tcp_socket_connection_reset+0x80>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d966:	2100      	movs	r1, #0
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe fcc9 	bl	800c300 <_nx_tcp_connect_cleanup>
    }

    /* Check for suspended disconnect thread.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d974:	2b00      	cmp	r3, #0
 800d976:	d006      	beq.n	800d986 <_nx_tcp_socket_connection_reset+0x98>
    {

        /* Resume the thread suspended on the disconnect.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d97e:	2100      	movs	r1, #0
 800d980:	4618      	mov	r0, r3
 800d982:	f7fe fde9 	bl	800c558 <_nx_tcp_disconnect_cleanup>
    }

    /* Determine if the socket was in an established state.  */
    if (saved_state == NX_TCP_ESTABLISHED)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b05      	cmp	r3, #5
 800d98a:	d109      	bne.n	800d9a0 <_nx_tcp_socket_connection_reset+0xb2>
    {

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d992:	2b00      	cmp	r3, #0
 800d994:	d004      	beq.n	800d9a0 <_nx_tcp_socket_connection_reset+0xb2>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	4798      	blx	r3

        /* Notify the application through the socket disconnect_complete callback.  */
        (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
    }
#endif
}
 800d9a0:	bf00      	nop
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <_nx_tcp_socket_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_packet_process(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 800d9a8:	b5b0      	push	{r4, r5, r7, lr}
 800d9aa:	b090      	sub	sp, #64	; 0x40
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]

UINT          packet_queued =  NX_FALSE;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG         packet_data_length;
ULONG         packet_sequence;
ULONG         rx_sequence;
ULONG         rx_window;
UINT          outside_of_window;
ULONG         mss = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60bb      	str	r3, [r7, #8]

    /* Copy the TCP header, since the actual packet can be delivered to
       a waiting socket/thread during this routine and before we are done
       using the header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f107 040c 	add.w	r4, r7, #12
 800d9c2:	461d      	mov	r5, r3
 800d9c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	6023      	str	r3, [r4, #0]

    /* Get the size of the TCP header.  */
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	0f1b      	lsrs	r3, r3, #28
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Process the segment if socket state is equal or greater than NX_TCP_SYN_RECEIVED. According to RFC 793, Section 3.9, Page 69.  */
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d8:	2b03      	cmp	r3, #3
 800d9da:	f240 80b5 	bls.w	800db48 <_nx_tcp_socket_packet_process+0x1a0>
    {

        /* Step1: Check sequence number. According to RFC 793, Section 3.9, Page 69.  */

        /* Pickup the sequence of this packet. */
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the data length in the packet.  */
        packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup the rx sequence.  */
        rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f0:	62bb      	str	r3, [r7, #40]	; 0x28
            socket_ptr -> nx_tcp_socket_rx_window_current =  socket_ptr -> nx_tcp_socket_rx_window_default;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Pickup the rx window.  */
        rx_window = socket_ptr -> nx_tcp_socket_rx_window_current;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* There are four cases for the acceptability test for an incoming segment.
           Section 3.9 Page 69, RFC 793.  */
        outside_of_window = NX_TRUE;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	63bb      	str	r3, [r7, #56]	; 0x38

        if (packet_data_length == 0)
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d12b      	bne.n	800da5a <_nx_tcp_socket_packet_process+0xb2>
        {
            if (rx_window == 0)
 800da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da04:	2b00      	cmp	r3, #0
 800da06:	d119      	bne.n	800da3c <_nx_tcp_socket_packet_process+0x94>
            {
                if (packet_sequence == rx_sequence)
 800da08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d102      	bne.n	800da16 <_nx_tcp_socket_packet_process+0x6e>
                {
                    outside_of_window = NX_FALSE;
 800da10:	2300      	movs	r3, #0
 800da12:	63bb      	str	r3, [r7, #56]	; 0x38
 800da14:	e044      	b.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
                }
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10a      	bne.n	800da36 <_nx_tcp_socket_packet_process+0x8e>
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <_nx_tcp_socket_packet_process+0x8e>
                         ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_CONTROL_MASK) == NX_TCP_ACK_BIT))
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	f403 13b8 	and.w	r3, r3, #1507328	; 0x170000
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 800da30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da34:	d134      	bne.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
                {

                    /* If the RCV.WND is zero, no segments will be acceptable, but
                       special allowance should be made to accept valid ACKs, URGs and RSTs.
                       Section 3.9 Page 69, RFC 793. */
                    outside_of_window = NX_FALSE;
 800da36:	2300      	movs	r3, #0
 800da38:	63bb      	str	r3, [r7, #56]	; 0x38
 800da3a:	e031      	b.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
                }
            }
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800da3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	2b00      	cmp	r3, #0
 800da44:	db2c      	blt.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
                     ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0))
 800da46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4a:	441a      	add	r2, r3
 800da4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4e:	1ad3      	subs	r3, r2, r3
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800da50:	2b00      	cmp	r3, #0
 800da52:	dd25      	ble.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 800da54:	2300      	movs	r3, #0
 800da56:	63bb      	str	r3, [r7, #56]	; 0x38
 800da58:	e022      	b.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
            }
        }
        else
        {
            if ((rx_window > 0) &&
 800da5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d01f      	beq.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800da60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da64:	1ad3      	subs	r3, r2, r3
            if ((rx_window > 0) &&
 800da66:	2b00      	cmp	r3, #0
 800da68:	db06      	blt.n	800da78 <_nx_tcp_socket_packet_process+0xd0>
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 800da6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	441a      	add	r2, r3
 800da70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da72:	1ad3      	subs	r3, r2, r3
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800da74:	2b00      	cmp	r3, #0
 800da76:	dc11      	bgt.n	800da9c <_nx_tcp_socket_packet_process+0xf4>
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 800da78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	441a      	add	r2, r3
 800da7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	3b01      	subs	r3, #1
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 800da84:	2b00      	cmp	r3, #0
 800da86:	db0b      	blt.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
                  ((INT)rx_sequence + 1 + ((INT)rx_window - (INT)packet_sequence) - (INT)packet_data_length > 0))))
 800da88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8a:	1c5a      	adds	r2, r3, #1
 800da8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	1acb      	subs	r3, r1, r3
 800da92:	441a      	add	r2, r3
 800da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da96:	1ad3      	subs	r3, r2, r3
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 800da98:	2b00      	cmp	r3, #0
 800da9a:	dd01      	ble.n	800daa0 <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 800da9c:	2300      	movs	r3, #0
 800da9e:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* Detect whether or not the data is outside the window.  */
        if (outside_of_window)
 800daa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d016      	beq.n	800dad4 <_nx_tcp_socket_packet_process+0x12c>
        {

            /* If an incoming segment is not acceptable, an acknowledgment should be sent in reply
               (unless the RST bit is set, if so drop the segment and return).
               Section 3.9, Page 69, RFC 793.  */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800daac:	2b00      	cmp	r3, #0
 800daae:	d105      	bne.n	800dabc <_nx_tcp_socket_packet_process+0x114>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7ff fbee 	bl	800d298 <_nx_tcp_packet_send_ack>
            }

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP dropped packet count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dac2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800dac6:	3201      	adds	r2, #1
 800dac8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800dacc:	6838      	ldr	r0, [r7, #0]
 800dace:	f7fe fa11 	bl	800bef4 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800dad2:	e0fe      	b.n	800dcd2 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step2: Check the RST bit. According to RFC 793, Section 3.9, Page 70.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00e      	beq.n	800dafc <_nx_tcp_socket_packet_process+0x154>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dae4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800dae8:	3201      	adds	r2, #1
 800daea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_copy.nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff fefd 	bl	800d8ee <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800daf4:	6838      	ldr	r0, [r7, #0]
 800daf6:	f7fe f9fd 	bl	800bef4 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800dafa:	e0ea      	b.n	800dcd2 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step3: Check the SYN bit. According to RFC 793, Section 3.9, Page 71.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00f      	beq.n	800db26 <_nx_tcp_socket_packet_process+0x17e>

            /* The SYN is in the window it is an error, send a reset.  */

            /* Adjust the SEQ for the SYN bit. */
            /* The reset logic uses the sequence number in tcp_header_ptr as its ACK number. */
            tcp_header_copy.nx_tcp_sequence_number++;
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	3301      	adds	r3, #1
 800db0a:	613b      	str	r3, [r7, #16]

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800db0c:	f107 030c 	add.w	r3, r7, #12
 800db10:	4619      	mov	r1, r3
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff fd30 	bl	800d578 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7ff fee8 	bl	800d8ee <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800db1e:	6838      	ldr	r0, [r7, #0]
 800db20:	f7fe f9e8 	bl	800bef4 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800db24:	e0d5      	b.n	800dcd2 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step4: Check the ACK field. According to RFC 793, Section 3.9, Page 72.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2a:	2b04      	cmp	r3, #4
 800db2c:	d00c      	beq.n	800db48 <_nx_tcp_socket_packet_process+0x1a0>
        {

            /* Check the ACK field.  */
            if (_nx_tcp_socket_state_ack_check(socket_ptr, &tcp_header_copy) == NX_FALSE)
 800db2e:	f107 030c 	add.w	r3, r7, #12
 800db32:	4619      	mov	r1, r3
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 fab5 	bl	800e0a4 <_nx_tcp_socket_state_ack_check>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d103      	bne.n	800db48 <_nx_tcp_socket_packet_process+0x1a0>
            {

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800db40:	6838      	ldr	r0, [r7, #0]
 800db42:	f7fe f9d7 	bl	800bef4 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 800db46:	e0c4      	b.n	800dcd2 <_nx_tcp_socket_packet_process+0x32a>
            }
        }
    }

    /* Illegal option length check. */
    if (header_length > sizeof(NX_TCP_HEADER))
 800db48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db4a:	2b14      	cmp	r3, #20
 800db4c:	d93b      	bls.n	800dbc6 <_nx_tcp_socket_packet_process+0x21e>
    {

        /* There are one or more option words.  */
        /* The illegal option length is validated during MSS option get function. */
        if (!_nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)),
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f103 0014 	add.w	r0, r3, #20
 800db56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db58:	3b14      	subs	r3, #20
 800db5a:	f107 0208 	add.w	r2, r7, #8
 800db5e:	4619      	mov	r1, r3
 800db60:	f7fe fec8 	bl	800c8f4 <_nx_tcp_mss_option_get>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d12d      	bne.n	800dbc6 <_nx_tcp_socket_packet_process+0x21e>
            /* TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
               a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */

            /* Preprocess the sequence number if the incoming segment does not have an ACK field.
               Reset Generation, RFC793, Section3.4, Page37. */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db70:	2b00      	cmp	r3, #0
 800db72:	d113      	bne.n	800db9c <_nx_tcp_socket_packet_process+0x1f4>
            {

                /* Update sequence number to set the reset acknowledge number.  */
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800db7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db7c:	1acb      	subs	r3, r1, r3
 800db7e:	4413      	add	r3, r2
 800db80:	613b      	str	r3, [r7, #16]

                /* Check the SYN and FIN bits.  */
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d104      	bne.n	800db96 <_nx_tcp_socket_packet_process+0x1ee>
                    (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_FIN_BIT))
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800db92:	2b00      	cmp	r3, #0
 800db94:	d002      	beq.n	800db9c <_nx_tcp_socket_packet_process+0x1f4>
                {

                    /* Update sequence number to set the reset acknowledge number.  */
                    tcp_header_copy.nx_tcp_sequence_number++;
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	3301      	adds	r3, #1
 800db9a:	613b      	str	r3, [r7, #16]
                }
            }

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800db9c:	f107 030c 	add.w	r3, r7, #12
 800dba0:	4619      	mov	r1, r3
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7ff fce8 	bl	800d578 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff fea0 	bl	800d8ee <_nx_tcp_socket_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
            /* Increment the TCP invalid packet error count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_invalid_packets++;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dbb4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800dbb8:	3201      	adds	r2, #1
 800dbba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800dbbe:	6838      	ldr	r0, [r7, #0]
 800dbc0:	f7fe f998 	bl	800bef4 <_nx_packet_release>

            return;
 800dbc4:	e085      	b.n	800dcd2 <_nx_tcp_socket_packet_process+0x32a>
        }

    }

    /* Process relative to the state of the socket.  */
    switch (socket_ptr -> nx_tcp_socket_state)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbca:	3b03      	subs	r3, #3
 800dbcc:	2b08      	cmp	r3, #8
 800dbce:	d866      	bhi.n	800dc9e <_nx_tcp_socket_packet_process+0x2f6>
 800dbd0:	a201      	add	r2, pc, #4	; (adr r2, 800dbd8 <_nx_tcp_socket_packet_process+0x230>)
 800dbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd6:	bf00      	nop
 800dbd8:	0800dbfd 	.word	0x0800dbfd
 800dbdc:	0800dc1f 	.word	0x0800dc1f
 800dbe0:	0800dc3f 	.word	0x0800dc3f
 800dbe4:	0800dc57 	.word	0x0800dc57
 800dbe8:	0800dc6d 	.word	0x0800dc6d
 800dbec:	0800dc7f 	.word	0x0800dc7f
 800dbf0:	0800dc91 	.word	0x0800dc91
 800dbf4:	0800dc9f 	.word	0x0800dc9f
 800dbf8:	0800dc5f 	.word	0x0800dc5f

    case  NX_TCP_SYN_SENT:

        /* Call the SYN SENT state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_sent(socket_ptr, &tcp_header_copy, packet_ptr);
 800dbfc:	f107 030c 	add.w	r3, r7, #12
 800dc00:	683a      	ldr	r2, [r7, #0]
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f001 fae8 	bl	800f1da <_nx_tcp_socket_state_syn_sent>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0e:	2b05      	cmp	r3, #5
 800dc10:	d147      	bne.n	800dca2 <_nx_tcp_socket_packet_process+0x2fa>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dc12:	6839      	ldr	r1, [r7, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fe33 	bl	800e880 <_nx_tcp_socket_state_data_check>
 800dc1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 800dc1c:	e041      	b.n	800dca2 <_nx_tcp_socket_packet_process+0x2fa>

    case  NX_TCP_SYN_RECEIVED:

        /* Call the SYN RECEIVED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_received(socket_ptr, &tcp_header_copy);
 800dc1e:	f107 030c 	add.w	r3, r7, #12
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f001 fa7b 	bl	800f120 <_nx_tcp_socket_state_syn_received>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2e:	2b05      	cmp	r3, #5
 800dc30:	d139      	bne.n	800dca6 <_nx_tcp_socket_packet_process+0x2fe>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 fe23 	bl	800e880 <_nx_tcp_socket_state_data_check>
 800dc3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 800dc3c:	e033      	b.n	800dca6 <_nx_tcp_socket_packet_process+0x2fe>

    case  NX_TCP_ESTABLISHED:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fe1d 	bl	800e880 <_nx_tcp_socket_state_data_check>
 800dc46:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the ESTABLISHED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_established(socket_ptr);
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f001 f951 	bl	800eef0 <_nx_tcp_socket_state_established>

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f001 fbac 	bl	800f3ac <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 800dc54:	e028      	b.n	800dca8 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSE_WAIT:

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f001 fba8 	bl	800f3ac <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 800dc5c:	e024      	b.n	800dca8 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_LAST_ACK:

        /* Call the LAST ACK state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_last_ack(socket_ptr, &tcp_header_copy);
 800dc5e:	f107 030c 	add.w	r3, r7, #12
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f001 fa31 	bl	800f0cc <_nx_tcp_socket_state_last_ack>

        /* State processing is complete.  */
        break;
 800dc6a:	e01d      	b.n	800dca8 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_1:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fe06 	bl	800e880 <_nx_tcp_socket_state_data_check>
 800dc74:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 1 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait1(socket_ptr);
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f001 f97e 	bl	800ef78 <_nx_tcp_socket_state_fin_wait1>

        /* State processing is complete.  */
        break;
 800dc7c:	e014      	b.n	800dca8 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_2:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dc7e:	6839      	ldr	r1, [r7, #0]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 fdfd 	bl	800e880 <_nx_tcp_socket_state_data_check>
 800dc86:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 2 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait2(socket_ptr);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f001 f9e1 	bl	800f050 <_nx_tcp_socket_state_fin_wait2>

        /* State processing is complete.  */
        break;
 800dc8e:	e00b      	b.n	800dca8 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSING:

        /* Call the CLOSING state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_closing(socket_ptr, &tcp_header_copy);
 800dc90:	f107 030c 	add.w	r3, r7, #12
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fcf6 	bl	800e688 <_nx_tcp_socket_state_closing>

        /* State processing is complete.  */
        break;
 800dc9c:	e004      	b.n	800dca8 <_nx_tcp_socket_packet_process+0x300>

        /* State processing is complete.  */
        break;

    default:
        break;
 800dc9e:	bf00      	nop
 800dca0:	e002      	b.n	800dca8 <_nx_tcp_socket_packet_process+0x300>
        break;
 800dca2:	bf00      	nop
 800dca4:	e000      	b.n	800dca8 <_nx_tcp_socket_packet_process+0x300>
        break;
 800dca6:	bf00      	nop
    }

    /* Check for an URG (urgent) bit set.  */
    /*lint -e{644} suppress variable might not be initialized, since "tcp_header_copy" was initialized. */
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d009      	beq.n	800dcc6 <_nx_tcp_socket_packet_process+0x31e>
    {

        /* Yes, an Urgent bit is set.  */

        /* Pickup the urgent callback function specified when the socket was created.  */
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dcb8:	623b      	str	r3, [r7, #32]

        /* Determine if there is an urgent callback function specified.  */
        if (urgent_callback)
 800dcba:	6a3b      	ldr	r3, [r7, #32]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <_nx_tcp_socket_packet_process+0x31e>
        {

            /* Yes, call the application's urgent callback function to alert the application
               of the presence of the urgent bit.  */
            (urgent_callback)(socket_ptr);
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	4798      	blx	r3
        }
    }

    /* Determine if we need to release the packet.  */
    if (!packet_queued)
 800dcc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d102      	bne.n	800dcd2 <_nx_tcp_socket_packet_process+0x32a>
    {

        /* Yes, the packet was not queued up above, so it needs to be released.  */
        _nx_packet_release(packet_ptr);
 800dccc:	6838      	ldr	r0, [r7, #0]
 800dcce:	f7fe f911 	bl	800bef4 <_nx_packet_release>
    }
}
 800dcd2:	3740      	adds	r7, #64	; 0x40
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bdb0      	pop	{r4, r5, r7, pc}

0800dcd8 <_nx_tcp_socket_receive_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_receive_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dce6:	60fb      	str	r3, [r7, #12]

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800dcf8:	e012      	b.n	800dd20 <_nx_tcp_socket_receive_queue_flush+0x48>
    {

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6a1b      	ldr	r3, [r3, #32]
 800dcfe:	60bb      	str	r3, [r7, #8]

        /* Mark it as allocated so it will be released.  */
        /*lint -e{923} suppress cast of ULONT to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800dd06:	621a      	str	r2, [r3, #32]

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f7fe f8f3 	bl	800bef4 <_nx_packet_release>

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	60fb      	str	r3, [r7, #12]

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dd18:	1e5a      	subs	r2, r3, #1
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1e7      	bne.n	800dcfa <_nx_tcp_socket_receive_queue_flush+0x22>
    }
}
 800dd2a:	bf00      	nop
 800dd2c:	bf00      	nop
 800dd2e:	3710      	adds	r7, #16
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <_nx_tcp_socket_retransmit>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_retransmit(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, UINT need_fast_retransmit)
{
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b097      	sub	sp, #92	; 0x5c
 800dd38:	af04      	add	r7, sp, #16
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
       RFC 793 Sec 3.7, p42: keep send new data.

       In the zero window probe phase, we send the zero window probe, and increase
       exponentially the interval between successive probes.
       RFC 1122 Sec 4.2.2.17, p92.  */
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d164      	bne.n	800de12 <_nx_tcp_socket_retransmit+0xde>
    {

        /* Pickup the head of the transmit queue.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dd4e:	647b      	str	r3, [r7, #68]	; 0x44

        if (packet_ptr)
 800dd50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d02f      	beq.n	800ddb6 <_nx_tcp_socket_retransmit+0x82>
        {

        /* Get one byte from send queue. */
        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_TCP_HEADER *header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800dd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	613b      	str	r3, [r7, #16]

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	ba1a      	rev	r2, r3
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	60da      	str	r2, [r3, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	ba1a      	rev	r2, r3
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	605a      	str	r2, [r3, #4]

            /* Get sequence number and first byte. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 800dd70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd72:	689a      	ldr	r2, [r3, #8]
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	0f1b      	lsrs	r3, r3, #28
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4413      	add	r3, r2
 800dd7e:	781a      	ldrb	r2, [r3, #0]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            /* Now set zero window probe started. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	685a      	ldr	r2, [r3, #4]
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	ba1a      	rev	r2, r3
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	605a      	str	r2, [r3, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	ba1a      	rev	r2, r3
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	60da      	str	r2, [r3, #12]
 800ddb4:	e005      	b.n	800ddc2 <_nx_tcp_socket_retransmit+0x8e>
        }
        else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 8169 	beq.w	800e094 <_nx_tcp_socket_retransmit+0x360>

        /* In the zero window probe phase, we send the zero window probe, and increase
           exponentially the interval between successive probes.  */

        /* Increment the retry counter.  */
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ddd6:	1c5a      	adds	r2, r3, #1
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Setup the next timeout.  */
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ddea:	68b9      	ldr	r1, [r7, #8]
 800ddec:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800ddf0:	fb01 f303 	mul.w	r3, r1, r3
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800ddf4:	409a      	lsls	r2, r3
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send the zero window probe.  */
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800de08:	461a      	mov	r2, r3
 800de0a:	68b8      	ldr	r0, [r7, #8]
 800de0c:	f7ff fb94 	bl	800d538 <_nx_tcp_packet_send_probe>
                                  socket_ptr -> nx_tcp_socket_zero_window_probe_data);

        return;
 800de10:	e143      	b.n	800e09a <_nx_tcp_socket_retransmit+0x366>
    }
    else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE)
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d103      	bne.n	800de24 <_nx_tcp_socket_retransmit+0xf0>
    {

        /* If advertised window isn't zero, reset zero window probe flag. */
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2200      	movs	r2, #0
 800de20:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }

    /* Increment the retry counter only if the receiver window is open. */
    /* Increment the retry counter.  */
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800de2a:	1c5a      	adds	r2, r3, #1
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d004      	beq.n	800de42 <_nx_tcp_socket_retransmit+0x10e>
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d12a      	bne.n	800de98 <_nx_tcp_socket_retransmit+0x164>
    {

        /* Timed out on an outgoing packet.  Enter slow start mode. */
        /* Compute the flight size / 2 value. */
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de46:	085b      	lsrs	r3, r3, #1
 800de48:	643b      	str	r3, [r7, #64]	; 0x40

        /* Make sure we have at least 2 * MSS */
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	6a1b      	ldr	r3, [r3, #32]
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de52:	429a      	cmp	r2, r3
 800de54:	d203      	bcs.n	800de5e <_nx_tcp_socket_retransmit+0x12a>
        {
            window = socket_ptr -> nx_tcp_socket_connect_mss << 1;
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	6a1b      	ldr	r3, [r3, #32]
 800de5a:	005b      	lsls	r3, r3, #1
 800de5c:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Set the slow_start_threshold */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de62:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the current window to be MSS size. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	6a1a      	ldr	r2, [r3, #32]
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Determine if this socket needs fast retransmit.  */
        if (need_fast_retransmit == NX_TRUE)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d112      	bne.n	800de98 <_nx_tcp_socket_retransmit+0x164>
        {

            /* Update cwnd to ssthreshold plus 3 * MSS.  */
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	6a1b      	ldr	r3, [r3, #32]
 800de7a:	0059      	lsls	r1, r3, #1
 800de7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de7e:	440b      	add	r3, r1
 800de80:	441a      	add	r2, r3
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	659a      	str	r2, [r3, #88]	; 0x58

            /* Now TCP is in fast recovery procedure. */
            socket_ptr -> nx_tcp_socket_fast_recovery = NX_TRUE;
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2201      	movs	r2, #1
 800de8a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

            /* Update the transmit sequence that enters fast transmit. */
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de92:	1e5a      	subs	r2, r3, #1
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    /* Setup the next timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dea4:	68b9      	ldr	r1, [r7, #8]
 800dea6:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800deaa:	fb01 f303 	mul.w	r3, r1, r3
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800deae:	409a      	lsls	r2, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Get available size of packet that can be sent. */
    available = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deba:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Pickup the head of the transmit queue.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dec2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if the packet has been released by the
       application I/O driver.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 800dec4:	e0dc      	b.n	800e080 <_nx_tcp_socket_retransmit+0x34c>
    {

    /* Update the ACK number in case it has changed since the data was originally transmitted. */
    ULONG          checksum;
    NX_TCP_HEADER *header_ptr;
    ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800dec6:	2300      	movs	r3, #0
 800dec8:	63bb      	str	r3, [r7, #56]	; 0x38
 800deca:	2300      	movs	r3, #0
 800decc:	637b      	str	r3, [r7, #52]	; 0x34
    NX_PACKET     *next_ptr;
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    UINT           compute_checksum = 1;
 800dece:	2301      	movs	r3, #1
 800ded0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef NX_DISABLE_TCP_TX_CHECKSUM
        compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 800ded2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ded4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ded6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded8:	3314      	adds	r3, #20
 800deda:	429a      	cmp	r2, r3
 800dedc:	f200 80dc 	bhi.w	800e098 <_nx_tcp_socket_retransmit+0x364>
            /* This packet can not be sent. */
            break;
        }

        /* Decrease the available size. */
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 800dee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dee6:	1ad3      	subs	r3, r2, r3
 800dee8:	3314      	adds	r3, #20
 800deea:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Pickup next packet. */
        next_ptr = packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800deec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deee:	6a1b      	ldr	r3, [r3, #32]
 800def0:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	2b04      	cmp	r3, #4
 800def8:	d10a      	bne.n	800df10 <_nx_tcp_socket_retransmit+0x1dc>
        {

            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800defa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800defc:	2204      	movs	r2, #4
 800defe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Get the source and destination addresses. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df06:	3314      	adds	r3, #20
 800df08:	63bb      	str	r3, [r7, #56]	; 0x38
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	3318      	adds	r3, #24
 800df0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif /* FEATURE_NX_IPV6 */

        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800df10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Record the original data.  */
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	689b      	ldr	r3, [r3, #8]
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	623b      	str	r3, [r7, #32]
        original_header_word_4 = header_ptr -> nx_tcp_header_word_4;
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	61fb      	str	r3, [r7, #28]

        /* Update the ACK number in the TCP header.  */
        header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	609a      	str	r2, [r3, #8]

        /* Convert to network byte order for checksum */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	ba1a      	rev	r2, r3
 800df36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df38:	609a      	str	r2, [r3, #8]
        if (window_size > 0xFFFF)
        {
            window_size = 0xFFFF;
        }
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df3e:	61bb      	str	r3, [r7, #24]
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 800df40:	69ba      	ldr	r2, [r7, #24]
 800df42:	4b57      	ldr	r3, [pc, #348]	; (800e0a0 <_nx_tcp_socket_retransmit+0x36c>)
 800df44:	4313      	orrs	r3, r2
 800df46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df48:	60d3      	str	r3, [r2, #12]

        /* Swap the content to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800df4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	ba1a      	rev	r2, r3
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	60da      	str	r2, [r3, #12]

        /* Convert back to host byte order to so we can zero out the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	ba1a      	rev	r2, r3
 800df5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5c:	611a      	str	r2, [r3, #16]

        /* Remember the last ACKed sequence and the last reported window size.  */
        socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Zero out existing checksum before computing new one. */
        header_ptr -> nx_tcp_header_word_4 = header_ptr -> nx_tcp_header_word_4 & 0x0000FFFF;
 800df6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	b29a      	uxth	r2, r3
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	611a      	str	r2, [r3, #16]

        /* Convert back to network byte order to so we can do the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	ba1a      	rev	r2, r3
 800df7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df80:	611a      	str	r2, [r3, #16]


#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df88:	f003 0304 	and.w	r3, r3, #4
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <_nx_tcp_socket_retransmit+0x260>
        {
            compute_checksum = 0;
 800df90:	2300      	movs	r3, #0
 800df92:	633b      	str	r3, [r7, #48]	; 0x30
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800df94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df96:	2b00      	cmp	r3, #0
 800df98:	d020      	beq.n	800dfdc <_nx_tcp_socket_retransmit+0x2a8>
#endif /* defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
        {
            /* Calculate the TCP checksum without protection.  */
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                                packet_ptr -> nx_packet_length,
 800df9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800df9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa4:	2106      	movs	r1, #6
 800dfa6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dfa8:	f7fb f9ea 	bl	8009380 <_nx_ip_checksum_compute>
 800dfac:	4603      	mov	r3, r0
 800dfae:	617b      	str	r3, [r7, #20]
                                                source_ip, dest_ip);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	43db      	mvns	r3, r3
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	617b      	str	r3, [r7, #20]

            /* Convert back to host byte order */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	ba1a      	rev	r2, r3
 800dfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc0:	611a      	str	r2, [r3, #16]

            /* Move the checksum into header.  */
            header_ptr -> nx_tcp_header_word_4 =  header_ptr -> nx_tcp_header_word_4 | (checksum << NX_SHIFT_BY_16);
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	691a      	ldr	r2, [r3, #16]
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	041b      	lsls	r3, r3, #16
 800dfca:	431a      	orrs	r2, r3
 800dfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfce:	611a      	str	r2, [r3, #16]

            /* Convert back to network byte order for transmit. */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	ba1a      	rev	r2, r3
 800dfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd8:	611a      	str	r2, [r3, #16]
 800dfda:	e005      	b.n	800dfe8 <_nx_tcp_socket_retransmit+0x2b4>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800dfdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe0:	f043 0204 	orr.w	r2, r3, #4
 800dfe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfe6:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

        /* Determine if the retransmitted packet is identical to the original packet.
           RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d10d      	bne.n	800e00e <_nx_tcp_socket_retransmit+0x2da>
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 800dff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff4:	68db      	ldr	r3, [r3, #12]
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800dff6:	6a3a      	ldr	r2, [r7, #32]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d108      	bne.n	800e00e <_nx_tcp_socket_retransmit+0x2da>
            (header_ptr -> nx_tcp_header_word_4 == original_header_word_4))
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	691b      	ldr	r3, [r3, #16]
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 800e000:	69fa      	ldr	r2, [r7, #28]
 800e002:	429a      	cmp	r2, r3
 800e004:	d103      	bne.n	800e00e <_nx_tcp_socket_retransmit+0x2da>
        {

            /* Yes, identical packet, update the identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 800e006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e008:	2201      	movs	r2, #1
 800e00a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        }


#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP retransmit count.  */
        ip_ptr -> nx_ip_tcp_retransmit_packets++;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e014:	1c5a      	adds	r2, r3, #1
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Increment the TCP retransmit count for the socket.  */
        socket_ptr -> nx_tcp_socket_retransmit_packets++;
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RETRY, ip_ptr, socket_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_timeout_retries, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800e02a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e02c:	2200      	movs	r2, #0
 800e02e:	61da      	str	r2, [r3, #28]
        /* Yes, the driver has finished with the packet at the head of the
           transmit sent list... so it can be sent again!  */

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	695b      	ldr	r3, [r3, #20]
 800e034:	2b04      	cmp	r3, #4
 800e036:	d118      	bne.n	800e06a <_nx_tcp_socket_retransmit+0x336>
        {
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	6998      	ldr	r0, [r3, #24]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
                               socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
                               socket_ptr -> nx_tcp_socket_type_of_service,
                               socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800e04e:	68b9      	ldr	r1, [r7, #8]
 800e050:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800e052:	9103      	str	r1, [sp, #12]
 800e054:	9202      	str	r2, [sp, #8]
 800e056:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800e05a:	9201      	str	r2, [sp, #4]
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	4623      	mov	r3, r4
 800e060:	4602      	mov	r2, r0
 800e062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f7fc fbb1 	bl	800a7cc <_nx_ip_packet_send>
#endif /* FEATURE_NX_IPV6 */

        /* Move to next packet. */
        /* During fast recovery, only one packet is retransmitted at once. */
        /* After a timeout, the sending data can be at most one SMSS. */
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800e06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06c:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800e070:	d013      	beq.n	800e09a <_nx_tcp_socket_retransmit+0x366>
            (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d00e      	beq.n	800e09a <_nx_tcp_socket_retransmit+0x366>
        {
            break;
        }
        else
        {
            packet_ptr = next_ptr;
 800e07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07e:	647b      	str	r3, [r7, #68]	; 0x44
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 800e080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e082:	2b00      	cmp	r3, #0
 800e084:	d009      	beq.n	800e09a <_nx_tcp_socket_retransmit+0x366>
 800e086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e088:	69db      	ldr	r3, [r3, #28]
 800e08a:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e08e:	f43f af1a 	beq.w	800dec6 <_nx_tcp_socket_retransmit+0x192>
 800e092:	e002      	b.n	800e09a <_nx_tcp_socket_retransmit+0x366>
            return;
 800e094:	bf00      	nop
 800e096:	e000      	b.n	800e09a <_nx_tcp_socket_retransmit+0x366>
            break;
 800e098:	bf00      	nop
        }
    }
}
 800e09a:	374c      	adds	r7, #76	; 0x4c
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd90      	pop	{r4, r7, pc}
 800e0a0:	50180000 	.word	0x50180000

0800e0a4 <_nx_tcp_socket_state_ack_check>:
/*                                            fixed compiler warnings,    */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_ack_check(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b090      	sub	sp, #64	; 0x40
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]

NX_TCP_HEADER *search_header_ptr = NX_NULL;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG          starting_tx_sequence;
ULONG          ending_tx_sequence;
ULONG          ending_rx_sequence;
ULONG          acked_bytes;
ULONG          tcp_payload_length;
UINT           wrapped_flag = NX_FALSE;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	623b      	str	r3, [r7, #32]


    /* Determine if the header has an ACK bit set.  This is an
       acknowledgement of a previous transmission.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f000 82dc 	beq.w	800e67c <_nx_tcp_socket_state_ack_check+0x5d8>
    {

        /* Initialize tx sequence. */
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d004      	beq.n	800e0d8 <_nx_tcp_socket_state_ack_check+0x34>
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence + 1;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0d6:	e002      	b.n	800e0de <_nx_tcp_socket_state_ack_check+0x3a>
        }
        else
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0dc:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	61fb      	str	r3, [r7, #28]

        /* Initialize ending rx sequence. */
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d028      	beq.n	800e146 <_nx_tcp_socket_state_ack_check+0xa2>
        {
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e0fa:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Setup a pointer to header of this packet in the sent list.  */
#ifndef NX_DISABLE_IPV4
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800e0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e102:	2b04      	cmp	r3, #4
 800e104:	d11d      	bne.n	800e142 <_nx_tcp_socket_state_ack_check+0x9e>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800e106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10a:	3314      	adds	r3, #20
 800e10c:	63fb      	str	r3, [r7, #60]	; 0x3c
            {
                return(NX_FALSE);
            }

            /* Determine the size of the TCP header.  */
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 800e10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	633b      	str	r3, [r7, #48]	; 0x30
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e116:	0f1b      	lsrs	r3, r3, #28
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	61bb      	str	r3, [r7, #24]

            /* Determine the sequence number in the TCP header.  */
            search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 800e11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	617b      	str	r3, [r7, #20]

            /* Calculate the payload length of TCP. */
            tcp_payload_length = (search_ptr -> nx_packet_length -
 800e122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  (header_length +
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
                                           (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	4619      	mov	r1, r3
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
 800e12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e12e:	1ac9      	subs	r1, r1, r3
                                  (header_length +
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	1acb      	subs	r3, r1, r3
            tcp_payload_length = (search_ptr -> nx_packet_length -
 800e134:	4413      	add	r3, r2
 800e136:	613b      	str	r3, [r7, #16]

            /* Calculate the ending packet sequence.  */
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	4413      	add	r3, r2
 800e13e:	627b      	str	r3, [r7, #36]	; 0x24
 800e140:	e004      	b.n	800e14c <_nx_tcp_socket_state_ack_check+0xa8>
                return(NX_FALSE);
 800e142:	2300      	movs	r3, #0
 800e144:	e29b      	b.n	800e67e <_nx_tcp_socket_state_ack_check+0x5da>
        }
        else
        {
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif

        /* First, determine if incoming ACK matches our transmit sequence.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e152:	429a      	cmp	r2, r3
 800e154:	d111      	bne.n	800e17a <_nx_tcp_socket_state_ack_check+0xd6>
        {

            /* In this case, everything on the transmit list is acknowledged.  Simply set the packet
               release count to the number of packets in the transmit queue.  */
            packet_release_count =  socket_ptr -> nx_tcp_socket_transmit_sent_count;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e15c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Set the previous pointer to the socket transmit tail pointer.  */
            previous_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_tail;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e164:	637b      	str	r3, [r7, #52]	; 0x34

            /* Is this ACK to FIN? */
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16a:	2b06      	cmp	r3, #6
 800e16c:	f240 80d6 	bls.w	800e31c <_nx_tcp_socket_state_ack_check+0x278>
            {

                /* Yes it is. */
                socket_ptr -> nx_tcp_socket_fin_acked = NX_TRUE;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800e178:	e0d0      	b.n	800e31c <_nx_tcp_socket_state_ack_check+0x278>
        {

            /* Calculate the start and end of the transmit sequence.  */

            /* Pickup the head of the transmit queue.  */
            search_ptr =    socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e180:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if there is a packet on the transmit queue... and determine if the packet has been
               transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if ((search_ptr) && (search_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_DRIVER_TX_DONE)))
 800e182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e184:	2b00      	cmp	r3, #0
 800e186:	d059      	beq.n	800e23c <_nx_tcp_socket_state_ack_check+0x198>
 800e188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18a:	69db      	ldr	r3, [r3, #28]
 800e18c:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e190:	d154      	bne.n	800e23c <_nx_tcp_socket_state_ack_check+0x198>
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800e192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Determine if the incoming ACK matches the front of our transmit queue. */
                if (tcp_header_ptr -> nx_tcp_acknowledgment_number == starting_tx_sequence)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	69fa      	ldr	r2, [r7, #28]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d143      	bne.n	800e22a <_nx_tcp_socket_state_ack_check+0x186>
                {

                    /* Handle duplicated ACK packet.  */
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1a6:	1c5a      	adds	r2, r3, #1
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	66da      	str	r2, [r3, #108]	; 0x6c

                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1b0:	2b03      	cmp	r3, #3
 800e1b2:	d12a      	bne.n	800e20a <_nx_tcp_socket_state_ack_check+0x166>
                    {
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	689a      	ldr	r2, [r3, #8]
                                  socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 800e1bc:	1ad3      	subs	r3, r2, r3
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	dd08      	ble.n	800e1d6 <_nx_tcp_socket_state_ack_check+0x132>
                        {

                            /* Cumulative acknowledge covers more than recover. */
                            /* Section 3.2, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	6879      	ldr	r1, [r7, #4]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7ff fdb0 	bl	800dd34 <_nx_tcp_socket_retransmit>
 800e1d4:	e029      	b.n	800e22a <_nx_tcp_socket_state_ack_check+0x186>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d923      	bls.n	800e22a <_nx_tcp_socket_state_ack_check+0x186>
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	689a      	ldr	r2, [r3, #8]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6e59      	ldr	r1, [r3, #100]	; 0x64
                                                                                          (socket_ptr -> nx_tcp_socket_connect_mss << 2))) < 0))
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a1b      	ldr	r3, [r3, #32]
 800e1ee:	009b      	lsls	r3, r3, #2
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 800e1f0:	440b      	add	r3, r1
 800e1f2:	1ad3      	subs	r3, r2, r3
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da18      	bge.n	800e22a <_nx_tcp_socket_state_ack_check+0x186>

                            /* Congestion window is greater than SMSS bytes and
                               the difference between highest_ack and prev_highest_ack is at most 4*SMSS bytes.*/
                            /* Section 4.1, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e1fe:	2201      	movs	r2, #1
 800e200:	6879      	ldr	r1, [r7, #4]
 800e202:	4618      	mov	r0, r3
 800e204:	f7ff fd96 	bl	800dd34 <_nx_tcp_socket_retransmit>
 800e208:	e00f      	b.n	800e22a <_nx_tcp_socket_state_ack_check+0x186>
                        }
                    }
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e20e:	2b03      	cmp	r3, #3
 800e210:	d90b      	bls.n	800e22a <_nx_tcp_socket_state_ack_check+0x186>
                             (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d106      	bne.n	800e22a <_nx_tcp_socket_state_ack_check+0x186>
                    {

                        /* CWND += MSS  */
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a1b      	ldr	r3, [r3, #32]
 800e224:	441a      	add	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	659a      	str	r2, [r3, #88]	; 0x58
                    }
                }

                /* Determine if the transmit queue has wrapped.  */
                if (ending_tx_sequence > starting_tx_sequence)
 800e22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d902      	bls.n	800e238 <_nx_tcp_socket_state_ack_check+0x194>
                {

                    /* Clear the wrapped flag.  */
                    wrapped_flag =  NX_FALSE;
 800e232:	2300      	movs	r3, #0
 800e234:	623b      	str	r3, [r7, #32]
 800e236:	e001      	b.n	800e23c <_nx_tcp_socket_state_ack_check+0x198>
                }
                else
                {

                    /* Set the wrapped flag.  */
                    wrapped_flag =  NX_TRUE;
 800e238:	2301      	movs	r3, #1
 800e23a:	623b      	str	r3, [r7, #32]
                }
            }

            /* Initialize the packet release count.  */
            packet_release_count =  0;
 800e23c:	2300      	movs	r3, #0
 800e23e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if we can find the sequence number in the sent queue for this
               socket.  */
            previous_ptr =  NX_NULL;
 800e240:	2300      	movs	r3, #0
 800e242:	637b      	str	r3, [r7, #52]	; 0x34
            while (search_ptr)
 800e244:	e063      	b.n	800e30e <_nx_tcp_socket_state_ack_check+0x26a>
            {

                /* Determine if the packet has been transmitted.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800e246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e248:	69db      	ldr	r3, [r3, #28]
 800e24a:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e24e:	d007      	beq.n	800e260 <_nx_tcp_socket_state_ack_check+0x1bc>
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                           search_ptr -> nx_packet_ip_header_length);
 800e254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e256:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800e25a:	4413      	add	r3, r2
 800e25c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e25e:	e002      	b.n	800e266 <_nx_tcp_socket_state_ack_check+0x1c2>
                else
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Determine the size of the TCP header.  */
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 800e266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26e:	ba1b      	rev	r3, r3
 800e270:	633b      	str	r3, [r7, #48]	; 0x30
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e274:	0f1b      	lsrs	r3, r3, #28
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	61bb      	str	r3, [r7, #24]

                /* Determine the sequence number in the TCP header.  */
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 800e27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	617b      	str	r3, [r7, #20]
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	ba1b      	rev	r3, r3
 800e284:	617b      	str	r3, [r7, #20]

                /* Calculate the payload length of TCP. */
                tcp_payload_length = (search_ptr -> nx_packet_length -
 800e286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 800e28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 800e290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e292:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (search_ptr -> nx_packet_length -
 800e298:	4413      	add	r3, r2
 800e29a:	613b      	str	r3, [r7, #16]

                /* Calculate the ending packet sequence.  */
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 800e29c:	697a      	ldr	r2, [r7, #20]
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	60fb      	str	r3, [r7, #12]

                /* Determine if the transmit window is wrapped.  */
                if (wrapped_flag == NX_FALSE)
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d10a      	bne.n	800e2c0 <_nx_tcp_socket_state_ack_check+0x21c>

                    /* No, the transmit window is not wrapped. Perform a simple compare to determine if the ACK
                       covers the current search packet.  */

                    /* Is this ACK before the current search packet or after the transmit sequence?  */
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d833      	bhi.n	800e31c <_nx_tcp_socket_state_ack_check+0x278>
                        (tcp_header_ptr -> nx_tcp_acknowledgment_number > ending_tx_sequence))
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	689b      	ldr	r3, [r3, #8]
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 800e2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d32e      	bcc.n	800e31c <_nx_tcp_socket_state_ack_check+0x278>
 800e2be:	e018      	b.n	800e2f2 <_nx_tcp_socket_state_ack_check+0x24e>

                    /* Yes, the transmit window has wrapped.  We need to now check for all the wrap conditions to
                       determine if ACK covers the current search packet.  */

                    /* Is the search packet's ending sequence number in the wrapped part of the window.  */
                    if (ending_packet_sequence < starting_tx_sequence)
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d20a      	bcs.n	800e2de <_nx_tcp_socket_state_ack_check+0x23a>
                    {

                        /* The search packet ends in the wrapped portion of the window.  Determine if the ACK
                           sequence in the wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number < starting_tx_sequence)
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	69fa      	ldr	r2, [r7, #28]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d921      	bls.n	800e316 <_nx_tcp_socket_state_ack_check+0x272>
                        {

                            /* Yes, the ACK sequence is in the wrapped portion as well. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d90a      	bls.n	800e2f2 <_nx_tcp_socket_state_ack_check+0x24e>
                            {

                                /* ACK does not cover the search packet. Break out of the loop.  */
                                break;
 800e2dc:	e01e      	b.n	800e31c <_nx_tcp_socket_state_ack_check+0x278>
                    else
                    {

                        /* The search packet is in the non-wrapped portion of the window.  Determine if the ACK
                           sequence is in the non-wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number >= starting_tx_sequence)
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	689b      	ldr	r3, [r3, #8]
 800e2e2:	69fa      	ldr	r2, [r7, #28]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d804      	bhi.n	800e2f2 <_nx_tcp_socket_state_ack_check+0x24e>
                        {

                            /* Yes, the ACK sequence is in the non-wrapped portion of the window. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d813      	bhi.n	800e31a <_nx_tcp_socket_state_ack_check+0x276>
                }

                /* At this point we know that the ACK received covers the search packet.  */

                /* Increase the packet release count.  */
                packet_release_count++;
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Move the search and previous pointers forward.  */
                previous_ptr =  search_ptr;
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fa:	637b      	str	r3, [r7, #52]	; 0x34
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	6a1b      	ldr	r3, [r3, #32]
 800e300:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Determine if we are at the end of the TCP queue.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800e302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e304:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800e308:	d101      	bne.n	800e30e <_nx_tcp_socket_state_ack_check+0x26a>
                {

                    /* Yes, set the search pointer to NULL.  */
                    search_ptr =  NX_NULL;
 800e30a:	2300      	movs	r3, #0
 800e30c:	63bb      	str	r3, [r7, #56]	; 0x38
            while (search_ptr)
 800e30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e310:	2b00      	cmp	r3, #0
 800e312:	d198      	bne.n	800e246 <_nx_tcp_socket_state_ack_check+0x1a2>
 800e314:	e002      	b.n	800e31c <_nx_tcp_socket_state_ack_check+0x278>
                            break;
 800e316:	bf00      	nop
 800e318:	e000      	b.n	800e31c <_nx_tcp_socket_state_ack_check+0x278>
                                break;
 800e31a:	bf00      	nop
                }
            }
        }

        /* Determine if anything needs to be released.  */
        if (!packet_release_count)
 800e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d123      	bne.n	800e36a <_nx_tcp_socket_state_ack_check+0x2c6>
        {

            /* No, check and see if the ACK is valid.  */
            /* If the ACK acks something not yet sent (SEG.ACK > SND.NXT) then send an ACK, drop the segment */
            /* Page 72, section 3.9, RFC 793.*/
            if (tcp_header_ptr -> nx_tcp_acknowledgment_number != ending_tx_sequence)
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e328:	429a      	cmp	r2, r3
 800e32a:	d00d      	beq.n	800e348 <_nx_tcp_socket_state_ack_check+0x2a4>
            {

                /* If the ACK is a duplicate, it can be ignored. */
                if ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence > 0)
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	461a      	mov	r2, r3
 800e332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	f340 809f 	ble.w	800e47a <_nx_tcp_socket_state_ack_check+0x3d6>
                {

                    /* The ACK sequence is invalid. Respond with an ACK to let the other
                       side of the connection figure out if everything is still okay.  */
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 800e33c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7fe ffaa 	bl	800d298 <_nx_tcp_packet_send_ack>
                    return(NX_FALSE);
 800e344:	2300      	movs	r3, #0
 800e346:	e19a      	b.n	800e67e <_nx_tcp_socket_state_ack_check+0x5da>
                }
            }
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f040 8094 	bne.w	800e47a <_nx_tcp_socket_state_ack_check+0x3d6>
                     (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	685a      	ldr	r2, [r3, #4]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 800e35a:	429a      	cmp	r2, r3
 800e35c:	f040 808d 	bne.w	800e47a <_nx_tcp_socket_state_ack_check+0x3d6>
            {

                /* Response to zero window probe.  */
                _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 800e360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7fe ff98 	bl	800d298 <_nx_tcp_packet_send_ack>
 800e368:	e087      	b.n	800e47a <_nx_tcp_socket_state_ack_check+0x3d6>

            /* Congestion window adjustment during slow start and congestion avoidance is executed
               on every incoming ACK that acknowledges new data. RFC5681, Section3.1, Page4-8.  */

            /* Check whether the socket is in fast recovery procedure. */
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e370:	2b01      	cmp	r3, #1
 800e372:	d10e      	bne.n	800e392 <_nx_tcp_socket_state_ack_check+0x2ee>
            {

                /* Yes. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	689a      	ldr	r2, [r3, #8]
                          socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 800e37c:	1ad3      	subs	r3, r2, r3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	dd07      	ble.n	800e392 <_nx_tcp_socket_state_ack_check+0x2ee>
                {

                    /* All packets sent before entering fast recovery are ACKed. */
                    /* Exit fast recovery procedure. */
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	659a      	str	r2, [r3, #88]	; 0x58
                }
            }

            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
                      (tcp_header_ptr -> nx_tcp_acknowledgment_number - 2)) < 0)
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	689b      	ldr	r3, [r3, #8]
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 800e39a:	1ad3      	subs	r3, r2, r3
 800e39c:	3302      	adds	r3, #2
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	da04      	bge.n	800e3ac <_nx_tcp_socket_state_ack_check+0x308>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	1e9a      	subs	r2, r3, #2
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	661a      	str	r2, [r3, #96]	; 0x60
            }

            /* Reset the duplicated ACK counter. */
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Determine if the packet has been transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e3b8:	69db      	ldr	r3, [r3, #28]
 800e3ba:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e3be:	d00b      	beq.n	800e3d8 <_nx_tcp_socket_state_ack_check+0x334>
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                search_header_ptr =  (NX_TCP_HEADER *)(socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header +
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                       socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header_length);
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 800e3ce:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                search_header_ptr =  (NX_TCP_HEADER *)(socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header +
 800e3d2:	4413      	add	r3, r2
 800e3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3d6:	e004      	b.n	800e3e2 <_nx_tcp_socket_state_ack_check+0x33e>
            else
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_prepend_ptr;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }

            /* Set previous cumulative acknowlesgement. */
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	69fa      	ldr	r2, [r7, #28]
 800e3e6:	665a      	str	r2, [r3, #100]	; 0x64

            /* Calculate ACKed length. */
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	689a      	ldr	r2, [r3, #8]
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	60bb      	str	r3, [r7, #8]

            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d112      	bne.n	800e422 <_nx_tcp_socket_state_ack_check+0x37e>
            {

                /* Process cwnd in fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	1ad2      	subs	r2, r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	659a      	str	r2, [r3, #88]	; 0x58
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6a1b      	ldr	r3, [r3, #32]
 800e40c:	68ba      	ldr	r2, [r7, #8]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d933      	bls.n	800e47a <_nx_tcp_socket_state_ack_check+0x3d6>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a1b      	ldr	r3, [r3, #32]
 800e41a:	441a      	add	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	659a      	str	r2, [r3, #88]	; 0x58
 800e420:	e02b      	b.n	800e47a <_nx_tcp_socket_state_ack_check+0x3d6>
            else
            {

                /* Adjust the transmit window.  In slow start phase, the transmit window is incremented for every ACK.
                   In Congestion Avoidance phase, the window is incremented for every RTT. Section 3.1, Page 4-7, RFC5681.  */
                if (socket_ptr -> nx_tcp_socket_tx_window_congestion >= socket_ptr -> nx_tcp_socket_tx_slow_start_threshold)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d312      	bcc.n	800e454 <_nx_tcp_socket_state_ack_check+0x3b0>
                {

                    /* In Congestion avoidance phase, for every ACK it receives, increase the window size using the
                       following approximation:
                       cwnd = cwnd + MSS * MSS / cwnd;  */
                    temp = socket_ptr -> nx_tcp_socket_connect_mss2 / socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e436:	fbb2 f3f3 	udiv	r3, r2, r3
 800e43a:	633b      	str	r3, [r7, #48]	; 0x30

                    /* If the above formula yields 0, the result SHOULD be rounded up to 1 byte.  */
                    if (temp == 0)
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <_nx_tcp_socket_state_ack_check+0x3a2>
                    {
                        temp = 1;
 800e442:	2301      	movs	r3, #1
 800e444:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_window_congestion + temp;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	441a      	add	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	659a      	str	r2, [r3, #88]	; 0x58
 800e452:	e012      	b.n	800e47a <_nx_tcp_socket_state_ack_check+0x3d6>
                {

                    /* In Slow start phase:
                       cwnd += min (N, SMSS),
                       where N is the number of ACKed bytes. */
                    if (acked_bytes < socket_ptr -> nx_tcp_socket_connect_mss)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6a1b      	ldr	r3, [r3, #32]
 800e458:	68ba      	ldr	r2, [r7, #8]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d206      	bcs.n	800e46c <_nx_tcp_socket_state_ack_check+0x3c8>
                    {

                        /* In Slow start phase. Increase the cwnd by acked bytes.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += acked_bytes;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	441a      	add	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	659a      	str	r2, [r3, #88]	; 0x58
 800e46a:	e006      	b.n	800e47a <_nx_tcp_socket_state_ack_check+0x3d6>
                    }
                    else
                    {

                        /* In Slow start phase. Increase the cwnd by full MSS for every ack.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a1b      	ldr	r3, [r3, #32]
 800e474:	441a      	add	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	659a      	str	r2, [r3, #88]	; 0x58
        /* Update the window only when
         * 1. SND.UNA < SEG.ACK =< SND.NXT or
         * 2. SND.WL1 < SEG.SEQ or
         * 3. SND.WL1 = SEG.SEQ and SND.WL2 =< SEG.ACK
         * RFC793, Section 3.9, Page72. */
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	461a      	mov	r2, r3
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	1ad3      	subs	r3, r2, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	dd06      	ble.n	800e496 <_nx_tcp_socket_state_ack_check+0x3f2>
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	461a      	mov	r2, r3
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	1ad3      	subs	r3, r2, r3
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 800e492:	2b00      	cmp	r3, #0
 800e494:	dd12      	ble.n	800e4bc <_nx_tcp_socket_state_ack_check+0x418>
            ((INT)tcp_header_ptr -> nx_tcp_sequence_number - (INT)ending_rx_sequence > 0) ||
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	461a      	mov	r2, r3
 800e49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49e:	1ad3      	subs	r3, r2, r3
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	dc0b      	bgt.n	800e4bc <_nx_tcp_socket_state_ack_check+0x418>
            (((INT)tcp_header_ptr -> nx_tcp_sequence_number == (INT)ending_rx_sequence) &&
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
            ((INT)tcp_header_ptr -> nx_tcp_sequence_number - (INT)ending_rx_sequence > 0) ||
 800e4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d10b      	bne.n	800e4c6 <_nx_tcp_socket_state_ack_check+0x422>
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence >= 0)))
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	1ad3      	subs	r3, r2, r3
            (((INT)tcp_header_ptr -> nx_tcp_sequence_number == (INT)ending_rx_sequence) &&
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	db04      	blt.n	800e4c6 <_nx_tcp_socket_state_ack_check+0x422>
        {

            /* Update this socket's transmit window with the advertised window size in the ACK message.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =  (tcp_header_ptr -> nx_tcp_header_word_3) & NX_LOWER_16_MASK;
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	b29a      	uxth	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	655a      	str	r2, [r3, #84]	; 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
        }

        /* Check advertised window. */
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d80a      	bhi.n	800e4e8 <_nx_tcp_socket_state_ack_check+0x444>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number >= socket_ptr -> nx_tcp_socket_zero_window_probe_sequence))
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	689a      	ldr	r2, [r3, #8]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d303      	bcc.n	800e4e8 <_nx_tcp_socket_state_ack_check+0x444>
        {

            /* It is an ACK to Zero Window Probe. Reset the zero window probe failure. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }

        if (!packet_release_count)
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <_nx_tcp_socket_state_ack_check+0x44e>
        {
            /* Done, return to caller. */
            return(NX_TRUE);
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e0c5      	b.n	800e67e <_nx_tcp_socket_state_ack_check+0x5da>
            }
        }
#endif

        /* Save the front of the of the transmit queue.  */
        search_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e4f8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Okay so now the packet after the previous pointer needs to be the front of the
           queue.  */
        if (previous_ptr != socket_ptr -> nx_tcp_socket_transmit_sent_tail)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e502:	429a      	cmp	r2, r3
 800e504:	d017      	beq.n	800e536 <_nx_tcp_socket_state_ack_check+0x492>
        {

            /* Just update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800e506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e508:	6a1a      	ldr	r2, [r3, #32]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

            /* And decrease the transmit queue count accordingly.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e518:	1ad2      	subs	r2, r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Setup a new transmit timeout.  */
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800e534:	e08e      	b.n	800e654 <_nx_tcp_socket_state_ack_check+0x5b0>
        else
        {

            /* The transmit list is now cleared, just set the head and tail pointers to
               NULL.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  NX_NULL;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

            /* Clear the transmit queue count.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Determine if a disconnect FIN has been sent from this side of the connection.  */
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e552:	2b07      	cmp	r3, #7
 800e554:	d007      	beq.n	800e566 <_nx_tcp_socket_state_ack_check+0x4c2>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800e55a:	2b09      	cmp	r3, #9
 800e55c:	d003      	beq.n	800e566 <_nx_tcp_socket_state_ack_check+0x4c2>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800e562:	2b0b      	cmp	r3, #11
 800e564:	d10a      	bne.n	800e57c <_nx_tcp_socket_state_ack_check+0x4d8>
            {

                /* Yes, setup timeout such that the FIN can be retried if it is lost.  */
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800e57a:	e007      	b.n	800e58c <_nx_tcp_socket_state_ack_check+0x4e8>
            }
            else if (socket_ptr -> nx_tcp_socket_tx_window_advertised != 0)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e580:	2b00      	cmp	r3, #0
 800e582:	d067      	beq.n	800e654 <_nx_tcp_socket_state_ack_check+0x5b0>
            {

                /* Otherwise, a FIN has not been sent, simply clear the transmit timeout.  */
                socket_ptr -> nx_tcp_socket_timeout =  0;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        }

        /* Now walk through the packets to release and set them
           free.  */
        while (packet_release_count--)
 800e58c:	e062      	b.n	800e654 <_nx_tcp_socket_state_ack_check+0x5b0>
        {

            /* Use the previous pointer as the release pointer.  */
            previous_ptr =  search_ptr;
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	637b      	str	r3, [r7, #52]	; 0x34

            /* Move to the next packet in the queue before we clip the
               next pointer.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	6a1b      	ldr	r3, [r3, #32]
 800e596:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Set the packet to allocated to indicate it is no longer part of the TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 800e598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e59a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800e59e:	621a      	str	r2, [r3, #32]
               the packet occurred prior to receiving the ACK. If so, the packet could be
               in an ARP queue or in a driver queue waiting for transmission so we can't
               release it directly at this point.  The driver or the ARP processing will
               release it when finished.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (previous_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800e5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e5a8:	d125      	bne.n	800e5f6 <_nx_tcp_socket_state_ack_check+0x552>

                /* Yes, the driver has already released the packet.  */

                /* Open up the transmit window. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr = (NX_TCP_HEADER *)previous_ptr -> nx_packet_prepend_ptr;
 800e5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	63fb      	str	r3, [r7, #60]	; 0x3c

                temp = search_header_ptr -> nx_tcp_header_word_3;
 800e5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b8:	ba1b      	rev	r3, r3
 800e5ba:	633b      	str	r3, [r7, #48]	; 0x30
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5be:	0f1b      	lsrs	r3, r3, #28
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	61bb      	str	r3, [r7, #24]
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > (previous_ptr -> nx_packet_length - header_length))
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	1acb      	subs	r3, r1, r3
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d909      	bls.n	800e5e8 <_nx_tcp_socket_state_ack_check+0x544>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= previous_ptr -> nx_packet_length - header_length;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5dc:	69b9      	ldr	r1, [r7, #24]
 800e5de:	1acb      	subs	r3, r1, r3
 800e5e0:	441a      	add	r2, r3
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	65da      	str	r2, [r3, #92]	; 0x5c
 800e5e6:	e002      	b.n	800e5ee <_nx_tcp_socket_state_ack_check+0x54a>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	65da      	str	r2, [r3, #92]	; 0x5c
                }
                /* Release the packet.  */
                _nx_packet_release(previous_ptr);
 800e5ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5f0:	f7fd fc80 	bl	800bef4 <_nx_packet_release>
 800e5f4:	e02e      	b.n	800e654 <_nx_tcp_socket_state_ack_check+0x5b0>
            else
            {

                /* No, the driver has not released the packet.  */
                /* Open up the transmit window. */
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 800e5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                       previous_ptr -> nx_packet_ip_header_length);
 800e5fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5fc:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 800e600:	4413      	add	r3, r2
 800e602:	63fb      	str	r3, [r7, #60]	; 0x3c

                temp = search_header_ptr -> nx_tcp_header_word_3;
 800e604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800e60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60c:	ba1b      	rev	r3, r3
 800e60e:	633b      	str	r3, [r7, #48]	; 0x30
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e612:	0f1b      	lsrs	r3, r3, #28
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	61bb      	str	r3, [r7, #24]
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800e618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)(previous_ptr -> nx_packet_prepend_ptr))));
 800e61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 800e622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e624:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800e62a:	4413      	add	r3, r2
 800e62c:	613b      	str	r3, [r7, #16]
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > tcp_payload_length)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e632:	693a      	ldr	r2, [r7, #16]
 800e634:	429a      	cmp	r2, r3
 800e636:	d206      	bcs.n	800e646 <_nx_tcp_socket_state_ack_check+0x5a2>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= tcp_payload_length;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	65da      	str	r2, [r3, #92]	; 0x5c
 800e644:	e002      	b.n	800e64c <_nx_tcp_socket_state_ack_check+0x5a8>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	65da      	str	r2, [r3, #92]	; 0x5c
                }

                /* Let driver release the packet.  */
                previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = ((NX_PACKET *)NX_PACKET_ALLOCATED);
 800e64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e64e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800e652:	621a      	str	r2, [r3, #32]
        while (packet_release_count--)
 800e654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e656:	1e5a      	subs	r2, r3, #1
 800e658:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d197      	bne.n	800e58e <_nx_tcp_socket_state_ack_check+0x4ea>
            }
        }

        if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e664:	2b01      	cmp	r3, #1
 800e666:	d107      	bne.n	800e678 <_nx_tcp_socket_state_ack_check+0x5d4>
        {

            /* Only partial data are ACKed. Retransmit packet immediately. */
            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_FALSE);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e66e:	2200      	movs	r2, #0
 800e670:	6879      	ldr	r1, [r7, #4]
 800e672:	4618      	mov	r0, r3
 800e674:	f7ff fb5e 	bl	800dd34 <_nx_tcp_socket_retransmit>
        }

        return(NX_TRUE);
 800e678:	2301      	movs	r3, #1
 800e67a:	e000      	b.n	800e67e <_nx_tcp_socket_state_ack_check+0x5da>
    else
    {

        /* The ACK bit is off drop the segment and return.  */
        /* RFC793, Section3.9, Page72.  */
        return(NX_FALSE);
 800e67c:	2300      	movs	r3, #0
    }
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3740      	adds	r7, #64	; 0x40
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
	...

0800e688 <_nx_tcp_socket_state_closing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_closing(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d029      	beq.n	800e6f2 <_nx_tcp_socket_state_closing+0x6a>
    {

        /* If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	689a      	ldr	r2, [r3, #8]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d123      	bne.n	800e6f2 <_nx_tcp_socket_state_closing+0x6a>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	685a      	ldr	r2, [r3, #4]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d11d      	bne.n	800e6f2 <_nx_tcp_socket_state_closing+0x6a>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Set the socket state to TIMED WAIT now.  */
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	220a      	movs	r2, #10
 800e6ba:	639a      	str	r2, [r3, #56]	; 0x38

            /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800e6bc:	4b0f      	ldr	r3, [pc, #60]	; (800e6fc <_nx_tcp_socket_state_closing+0x74>)
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d006      	beq.n	800e6de <_nx_tcp_socket_state_closing+0x56>
            {

                /* Resume the thread suspended for the disconnect.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 fec7 	bl	800f46c <_nx_tcp_socket_thread_resume>
            }

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d004      	beq.n	800e6f2 <_nx_tcp_socket_state_closing+0x6a>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	4798      	blx	r3
#endif
        }

        /* Ignore the segment.  According to RFC 793, Section 3.9, Page 73.  */
    }
}
 800e6f2:	bf00      	nop
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	240022f8 	.word	0x240022f8

0800e700 <_nx_tcp_socket_state_data_trim>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim(NX_PACKET *packet_ptr, ULONG amount)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
ULONG      bytes_to_keep;
NX_PACKET *work_ptr;

    if (amount >= packet_ptr -> nx_packet_length)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70e:	683a      	ldr	r2, [r7, #0]
 800e710:	429a      	cmp	r2, r3
 800e712:	d23c      	bcs.n	800e78e <_nx_tcp_socket_state_data_trim+0x8e>
    {
        /* Invalid input. */
        return;
    }

    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	617b      	str	r3, [r7, #20]

    packet_ptr -> nx_packet_length = bytes_to_keep;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	697a      	ldr	r2, [r7, #20]
 800e722:	625a      	str	r2, [r3, #36]	; 0x24

    work_ptr = packet_ptr;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the "bytes_to_keep" amount. */
    while (work_ptr)
 800e728:	e02d      	b.n	800e786 <_nx_tcp_socket_state_data_trim+0x86>
    {

    NX_PACKET *tmp_ptr;

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	68da      	ldr	r2, [r3, #12]
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	1ad2      	subs	r2, r2, r3
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	429a      	cmp	r2, r3
 800e738:	da0c      	bge.n	800e754 <_nx_tcp_socket_state_data_trim+0x54>
        {

            /*lint -e{923} suppress cast of pointer to ULONG.  */
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	461a      	mov	r2, r3
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	697a      	ldr	r2, [r7, #20]
 800e748:	4413      	add	r3, r2
 800e74a:	617b      	str	r3, [r7, #20]

            work_ptr = work_ptr -> nx_packet_next;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	613b      	str	r3, [r7, #16]

            continue;
 800e752:	e018      	b.n	800e786 <_nx_tcp_socket_state_data_trim+0x86>
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* This is the last packet. */
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	689a      	ldr	r2, [r3, #8]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	441a      	add	r2, r3
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Free the rest of the packet chain. */
        tmp_ptr = work_ptr -> nx_packet_next;
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	60fb      	str	r3, [r7, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	2200      	movs	r2, #0
 800e76a:	605a      	str	r2, [r3, #4]
        work_ptr = tmp_ptr;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	613b      	str	r3, [r7, #16]

        if (work_ptr)
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d007      	beq.n	800e786 <_nx_tcp_socket_state_data_trim+0x86>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800e77c:	621a      	str	r2, [r3, #32]

            _nx_packet_release(work_ptr);
 800e77e:	6938      	ldr	r0, [r7, #16]
 800e780:	f7fd fbb8 	bl	800bef4 <_nx_packet_release>

            /* All done. Break out of the while loop and return. */
            break;
 800e784:	e004      	b.n	800e790 <_nx_tcp_socket_state_data_trim+0x90>
    while (work_ptr)
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1ce      	bne.n	800e72a <_nx_tcp_socket_state_data_trim+0x2a>
 800e78c:	e000      	b.n	800e790 <_nx_tcp_socket_state_data_trim+0x90>
        return;
 800e78e:	bf00      	nop
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */
}
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <_nx_tcp_socket_state_data_trim_front>:
/*                                            verified memmove use cases, */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim_front(NX_PACKET *packet_ptr, ULONG amount)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b084      	sub	sp, #16
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	6039      	str	r1, [r7, #0]
NX_PACKET *work_ptr = packet_ptr;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	60fb      	str	r3, [r7, #12]
ULONG      work_length;

    if (amount >= packet_ptr -> nx_packet_length || amount == 0)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d263      	bcs.n	800e876 <_nx_tcp_socket_state_data_trim_front+0xe0>
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d060      	beq.n	800e876 <_nx_tcp_socket_state_data_trim_front+0xe0>
        /* Invalid input. */
        return;
    }

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= amount;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	1ad2      	subs	r2, r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Move prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	689b      	ldr	r3, [r3, #8]
 800e7c4:	f103 0214 	add.w	r2, r3, #20
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	609a      	str	r2, [r3, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the amount. */
    while (amount)
 800e7cc:	e049      	b.n	800e862 <_nx_tcp_socket_state_data_trim_front+0xcc>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Compute the size of the data portion work_ptr.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	60bb      	str	r3, [r7, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
        if (amount > work_length)
 800e7dc:	683a      	ldr	r2, [r7, #0]
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d91e      	bls.n	800e822 <_nx_tcp_socket_state_data_trim_front+0x8c>
        {

            /* All data in work_ptr need to be trimmed.  */
            if (work_ptr == packet_ptr)
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d104      	bne.n	800e7f6 <_nx_tcp_socket_state_data_trim_front+0x60>
            {

                /* This packet is the header of packet chain.  */
                /* Clear TCP data in this packet.  */
                work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	689a      	ldr	r2, [r3, #8]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	60da      	str	r2, [r3, #12]
 800e7f4:	e00d      	b.n	800e812 <_nx_tcp_socket_state_data_trim_front+0x7c>
            else
            {

                /* This packet is not the first packet.  */
                /* Remove work_ptr from packet chain.  */
                packet_ptr -> nx_packet_next = work_ptr -> nx_packet_next;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	685a      	ldr	r2, [r3, #4]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	605a      	str	r2, [r3, #4]

                /* Disconnect work_ptr from the rest of the packet chain. */
                work_ptr -> nx_packet_next = NX_NULL;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	605a      	str	r2, [r3, #4]

                /* Mark the packet as ALLOCATED. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800e80a:	621a      	str	r2, [r3, #32]

                _nx_packet_release(work_ptr);
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f7fd fb71 	bl	800bef4 <_nx_packet_release>
            }
            /* Reduce the amount being trimmed.  */
            amount -= work_length;
 800e812:	683a      	ldr	r2, [r7, #0]
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	603b      	str	r3, [r7, #0]

            /* Move to the next packet. */
            work_ptr = packet_ptr -> nx_packet_next;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	e01f      	b.n	800e862 <_nx_tcp_socket_state_data_trim_front+0xcc>
        else
        {

            /* This is the last packet to trim.  */

            if (work_ptr == packet_ptr)
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	429a      	cmp	r2, r3
 800e828:	d113      	bne.n	800e852 <_nx_tcp_socket_state_data_trim_front+0xbc>
            {
#endif /* NX_DISABLE_PACKET_CHAIN */

                /* For the first packet, move data towards the beginning
                   of the packet, right after TCP header.  */
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6898      	ldr	r0, [r3, #8]
                        packet_ptr -> nx_packet_prepend_ptr + amount,
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	689a      	ldr	r2, [r3, #8]
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	18d1      	adds	r1, r2, r3
                        work_length - amount);
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	1ad3      	subs	r3, r2, r3
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 800e83c:	461a      	mov	r2, r3
 800e83e:	f006 ff3d 	bl	80156bc <memmove>
                packet_ptr -> nx_packet_append_ptr -= amount;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	68da      	ldr	r2, [r3, #12]
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	425b      	negs	r3, r3
 800e84a:	441a      	add	r2, r3
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	60da      	str	r2, [r3, #12]
 800e850:	e005      	b.n	800e85e <_nx_tcp_socket_state_data_trim_front+0xc8>
            }
            else
            {

                /* Advance nx_packet_prepend_ptr to where the usable data starts. */
                work_ptr -> nx_packet_prepend_ptr += amount;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	689a      	ldr	r2, [r3, #8]
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	441a      	add	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	609a      	str	r2, [r3, #8]
            }

            /* Cut down amount*/
            amount = 0;
 800e85e:	2300      	movs	r3, #0
 800e860:	603b      	str	r3, [r7, #0]
    while (amount)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1b2      	bne.n	800e7ce <_nx_tcp_socket_state_data_trim_front+0x38>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Restore prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr -= sizeof(NX_TCP_HEADER);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	f1a3 0214 	sub.w	r2, r3, #20
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	609a      	str	r2, [r3, #8]
 800e874:	e000      	b.n	800e878 <_nx_tcp_socket_state_data_trim_front+0xe2>
        return;
 800e876:	bf00      	nop
}
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
	...

0800e880 <_nx_tcp_socket_state_data_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_data_check(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b096      	sub	sp, #88	; 0x58
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
ULONG          search_begin_sequence;
ULONG          search_end_sequence;
ULONG          original_rx_sequence;
ULONG          trim_data_length;
TX_THREAD     *thread_ptr;
ULONG          acked_packets = 0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	63bb      	str	r3, [r7, #56]	; 0x38
UINT           need_ack = NX_FALSE;
 800e88e:	2300      	movs	r3, #0
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* NX_ENABLE_LOW_WATERMARK */
#if ((!defined(NX_DISABLE_TCP_INFO)) || defined(TX_ENABLE_EVENT_TRACE))
NX_IP         *ip_ptr;

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e898:	633b      	str	r3, [r7, #48]	; 0x30
#endif


    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine the size of the TCP header.  */
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	0f1b      	lsrs	r3, r3, #28
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Record the original rx_sequence. */
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the begin sequence of this packet. */
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Calculate the data length in the packet.  */
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the end sequence of this packet. The end sequence is one byte to the last byte in this packet. */
    packet_end_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8c6:	4413      	add	r3, r2
 800e8c8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Trim the data that out of the receive window, make sure all data are in receive window.  */
    if (packet_data_length)
 800e8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d03a      	beq.n	800e946 <_nx_tcp_socket_state_data_check+0xc6>
    {

        /* Step1. trim the data on the left side of the receive window.  */
        if (((INT)socket_ptr -> nx_tcp_socket_rx_sequence - (INT)packet_begin_sequence) > 0)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	dd16      	ble.n	800e90c <_nx_tcp_socket_state_data_check+0x8c>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8e4:	1ad3      	subs	r3, r2, r3
 800e8e6:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim_front(packet_ptr, trim_data_length);
 800e8e8:	6a39      	ldr	r1, [r7, #32]
 800e8ea:	6838      	ldr	r0, [r7, #0]
 800e8ec:	f7ff ff53 	bl	800e796 <_nx_tcp_socket_state_data_trim_front>

            /* Fix the sequence of this packet. */
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 800e8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f2:	685a      	ldr	r2, [r3, #4]
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	441a      	add	r2, r3
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	605a      	str	r2, [r3, #4]

            /* Update the data length and begin sequence.  */
            packet_data_length -= trim_data_length;
 800e8fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8fe:	6a3b      	ldr	r3, [r7, #32]
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	643b      	str	r3, [r7, #64]	; 0x40
            packet_begin_sequence += trim_data_length;
 800e904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e906:	6a3b      	ldr	r3, [r7, #32]
 800e908:	4413      	add	r3, r2
 800e90a:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Step2. trim the data on the right side of the receive window.  */
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 800e90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e912:	1a9b      	subs	r3, r3, r2
             (INT)socket_ptr -> nx_tcp_socket_rx_window_current) > 0)
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	6f52      	ldr	r2, [r2, #116]	; 0x74
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 800e918:	1a9b      	subs	r3, r3, r2
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	dd13      	ble.n	800e946 <_nx_tcp_socket_state_data_check+0xc6>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e926:	4413      	add	r3, r2
 800e928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim(packet_ptr, trim_data_length);
 800e92e:	6a39      	ldr	r1, [r7, #32]
 800e930:	6838      	ldr	r0, [r7, #0]
 800e932:	f7ff fee5 	bl	800e700 <_nx_tcp_socket_state_data_trim>

            /* Update the data length and end sequence.  */
            packet_data_length -= trim_data_length;
 800e936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e938:	6a3b      	ldr	r3, [r7, #32]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	643b      	str	r3, [r7, #64]	; 0x40
            packet_end_sequence -= trim_data_length;
 800e93e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e940:	6a3b      	ldr	r3, [r7, #32]
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Determine if the packet has the FIN bit set to signal a disconnect.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d009      	beq.n	800e966 <_nx_tcp_socket_state_data_check+0xe6>
    {

        /* Setup the FIN sequence number that we need to look at.  */
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	685a      	ldr	r2, [r3, #4]
 800e956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e958:	441a      	add	r2, r3
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Indicate that the FIN sequence is now valid.  Once the receive chain is complete
           we will process (ACK) the FIN command which is part of a disconnect started by the
           other side of the connection.  */
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_FIN_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
    }

    /* Compute the amount of payload data in this packet. */
    if (packet_data_length == 0)
 800e966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d11d      	bne.n	800e9a8 <_nx_tcp_socket_state_data_check+0x128>
    {
        /* This packet does not contain TCP data payload.  */

        /* Check for invalid sequence number.  */
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e970:	2b05      	cmp	r3, #5
 800e972:	d117      	bne.n	800e9a4 <_nx_tcp_socket_state_data_check+0x124>
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d112      	bne.n	800e9a4 <_nx_tcp_socket_state_data_check+0x124>
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e984:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 800e986:	429a      	cmp	r2, r3
 800e988:	d00c      	beq.n	800e9a4 <_nx_tcp_socket_state_data_check+0x124>
            ((socket_ptr -> nx_tcp_socket_rx_sequence - 1) != tcp_header_ptr -> nx_tcp_sequence_number))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e98e:	1e5a      	subs	r2, r3, #1
 800e990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e992:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 800e994:	429a      	cmp	r2, r3
 800e996:	d005      	beq.n	800e9a4 <_nx_tcp_socket_state_data_check+0x124>
        {

            /* Send an immediate ACK.  */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7fe fc7a 	bl	800d298 <_nx_tcp_packet_send_ack>
        }

        /* This packet does not have data, so return false. */
        return(NX_FALSE);
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	e29e      	b.n	800eee6 <_nx_tcp_socket_state_data_check+0x666>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Ensure the next pointer in the packet is set to NULL, which will indicate to the
       receive logic that it is not yet part of a contiguous stream.  */
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	61da      	str	r2, [r3, #28]

    /* Otherwise, the packet is within the receive window so continue processing
       the incoming TCP data.  */

    /* Pickup the tail pointer of the receive queue.  */
    search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e9b4:	657b      	str	r3, [r7, #84]	; 0x54

    /* Check to see if the tail pointer is part of a contiguous stream.  */
    if (search_ptr)
 800e9b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d010      	beq.n	800e9de <_nx_tcp_socket_state_data_check+0x15e>
    {

        /* Setup a pointer to header of this packet in the sent list.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800e9bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	61fb      	str	r3, [r7, #28]

        /* Determine the size of the search TCP header.  */
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	0f1b      	lsrs	r3, r3, #28
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	61bb      	str	r3, [r7, #24]

        /* Now see if the current sequence number accounts for the last packet.  */
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d4:	441a      	add	r2, r3
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9dc:	e002      	b.n	800e9e4 <_nx_tcp_socket_state_data_check+0x164>
    else
    {

        /* Set the sequence number to the socket's receive sequence if there isn't a receive
           packet on the queue.  */
        search_end_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_ENABLE_LOW_WATERMARK */

    /* Determine if we have a simple case of TCP data coming in the correct order.  This means
       the socket's sequence number matches the incoming packet sequence number and the last packet's
       data on the socket's receive queue (if any) matches the current sequence number.  */
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 800e9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e6:	685a      	ldr	r2, [r3, #4]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d132      	bne.n	800ea56 <_nx_tcp_socket_state_data_check+0x1d6>
        (search_end_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 800e9f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d12d      	bne.n	800ea56 <_nx_tcp_socket_state_data_check+0x1d6>
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Mark the packet as ready. This is done to simplify the logic in socket receive.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800ea00:	61da      	str	r2, [r3, #28]
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* Place the packet on the receive queue.  Search pointer still points to the tail packet on
               the queue.  */
            if (search_ptr)
 800ea02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d007      	beq.n	800ea18 <_nx_tcp_socket_state_data_check+0x198>
            {

                /* Nonempty receive queue, add packet to the end of the receive queue.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  packet_ptr;
 800ea08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	621a      	str	r2, [r3, #32]

                /* Update the tail of the receive queue.  */
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800ea16:	e00b      	b.n	800ea30 <_nx_tcp_socket_state_data_check+0x1b0>
            }
            else
            {

                /* Empty receive queue.  Set both the head and the tail pointers this packet.  */
                socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	683a      	ldr	r2, [r7, #0]
 800ea1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Setup a new delayed ACK timeout.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800ea28:	4b8a      	ldr	r3, [pc, #552]	; (800ec54 <_nx_tcp_socket_state_data_check+0x3d4>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Increment the receive TCP packet count.  */
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800ea44:	621a      	str	r2, [r3, #32]

            /* Calculate the next sequence number.  */
            socket_ptr -> nx_tcp_socket_rx_sequence =  packet_end_sequence;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea4a:	641a      	str	r2, [r3, #64]	; 0x40

            /* All packets can be acked. */
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ea52:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea54:	e147      	b.n	800ece6 <_nx_tcp_socket_state_data_check+0x466>
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* End of the simple case: add new packet towards the end of the recv queue.
           All packets in the receive queue are in sequence. */
    }
    else if (socket_ptr -> nx_tcp_socket_receive_queue_head == NX_NULL)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d11a      	bne.n	800ea96 <_nx_tcp_socket_state_data_check+0x216>
        if (drop_packet == NX_FALSE)
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea64:	4619      	mov	r1, r3
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f7fe fc16 	bl	800d298 <_nx_tcp_packet_send_ack>
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* There are no packets chained on the receive queue.  Simply add the
               new packet to the receive queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	683a      	ldr	r2, [r7, #0]
 800ea78:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Increase the receive queue count. */
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Setup a new delayed ACK timeout.  */
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800ea84:	4b73      	ldr	r3, [pc, #460]	; (800ec54 <_nx_tcp_socket_state_data_check+0x3d4>)
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	649a      	str	r2, [r3, #72]	; 0x48

            /* Mark the packet as being part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800ea92:	621a      	str	r2, [r3, #32]
 800ea94:	e127      	b.n	800ece6 <_nx_tcp_socket_state_data_check+0x466>

        /* Go through the received packet chain, and locate the first packet that the
           packet_begin_sequence is to the right of the end of it. */

        /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
        if (((INT)packet_begin_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) > 0)
 800ea96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ea9c:	1a9b      	subs	r3, r3, r2
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	dd05      	ble.n	800eaae <_nx_tcp_socket_state_data_check+0x22e>
        {
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7fe fbf5 	bl	800d298 <_nx_tcp_packet_send_ack>
        }

        /* At this point, it is guaranteed that the receive queue contains packets. */
        search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800eab4:	657b      	str	r3, [r7, #84]	; 0x54

        previous_ptr = NX_NULL;
 800eab6:	2300      	movs	r3, #0
 800eab8:	653b      	str	r3, [r7, #80]	; 0x50

        while (search_ptr)
 800eaba:	e0ae      	b.n	800ec1a <_nx_tcp_socket_state_data_check+0x39a>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 800eabc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eabe:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800eac2:	d102      	bne.n	800eaca <_nx_tcp_socket_state_data_check+0x24a>
            {
                /* We hit the end of the receive queue. */
                search_ptr = NX_NULL;
 800eac4:	2300      	movs	r3, #0
 800eac6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Terminate the out-of-order search.  */
                break;
 800eac8:	e0ad      	b.n	800ec26 <_nx_tcp_socket_state_data_check+0x3a6>
            }

            /* Setup a pointer to header of this packet in the receive list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800eaca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	61fb      	str	r3, [r7, #28]

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	617b      	str	r3, [r7, #20]

            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	0f1b      	lsrs	r3, r3, #28
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	62bb      	str	r3, [r7, #40]	; 0x28

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 800eae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	441a      	add	r2, r3
 800eae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	63fb      	str	r3, [r7, #60]	; 0x3c
             *        In this configuration, the incoming packet is completely to the right of      *
             *        search_ptr.  Move to the next search packet.                                  *
             *                                                                                      *
             ****************************************************************************************/
            /* packet_ptr is to the right of search_ptr */
            if (((INT)(packet_begin_sequence - search_end_sequence)) >= 0)
 800eaee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	db05      	blt.n	800eb04 <_nx_tcp_socket_state_data_check+0x284>
            {
                /* Move on to the next packet. */
                previous_ptr = search_ptr;
 800eaf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eafa:	653b      	str	r3, [r7, #80]	; 0x50

                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800eafc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eafe:	6a1b      	ldr	r3, [r3, #32]
 800eb00:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search */
                continue;
 800eb02:	e08a      	b.n	800ec1a <_nx_tcp_socket_state_data_check+0x39a>
             *              SSSSSSSSS                                                               *
             *        In this configuration, the incoming packet is completely to the left of       *
             *        search_ptr.  Incoming packet needs to be inserted in front of search ptr.     *
             *                                                                                      *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_end_sequence)) >= 0)
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb08:	1ad3      	subs	r3, r2, r3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f280 808a 	bge.w	800ec24 <_nx_tcp_socket_state_data_check+0x3a4>
             *        to search for contigous data, therefore no need to wake up user thread.       *
             *        Howerver may need to send out ACK if new packet is to the right of the seq    *
             *        number.                                                                       *
             *                                                                                      *
             ****************************************************************************************/
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 800eb10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	db0c      	blt.n	800eb34 <_nx_tcp_socket_state_data_check+0x2b4>
                (((INT)(search_end_sequence - packet_end_sequence)) >= 0))
 800eb1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb1e:	1ad3      	subs	r3, r2, r3
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	db07      	blt.n	800eb34 <_nx_tcp_socket_state_data_check+0x2b4>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb28:	4619      	mov	r1, r3
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7fe fbb4 	bl	800d298 <_nx_tcp_packet_send_ack>

                /* Since packet is not queued, return NX_FALSE so the caller releases the packet. */
                return(NX_FALSE);
 800eb30:	2300      	movs	r3, #0
 800eb32:	e1d8      	b.n	800eee6 <_nx_tcp_socket_state_data_check+0x666>
             *         Release existing packet, and insert new packet, then check for the next      *
             *         packet on the chain.  The next search may yield case (5).  Need to check     *
             *         for contingous data, may need to send ACK.                                   *
             *                                                                                      *
            ****************************************************************************************/
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	db3a      	blt.n	800ebb4 <_nx_tcp_socket_state_data_check+0x334>
                (((INT)(packet_end_sequence - search_end_sequence) >= 0)))
 800eb3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb42:	1ad3      	subs	r3, r2, r3
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	db35      	blt.n	800ebb4 <_nx_tcp_socket_state_data_check+0x334>
            {
            NX_PACKET *tmp_ptr;
                /* Release the search_ptr, and move to the next packet on the chain. */
                tmp_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800eb48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb4a:	6a1b      	ldr	r3, [r3, #32]
 800eb4c:	613b      	str	r3, [r7, #16]

                /* Mark the packet as no longer being part of the TCP queue. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800eb4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb50:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800eb54:	621a      	str	r2, [r3, #32]

                /* Decrease the packet queue count */
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800eb5c:	1e5a      	subs	r2, r3, #1
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Adjust the receive window. */

                /* Release the search packet. */
                _nx_packet_release(search_ptr);
 800eb64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800eb66:	f7fd f9c5 	bl	800bef4 <_nx_packet_release>

#ifndef NX_DISABLE_TCP_INFO
                /* The new packet has been admitted to the receive queue. */

                /* Increment the TCP packet receive count and bytes received count.  */
                ip_ptr -> nx_ip_tcp_packets_received--;
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800eb70:	1e5a      	subs	r2, r3, #1
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - search_begin_sequence);
 800eb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800eb7e:	6979      	ldr	r1, [r7, #20]
 800eb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb82:	1acb      	subs	r3, r1, r3
 800eb84:	441a      	add	r2, r3
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

                /* Increment the TCP packet receive count and bytes received count for the socket.  */
                socket_ptr -> nx_tcp_socket_packets_received--;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb92:	1e5a      	subs	r2, r3, #1
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - search_begin_sequence);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800eba0:	6979      	ldr	r1, [r7, #20]
 800eba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eba4:	1acb      	subs	r3, r1, r3
 800eba6:	441a      	add	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#endif /* NX_DISABLE_TCP_INFO */

                /* Move to the next packet.  (note: no need to update previous_ptr. */
                search_ptr = tmp_ptr;
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search. */
                continue;
 800ebb2:	e032      	b.n	800ec1a <_nx_tcp_socket_state_data_check+0x39a>
             *                   SSSSSSSSSSSS                                                       *
             *        In this configuration, remove data from the back of the new packet,  insert   *
             *        packet into the chain, and terminate the search.  Need to search for          *
             *        contigous data, may need to send out ACK.                                     *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_begin_sequence)) >= 0)
 800ebb4:	697a      	ldr	r2, [r7, #20]
 800ebb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	db0d      	blt.n	800ebda <_nx_tcp_socket_state_data_check+0x35a>
            {

                _nx_tcp_socket_state_data_trim(packet_ptr, (packet_end_sequence - search_begin_sequence));
 800ebbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	1ad3      	subs	r3, r2, r3
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	6838      	ldr	r0, [r7, #0]
 800ebc8:	f7ff fd9a 	bl	800e700 <_nx_tcp_socket_state_data_trim>

                /* Update packet_data_length. */
                packet_data_length -= (packet_end_sequence - search_begin_sequence);
 800ebcc:	697a      	ldr	r2, [r7, #20]
 800ebce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebd4:	4413      	add	r3, r2
 800ebd6:	643b      	str	r3, [r7, #64]	; 0x40

                /* Now the packet should be chained before search_ptr. */

                break;
 800ebd8:	e025      	b.n	800ec26 <_nx_tcp_socket_state_data_check+0x3a6>
             *        insert the packet after the search packet and continue the search.  This may  *
             *        lead to case (2) and (3).                                                     *
             *                                                                                      *
             *                                                                                      *
             ***************************************************************************************/
            _nx_tcp_socket_state_data_trim(search_ptr, (ULONG)(search_end_sequence - packet_begin_sequence));
 800ebda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ebe4:	f7ff fd8c 	bl	800e700 <_nx_tcp_socket_state_data_trim>

#ifndef NX_DISABLE_TCP_INFO
            /* The new packet has been admitted to the receive queue. */

            /* Reduce the TCP bytes received count.  */
            ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - packet_begin_sequence);
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ebee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf2:	1acb      	subs	r3, r1, r3
 800ebf4:	441a      	add	r2, r3
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

            /* Reduce the TCP bytes received count for the socket.  */
            socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - packet_begin_sequence);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ec02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec06:	1acb      	subs	r3, r1, r3
 800ec08:	441a      	add	r2, r3
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#endif /* NX_DISABLE_TCP_INFO */

            /* Move to the next packet and continue; */
            previous_ptr = search_ptr;
 800ec10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec12:	653b      	str	r3, [r7, #80]	; 0x50
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ec14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec16:	6a1b      	ldr	r3, [r3, #32]
 800ec18:	657b      	str	r3, [r7, #84]	; 0x54
        while (search_ptr)
 800ec1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f47f af4d 	bne.w	800eabc <_nx_tcp_socket_state_data_check+0x23c>
 800ec22:	e000      	b.n	800ec26 <_nx_tcp_socket_state_data_check+0x3a6>
                break;
 800ec24:	bf00      	nop
        }   /* End of while (search_ptr) */

        /* At this point, the logic (within the while loop) finds a location where this packet should be inserted. */
        if (previous_ptr == NX_NULL)
 800ec26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d104      	bne.n	800ec36 <_nx_tcp_socket_state_data_check+0x3b6>
        {

            /* The packet needs to be inserted at the beginning of the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800ec34:	e002      	b.n	800ec3c <_nx_tcp_socket_state_data_check+0x3bc>
        }
        else
        {

            /* The packet needs to be inserted after previous_ptr. */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = packet_ptr;
 800ec36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	621a      	str	r2, [r3, #32]
        }

        if (search_ptr == NX_NULL)
 800ec3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10a      	bne.n	800ec58 <_nx_tcp_socket_state_data_check+0x3d8>
        {

            /* This packet is on the last one on the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	683a      	ldr	r2, [r7, #0]
 800ec46:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800ec50:	621a      	str	r2, [r3, #32]
 800ec52:	e004      	b.n	800ec5e <_nx_tcp_socket_state_data_check+0x3de>
 800ec54:	240022fc 	.word	0x240022fc
        }
        else
        {

            /* Chain search_ptr onto packet_ptr. */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = search_ptr;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec5c:	621a      	str	r2, [r3, #32]

        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

        /* Increment the receive TCP packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* End of the out-of-order search.  At this point, the packet has been inserted. */

        /* Now we need to figure out how much, if any, we can ACK.  */
        search_ptr =    socket_ptr -> nx_tcp_socket_receive_queue_head;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ec72:	657b      	str	r3, [r7, #84]	; 0x54

        /* Get the sequence number expected by the TCP receive socket. */
        expected_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec78:	64fb      	str	r3, [r7, #76]	; 0x4c
        do
        {

            /* Setup a pointer to header of this packet in the sent list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800ec7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec7c:	689b      	ldr	r3, [r3, #8]
 800ec7e:	61fb      	str	r3, [r7, #28]


            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	0f1b      	lsrs	r3, r3, #28
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	62bb      	str	r3, [r7, #40]	; 0x28

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	617b      	str	r3, [r7, #20]

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 800ec90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	441a      	add	r2, r3
 800ec98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	63fb      	str	r3, [r7, #60]	; 0x3c

            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 800ec9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	1ad3      	subs	r3, r2, r3
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	db1d      	blt.n	800ece4 <_nx_tcp_socket_state_data_check+0x464>
            {

                if ((INT)(search_end_sequence - expected_sequence) > 0)
 800eca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	dd0b      	ble.n	800ecca <_nx_tcp_socket_state_data_check+0x44a>
                {
                    /* Sequence number is within this packet.  Advance sequence number. */
                    expected_sequence = search_end_sequence;
 800ecb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    socket_ptr -> nx_tcp_socket_rx_sequence = expected_sequence;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecba:	641a      	str	r2, [r3, #64]	; 0x40

                    acked_packets++;
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	63bb      	str	r3, [r7, #56]	; 0x38

                    /* Mark this packet as ready for retrieval.  */
                    /*lint -e{923} suppress cast of ULONG to pointer.  */
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 800ecc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecc4:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800ecc8:	61da      	str	r2, [r3, #28]
                /* Expected number is to the left of search_ptr.   Get out of the do-while loop!  */
                break;
            }

            /* Move the search pointer to the next queued receive packet.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ecca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if we are at the end of the queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800ecd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecd2:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800ecd6:	d101      	bne.n	800ecdc <_nx_tcp_socket_state_data_check+0x45c>
            {

                /* At the end, set the search pointer to NULL.  */
                search_ptr =  NX_NULL;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	657b      	str	r3, [r7, #84]	; 0x54

                /* Get out of the loop!  */
                break;
            }
#endif /* NX_ENABLE_LOW_WATERMARK */
        } while (search_ptr);
 800ecdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1cb      	bne.n	800ec7a <_nx_tcp_socket_state_data_check+0x3fa>
 800ece2:	e000      	b.n	800ece6 <_nx_tcp_socket_state_data_check+0x466>
                break;
 800ece4:	bf00      	nop

#ifndef NX_DISABLE_TCP_INFO
    /* The new packet has been admitted to the receive queue. */

    /* Increment the TCP packet receive count and bytes received count.  */
    ip_ptr -> nx_ip_tcp_packets_received++;
 800ece6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    ip_ptr -> nx_ip_tcp_bytes_received += packet_data_length;
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ecfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecfc:	441a      	add	r2, r3
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* Increment the TCP packet receive count and bytes received count for the socket.  */
    socket_ptr -> nx_tcp_socket_packets_received++;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed0a:	1c5a      	adds	r2, r3, #1
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    socket_ptr -> nx_tcp_socket_bytes_received += packet_data_length;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ed18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1a:	441a      	add	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

    /* Check if the rx sequence number has been updated.  */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d011      	beq.n	800ed50 <_nx_tcp_socket_state_data_check+0x4d0>
    {

        /* Decrease the receive window size since rx_sequence is updated.  */
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed36:	1acb      	subs	r3, r1, r3
 800ed38:	441a      	add	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Update the rx_window_last_sent for SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98.  */
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed48:	1acb      	subs	r3, r1, r3
 800ed4a:	441a      	add	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifdef NX_TCP_MAX_OUT_OF_ORDER_PACKETS
    /* Does the count of out of order packets exceed the defined value? */
    if ((socket_ptr -> nx_tcp_socket_receive_queue_count - acked_packets) >
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ed56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	2b08      	cmp	r3, #8
 800ed5c:	f240 8089 	bls.w	800ee72 <_nx_tcp_socket_state_data_check+0x5f2>
        NX_TCP_MAX_OUT_OF_ORDER_PACKETS)
    {

        /* Yes it is. Remove the last packet in queue. */
        socket_ptr -> nx_tcp_socket_receive_queue_tail -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ed66:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800ed6a:	621a      	str	r2, [r3, #32]
        if (socket_ptr -> nx_tcp_socket_receive_queue_count > 1)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d91d      	bls.n	800edb2 <_nx_tcp_socket_state_data_check+0x532>
        {

            /* Find the previous packet of tail. */
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ed7c:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800ed7e:	e002      	b.n	800ed86 <_nx_tcp_socket_state_data_check+0x506>
            {
                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ed80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed82:	6a1b      	ldr	r3, [r3, #32]
 800ed84:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800ed86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed88:	6a1a      	ldr	r2, [r3, #32]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d1f5      	bne.n	800ed80 <_nx_tcp_socket_state_data_check+0x500>
            }

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fd f8aa 	bl	800bef4 <_nx_packet_release>

            /* Setup the tail packet. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = search_ptr;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eda4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 800eda8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edaa:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800edae:	621a      	str	r2, [r3, #32]
 800edb0:	e00d      	b.n	800edce <_nx_tcp_socket_state_data_check+0x54e>
        }
        else
        {

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fd f89b 	bl	800bef4 <_nx_packet_release>

            /* Clear the head and tail packets. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = NX_NULL;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = NX_NULL;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        }

        /* Decrease receive queue count. */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800edd4:	1e5a      	subs	r2, r3, #1
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    /* At this point, we can use the packet TCP header pointers since the received
       packet is already queued.  */

    /* Any packets for receving? */
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800eddc:	e049      	b.n	800ee72 <_nx_tcp_socket_state_data_check+0x5f2>
    {

        /* Setup a pointer to the first queued packet.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ede4:	603b      	str	r3, [r7, #0]
        /* Remove it from the queue.  */

        /* Simply update the head pointer of the queue.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	6a1a      	ldr	r2, [r3, #32]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Mark the packet as no longer being part of the TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800edf6:	621a      	str	r2, [r3, #32]

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	2200      	movs	r2, #0
 800edfc:	61da      	str	r2, [r3, #28]

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ee04:	1e5a      	subs	r2, r3, #1
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Adjust the packet for delivery to the suspended thread.  */

        /* Setup a pointer to the TCP header of this packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Calculate the header size for this packet.  */
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	0f1b      	lsrs	r3, r3, #28
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Adjust the packet prepend pointer and length to position past the TCP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	689a      	ldr	r2, [r3, #8]
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	441a      	add	r2, r3
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	1ad2      	subs	r2, r2, r3
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup a pointer to the first thread suspended on the receive queue.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ee3a:	60fb      	str	r3, [r7, #12]

        /* Place the packet pointer in the return pointer.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	601a      	str	r2, [r3, #0]

        /* Increase the receive window size.  */
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4c:	441a      	add	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	675a      	str	r2, [r3, #116]	; 0x74

        /* Remove the suspended thread from the list.  */

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee58:	1e5a      	subs	r2, r3, #1
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Decrement the acked_packets count. */
        acked_packets--;
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	3b01      	subs	r3, #1
 800ee64:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Resume thread.  */
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	33ec      	adds	r3, #236	; 0xec
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f000 fafd 	bl	800f46c <_nx_tcp_socket_thread_resume>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800ee72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d004      	beq.n	800ee82 <_nx_tcp_socket_state_data_check+0x602>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d1ad      	bne.n	800edde <_nx_tcp_socket_state_data_check+0x55e>
    }

    /* Is the queue empty?.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d107      	bne.n	800ee9c <_nx_tcp_socket_state_data_check+0x61c>
    {

        /* Yes. Set both head and tail pointers to NULL.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }

    /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
       RFC1122, Section4.2.3.3, Page97-98. */
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eea4:	1ad2      	subs	r2, r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eeaa:	085b      	lsrs	r3, r3, #1
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d301      	bcc.n	800eeb4 <_nx_tcp_socket_state_data_check+0x634>
    {

        /* Need to send ACK for window update.  */
        need_ack = NX_TRUE;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* If the incoming packet caused the sequence number to move forward,
       indicating the new piece of data is in order, in sequence, and valid for receiving. */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d009      	beq.n	800eed2 <_nx_tcp_socket_state_data_check+0x652>
    {
        /* Determine if there is a socket receive notification function specified.  */
        if (socket_ptr -> nx_tcp_receive_callback)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d004      	beq.n	800eed2 <_nx_tcp_socket_state_data_check+0x652>
        {

            /* Yes, notification is requested.  Call the application's receive notification
               function for this socket.  */
            (socket_ptr -> nx_tcp_receive_callback)(socket_ptr);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	4798      	blx	r3
            }
        }
#endif
    }

    if (need_ack == NX_TRUE)
 800eed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d105      	bne.n	800eee4 <_nx_tcp_socket_state_data_check+0x664>
    {

        /* Need to send ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eedc:	4619      	mov	r1, r3
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7fe f9da 	bl	800d298 <_nx_tcp_packet_send_ack>
    }

    /* Return true since the packet was queued.  */
    return(NX_TRUE);
 800eee4:	2301      	movs	r3, #1
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3758      	adds	r7, #88	; 0x58
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop

0800eef0 <_nx_tcp_socket_state_established>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_established(NX_TCP_SOCKET *socket_ptr)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
#if !defined(NX_DISABLE_TCP_INFO) || defined(TX_ENABLE_EVENT_TRACE)
NX_IP *ip_ptr;


    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800eefe:	60fb      	str	r3, [r7, #12]
#endif
    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d031      	beq.n	800ef6e <_nx_tcp_socket_state_established+0x7e>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d12b      	bne.n	800ef6e <_nx_tcp_socket_state_established+0x7e>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP disconnections count.  */
        ip_ptr -> nx_ip_tcp_disconnections++;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ef1c:	1c5a      	adds	r2, r3, #1
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSE_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* The FIN bit is set, we need to go into the finished state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2206      	movs	r2, #6
 800ef28:	639a      	str	r2, [r3, #56]	; 0x38

        /* Increment the received sequence.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef2e:	1c5a      	adds	r2, r3, #1
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Loop to release all threads suspended while trying to receive on the socket.  */
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800ef34:	e006      	b.n	800ef44 <_nx_tcp_socket_state_established+0x54>
        {

            /* Release the head of the receive suspension list. */
            _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe fc00 	bl	800d744 <_nx_tcp_receive_cleanup>
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1f3      	bne.n	800ef36 <_nx_tcp_socket_state_established+0x46>
        }

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef52:	4619      	mov	r1, r3
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7fe f99f 	bl	800d298 <_nx_tcp_packet_send_ack>

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d004      	beq.n	800ef6e <_nx_tcp_socket_state_established+0x7e>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	4798      	blx	r3
        }
    }
}
 800ef6e:	bf00      	nop
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
	...

0800ef78 <_nx_tcp_socket_state_fin_wait1>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait1(NX_TCP_SOCKET *socket_ptr)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]


    /* Determine if the peer has proper ACK number but FIN is not sent,
       move into the FIN WAIT 2 state and do nothing else.  */
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00c      	beq.n	800efa4 <_nx_tcp_socket_state_fin_wait1+0x2c>
        (socket_ptr -> nx_tcp_socket_fin_received == NX_FALSE))
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d107      	bne.n	800efa4 <_nx_tcp_socket_state_fin_wait1+0x2c>
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_FIN_WAIT_2, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* We have a legitimate ACK message.  Simply move into the WAIT FIN 2 state
           for the other side to finish its processing and disconnect.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2208      	movs	r2, #8
 800ef98:	639a      	str	r2, [r3, #56]	; 0x38

        /* Otherwise, simply clear the FIN timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800efa2:	e04e      	b.n	800f042 <_nx_tcp_socket_state_fin_wait1+0xca>
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d02f      	beq.n	800f00e <_nx_tcp_socket_state_fin_wait1+0x96>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d129      	bne.n	800f00e <_nx_tcp_socket_state_fin_wait1+0x96>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	220a      	movs	r2, #10
 800efbe:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800efc0:	4b22      	ldr	r3, [pc, #136]	; (800f04c <_nx_tcp_socket_state_fin_wait1+0xd4>)
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efce:	1c5a      	adds	r2, r3, #1
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efd8:	4619      	mov	r1, r3
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7fe f95c 	bl	800d298 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d006      	beq.n	800eff8 <_nx_tcp_socket_state_fin_wait1+0x80>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800eff0:	2100      	movs	r1, #0
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 fa3a 	bl	800f46c <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800effe:	2b00      	cmp	r3, #0
 800f000:	d01f      	beq.n	800f042 <_nx_tcp_socket_state_fin_wait1+0xca>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	4798      	blx	r3
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800f00c:	e019      	b.n	800f042 <_nx_tcp_socket_state_fin_wait1+0xca>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f014:	2b00      	cmp	r3, #0
 800f016:	d014      	beq.n	800f042 <_nx_tcp_socket_state_fin_wait1+0xca>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800f020:	429a      	cmp	r2, r3
 800f022:	d10e      	bne.n	800f042 <_nx_tcp_socket_state_fin_wait1+0xca>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSING, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the CLOSING state for simultaneous close situation.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2209      	movs	r2, #9
 800f028:	639a      	str	r2, [r3, #56]	; 0x38

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f038:	4619      	mov	r1, r3
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7fe f92c 	bl	800d298 <_nx_tcp_packet_send_ack>
    }
}
 800f040:	e7ff      	b.n	800f042 <_nx_tcp_socket_state_fin_wait1+0xca>
 800f042:	bf00      	nop
 800f044:	3708      	adds	r7, #8
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	240022f8 	.word	0x240022f8

0800f050 <_nx_tcp_socket_state_fin_wait2>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait2(NX_TCP_SOCKET *socket_ptr)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]


    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d02e      	beq.n	800f0c0 <_nx_tcp_socket_state_fin_wait2+0x70>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d128      	bne.n	800f0c0 <_nx_tcp_socket_state_fin_wait2+0x70>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	220a      	movs	r2, #10
 800f072:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime).  */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800f074:	4b14      	ldr	r3, [pc, #80]	; (800f0c8 <_nx_tcp_socket_state_fin_wait2+0x78>)
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f082:	1c5a      	adds	r2, r3, #1
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7fe f902 	bl	800d298 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d006      	beq.n	800f0ac <_nx_tcp_socket_state_fin_wait2+0x5c>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f000 f9e0 	bl	800f46c <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d004      	beq.n	800f0c0 <_nx_tcp_socket_state_fin_wait2+0x70>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	4798      	blx	r3
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	240022f8 	.word	0x240022f8

0800f0cc <_nx_tcp_socket_state_last_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_last_ack(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]

    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d01a      	beq.n	800f118 <_nx_tcp_socket_state_last_ack+0x4c>
    {

        /*   If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	689a      	ldr	r2, [r3, #8]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d114      	bne.n	800f118 <_nx_tcp_socket_state_last_ack+0x4c>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d10e      	bne.n	800f118 <_nx_tcp_socket_state_last_ack+0x4c>
        {

            /* Cleanup the transmission control block.  */
            _nx_tcp_socket_block_cleanup(socket_ptr);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7fe fbca 	bl	800d894 <_nx_tcp_socket_block_cleanup>

            /* Determine if we need to wake a thread suspended on the disconnection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f106:	2b00      	cmp	r3, #0
 800f108:	d006      	beq.n	800f118 <_nx_tcp_socket_state_last_ack+0x4c>
            {

                /* Resume suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f110:	2100      	movs	r1, #0
 800f112:	4618      	mov	r0, r3
 800f114:	f000 f9aa 	bl	800f46c <_nx_tcp_socket_thread_resume>
                (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
            }
#endif
        }
    }
}
 800f118:	bf00      	nop
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <_nx_tcp_socket_state_syn_received>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_received(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  If it is and
       if it is proper, move into the ESTABLISHED state.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f132:	2b00      	cmp	r3, #0
 800f134:	d04d      	beq.n	800f1d2 <_nx_tcp_socket_state_syn_received+0xb2>
    {

        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	689a      	ldr	r2, [r3, #8]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f13e:	429a      	cmp	r2, r3
 800f140:	d143      	bne.n	800f1ca <_nx_tcp_socket_state_syn_received+0xaa>
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Save the window size.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
                tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	b29a      	uxth	r2, r3
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	655a      	str	r2, [r3, #84]	; 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;

#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

            /* Set the initial slow start threshold to be the advertised window size. */
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	635a      	str	r2, [r3, #52]	; 0x34

            /* Set the initial congestion control window size. */
            /* Section 3.1, Page 5, RFC5681. */
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d004      	beq.n	800f168 <_nx_tcp_socket_state_syn_received+0x48>
            {

                /* Set the initial congestion control window size to be the mss. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a1a      	ldr	r2, [r3, #32]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	659a      	str	r2, [r3, #88]	; 0x58
 800f166:	e01d      	b.n	800f1a4 <_nx_tcp_socket_state_syn_received+0x84>
            }
            else
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6a1b      	ldr	r3, [r3, #32]
 800f16c:	009a      	lsls	r2, r3, #2
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	659a      	str	r2, [r3, #88]	; 0x58
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a1b      	ldr	r3, [r3, #32]
 800f176:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800f17a:	d306      	bcc.n	800f18a <_nx_tcp_socket_state_syn_received+0x6a>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6a1b      	ldr	r3, [r3, #32]
 800f184:	1ad2      	subs	r2, r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	659a      	str	r2, [r3, #88]	; 0x58
                }
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a1b      	ldr	r3, [r3, #32]
 800f18e:	f640 028e 	movw	r2, #2190	; 0x88e
 800f192:	4293      	cmp	r3, r2
 800f194:	d906      	bls.n	800f1a4 <_nx_tcp_socket_state_syn_received+0x84>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6a1b      	ldr	r3, [r3, #32]
 800f19e:	1ad2      	subs	r2, r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	659a      	str	r2, [r3, #88]	; 0x58
                }
            }

            /* Move into the ESTABLISHED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2205      	movs	r2, #5
 800f1a8:	639a      	str	r2, [r3, #56]	; 0x38
                socket_ptr -> nx_tcp_socket_keepalive_timeout =  NX_TCP_KEEPALIVE_INITIAL;
                socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
            }
#endif
            /* Update the value of nx_tcp_socket_rx_sequence_acked */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00a      	beq.n	800f1d2 <_nx_tcp_socket_state_syn_received+0xb2>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	33fc      	adds	r3, #252	; 0xfc
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 f952 	bl	800f46c <_nx_tcp_socket_thread_resume>

            /* Send the RST packet.  */
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
        }
    }
}
 800f1c8:	e003      	b.n	800f1d2 <_nx_tcp_socket_state_syn_received+0xb2>
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 800f1ca:	6839      	ldr	r1, [r7, #0]
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f7fe f9d3 	bl	800d578 <_nx_tcp_packet_send_rst>
}
 800f1d2:	bf00      	nop
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <_nx_tcp_socket_state_syn_sent>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_sent(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr, NX_PACKET *packet_ptr)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b084      	sub	sp, #16
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	60f8      	str	r0, [r7, #12]
 800f1e2:	60b9      	str	r1, [r7, #8]
 800f1e4:	607a      	str	r2, [r7, #4]
#ifndef TX_ENABLE_EVENT_TRACE
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Check if a RST is present. */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d019      	beq.n	800f226 <_nx_tcp_socket_state_syn_sent+0x4c>
    {

        /* Check if the ACK was acceptable. According to RFC 793, Section 3.9, Page 67.  */
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f000 80d2 	beq.w	800f3a4 <_nx_tcp_socket_state_syn_sent+0x1ca>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	689a      	ldr	r2, [r3, #8]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f208:	429a      	cmp	r2, r3
 800f20a:	f040 80cb 	bne.w	800f3a4 <_nx_tcp_socket_state_syn_sent+0x1ca>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f214:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800f218:	3201      	adds	r2, #1
 800f21a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f7fe fb65 	bl	800d8ee <_nx_tcp_socket_connection_reset>
        }

        /* Finished processing, simply return!  */
        return;
 800f224:	e0be      	b.n	800f3a4 <_nx_tcp_socket_state_syn_sent+0x1ca>
    }
    /* Determine if a valid SYN/ACK is present.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d05d      	beq.n	800f2ee <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d057      	beq.n	800f2ee <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	689a      	ldr	r2, [r3, #8]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f246:	429a      	cmp	r2, r3
 800f248:	d151      	bne.n	800f2ee <_nx_tcp_socket_state_syn_sent+0x114>
        /* Yes, this is a proper SYN/ACK message.  We need to send an ACK
           back the other direction before we go into the ESTABLISHED
           state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	1c5a      	adds	r2, r3, #1
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	b29a      	uxth	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	655a      	str	r2, [r3, #84]	; 0x54
        }

#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2200      	movs	r2, #0
 800f26a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f272:	2b00      	cmp	r3, #0
 800f274:	d004      	beq.n	800f280 <_nx_tcp_socket_state_syn_sent+0xa6>
        {

            /* Set the initial congestion control window size to be the mss. */
            socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6a1a      	ldr	r2, [r3, #32]
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	659a      	str	r2, [r3, #88]	; 0x58
 800f27e:	e01d      	b.n	800f2bc <_nx_tcp_socket_state_syn_sent+0xe2>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6a1b      	ldr	r3, [r3, #32]
 800f284:	009a      	lsls	r2, r3, #2
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	659a      	str	r2, [r3, #88]	; 0x58
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6a1b      	ldr	r3, [r3, #32]
 800f28e:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800f292:	d306      	bcc.n	800f2a2 <_nx_tcp_socket_state_syn_sent+0xc8>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6a1b      	ldr	r3, [r3, #32]
 800f29c:	1ad2      	subs	r2, r2, r3
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	659a      	str	r2, [r3, #88]	; 0x58
            }
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	6a1b      	ldr	r3, [r3, #32]
 800f2a6:	f640 028e 	movw	r2, #2190	; 0x88e
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d906      	bls.n	800f2bc <_nx_tcp_socket_state_syn_sent+0xe2>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	1ad2      	subs	r2, r2, r3
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	659a      	str	r2, [r3, #88]	; 0x58
            }
        }

        /* Send the ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	f7fd ffe8 	bl	800d298 <_nx_tcp_packet_send_ack>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the ESTABLISHED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2205      	movs	r2, #5
 800f2cc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Clear the socket timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
        }
#endif

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d062      	beq.n	800f3a6 <_nx_tcp_socket_state_syn_sent+0x1cc>
        {

            /* Resume the suspended thread.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	33fc      	adds	r3, #252	; 0xfc
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f000 f8c0 	bl	800f46c <_nx_tcp_socket_thread_resume>
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800f2ec:	e05b      	b.n	800f3a6 <_nx_tcp_socket_state_syn_sent+0x1cc>
        }
    }
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d043      	beq.n	800f382 <_nx_tcp_socket_state_syn_sent+0x1a8>
             (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)))
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800f302:	2b00      	cmp	r3, #0
 800f304:	d13d      	bne.n	800f382 <_nx_tcp_socket_state_syn_sent+0x1a8>

        /* Simultaneous Connection Synchronization,
           A SYN message was received.  We need to send both a SYN and ACK and move to the SYN RECEIVED state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	1c5a      	adds	r2, r3, #1
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	b29a      	uxth	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_rcv_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6a1b      	ldr	r3, [r3, #32]
 800f326:	009a      	lsls	r2, r3, #2
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	659a      	str	r2, [r3, #88]	; 0x58
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6a1b      	ldr	r3, [r3, #32]
 800f330:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800f334:	d306      	bcc.n	800f344 <_nx_tcp_socket_state_syn_sent+0x16a>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	1ad2      	subs	r2, r2, r3
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	659a      	str	r2, [r3, #88]	; 0x58
        }
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6a1b      	ldr	r3, [r3, #32]
 800f348:	f640 028e 	movw	r2, #2190	; 0x88e
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d906      	bls.n	800f35e <_nx_tcp_socket_state_syn_sent+0x184>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6a1b      	ldr	r3, [r3, #32]
 800f358:	1ad2      	subs	r2, r2, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2200      	movs	r2, #0
 800f362:	65da      	str	r2, [r3, #92]	; 0x5c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_SYN_RECEIVED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the SYN RECEIVED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2204      	movs	r2, #4
 800f368:	639a      	str	r2, [r3, #56]	; 0x38

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send the SYN packet.  */
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f376:	3b01      	subs	r3, #1
 800f378:	4619      	mov	r1, r3
 800f37a:	68f8      	ldr	r0, [r7, #12]
 800f37c:	f7fe f930 	bl	800d5e0 <_nx_tcp_packet_send_syn>
 800f380:	e011      	b.n	800f3a6 <_nx_tcp_socket_state_syn_sent+0x1cc>
    }
    /* Check for an invalid response to an attempted connection.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00b      	beq.n	800f3a6 <_nx_tcp_socket_state_syn_sent+0x1cc>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number != socket_ptr -> nx_tcp_socket_tx_sequence))
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f396:	429a      	cmp	r2, r3
 800f398:	d005      	beq.n	800f3a6 <_nx_tcp_socket_state_syn_sent+0x1cc>
        /* Invalid response was received, it is likely that the other side still
           thinks a previous connection is active.  Send a reset (RST) message to
           the other side to clear any previous connection.  */

        /* Send the RST packet.  */
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 800f39a:	68b9      	ldr	r1, [r7, #8]
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f7fe f8eb 	bl	800d578 <_nx_tcp_packet_send_rst>
 800f3a2:	e000      	b.n	800f3a6 <_nx_tcp_socket_state_syn_sent+0x1cc>
        return;
 800f3a4:	bf00      	nop
    }
}
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <_nx_tcp_socket_state_transmit_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_transmit_check(NX_TCP_SOCKET *socket_ptr)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]

ULONG tx_window_current;

    /* Now check to see if there is a thread suspended attempting to transmit.  */
    if (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d051      	beq.n	800f462 <_nx_tcp_socket_state_transmit_check+0xb6>
        /* Yes, a thread is suspended attempting to transmit when the transmit window
           is lower than its request size.  Determine if the current transmit window
           size can now accommodate the request.  */

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d919      	bls.n	800f3fe <_nx_tcp_socket_state_transmit_check+0x52>
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3ce:	60fb      	str	r3, [r7, #12]

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d003      	beq.n	800f3e0 <_nx_tcp_socket_state_transmit_check+0x34>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800f3dc:	2b02      	cmp	r3, #2
 800f3de:	d105      	bne.n	800f3ec <_nx_tcp_socket_state_transmit_check+0x40>
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6a1b      	ldr	r3, [r3, #32]
 800f3e4:	005b      	lsls	r3, r3, #1
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	60fb      	str	r3, [r7, #12]
            }

            /* Make sure the tx_window_current is less or equal to swnd. */
            if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_window_advertised)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d906      	bls.n	800f404 <_nx_tcp_socket_state_transmit_check+0x58>
            {
                tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3fa:	60fb      	str	r3, [r7, #12]
 800f3fc:	e002      	b.n	800f404 <_nx_tcp_socket_state_transmit_check+0x58>
            }
        }
        else
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f402:	60fb      	str	r3, [r7, #12]
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d905      	bls.n	800f41a <_nx_tcp_socket_state_transmit_check+0x6e>
        {
            tx_window_current -= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	e001      	b.n	800f41e <_nx_tcp_socket_state_transmit_check+0x72>
        }
        else    /* Set tx_window_current to zero. */
        {
            tx_window_current = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	60fb      	str	r3, [r7, #12]
        }


        /* Determine if the current transmit window (received from the connected socket)
           is large enough to handle the transmit.  */
        if ((tx_window_current) &&
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d01e      	beq.n	800f462 <_nx_tcp_socket_state_transmit_check+0xb6>
            (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        if ((tx_window_current) &&
 800f430:	429a      	cmp	r2, r3
 800f432:	d216      	bcs.n	800f462 <_nx_tcp_socket_state_transmit_check+0xb6>
        {

            /* Is NetX set up with a windows update callback? */
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d004      	beq.n	800f448 <_nx_tcp_socket_state_transmit_check+0x9c>
            {

                /* Yes; Call this function when there is a change in transmit windows size. */
                (socket_ptr -> nx_tcp_socket_window_update_notify)(socket_ptr);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	4798      	blx	r3
            }


            /* Decrement the suspension count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800f44e:	1e5a      	subs	r2, r3, #1
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

            /* Remove the suspended thread from the list.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	33f4      	adds	r3, #244	; 0xf4
 800f45a:	2100      	movs	r1, #0
 800f45c:	4618      	mov	r0, r3
 800f45e:	f000 f805 	bl	800f46c <_nx_tcp_socket_thread_resume>
        }
    }
}
 800f462:	bf00      	nop
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
	...

0800f46c <_nx_tcp_socket_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_resume(TX_THREAD **suspension_list_head, UINT status)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b088      	sub	sp, #32
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f476:	f3ef 8310 	mrs	r3, PRIMASK
 800f47a:	617b      	str	r3, [r7, #20]
    return(posture);
 800f47c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f47e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f480:	b672      	cpsid	i
    return(int_posture);
 800f482:	693b      	ldr	r3, [r7, #16]

TX_THREAD *thread_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800f484:	61fb      	str	r3, [r7, #28]

    /* Pickup the thread pointer.  */
    thread_ptr =  *suspension_list_head;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	61bb      	str	r3, [r7, #24]

    /* Determine if there still is a thread suspended.  */
    if (thread_ptr)
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d02c      	beq.n	800f4ec <_nx_tcp_socket_thread_resume+0x80>
    {

        /* Determine if there are anymore threads on the suspension list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f496:	69ba      	ldr	r2, [r7, #24]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d103      	bne.n	800f4a4 <_nx_tcp_socket_thread_resume+0x38>
        {

            /* Only this thread is on the suspension list.  Simply set the
               list head to NULL to reflect an empty suspension list.  */
            *suspension_list_head =  TX_NULL;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	e00d      	b.n	800f4c0 <_nx_tcp_socket_thread_resume+0x54>
        {

            /* More than one thread is on the suspension list, we need to
               adjust the link pointers and move the next entry to the
               front of the list.  */
            *suspension_list_head =  thread_ptr -> tx_thread_suspended_next;
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	601a      	str	r2, [r3, #0]

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800f4b0:	69ba      	ldr	r2, [r7, #24]
 800f4b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f4b4:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800f4ba:	69ba      	ldr	r2, [r7, #24]
 800f4bc:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f4be:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Prepare for resumption of the thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800f4c6:	4b0e      	ldr	r3, [pc, #56]	; (800f500 <_nx_tcp_socket_thread_resume+0x94>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	4a0c      	ldr	r2, [pc, #48]	; (800f500 <_nx_tcp_socket_thread_resume+0x94>)
 800f4ce:	6013      	str	r3, [r2, #0]
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f383 8810 	msr	PRIMASK, r3
}
 800f4da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  status;
 800f4dc:	69bb      	ldr	r3, [r7, #24]
 800f4de:	683a      	ldr	r2, [r7, #0]
 800f4e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f4e4:	69b8      	ldr	r0, [r7, #24]
 800f4e6:	f004 fa09 	bl	80138fc <_tx_thread_system_resume>
    {

        /* Nothing was suspended.  Simply restore interrupts.  */
        TX_RESTORE
    }
}
 800f4ea:	e005      	b.n	800f4f8 <_nx_tcp_socket_thread_resume+0x8c>
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	f383 8810 	msr	PRIMASK, r3
}
 800f4f6:	bf00      	nop
 800f4f8:	bf00      	nop
 800f4fa:	3720      	adds	r7, #32
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	240023cc 	.word	0x240023cc

0800f504 <_nx_tcp_socket_transmit_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_transmit_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b08a      	sub	sp, #40	; 0x28
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f512:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    socket_ptr -> nx_tcp_socket_transmit_sent_tail =  NX_NULL;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800f524:	e02c      	b.n	800f580 <_nx_tcp_socket_transmit_queue_flush+0x7c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f526:	f3ef 8310 	mrs	r3, PRIMASK
 800f52a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f52c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f52e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f530:	b672      	cpsid	i
    return(int_posture);
 800f532:	697b      	ldr	r3, [r7, #20]
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f534:	623b      	str	r3, [r7, #32]

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f538:	6a1b      	ldr	r3, [r3, #32]
 800f53a:	61fb      	str	r3, [r7, #28]

        /* Mark the packet as no longer being in a TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f542:	621a      	str	r2, [r3, #32]

        /* Has the packet been transmitted?  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f546:	69db      	ldr	r3, [r3, #28]
 800f548:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800f54c:	d109      	bne.n	800f562 <_nx_tcp_socket_transmit_queue_flush+0x5e>
 800f54e:	6a3b      	ldr	r3, [r7, #32]
 800f550:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	f383 8810 	msr	PRIMASK, r3
}
 800f558:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800f55a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f55c:	f7fc fcca 	bl	800bef4 <_nx_packet_release>
 800f560:	e005      	b.n	800f56e <_nx_tcp_socket_transmit_queue_flush+0x6a>
 800f562:	6a3b      	ldr	r3, [r7, #32]
 800f564:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f383 8810 	msr	PRIMASK, r3
}
 800f56c:	bf00      	nop
            /* Just restore interrupts.  */
            TX_RESTORE
        }

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	627b      	str	r3, [r7, #36]	; 0x24

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f578:	1e5a      	subs	r2, r3, #1
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1cd      	bne.n	800f526 <_nx_tcp_socket_transmit_queue_flush+0x22>
    }
}
 800f58a:	bf00      	nop
 800f58c:	bf00      	nop
 800f58e:	3728      	adds	r7, #40	; 0x28
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <_nx_tcp_transmit_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_transmit_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b08e      	sub	sp, #56	; 0x38
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f59e:	f3ef 8310 	mrs	r3, PRIMASK
 800f5a2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800f5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800f5a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800f5a8:	b672      	cpsid	i
    return(int_posture);
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_IP         *ip_ptr;

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800f5ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d004      	beq.n	800f5c4 <_nx_tcp_transmit_cleanup+0x30>
 800f5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4a49      	ldr	r2, [pc, #292]	; (800f6e4 <_nx_tcp_transmit_cleanup+0x150>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d006      	beq.n	800f5d2 <_nx_tcp_transmit_cleanup+0x3e>
 800f5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f5c8:	6a3b      	ldr	r3, [r7, #32]
 800f5ca:	f383 8810 	msr	PRIMASK, r3
}
 800f5ce:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800f5d0:	e085      	b.n	800f6de <_nx_tcp_transmit_cleanup+0x14a>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d106      	bne.n	800f5e8 <_nx_tcp_transmit_cleanup+0x54>
 800f5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	f383 8810 	msr	PRIMASK, r3
}
 800f5e4:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800f5e6:	e07a      	b.n	800f6de <_nx_tcp_transmit_cleanup+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f5e8:	f3ef 8305 	mrs	r3, IPSR
 800f5ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f5ee:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800f5f0:	4b3d      	ldr	r3, [pc, #244]	; (800f6e8 <_nx_tcp_transmit_cleanup+0x154>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d104      	bne.n	800f604 <_nx_tcp_transmit_cleanup+0x70>
 800f5fa:	4b3c      	ldr	r3, [pc, #240]	; (800f6ec <_nx_tcp_transmit_cleanup+0x158>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4a3c      	ldr	r2, [pc, #240]	; (800f6f0 <_nx_tcp_transmit_cleanup+0x15c>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d116      	bne.n	800f632 <_nx_tcp_transmit_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a3b      	ldr	r2, [pc, #236]	; (800f6f4 <_nx_tcp_transmit_cleanup+0x160>)
 800f608:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800f60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f610:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f614:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	f383 8810 	msr	PRIMASK, r3
}
 800f61c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800f61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f620:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f624:	2200      	movs	r2, #0
 800f626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f62a:	4618      	mov	r0, r3
 800f62c:	f002 fae2 	bl	8011bf4 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800f630:	e055      	b.n	800f6de <_nx_tcp_transmit_cleanup+0x14a>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2200      	movs	r2, #0
 800f636:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d104      	bne.n	800f64c <_nx_tcp_transmit_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  NX_NULL;
 800f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f644:	2200      	movs	r2, #0
 800f646:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800f64a:	e00e      	b.n	800f66a <_nx_tcp_transmit_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f652:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f65e:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f668:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 800f66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800f670:	1e5a      	subs	r2, r3, #1
 800f672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f674:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f67c:	2b0c      	cmp	r3, #12
 800f67e:	d128      	bne.n	800f6d2 <_nx_tcp_transmit_cleanup+0x13e>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which transmit error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f684:	2b05      	cmp	r3, #5
 800f686:	d004      	beq.n	800f692 <_nx_tcp_transmit_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2238      	movs	r2, #56	; 0x38
 800f68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800f690:	e010      	b.n	800f6b4 <_nx_tcp_transmit_cleanup+0x120>
            }
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800f698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d204      	bcs.n	800f6ac <_nx_tcp_transmit_cleanup+0x118>
            {

                /* Not a queue depth problem, return a window overflow error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_WINDOW_OVERFLOW;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2239      	movs	r2, #57	; 0x39
 800f6a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800f6aa:	e003      	b.n	800f6b4 <_nx_tcp_transmit_cleanup+0x120>
            }
            else
            {

                /* Return a transmit queue exceeded error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_TX_QUEUE_DEPTH;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2249      	movs	r2, #73	; 0x49
 800f6b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f6b4:	4b10      	ldr	r3, [pc, #64]	; (800f6f8 <_nx_tcp_transmit_cleanup+0x164>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	4a0f      	ldr	r2, [pc, #60]	; (800f6f8 <_nx_tcp_transmit_cleanup+0x164>)
 800f6bc:	6013      	str	r3, [r2, #0]
 800f6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	f383 8810 	msr	PRIMASK, r3
}
 800f6c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread!  */
            _tx_thread_system_resume(thread_ptr);
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f004 f916 	bl	80138fc <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800f6d0:	e005      	b.n	800f6de <_nx_tcp_transmit_cleanup+0x14a>
 800f6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f383 8810 	msr	PRIMASK, r3
}
 800f6dc:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f6de:	3738      	adds	r7, #56	; 0x38
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	54435020 	.word	0x54435020
 800f6e8:	2400008c 	.word	0x2400008c
 800f6ec:	240023d0 	.word	0x240023d0
 800f6f0:	24002470 	.word	0x24002470
 800f6f4:	0800c19d 	.word	0x0800c19d
 800f6f8:	240023cc 	.word	0x240023cc

0800f6fc <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b08a      	sub	sp, #40	; 0x28
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f70a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f70c:	f3ef 8310 	mrs	r3, PRIMASK
 800f710:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f712:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f714:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f716:	b672      	cpsid	i
    return(int_posture);
 800f718:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800f71a:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f720:	2b00      	cmp	r3, #0
 800f722:	d043      	beq.n	800f7ac <_nx_udp_bind_cleanup+0xb0>
 800f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f726:	2b00      	cmp	r3, #0
 800f728:	d040      	beq.n	800f7ac <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800f72e:	4a24      	ldr	r2, [pc, #144]	; (800f7c0 <_nx_udp_bind_cleanup+0xc4>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d13b      	bne.n	800f7ac <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800f734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f736:	2200      	movs	r2, #0
 800f738:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 800f740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f744:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d103      	bne.n	800f758 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	2200      	movs	r2, #0
 800f754:	661a      	str	r2, [r3, #96]	; 0x60
 800f756:	e00d      	b.n	800f774 <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f768:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f772:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f778:	1e5a      	subs	r2, r3, #1
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f782:	2b0c      	cmp	r3, #12
 800f784:	d112      	bne.n	800f7ac <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2223      	movs	r2, #35	; 0x23
 800f78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f78e:	4b0d      	ldr	r3, [pc, #52]	; (800f7c4 <_nx_udp_bind_cleanup+0xc8>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	3301      	adds	r3, #1
 800f794:	4a0b      	ldr	r2, [pc, #44]	; (800f7c4 <_nx_udp_bind_cleanup+0xc8>)
 800f796:	6013      	str	r3, [r2, #0]
 800f798:	6a3b      	ldr	r3, [r7, #32]
 800f79a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	f383 8810 	msr	PRIMASK, r3
}
 800f7a2:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f004 f8a9 	bl	80138fc <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800f7aa:	e005      	b.n	800f7b8 <_nx_udp_bind_cleanup+0xbc>
 800f7ac:	6a3b      	ldr	r3, [r7, #32]
 800f7ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f383 8810 	msr	PRIMASK, r3
}
 800f7b6:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f7b8:	3728      	adds	r7, #40	; 0x28
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	55445020 	.word	0x55445020
 800f7c4:	240023cc 	.word	0x240023cc

0800f7c8 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	4a05      	ldr	r2, [pc, #20]	; (800f7e8 <_nx_udp_enable+0x20>)
 800f7d4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	370c      	adds	r7, #12
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	0800f8e1 	.word	0x0800f8e1

0800f7ec <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b08a      	sub	sp, #40	; 0x28
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	0a1a      	lsrs	r2, r3, #8
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	4413      	add	r3, r2
 800f804:	f003 031f 	and.w	r3, r3, #31
 800f808:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f810:	f04f 31ff 	mov.w	r1, #4294967295
 800f814:	4618      	mov	r0, r3
 800f816:	f002 fe31 	bl	801247c <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800f81a:	68fa      	ldr	r2, [r7, #12]
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	33de      	adds	r3, #222	; 0xde
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 800f828:	2300      	movs	r3, #0
 800f82a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d010      	beq.n	800f854 <_nx_udp_free_port_find+0x68>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d102      	bne.n	800f846 <_nx_udp_free_port_find+0x5a>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 800f840:	2301      	movs	r3, #1
 800f842:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 800f844:	e006      	b.n	800f854 <_nx_udp_free_port_find+0x68>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800f846:	6a3b      	ldr	r3, [r7, #32]
 800f848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f84a:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 800f84c:	6a3a      	ldr	r2, [r7, #32]
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	429a      	cmp	r2, r3
 800f852:	d1f0      	bne.n	800f836 <_nx_udp_free_port_find+0x4a>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f85a:	4618      	mov	r0, r3
 800f85c:	f003 f886 	bl	801296c <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 800f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f862:	2b00      	cmp	r3, #0
 800f864:	d104      	bne.n	800f870 <_nx_udp_free_port_find+0x84>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 800f86c:	2300      	movs	r3, #0
 800f86e:	e00e      	b.n	800f88e <_nx_udp_free_port_find+0xa2>
        }

        /* Move to the next port.  */
        port++;
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	3301      	adds	r3, #1
 800f874:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f87c:	d302      	bcc.n	800f884 <_nx_udp_free_port_find+0x98>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800f87e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800f882:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800f884:	69fa      	ldr	r2, [r7, #28]
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d1b7      	bne.n	800f7fc <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 800f88c:	2345      	movs	r3, #69	; 0x45
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3728      	adds	r7, #40	; 0x28
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}

0800f896 <_nx_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_packet_info_extract(NX_PACKET *packet_ptr, ULONG *ip_address,
                                  UINT *protocol, UINT *port, UINT *interface_index)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b08a      	sub	sp, #40	; 0x28
 800f89a:	af02      	add	r7, sp, #8
 800f89c:	60f8      	str	r0, [r7, #12]
 800f89e:	60b9      	str	r1, [r7, #8]
 800f8a0:	607a      	str	r2, [r7, #4]
 800f8a2:	603b      	str	r3, [r7, #0]
NXD_ADDRESS nxd_ip_address;
UINT        status;


    /* Call the NXD version of the service. */
    status = _nxd_udp_packet_info_extract(packet_ptr, &nxd_ip_address, protocol, port, interface_index);
 800f8a4:	f107 0114 	add.w	r1, r7, #20
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f000 ffe3 	bl	801087c <_nxd_udp_packet_info_extract>
 800f8b6:	61f8      	str	r0, [r7, #28]

    if (status == NX_SUCCESS)
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d10b      	bne.n	800f8d6 <_nx_udp_packet_info_extract+0x40>
    {
        if (ip_address)
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d008      	beq.n	800f8d6 <_nx_udp_packet_info_extract+0x40>
        {

            /*lint -e{644} suppress variable might not be initialized, since "nxd_ip_address" was initialized in _nxd_udp_packet_info_extract. */
            if (nxd_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	d103      	bne.n	800f8d2 <_nx_udp_packet_info_extract+0x3c>
            {
                *ip_address = nxd_ip_address.nxd_ip_address.v4;
 800f8ca:	69ba      	ldr	r2, [r7, #24]
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	601a      	str	r2, [r3, #0]
 800f8d0:	e001      	b.n	800f8d6 <_nx_udp_packet_info_extract+0x40>
            }
            else
            {
                return(NX_INVALID_PACKET);
 800f8d2:	2312      	movs	r3, #18
 800f8d4:	e000      	b.n	800f8d8 <_nx_udp_packet_info_extract+0x42>
            }
        }
    }

    return(status);
 800f8d6:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(port);
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3720      	adds	r7, #32
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b094      	sub	sp, #80	; 0x50
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fc:	2b07      	cmp	r3, #7
 800f8fe:	d80a      	bhi.n	800f916 <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f906:	1c5a      	adds	r2, r3, #1
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800f90e:	6838      	ldr	r0, [r7, #0]
 800f910:	f7fc faf0 	bl	800bef4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800f914:	e1d8      	b.n	800fcc8 <_nx_udp_packet_receive+0x3e8>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800f91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	ba1a      	rev	r2, r3
 800f922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f924:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800f926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	ba1a      	rev	r2, r3
 800f92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f92e:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	0c1b      	lsrs	r3, r3, #16
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d20a      	bcs.n	800f954 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f944:	1c5a      	adds	r2, r3, #1
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800f94c:	6838      	ldr	r0, [r7, #0]
 800f94e:	f7fc fad1 	bl	800bef4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800f952:	e1b9      	b.n	800fcc8 <_nx_udp_packet_receive+0x3e8>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800f954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	b29b      	uxth	r3, r3
 800f95a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800f95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f95e:	0a1a      	lsrs	r2, r3, #8
 800f960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f962:	4413      	add	r3, r2
 800f964:	f003 031f 	and.w	r3, r3, #31
 800f968:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800f96a:	4b8f      	ldr	r3, [pc, #572]	; (800fba8 <_nx_udp_packet_receive+0x2c8>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d010      	beq.n	800f994 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f972:	f3ef 8305 	mrs	r3, IPSR
 800f976:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800f978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f97a:	4b8c      	ldr	r3, [pc, #560]	; (800fbac <_nx_udp_packet_receive+0x2cc>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4313      	orrs	r3, r2
 800f980:	2b00      	cmp	r3, #0
 800f982:	d107      	bne.n	800f994 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f98a:	f04f 31ff 	mov.w	r1, #4294967295
 800f98e:	4618      	mov	r0, r3
 800f990:	f002 fd74 	bl	801247c <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f998:	33de      	adds	r3, #222	; 0xde
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 800f9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d13e      	bne.n	800fa26 <_nx_udp_packet_receive+0x146>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f9ae:	2b04      	cmp	r3, #4
 800f9b0:	d114      	bne.n	800f9dc <_nx_udp_packet_receive+0xfc>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00f      	beq.n	800f9dc <_nx_udp_packet_receive+0xfc>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800f9bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	ba1a      	rev	r2, r3
 800f9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9c4:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800f9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	ba1a      	rev	r2, r3
 800f9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9ce:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	4a77      	ldr	r2, [pc, #476]	; (800fbb0 <_nx_udp_packet_receive+0x2d0>)
 800f9d4:	6839      	ldr	r1, [r7, #0]
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7f9 fb06 	bl	8008fe8 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f9e2:	1c5a      	adds	r2, r3, #1
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f9f0:	1c5a      	adds	r2, r3, #1
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800f9f8:	4b6b      	ldr	r3, [pc, #428]	; (800fba8 <_nx_udp_packet_receive+0x2c8>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00e      	beq.n	800fa1e <_nx_udp_packet_receive+0x13e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fa00:	f3ef 8305 	mrs	r3, IPSR
 800fa04:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800fa06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa08:	4b68      	ldr	r3, [pc, #416]	; (800fbac <_nx_udp_packet_receive+0x2cc>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d105      	bne.n	800fa1e <_nx_udp_packet_receive+0x13e>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f002 ffa7 	bl	801296c <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800fa1e:	6838      	ldr	r0, [r7, #0]
 800fa20:	f7fc fa68 	bl	800bef4 <_nx_packet_release>

        /* Just return.  */
        return;
 800fa24:	e150      	b.n	800fcc8 <_nx_udp_packet_receive+0x3e8>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 800fa26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d119      	bne.n	800fa64 <_nx_udp_packet_receive+0x184>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 800fa30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	1c5a      	adds	r2, r3, #1
 800fa36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa38:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa44:	4413      	add	r3, r2
 800fa46:	f1a3 0208 	sub.w	r2, r3, #8
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800fa50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa52:	69da      	ldr	r2, [r3, #28]
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa58:	4413      	add	r3, r2
 800fa5a:	f1a3 0208 	sub.w	r2, r3, #8
 800fa5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa60:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 800fa62:	e00b      	b.n	800fa7c <_nx_udp_packet_receive+0x19c>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 800fa64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa68:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa6e:	33de      	adds	r3, #222	; 0xde
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d1d4      	bne.n	800fa26 <_nx_udp_packet_receive+0x146>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800fa7c:	4b4a      	ldr	r3, [pc, #296]	; (800fba8 <_nx_udp_packet_receive+0x2c8>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00e      	beq.n	800faa2 <_nx_udp_packet_receive+0x1c2>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fa84:	f3ef 8305 	mrs	r3, IPSR
 800fa88:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800fa8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa8c:	4b47      	ldr	r3, [pc, #284]	; (800fbac <_nx_udp_packet_receive+0x2cc>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4313      	orrs	r3, r2
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d105      	bne.n	800faa2 <_nx_udp_packet_receive+0x1c2>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f002 ff65 	bl	801296c <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 800faa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d02b      	beq.n	800fb04 <_nx_udp_packet_receive+0x224>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800face:	2b04      	cmp	r3, #4
 800fad0:	d114      	bne.n	800fafc <_nx_udp_packet_receive+0x21c>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00f      	beq.n	800fafc <_nx_udp_packet_receive+0x21c>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800fadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	ba1a      	rev	r2, r3
 800fae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fae4:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800fae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	ba1a      	rev	r2, r3
 800faec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faee:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800faf0:	2300      	movs	r3, #0
 800faf2:	4a2f      	ldr	r2, [pc, #188]	; (800fbb0 <_nx_udp_packet_receive+0x2d0>)
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7f9 fa76 	bl	8008fe8 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800fafc:	6838      	ldr	r0, [r7, #0]
 800fafe:	f7fc f9f9 	bl	800bef4 <_nx_packet_release>
        return;
 800fb02:	e0e1      	b.n	800fcc8 <_nx_udp_packet_receive+0x3e8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fb04:	f3ef 8310 	mrs	r3, PRIMASK
 800fb08:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fb0c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fb0e:	b672      	cpsid	i
    return(int_posture);
 800fb10:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800fb12:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 800fb14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a26      	ldr	r2, [pc, #152]	; (800fbb4 <_nx_udp_packet_receive+0x2d4>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d01c      	beq.n	800fb58 <_nx_udp_packet_receive+0x278>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fb24:	1c5a      	adds	r2, r3, #1
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fb32:	1c5a      	adds	r2, r3, #1
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 800fb3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb3e:	1c5a      	adds	r2, r3, #1
 800fb40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb42:	625a      	str	r2, [r3, #36]	; 0x24
 800fb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb46:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	f383 8810 	msr	PRIMASK, r3
}
 800fb4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800fb50:	6838      	ldr	r0, [r7, #0]
 800fb52:	f7fc f9cf 	bl	800bef4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800fb56:	e0b7      	b.n	800fcc8 <_nx_udp_packet_receive+0x3e8>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 800fb58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb5c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb62:	33de      	adds	r3, #222	; 0xde
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	4413      	add	r3, r2
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d00b      	beq.n	800fb88 <_nx_udp_packet_receive+0x2a8>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d106      	bne.n	800fb88 <_nx_udp_packet_receive+0x2a8>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb7e:	33de      	adds	r3, #222	; 0xde
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	4413      	add	r3, r2
 800fb84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb86:	605a      	str	r2, [r3, #4]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800fb88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb8c:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 800fb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d03e      	beq.n	800fc12 <_nx_udp_packet_receive+0x332>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800fb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d10c      	bne.n	800fbb8 <_nx_udp_packet_receive+0x2d8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800fb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fba0:	2200      	movs	r2, #0
 800fba2:	659a      	str	r2, [r3, #88]	; 0x58
 800fba4:	e016      	b.n	800fbd4 <_nx_udp_packet_receive+0x2f4>
 800fba6:	bf00      	nop
 800fba8:	240023d0 	.word	0x240023d0
 800fbac:	2400008c 	.word	0x2400008c
 800fbb0:	03030000 	.word	0x03030000
 800fbb4:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800fbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbbe:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800fbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800fbc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbc6:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800fbc8:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800fbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800fbce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbd0:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800fbd2:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800fbd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbd8:	1e5a      	subs	r2, r3, #1
 800fbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbdc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800fbe4:	4b3a      	ldr	r3, [pc, #232]	; (800fcd0 <_nx_udp_packet_receive+0x3f0>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	4a39      	ldr	r2, [pc, #228]	; (800fcd0 <_nx_udp_packet_receive+0x3f0>)
 800fbec:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800fbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf2:	683a      	ldr	r2, [r7, #0]
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	f383 8810 	msr	PRIMASK, r3
}
 800fc00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800fc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc04:	2200      	movs	r2, #0
 800fc06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800fc0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc0c:	f003 fe76 	bl	80138fc <_tx_thread_system_resume>
 800fc10:	e054      	b.n	800fcbc <_nx_udp_packet_receive+0x3dc>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800fc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d03c      	beq.n	800fc94 <_nx_udp_packet_receive+0x3b4>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 800fc1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc1e:	683a      	ldr	r2, [r7, #0]
 800fc20:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800fc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc24:	683a      	ldr	r2, [r7, #0]
 800fc26:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800fc2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc32:	1c5a      	adds	r2, r3, #1
 800fc34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc36:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 800fc38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 800fc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d921      	bls.n	800fc88 <_nx_udp_packet_receive+0x3a8>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800fc44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc48:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	69da      	ldr	r2, [r3, #28]
 800fc4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc50:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 800fc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc56:	1e5a      	subs	r2, r3, #1
 800fc58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5a:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 800fc6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc72:	625a      	str	r2, [r3, #36]	; 0x24
 800fc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc76:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	f383 8810 	msr	PRIMASK, r3
}
 800fc7e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800fc80:	6838      	ldr	r0, [r7, #0]
 800fc82:	f7fc f937 	bl	800bef4 <_nx_packet_release>
 800fc86:	e019      	b.n	800fcbc <_nx_udp_packet_receive+0x3dc>
 800fc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	f383 8810 	msr	PRIMASK, r3
}
 800fc92:	e013      	b.n	800fcbc <_nx_udp_packet_receive+0x3dc>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 800fc94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800fc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc9c:	683a      	ldr	r2, [r7, #0]
 800fc9e:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	2200      	movs	r2, #0
 800fca4:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800fca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcaa:	1c5a      	adds	r2, r3, #1
 800fcac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcae:	63da      	str	r2, [r3, #60]	; 0x3c
 800fcb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f383 8810 	msr	PRIMASK, r3
}
 800fcba:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d002      	beq.n	800fcc8 <_nx_udp_packet_receive+0x3e8>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fcc6:	4798      	blx	r3
    }
}
 800fcc8:	3750      	adds	r7, #80	; 0x50
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	240023cc 	.word	0x240023cc

0800fcd4 <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b088      	sub	sp, #32
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fce2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fce4:	f3ef 8310 	mrs	r3, PRIMASK
 800fce8:	617b      	str	r3, [r7, #20]
    return(posture);
 800fcea:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800fcec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fcee:	b672      	cpsid	i
    return(int_posture);
 800fcf0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800fcf2:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d03d      	beq.n	800fd78 <_nx_udp_receive_cleanup+0xa4>
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d03a      	beq.n	800fd78 <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800fd06:	4a21      	ldr	r2, [pc, #132]	; (800fd8c <_nx_udp_receive_cleanup+0xb8>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d135      	bne.n	800fd78 <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d103      	bne.n	800fd24 <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	659a      	str	r2, [r3, #88]	; 0x58
 800fd22:	e00d      	b.n	800fd40 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800fd34:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800fd3e:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd44:	1e5a      	subs	r2, r3, #1
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd4e:	2b0c      	cmp	r3, #12
 800fd50:	d112      	bne.n	800fd78 <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2201      	movs	r2, #1
 800fd56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800fd5a:	4b0d      	ldr	r3, [pc, #52]	; (800fd90 <_nx_udp_receive_cleanup+0xbc>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	4a0b      	ldr	r2, [pc, #44]	; (800fd90 <_nx_udp_receive_cleanup+0xbc>)
 800fd62:	6013      	str	r3, [r2, #0]
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f383 8810 	msr	PRIMASK, r3
}
 800fd6e:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f003 fdc3 	bl	80138fc <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800fd76:	e005      	b.n	800fd84 <_nx_udp_receive_cleanup+0xb0>
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	f383 8810 	msr	PRIMASK, r3
}
 800fd82:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800fd84:	3720      	adds	r7, #32
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	55445020 	.word	0x55445020
 800fd90:	240023cc 	.word	0x240023cc

0800fd94 <_nx_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b090      	sub	sp, #64	; 0x40
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	607a      	str	r2, [r7, #4]
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800fda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fdac:	f04f 31ff 	mov.w	r1, #4294967295
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f002 fb63 	bl	801247c <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d103      	bne.n	800fdc6 <_nx_udp_socket_bind+0x32>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d007      	beq.n	800fdd6 <_nx_udp_socket_bind+0x42>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800fdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f002 fdcd 	bl	801296c <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800fdd2:	2322      	movs	r3, #34	; 0x22
 800fdd4:	e0fd      	b.n	800ffd2 <_nx_udp_socket_bind+0x23e>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d11e      	bne.n	800fe1a <_nx_udp_socket_bind+0x86>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 800fddc:	f005 fd1e 	bl	801581c <rand>
 800fde0:	4603      	mov	r3, r0
 800fde2:	425a      	negs	r2, r3
 800fde4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fde8:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800fdec:	bf58      	it	pl
 800fdee:	4253      	negpl	r3, r2
 800fdf0:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800fdf4:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	f107 0208 	add.w	r2, r7, #8
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe00:	f7ff fcf4 	bl	800f7ec <_nx_udp_free_port_find>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d007      	beq.n	800fe1a <_nx_udp_socket_bind+0x86>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800fe0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fe10:	4618      	mov	r0, r3
 800fe12:	f002 fdab 	bl	801296c <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 800fe16:	2345      	movs	r3, #69	; 0x45
 800fe18:	e0db      	b.n	800ffd2 <_nx_udp_socket_bind+0x23e>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 800fe1a:	68ba      	ldr	r2, [r7, #8]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	0a1a      	lsrs	r2, r3, #8
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	4413      	add	r3, r2
 800fe28:	f003 031f 	and.w	r3, r3, #31
 800fe2c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800fe2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe32:	33de      	adds	r3, #222	; 0xde
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	4413      	add	r3, r2
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800fe3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00f      	beq.n	800fe62 <_nx_udp_socket_bind+0xce>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 800fe42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe44:	633b      	str	r3, [r7, #48]	; 0x30
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 800fe46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe48:	689a      	ldr	r2, [r3, #8]
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d007      	beq.n	800fe60 <_nx_udp_socket_bind+0xcc>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800fe50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe54:	63fb      	str	r3, [r7, #60]	; 0x3c
        } while (search_ptr != end_ptr);
 800fe56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d1f3      	bne.n	800fe46 <_nx_udp_socket_bind+0xb2>
 800fe5e:	e000      	b.n	800fe62 <_nx_udp_socket_bind+0xce>
                break;
 800fe60:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 800fe62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d004      	beq.n	800fe72 <_nx_udp_socket_bind+0xde>
 800fe68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe6a:	689a      	ldr	r2, [r3, #8]
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d048      	beq.n	800ff04 <_nx_udp_socket_bind+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe72:	f3ef 8310 	mrs	r3, PRIMASK
 800fe76:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800fe78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fe7a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe7c:	b672      	cpsid	i
    return(int_posture);
 800fe7e:	6a3b      	ldr	r3, [r7, #32]
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800fe80:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the list is NULL.  */
        if (search_ptr)
 800fe82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d022      	beq.n	800fece <_nx_udp_socket_bind+0x13a>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 800fe88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8c:	33de      	adds	r3, #222	; 0xde
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4413      	add	r3, r2
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800fe98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe9c:	33de      	adds	r3, #222	; 0xde
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	4413      	add	r3, r2
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 800feaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800feac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feae:	33de      	adds	r3, #222	; 0xde
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	4413      	add	r3, r2
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 800febc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800febe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fec0:	33de      	adds	r3, #222	; 0xde
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	4413      	add	r3, r2
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	651a      	str	r2, [r3, #80]	; 0x50
 800fecc:	e00c      	b.n	800fee8 <_nx_udp_socket_bind+0x154>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	68fa      	ldr	r2, [r7, #12]
 800fed2:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 800feda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fede:	33de      	adds	r3, #222	; 0xde
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	4413      	add	r3, r2
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	605a      	str	r2, [r3, #4]
 800fee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	f383 8810 	msr	PRIMASK, r3
}
 800fef2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fefa:	4618      	mov	r0, r3
 800fefc:	f002 fd36 	bl	801296c <_tx_mutex_put>

        /* Return success to the caller.  */
        return(NX_SUCCESS);
 800ff00:	2300      	movs	r3, #0
 800ff02:	e066      	b.n	800ffd2 <_nx_udp_socket_bind+0x23e>
    }
    else if (wait_option)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d05c      	beq.n	800ffc4 <_nx_udp_socket_bind+0x230>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff0a:	f3ef 8310 	mrs	r3, PRIMASK
 800ff0e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ff10:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ff12:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ff14:	b672      	cpsid	i
    return(int_posture);
 800ff16:	697b      	ldr	r3, [r7, #20]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800ff18:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 800ff1a:	4b30      	ldr	r3, [pc, #192]	; (800ffdc <_nx_udp_socket_bind+0x248>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 800ff20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff22:	4a2f      	ldr	r2, [pc, #188]	; (800ffe0 <_nx_udp_socket_bind+0x24c>)
 800ff24:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800ff26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800ff38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d012      	beq.n	800ff66 <_nx_udp_socket_bind+0x1d2>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 800ff40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 800ff48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ff4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff50:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 800ff52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff5a:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800ff5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff62:	675a      	str	r2, [r3, #116]	; 0x74
 800ff64:	e008      	b.n	800ff78 <_nx_udp_socket_bind+0x1e4>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800ff66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff6a:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 800ff6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff70:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 800ff72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff76:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 800ff78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff7c:	1c5a      	adds	r2, r3, #1
 800ff7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff80:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800ff82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff84:	220c      	movs	r2, #12
 800ff86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ff88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800ff8e:	4b15      	ldr	r3, [pc, #84]	; (800ffe4 <_nx_udp_socket_bind+0x250>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	3301      	adds	r3, #1
 800ff94:	4a13      	ldr	r2, [pc, #76]	; (800ffe4 <_nx_udp_socket_bind+0x250>)
 800ff96:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ff98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	64da      	str	r2, [r3, #76]	; 0x4c
 800ff9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	f383 8810 	msr	PRIMASK, r3
}
 800ffa8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ffaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffac:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f002 fcdb 	bl	801296c <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 800ffb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffb8:	f003 fda0 	bl	8013afc <_tx_thread_system_suspend>

        /* Return the completion status.  */
        return(thread_ptr -> tx_thread_suspend_status);
 800ffbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffc2:	e006      	b.n	800ffd2 <_nx_udp_socket_bind+0x23e>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ffc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f002 fcce 	bl	801296c <_tx_mutex_put>

        /* Return the port unavailable error.  */
        return(NX_PORT_UNAVAILABLE);
 800ffd0:	2323      	movs	r3, #35	; 0x23
    }
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3740      	adds	r7, #64	; 0x40
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	240023d0 	.word	0x240023d0
 800ffe0:	0800f6fd 	.word	0x0800f6fd
 800ffe4:	240023cc 	.word	0x240023cc

0800ffe8 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b08a      	sub	sp, #40	; 0x28
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	607a      	str	r2, [r7, #4]
 800fff4:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800fff6:	2278      	movs	r2, #120	; 0x78
 800fff8:	2100      	movs	r1, #0
 800fffa:	68b8      	ldr	r0, [r7, #8]
 800fffc:	f005 fb78 	bl	80156f0 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	687a      	ldr	r2, [r7, #4]
 801000a:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	683a      	ldr	r2, [r7, #0]
 8010010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010020:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	2200      	movs	r2, #0
 8010026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	2200      	movs	r2, #0
 801002c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	2200      	movs	r2, #0
 8010032:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	2200      	movs	r2, #0
 8010038:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	2200      	movs	r2, #0
 801003e:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	2200      	movs	r2, #0
 8010044:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2200      	movs	r2, #0
 801004a:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010050:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	2200      	movs	r2, #0
 8010056:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	2200      	movs	r2, #0
 801005c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	2200      	movs	r2, #0
 8010062:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801006a:	f04f 31ff 	mov.w	r1, #4294967295
 801006e:	4618      	mov	r0, r3
 8010070:	f002 fa04 	bl	801247c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010074:	f3ef 8310 	mrs	r3, PRIMASK
 8010078:	61fb      	str	r3, [r7, #28]
    return(posture);
 801007a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801007c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801007e:	b672      	cpsid	i
    return(int_posture);
 8010080:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 8010082:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	4a1f      	ldr	r2, [pc, #124]	; (8010104 <_nx_udp_socket_create+0x11c>)
 8010088:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8010090:	2b00      	cmp	r3, #0
 8010092:	d015      	beq.n	80100c0 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801009a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801009c:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 80100a8:	6a3b      	ldr	r3, [r7, #32]
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	6a3a      	ldr	r2, [r7, #32]
 80100b2:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	669a      	str	r2, [r3, #104]	; 0x68
 80100be:	e009      	b.n	80100d4 <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	68ba      	ldr	r2, [r7, #8]
 80100cc:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	68ba      	ldr	r2, [r7, #8]
 80100d2:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80100da:	1c5a      	adds	r2, r3, #1
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80100e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	f383 8810 	msr	PRIMASK, r3
}
 80100ec:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80100f4:	4618      	mov	r0, r3
 80100f6:	f002 fc39 	bl	801296c <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3728      	adds	r7, #40	; 0x28
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	55445020 	.word	0x55445020

08010108 <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b088      	sub	sp, #32
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8010116:	69fb      	ldr	r3, [r7, #28]
 8010118:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801011c:	f04f 31ff 	mov.w	r1, #4294967295
 8010120:	4618      	mov	r0, r3
 8010122:	f002 f9ab 	bl	801247c <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801012a:	2b00      	cmp	r3, #0
 801012c:	d007      	beq.n	801013e <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010134:	4618      	mov	r0, r3
 8010136:	f002 fc19 	bl	801296c <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 801013a:	2342      	movs	r3, #66	; 0x42
 801013c:	e03f      	b.n	80101be <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801013e:	f3ef 8310 	mrs	r3, PRIMASK
 8010142:	617b      	str	r3, [r7, #20]
    return(posture);
 8010144:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010146:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010148:	b672      	cpsid	i
    return(int_posture);
 801014a:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 801014c:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2200      	movs	r2, #0
 8010152:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	429a      	cmp	r2, r3
 801015c:	d104      	bne.n	8010168 <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	2200      	movs	r2, #0
 8010162:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 8010166:	e014      	b.n	8010192 <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8010170:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 801017a:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	429a      	cmp	r2, r3
 8010186:	d104      	bne.n	8010192 <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010198:	1e5a      	subs	r2, r3, #1
 801019a:	69fb      	ldr	r3, [r7, #28]
 801019c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f383 8810 	msr	PRIMASK, r3
}
 80101aa:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80101ac:	69fb      	ldr	r3, [r7, #28]
 80101ae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80101b2:	4618      	mov	r0, r3
 80101b4:	f002 fbda 	bl	801296c <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80101b8:	f003 fb66 	bl	8013888 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3720      	adds	r7, #32
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
	...

080101c8 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b09a      	sub	sp, #104	; 0x68
 80101cc:	af02      	add	r7, sp, #8
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

ULONG                 *temp_ptr;
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
NX_INTERFACE          *interface_ptr = NX_NULL;
 80101d4:	2300      	movs	r3, #0
 80101d6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                   compute_checksum = 1;
 80101d8:	2301      	movs	r3, #1
 80101da:	65bb      	str	r3, [r7, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	2200      	movs	r2, #0
 80101e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80101e2:	f3ef 8310 	mrs	r3, PRIMASK
 80101e6:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80101e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80101ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80101ec:	b672      	cpsid	i
    return(int_posture);
 80101ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 80101f0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d107      	bne.n	801020a <_nx_udp_socket_receive+0x42>
 80101fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101fc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010200:	f383 8810 	msr	PRIMASK, r3
}
 8010204:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 8010206:	2324      	movs	r3, #36	; 0x24
 8010208:	e142      	b.n	8010490 <_nx_udp_socket_receive+0x2c8>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801020e:	2b00      	cmp	r3, #0
 8010210:	d01a      	beq.n	8010248 <_nx_udp_socket_receive+0x80>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	69da      	ldr	r2, [r3, #28]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010228:	2b00      	cmp	r3, #0
 801022a:	d102      	bne.n	8010232 <_nx_udp_socket_receive+0x6a>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010236:	1e5a      	subs	r2, r3, #1
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	63da      	str	r2, [r3, #60]	; 0x3c
 801023c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801023e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010242:	f383 8810 	msr	PRIMASK, r3
}
 8010246:	e05e      	b.n	8010306 <_nx_udp_socket_receive+0x13e>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d050      	beq.n	80102f0 <_nx_udp_socket_receive+0x128>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 801024e:	4b92      	ldr	r3, [pc, #584]	; (8010498 <_nx_udp_socket_receive+0x2d0>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 8010254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010256:	4a91      	ldr	r2, [pc, #580]	; (801049c <_nx_udp_socket_receive+0x2d4>)
 8010258:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 801025a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8010260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801026a:	2b00      	cmp	r3, #0
 801026c:	d012      	beq.n	8010294 <_nx_udp_socket_receive+0xcc>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 8010272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010274:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801027a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 801027c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801027e:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010288:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801028e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010290:	675a      	str	r2, [r3, #116]	; 0x74
 8010292:	e008      	b.n	80102a6 <_nx_udp_socket_receive+0xde>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010298:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 801029a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801029c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801029e:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 80102a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102a4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102aa:	1c5a      	adds	r2, r3, #1
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80102b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102b2:	220c      	movs	r2, #12
 80102b4:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80102b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102b8:	2201      	movs	r2, #1
 80102ba:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80102bc:	4b78      	ldr	r3, [pc, #480]	; (80104a0 <_nx_udp_socket_receive+0x2d8>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	3301      	adds	r3, #1
 80102c2:	4a77      	ldr	r2, [pc, #476]	; (80104a0 <_nx_udp_socket_receive+0x2d8>)
 80102c4:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80102c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80102cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102d0:	6a3b      	ldr	r3, [r7, #32]
 80102d2:	f383 8810 	msr	PRIMASK, r3
}
 80102d6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80102d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80102da:	f003 fc0f 	bl	8013afc <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 80102de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d00e      	beq.n	8010306 <_nx_udp_socket_receive+0x13e>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 80102e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102ee:	e0cf      	b.n	8010490 <_nx_udp_socket_receive+0x2c8>
 80102f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	f383 8810 	msr	PRIMASK, r3
}
 80102fa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	2200      	movs	r2, #0
 8010300:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 8010302:	2301      	movs	r3, #1
 8010304:	e0c4      	b.n	8010490 <_nx_udp_socket_receive+0x2c8>
            }
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        /* Get the packet interface. */
#ifndef NX_DISABLE_IPV4
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801030e:	2b04      	cmp	r3, #4
 8010310:	d103      	bne.n	801031a <_nx_udp_socket_receive+0x152>
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010318:	65fb      	str	r3, [r7, #92]	; 0x5c
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
        }
#endif /* FEATURE_NX_IPV6 */

        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 801031a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801031c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801031e:	f003 0320 	and.w	r3, r3, #32
 8010322:	2b00      	cmp	r3, #0
 8010324:	d001      	beq.n	801032a <_nx_udp_socket_receive+0x162>
        {
            compute_checksum = 0;
 8010326:	2300      	movs	r3, #0
 8010328:	65bb      	str	r3, [r7, #88]	; 0x58
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 801032a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801032c:	2b00      	cmp	r3, #0
 801032e:	f000 809d 	beq.w	801046c <_nx_udp_socket_receive+0x2a4>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801033e:	2b00      	cmp	r3, #0
 8010340:	d105      	bne.n	801034e <_nx_udp_socket_receive+0x186>
 8010342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010344:	3304      	adds	r3, #4
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	b29b      	uxth	r3, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <_nx_udp_socket_receive+0x194>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 8010356:	2b06      	cmp	r3, #6
 8010358:	f040 808b 	bne.w	8010472 <_nx_udp_socket_receive+0x2aa>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 801035c:	2300      	movs	r3, #0
 801035e:	657b      	str	r3, [r7, #84]	; 0x54
 8010360:	2300      	movs	r3, #0
 8010362:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 801036a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801036c:	689b      	ldr	r3, [r3, #8]
 801036e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8010370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010372:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010376:	2b04      	cmp	r3, #4
 8010378:	d108      	bne.n	801038c <_nx_udp_socket_receive+0x1c4>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 801037a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801037c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801037e:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 8010380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010382:	330c      	adds	r3, #12
 8010384:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 8010386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010388:	3310      	adds	r3, #16
 801038a:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 801038c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	ba1a      	rev	r2, r3
 8010392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010394:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8010396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	ba1a      	rev	r2, r3
 801039c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801039e:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 80103a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 80103a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103aa:	2111      	movs	r1, #17
 80103ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80103ae:	f7f8 ffe7 	bl	8009380 <_nx_ip_checksum_compute>
 80103b2:	4603      	mov	r3, r0
 80103b4:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80103b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	ba1a      	rev	r2, r3
 80103bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103be:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80103c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	ba1a      	rev	r2, r3
 80103c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c8:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 80103ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103cc:	43db      	mvns	r3, r3
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 80103d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d04b      	beq.n	8010470 <_nx_udp_socket_receive+0x2a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80103d8:	f3ef 8310 	mrs	r3, PRIMASK
 80103dc:	617b      	str	r3, [r7, #20]
    return(posture);
 80103de:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80103e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80103e2:	b672      	cpsid	i
    return(int_posture);
 80103e4:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 80103e6:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80103f0:	3201      	adds	r2, #1
 80103f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80103fe:	3201      	adds	r2, #1
 8010400:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010408:	1c5a      	adds	r2, r3, #1
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	68db      	ldr	r3, [r3, #12]
 8010412:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8010416:	3a01      	subs	r2, #1
 8010418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801042a:	1ad2      	subs	r2, r2, r3
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	3208      	adds	r2, #8
 8010432:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	1e5a      	subs	r2, r3, #1
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	69da      	ldr	r2, [r3, #28]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	f103 0208 	add.w	r2, r3, #8
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	61da      	str	r2, [r3, #28]
 8010454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010456:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	f383 8810 	msr	PRIMASK, r3
}
 801045e:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4618      	mov	r0, r3
 8010466:	f7fb fd45 	bl	800bef4 <_nx_packet_release>
        TX_DISABLE
 801046a:	e6ba      	b.n	80101e2 <_nx_udp_socket_receive+0x1a>
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        else
        {

            /* Simply break - checksum logic is conditionally disabled.  */
            break;
 801046c:	bf00      	nop
 801046e:	e000      	b.n	8010472 <_nx_udp_socket_receive+0x2aa>
                    break;
 8010470:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	3a08      	subs	r2, #8
 801047e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	689a      	ldr	r2, [r3, #8]
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	3208      	adds	r2, #8
 801048c:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 801048e:	2300      	movs	r3, #0
}
 8010490:	4618      	mov	r0, r3
 8010492:	3760      	adds	r7, #96	; 0x60
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	240023d0 	.word	0x240023d0
 801049c:	0800fcd5 	.word	0x0800fcd5
 80104a0:	240023cc 	.word	0x240023cc

080104a4 <_nx_udp_socket_receive_notify>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive_notify(NX_UDP_SOCKET *socket_ptr,
                                    VOID (*udp_receive_notify)(NX_UDP_SOCKET *socket_ptr))
{
 80104a4:	b480      	push	{r7}
 80104a6:	b087      	sub	sp, #28
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80104ae:	f3ef 8310 	mrs	r3, PRIMASK
 80104b2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80104b4:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80104b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80104b8:	b672      	cpsid	i
    return(int_posture);
 80104ba:	68bb      	ldr	r3, [r7, #8]
TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80104bc:	617b      	str	r3, [r7, #20]

    /* Setup the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =  udp_receive_notify;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	683a      	ldr	r2, [r7, #0]
 80104c2:	671a      	str	r2, [r3, #112]	; 0x70
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	f383 8810 	msr	PRIMASK, r3
}
 80104ce:	bf00      	nop

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE_NOTIFY, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, udp_receive_notify, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80104d0:	2300      	movs	r3, #0
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	371c      	adds	r7, #28
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr

080104de <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 80104de:	b580      	push	{r7, lr}
 80104e0:	b088      	sub	sp, #32
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	60f8      	str	r0, [r7, #12]
 80104e6:	60b9      	str	r1, [r7, #8]
 80104e8:	607a      	str	r2, [r7, #4]
 80104ea:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 80104ec:	2304      	movs	r3, #4
 80104ee:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 80104f4:	f107 0214 	add.w	r2, r7, #20
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	68b9      	ldr	r1, [r7, #8]
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f000 fa12 	bl	8010926 <_nxd_udp_socket_send>
 8010502:	61f8      	str	r0, [r7, #28]

    return(status);
 8010504:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 8010506:	4618      	mov	r0, r3
 8010508:	3720      	adds	r7, #32
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <_nx_udp_socket_source_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_source_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                                 ULONG ip_address, UINT port, UINT address_index)
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b086      	sub	sp, #24
 8010512:	af00      	add	r7, sp, #0
 8010514:	60f8      	str	r0, [r7, #12]
 8010516:	60b9      	str	r1, [r7, #8]
 8010518:	607a      	str	r2, [r7, #4]
 801051a:	603b      	str	r3, [r7, #0]
UINT   status;
NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	617b      	str	r3, [r7, #20]

    /* Store interface information into the packet structure. */
    packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[address_index]);
 8010522:	6a3a      	ldr	r2, [r7, #32]
 8010524:	4613      	mov	r3, r2
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	4413      	add	r3, r2
 801052a:	011b      	lsls	r3, r3, #4
 801052c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8010530:	697a      	ldr	r2, [r7, #20]
 8010532:	4413      	add	r3, r2
 8010534:	1d1a      	adds	r2, r3, #4
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	631a      	str	r2, [r3, #48]	; 0x30

    /* Call udp_socket_send service */
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	68b9      	ldr	r1, [r7, #8]
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f7ff ffcc 	bl	80104de <_nx_udp_socket_send>
 8010546:	6138      	str	r0, [r7, #16]

    return(status);
 8010548:	693b      	ldr	r3, [r7, #16]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3718      	adds	r7, #24
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
	...

08010554 <_nx_udp_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b094      	sub	sp, #80	; 0x50
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8010562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010564:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010568:	f04f 31ff 	mov.w	r1, #4294967295
 801056c:	4618      	mov	r0, r3
 801056e:	f001 ff85 	bl	801247c <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010576:	2b00      	cmp	r3, #0
 8010578:	d119      	bne.n	80105ae <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801057e:	2b00      	cmp	r3, #0
 8010580:	d00d      	beq.n	801059e <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010586:	2100      	movs	r1, #0
 8010588:	4618      	mov	r0, r3
 801058a:	f7ff f8b7 	bl	800f6fc <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801058e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010590:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010594:	4618      	mov	r0, r3
 8010596:	f002 f9e9 	bl	801296c <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 801059a:	2300      	movs	r3, #0
 801059c:	e13e      	b.n	801081c <_nx_udp_socket_unbind+0x2c8>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801059e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80105a4:	4618      	mov	r0, r3
 80105a6:	f002 f9e1 	bl	801296c <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 80105aa:	2324      	movs	r3, #36	; 0x24
 80105ac:	e136      	b.n	801081c <_nx_udp_socket_unbind+0x2c8>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	689b      	ldr	r3, [r3, #8]
 80105b2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 80105b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b6:	0a1a      	lsrs	r2, r3, #8
 80105b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ba:	4413      	add	r3, r2
 80105bc:	f003 031f 	and.w	r3, r3, #31
 80105c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80105c2:	f3ef 8310 	mrs	r3, PRIMASK
 80105c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80105ca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80105cc:	b672      	cpsid	i
    return(int_posture);
 80105ce:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 80105d0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	429a      	cmp	r2, r3
 80105da:	d10a      	bne.n	80105f2 <_nx_udp_socket_unbind+0x9e>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 80105dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105e0:	33de      	adds	r3, #222	; 0xde
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	4413      	add	r3, r2
 80105e6:	2200      	movs	r2, #0
 80105e8:	605a      	str	r2, [r3, #4]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80105f0:	e01d      	b.n	801062e <_nx_udp_socket_unbind+0xda>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 80105fa:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8010604:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 8010606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801060a:	33de      	adds	r3, #222	; 0xde
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	4413      	add	r3, r2
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	429a      	cmp	r2, r3
 8010616:	d107      	bne.n	8010628 <_nx_udp_socket_unbind+0xd4>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801061c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801061e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010620:	33de      	adds	r3, #222	; 0xde
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	440b      	add	r3, r1
 8010626:	605a      	str	r2, [r3, #4]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	64da      	str	r2, [r3, #76]	; 0x4c
 801062e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010630:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010634:	f383 8810 	msr	PRIMASK, r3
}
 8010638:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801063e:	2b00      	cmp	r3, #0
 8010640:	d01b      	beq.n	801067a <_nx_udp_socket_unbind+0x126>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010646:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 8010654:	e00c      	b.n	8010670 <_nx_udp_socket_unbind+0x11c>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 8010656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010658:	69db      	ldr	r3, [r3, #28]
 801065a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 801065c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801065e:	f7fb fc49 	bl	800bef4 <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 8010662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010664:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801066a:	1e5a      	subs	r2, r3, #1
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010674:	2b00      	cmp	r3, #0
 8010676:	d1ee      	bne.n	8010656 <_nx_udp_socket_unbind+0x102>
 8010678:	e035      	b.n	80106e6 <_nx_udp_socket_unbind+0x192>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801067e:	2b00      	cmp	r3, #0
 8010680:	d031      	beq.n	80106e6 <_nx_udp_socket_unbind+0x192>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010686:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 801068e:	e026      	b.n	80106de <_nx_udp_socket_unbind+0x18a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010690:	f3ef 8310 	mrs	r3, PRIMASK
 8010694:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010696:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010698:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801069a:	b672      	cpsid	i
    return(int_posture);
 801069c:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 801069e:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80106a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a2:	2200      	movs	r2, #0
 80106a4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 80106a6:	4b5f      	ldr	r3, [pc, #380]	; (8010824 <_nx_udp_socket_unbind+0x2d0>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	3301      	adds	r3, #1
 80106ac:	4a5d      	ldr	r2, [pc, #372]	; (8010824 <_nx_udp_socket_unbind+0x2d0>)
 80106ae:	6013      	str	r3, [r2, #0]
 80106b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106b4:	6a3b      	ldr	r3, [r7, #32]
 80106b6:	f383 8810 	msr	PRIMASK, r3
}
 80106ba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 80106bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106be:	2226      	movs	r2, #38	; 0x26
 80106c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80106c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106c8:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 80106ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106ce:	4618      	mov	r0, r3
 80106d0:	f003 f914 	bl	80138fc <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106d8:	1e5a      	subs	r2, r3, #1
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1d4      	bne.n	8010690 <_nx_udp_socket_unbind+0x13c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106e6:	f3ef 8310 	mrs	r3, PRIMASK
 80106ea:	617b      	str	r3, [r7, #20]
    return(posture);
 80106ec:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80106ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80106f0:	b672      	cpsid	i
    return(int_posture);
 80106f2:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 80106f4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 80106fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d07f      	beq.n	8010802 <_nx_udp_socket_unbind+0x2ae>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8010702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010706:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010708:	429a      	cmp	r2, r3
 801070a:	d103      	bne.n	8010714 <_nx_udp_socket_unbind+0x1c0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	661a      	str	r2, [r3, #96]	; 0x60
 8010712:	e00d      	b.n	8010730 <_nx_udp_socket_unbind+0x1dc>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 801071c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801071e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8010720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010722:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010724:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 801072a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801072c:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 801072e:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010734:	1e5a      	subs	r2, r3, #1
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 801073a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801073c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801073e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 8010740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010742:	2200      	movs	r2, #0
 8010744:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 801074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074c:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 8010754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010758:	33de      	adds	r3, #222	; 0xde
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4413      	add	r3, r2
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d022      	beq.n	80107aa <_nx_udp_socket_unbind+0x256>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 8010764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010768:	33de      	adds	r3, #222	; 0xde
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4413      	add	r3, r2
 801076e:	685a      	ldr	r2, [r3, #4]
            new_socket_ptr -> nx_udp_socket_bound_next =
 8010770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010772:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8010774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010778:	33de      	adds	r3, #222	; 0xde
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	4413      	add	r3, r2
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 8010782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010784:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8010786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801078a:	33de      	adds	r3, #222	; 0xde
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	4413      	add	r3, r2
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010796:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 8010798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801079a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801079c:	33de      	adds	r3, #222	; 0xde
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	4413      	add	r3, r2
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a6:	651a      	str	r2, [r3, #80]	; 0x50
 80107a8:	e00c      	b.n	80107c4 <_nx_udp_socket_unbind+0x270>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 80107aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107ae:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 80107b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107b4:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 80107b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ba:	33de      	adds	r3, #222	; 0xde
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4413      	add	r3, r2
 80107c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107c2:	605a      	str	r2, [r3, #4]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80107c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c6:	2200      	movs	r2, #0
 80107c8:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80107ca:	4b16      	ldr	r3, [pc, #88]	; (8010824 <_nx_udp_socket_unbind+0x2d0>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	3301      	adds	r3, #1
 80107d0:	4a14      	ldr	r2, [pc, #80]	; (8010824 <_nx_udp_socket_unbind+0x2d0>)
 80107d2:	6013      	str	r3, [r2, #0]
 80107d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f383 8810 	msr	PRIMASK, r3
}
 80107de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 80107e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107e2:	2200      	movs	r2, #0
 80107e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80107e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107ea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80107ee:	4618      	mov	r0, r3
 80107f0:	f002 f8bc 	bl	801296c <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80107f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80107f6:	f003 f881 	bl	80138fc <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80107fa:	f003 f845 	bl	8013888 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 80107fe:	2300      	movs	r3, #0
 8010800:	e00c      	b.n	801081c <_nx_udp_socket_unbind+0x2c8>
 8010802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010804:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	f383 8810 	msr	PRIMASK, r3
}
 801080c:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801080e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010810:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010814:	4618      	mov	r0, r3
 8010816:	f002 f8a9 	bl	801296c <_tx_mutex_put>
        return(NX_SUCCESS);
 801081a:	2300      	movs	r3, #0
}
 801081c:	4618      	mov	r0, r3
 801081e:	3750      	adds	r7, #80	; 0x50
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	240023cc 	.word	0x240023cc

08010828 <_nx_utility_string_length_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_utility_string_length_check(CHAR *input_string, UINT *string_length, UINT max_string_length)
{
 8010828:	b480      	push	{r7}
 801082a:	b087      	sub	sp, #28
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]

UINT    i;


    /* Check for invalid input pointers.  */
    if (input_string == NX_NULL)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d101      	bne.n	801083e <_nx_utility_string_length_check+0x16>
    {
        return(NX_PTR_ERROR);
 801083a:	2307      	movs	r3, #7
 801083c:	e018      	b.n	8010870 <_nx_utility_string_length_check+0x48>
    }

    /* Traverse the string.  */
    for (i = 0; input_string[i]; i++)
 801083e:	2300      	movs	r3, #0
 8010840:	617b      	str	r3, [r7, #20]
 8010842:	e008      	b.n	8010856 <_nx_utility_string_length_check+0x2e>
    {

        /* Check if the string length is bigger than the max string length.  */
        if (i >= max_string_length)
 8010844:	697a      	ldr	r2, [r7, #20]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	429a      	cmp	r2, r3
 801084a:	d301      	bcc.n	8010850 <_nx_utility_string_length_check+0x28>
        {
            return(NX_SIZE_ERROR);
 801084c:	2309      	movs	r3, #9
 801084e:	e00f      	b.n	8010870 <_nx_utility_string_length_check+0x48>
    for (i = 0; input_string[i]; i++)
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	3301      	adds	r3, #1
 8010854:	617b      	str	r3, [r7, #20]
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	4413      	add	r3, r2
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d1f0      	bne.n	8010844 <_nx_utility_string_length_check+0x1c>
    }

    /* Return the string length if string_length is not NULL.
       String_length being NULL indicates the caller needs to check for string 
       length within the max_string_length. */
    if (string_length)
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d002      	beq.n	801086e <_nx_utility_string_length_check+0x46>
    {
        *string_length = i;
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	697a      	ldr	r2, [r7, #20]
 801086c:	601a      	str	r2, [r3, #0]
    }

    /* Return success.  */
    return(NX_SUCCESS);
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	371c      	adds	r7, #28
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr

0801087c <_nxd_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_packet_info_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address,
                                   UINT *protocol, UINT *port, UINT *interface_index)
{
 801087c:	b480      	push	{r7}
 801087e:	b089      	sub	sp, #36	; 0x24
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	607a      	str	r2, [r7, #4]
 8010888:	603b      	str	r3, [r7, #0]
#ifdef FEATURE_NX_IPV6
NX_IPV6_HEADER *ipv6_header;
#endif /* FEATURE_NX_IPV6 */


    if (ip_address)
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d011      	beq.n	80108b4 <_nxd_udp_packet_info_extract+0x38>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010896:	2b04      	cmp	r3, #4
 8010898:	d10a      	bne.n	80108b0 <_nxd_udp_packet_info_extract+0x34>
        {

            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801089e:	61fb      	str	r3, [r7, #28]

            ip_address -> nxd_ip_version = NX_IP_VERSION_V4;
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	2204      	movs	r2, #4
 80108a4:	601a      	str	r2, [r3, #0]

            /* At this point, the IP address in the IPv4 header is in host byte order. */
            ip_address -> nxd_ip_address.v4 = ipv4_header -> nx_ip_header_source_ip;
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	68da      	ldr	r2, [r3, #12]
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	605a      	str	r2, [r3, #4]
 80108ae:	e001      	b.n	80108b4 <_nxd_udp_packet_info_extract+0x38>
        else
#endif /* FEATURE_NX_IPV6 */
        {

            /* Invalid IP version . */
            return(NX_INVALID_PACKET);
 80108b0:	2312      	movs	r3, #18
 80108b2:	e032      	b.n	801091a <_nxd_udp_packet_info_extract+0x9e>
        }
    }

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	61bb      	str	r3, [r7, #24]

    /* Pickup the source port.  */
    source_port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	3b08      	subs	r3, #8
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	0c1b      	lsrs	r3, r3, #16
 80108c2:	617b      	str	r3, [r7, #20]
    if (port != NX_NULL)
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d002      	beq.n	80108d0 <_nxd_udp_packet_info_extract+0x54>
    {
        *port = source_port;
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	601a      	str	r2, [r3, #0]
    }

    if (protocol != NX_NULL)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d002      	beq.n	80108dc <_nxd_udp_packet_info_extract+0x60>
    {
        *protocol = 0x11;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2211      	movs	r2, #17
 80108da:	601a      	str	r2, [r3, #0]
    }

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, address, source_port, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    if (interface_index == NX_NULL)
 80108dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d101      	bne.n	80108e6 <_nxd_udp_packet_info_extract+0x6a>
    {
        return(NX_SUCCESS);
 80108e2:	2300      	movs	r3, #0
 80108e4:	e019      	b.n	801091a <_nxd_udp_packet_info_extract+0x9e>
    }

    /* Search for interface index number.  Initialize interface value as
       invalid (0xFFFFFFFF).  Once we find valid interface, we will update
       the returned value. */
    *interface_index = 0xFFFFFFFF;
 80108e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e8:	f04f 32ff 	mov.w	r2, #4294967295
 80108ec:	601a      	str	r2, [r3, #0]

    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80108f4:	2b04      	cmp	r3, #4
 80108f6:	d106      	bne.n	8010906 <_nxd_udp_packet_info_extract+0x8a>
    {
        nx_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108fc:	613b      	str	r3, [r7, #16]
    else
    {
        return(NX_SUCCESS);
    }

    if (nx_interface == NX_NULL)
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d104      	bne.n	801090e <_nxd_udp_packet_info_extract+0x92>
 8010904:	e001      	b.n	801090a <_nxd_udp_packet_info_extract+0x8e>
        return(NX_SUCCESS);
 8010906:	2300      	movs	r3, #0
 8010908:	e007      	b.n	801091a <_nxd_udp_packet_info_extract+0x9e>
    {

        /* No interface attached.  Done here, and return success. */
        return(NX_SUCCESS);
 801090a:	2300      	movs	r3, #0
 801090c:	e005      	b.n	801091a <_nxd_udp_packet_info_extract+0x9e>
    }

    *interface_index = (UINT)nx_interface -> nx_interface_index;
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	79db      	ldrb	r3, [r3, #7]
 8010912:	461a      	mov	r2, r3
 8010914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010916:	601a      	str	r2, [r3, #0]

    return(NX_SUCCESS);
 8010918:	2300      	movs	r3, #0
}
 801091a:	4618      	mov	r0, r3
 801091c:	3724      	adds	r7, #36	; 0x24
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 8010926:	b590      	push	{r4, r7, lr}
 8010928:	b097      	sub	sp, #92	; 0x5c
 801092a:	af04      	add	r7, sp, #16
 801092c:	60f8      	str	r0, [r7, #12]
 801092e:	60b9      	str	r1, [r7, #8]
 8010930:	607a      	str	r2, [r7, #4]
 8010932:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 8010934:	2300      	movs	r3, #0
 8010936:	647b      	str	r3, [r7, #68]	; 0x44
 8010938:	2300      	movs	r3, #0
 801093a:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 801093c:	2300      	movs	r3, #0
 801093e:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 8010940:	2300      	movs	r3, #0
 8010942:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 8010944:	2301      	movs	r3, #1
 8010946:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010948:	f3ef 8310 	mrs	r3, PRIMASK
 801094c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8010950:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010952:	b672      	cpsid	i
    return(int_posture);
 8010954:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 8010956:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801095c:	2b00      	cmp	r3, #0
 801095e:	d107      	bne.n	8010970 <_nxd_udp_socket_send+0x4a>
 8010960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010962:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	f383 8810 	msr	PRIMASK, r3
}
 801096a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 801096c:	2324      	movs	r3, #36	; 0x24
 801096e:	e0d3      	b.n	8010b18 <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010978:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	f383 8810 	msr	PRIMASK, r3
}
 8010980:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	2b04      	cmp	r3, #4
 8010988:	d118      	bne.n	80109bc <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6859      	ldr	r1, [r3, #4]
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010994:	f107 0314 	add.w	r3, r7, #20
 8010998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801099a:	f7f9 ff89 	bl	800a8b0 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d101      	bne.n	80109aa <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 80109a6:	2321      	movs	r3, #33	; 0x21
 80109a8:	e0b6      	b.n	8010b18 <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109ae:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	3304      	adds	r3, #4
 80109b4:	643b      	str	r3, [r7, #64]	; 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 80109b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109b8:	3314      	adds	r3, #20
 80109ba:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	689b      	ldr	r3, [r3, #8]
 80109c0:	f1a3 0208 	sub.w	r2, r3, #8
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	b2da      	uxtb	r2, r3
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 80109d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109da:	1c5a      	adds	r2, r3, #1
 80109dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 80109e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ec:	441a      	add	r2, r3
 80109ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	691b      	ldr	r3, [r3, #16]
 80109f8:	1c5a      	adds	r2, r3, #1
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	695a      	ldr	r2, [r3, #20]
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a06:	441a      	add	r2, r3
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a10:	f103 0208 	add.w	r2, r3, #8
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	041a      	lsls	r2, r3, #16
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 8010a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2a:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a30:	041a      	lsls	r2, r3, #16
 8010a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a34:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8010a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	ba1a      	rev	r2, r3
 8010a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8010a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	ba1a      	rev	r2, r3
 8010a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a48:	605a      	str	r2, [r3, #4]
       Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
       driver is able to compute UDP checksum in hardware, let the driver handle the checksum
       computation.
     */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d003      	beq.n	8010a5a <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 8010a56:	2b06      	cmp	r3, #6
 8010a58:	d136      	bne.n	8010ac8 <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8010a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a5e:	f003 0310 	and.w	r3, r3, #16
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d001      	beq.n	8010a6a <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 8010a66:	2300      	movs	r3, #0
 8010a68:	63bb      	str	r3, [r7, #56]	; 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 8010a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d025      	beq.n	8010abc <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 8010a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a76:	9300      	str	r3, [sp, #0]
 8010a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a7a:	2111      	movs	r1, #17
 8010a7c:	68b8      	ldr	r0, [r7, #8]
 8010a7e:	f7f8 fc7f 	bl	8009380 <_nx_ip_checksum_compute>
 8010a82:	4603      	mov	r3, r0
 8010a84:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 8010a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a88:	43db      	mvns	r3, r3
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 8010a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d102      	bne.n	8010a9a <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 8010a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a98:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8010a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	ba1a      	rev	r2, r3
 8010aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa2:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8010aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa6:	685a      	ldr	r2, [r3, #4]
 8010aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aaa:	431a      	orrs	r2, r3
 8010aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aae:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8010ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	ba1a      	rev	r2, r3
 8010ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab8:	605a      	str	r2, [r3, #4]
 8010aba:	e005      	b.n	8010ac8 <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ac0:	f043 0210 	orr.w	r2, r3, #16
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8010ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aca:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010ace:	f04f 31ff 	mov.w	r1, #4294967295
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f001 fcd2 	bl	801247c <_tx_mutex_get>

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	2b04      	cmp	r3, #4
 8010ade:	d114      	bne.n	8010b0a <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6858      	ldr	r0, [r3, #4]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010af0:	6979      	ldr	r1, [r7, #20]
 8010af2:	9103      	str	r1, [sp, #12]
 8010af4:	9202      	str	r2, [sp, #8]
 8010af6:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8010afa:	9201      	str	r2, [sp, #4]
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	4623      	mov	r3, r4
 8010b00:	4602      	mov	r2, r0
 8010b02:	68b9      	ldr	r1, [r7, #8]
 8010b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b06:	f7f9 fe61 	bl	800a7cc <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010b10:	4618      	mov	r0, r3
 8010b12:	f001 ff2b 	bl	801296c <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8010b16:	2300      	movs	r3, #0
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	374c      	adds	r7, #76	; 0x4c
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd90      	pop	{r4, r7, pc}

08010b20 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d007      	beq.n	8010b42 <_nxe_arp_enable+0x22>
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	4a1c      	ldr	r2, [pc, #112]	; (8010ba8 <_nxe_arp_enable+0x88>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d102      	bne.n	8010b42 <_nxe_arp_enable+0x22>
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d101      	bne.n	8010b46 <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 8010b42:	2307      	movs	r3, #7
 8010b44:	e02c      	b.n	8010ba0 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d001      	beq.n	8010b54 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 8010b50:	2315      	movs	r3, #21
 8010b52:	e025      	b.n	8010ba0 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b33      	cmp	r3, #51	; 0x33
 8010b58:	d801      	bhi.n	8010b5e <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 8010b5a:	2309      	movs	r3, #9
 8010b5c:	e020      	b.n	8010ba0 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010b5e:	f3ef 8305 	mrs	r3, IPSR
 8010b62:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010b64:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010b66:	4b11      	ldr	r3, [pc, #68]	; (8010bac <_nxe_arp_enable+0x8c>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d009      	beq.n	8010b84 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010b70:	f3ef 8305 	mrs	r3, IPSR
 8010b74:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010b76:	697a      	ldr	r2, [r7, #20]
 8010b78:	4b0c      	ldr	r3, [pc, #48]	; (8010bac <_nxe_arp_enable+0x8c>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010b82:	d304      	bcc.n	8010b8e <_nxe_arp_enable+0x6e>
 8010b84:	4b0a      	ldr	r3, [pc, #40]	; (8010bb0 <_nxe_arp_enable+0x90>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a0a      	ldr	r2, [pc, #40]	; (8010bb4 <_nxe_arp_enable+0x94>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d101      	bne.n	8010b92 <_nxe_arp_enable+0x72>
 8010b8e:	2311      	movs	r3, #17
 8010b90:	e006      	b.n	8010ba0 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	68b9      	ldr	r1, [r7, #8]
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f7f7 f9ba 	bl	8007f10 <_nx_arp_enable>
 8010b9c:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8010b9e:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3720      	adds	r7, #32
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}
 8010ba8:	49502020 	.word	0x49502020
 8010bac:	2400008c 	.word	0x2400008c
 8010bb0:	240023d0 	.word	0x240023d0
 8010bb4:	24002470 	.word	0x24002470

08010bb8 <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b086      	sub	sp, #24
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d004      	beq.n	8010bd0 <_nxe_icmp_enable+0x18>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4a17      	ldr	r2, [pc, #92]	; (8010c28 <_nxe_icmp_enable+0x70>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d001      	beq.n	8010bd4 <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8010bd0:	2307      	movs	r3, #7
 8010bd2:	e025      	b.n	8010c20 <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d001      	beq.n	8010be2 <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8010bde:	2315      	movs	r3, #21
 8010be0:	e01e      	b.n	8010c20 <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010be2:	f3ef 8305 	mrs	r3, IPSR
 8010be6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010be8:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010bea:	4b10      	ldr	r3, [pc, #64]	; (8010c2c <_nxe_icmp_enable+0x74>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d009      	beq.n	8010c08 <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010bf4:	f3ef 8305 	mrs	r3, IPSR
 8010bf8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8010bfa:	68fa      	ldr	r2, [r7, #12]
 8010bfc:	4b0b      	ldr	r3, [pc, #44]	; (8010c2c <_nxe_icmp_enable+0x74>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4313      	orrs	r3, r2
 8010c02:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010c06:	d304      	bcc.n	8010c12 <_nxe_icmp_enable+0x5a>
 8010c08:	4b09      	ldr	r3, [pc, #36]	; (8010c30 <_nxe_icmp_enable+0x78>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a09      	ldr	r2, [pc, #36]	; (8010c34 <_nxe_icmp_enable+0x7c>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d101      	bne.n	8010c16 <_nxe_icmp_enable+0x5e>
 8010c12:	2311      	movs	r3, #17
 8010c14:	e004      	b.n	8010c20 <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f7f7 ff84 	bl	8008b24 <_nx_icmp_enable>
 8010c1c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8010c1e:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	49502020 	.word	0x49502020
 8010c2c:	2400008c 	.word	0x2400008c
 8010c30:	240023d0 	.word	0x240023d0
 8010c34:	24002470 	.word	0x24002470

08010c38 <_nxe_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b088      	sub	sp, #32
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d004      	beq.n	8010c54 <_nxe_ip_address_change_notify+0x1c>
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	4a15      	ldr	r2, [pc, #84]	; (8010ca4 <_nxe_ip_address_change_notify+0x6c>)
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d001      	beq.n	8010c58 <_nxe_ip_address_change_notify+0x20>
    {
        return(NX_PTR_ERROR);
 8010c54:	2307      	movs	r3, #7
 8010c56:	e020      	b.n	8010c9a <_nxe_ip_address_change_notify+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010c58:	f3ef 8305 	mrs	r3, IPSR
 8010c5c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010c5e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010c60:	4b11      	ldr	r3, [pc, #68]	; (8010ca8 <_nxe_ip_address_change_notify+0x70>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4313      	orrs	r3, r2
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d009      	beq.n	8010c7e <_nxe_ip_address_change_notify+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010c6a:	f3ef 8305 	mrs	r3, IPSR
 8010c6e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010c70:	697a      	ldr	r2, [r7, #20]
 8010c72:	4b0d      	ldr	r3, [pc, #52]	; (8010ca8 <_nxe_ip_address_change_notify+0x70>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	4313      	orrs	r3, r2
 8010c78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010c7c:	d304      	bcc.n	8010c88 <_nxe_ip_address_change_notify+0x50>
 8010c7e:	4b0b      	ldr	r3, [pc, #44]	; (8010cac <_nxe_ip_address_change_notify+0x74>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	4a0b      	ldr	r2, [pc, #44]	; (8010cb0 <_nxe_ip_address_change_notify+0x78>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d101      	bne.n	8010c8c <_nxe_ip_address_change_notify+0x54>
 8010c88:	2311      	movs	r3, #17
 8010c8a:	e006      	b.n	8010c9a <_nxe_ip_address_change_notify+0x62>

    /* Call actual IP address change notify function.  */
    status =  _nx_ip_address_change_notify(ip_ptr, ip_address_change_notify, additional_info);
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	68b9      	ldr	r1, [r7, #8]
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f7f8 fb15 	bl	80092c0 <_nx_ip_address_change_notify>
 8010c96:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8010c98:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3720      	adds	r7, #32
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	49502020 	.word	0x49502020
 8010ca8:	2400008c 	.word	0x2400008c
 8010cac:	240023d0 	.word	0x240023d0
 8010cb0:	24002470 	.word	0x24002470

08010cb4 <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b088      	sub	sp, #32
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00a      	beq.n	8010cdc <_nxe_ip_address_get+0x28>
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4a18      	ldr	r2, [pc, #96]	; (8010d2c <_nxe_ip_address_get+0x78>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d105      	bne.n	8010cdc <_nxe_ip_address_get+0x28>
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d002      	beq.n	8010cdc <_nxe_ip_address_get+0x28>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d101      	bne.n	8010ce0 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 8010cdc:	2307      	movs	r3, #7
 8010cde:	e020      	b.n	8010d22 <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010ce0:	f3ef 8305 	mrs	r3, IPSR
 8010ce4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010ce6:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010ce8:	4b11      	ldr	r3, [pc, #68]	; (8010d30 <_nxe_ip_address_get+0x7c>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4313      	orrs	r3, r2
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d009      	beq.n	8010d06 <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010cf2:	f3ef 8305 	mrs	r3, IPSR
 8010cf6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010cf8:	697a      	ldr	r2, [r7, #20]
 8010cfa:	4b0d      	ldr	r3, [pc, #52]	; (8010d30 <_nxe_ip_address_get+0x7c>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010d04:	d304      	bcc.n	8010d10 <_nxe_ip_address_get+0x5c>
 8010d06:	4b0b      	ldr	r3, [pc, #44]	; (8010d34 <_nxe_ip_address_get+0x80>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a0b      	ldr	r2, [pc, #44]	; (8010d38 <_nxe_ip_address_get+0x84>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d101      	bne.n	8010d14 <_nxe_ip_address_get+0x60>
 8010d10:	2311      	movs	r3, #17
 8010d12:	e006      	b.n	8010d22 <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	68b9      	ldr	r1, [r7, #8]
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f7f8 fb00 	bl	800931e <_nx_ip_address_get>
 8010d1e:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8010d20:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3720      	adds	r7, #32
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	49502020 	.word	0x49502020
 8010d30:	2400008c 	.word	0x2400008c
 8010d34:	240023d0 	.word	0x240023d0
 8010d38:	24002470 	.word	0x24002470

08010d3c <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b092      	sub	sp, #72	; 0x48
 8010d40:	af06      	add	r7, sp, #24
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
 8010d48:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d012      	beq.n	8010d7a <_nxe_ip_create+0x3e>
 8010d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00f      	beq.n	8010d7a <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 8010d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d5c:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8010d5e:	4a59      	ldr	r2, [pc, #356]	; (8010ec4 <_nxe_ip_create+0x188>)
 8010d60:	4293      	cmp	r3, r2
 8010d62:	d10a      	bne.n	8010d7a <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 8010d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d007      	beq.n	8010d7a <_nxe_ip_create+0x3e>
 8010d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d004      	beq.n	8010d7a <_nxe_ip_create+0x3e>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 8010d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d72:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d001      	beq.n	8010d7e <_nxe_ip_create+0x42>
    {
        return(NX_PTR_ERROR);
 8010d7a:	2307      	movs	r3, #7
 8010d7c:	e09d      	b.n	8010eba <_nxe_ip_create+0x17e>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 8010d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d80:	2bc7      	cmp	r3, #199	; 0xc7
 8010d82:	d801      	bhi.n	8010d88 <_nxe_ip_create+0x4c>
    {
        return(NX_SIZE_ERROR);
 8010d84:	2309      	movs	r3, #9
 8010d86:	e098      	b.n	8010eba <_nxe_ip_create+0x17e>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 8010d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d8a:	2b1f      	cmp	r3, #31
 8010d8c:	d901      	bls.n	8010d92 <_nxe_ip_create+0x56>
    {
        return(NX_OPTION_ERROR);
 8010d8e:	230a      	movs	r3, #10
 8010d90:	e093      	b.n	8010eba <_nxe_ip_create+0x17e>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 8010d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d94:	3b01      	subs	r3, #1
 8010d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d98:	4413      	add	r3, r2
 8010d9a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8010d9c:	f002 fb14 	bl	80133c8 <_tx_thread_identify>
 8010da0:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d006      	beq.n	8010db6 <_nxe_ip_create+0x7a>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8010da8:	f107 0310 	add.w	r3, r7, #16
 8010dac:	461a      	mov	r2, r3
 8010dae:	2100      	movs	r1, #0
 8010db0:	6a38      	ldr	r0, [r7, #32]
 8010db2:	f002 fb63 	bl	801347c <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 8010db6:	4b44      	ldr	r3, [pc, #272]	; (8010ec8 <_nxe_ip_create+0x18c>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 8010dbc:	4b43      	ldr	r3, [pc, #268]	; (8010ecc <_nxe_ip_create+0x190>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 8010dc2:	e02b      	b.n	8010e1c <_nxe_ip_create+0xe0>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d017      	beq.n	8010dfc <_nxe_ip_create+0xc0>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8010dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 8010dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d305      	bcc.n	8010de4 <_nxe_ip_create+0xa8>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8010dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dda:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8010dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d30b      	bcc.n	8010dfc <_nxe_ip_create+0xc0>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 8010de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8010dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d311      	bcc.n	8010e14 <_nxe_ip_create+0xd8>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8010df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d20b      	bcs.n	8010e14 <_nxe_ip_create+0xd8>
        {

            /* Restore preemption.  */
            if (current_thread)
 8010dfc:	6a3b      	ldr	r3, [r7, #32]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d006      	beq.n	8010e10 <_nxe_ip_create+0xd4>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	f107 0210 	add.w	r2, r7, #16
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6a38      	ldr	r0, [r7, #32]
 8010e0c:	f002 fb36 	bl	801347c <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 8010e10:	2307      	movs	r3, #7
 8010e12:	e052      	b.n	8010eba <_nxe_ip_create+0x17e>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 8010e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e16:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8010e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 8010e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1e:	1e5a      	subs	r2, r3, #1
 8010e20:	62ba      	str	r2, [r7, #40]	; 0x28
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1ce      	bne.n	8010dc4 <_nxe_ip_create+0x88>
    }

    /* Restore preemption.  */
    if (current_thread)
 8010e26:	6a3b      	ldr	r3, [r7, #32]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d006      	beq.n	8010e3a <_nxe_ip_create+0xfe>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	f107 0210 	add.w	r2, r7, #16
 8010e32:	4619      	mov	r1, r3
 8010e34:	6a38      	ldr	r0, [r7, #32]
 8010e36:	f002 fb21 	bl	801347c <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d010      	beq.n	8010e62 <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8010e40:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	da0d      	bge.n	8010e62 <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8010e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e50:	d007      	beq.n	8010e62 <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8010e58:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8010e5c:	d001      	beq.n	8010e62 <_nxe_ip_create+0x126>
    {
        return(NX_IP_ADDRESS_ERROR);
 8010e5e:	2321      	movs	r3, #33	; 0x21
 8010e60:	e02b      	b.n	8010eba <_nxe_ip_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010e62:	f3ef 8305 	mrs	r3, IPSR
 8010e66:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010e68:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010e6a:	4b19      	ldr	r3, [pc, #100]	; (8010ed0 <_nxe_ip_create+0x194>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d009      	beq.n	8010e88 <_nxe_ip_create+0x14c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010e74:	f3ef 8305 	mrs	r3, IPSR
 8010e78:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010e7a:	697a      	ldr	r2, [r7, #20]
 8010e7c:	4b14      	ldr	r3, [pc, #80]	; (8010ed0 <_nxe_ip_create+0x194>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4313      	orrs	r3, r2
 8010e82:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010e86:	d304      	bcc.n	8010e92 <_nxe_ip_create+0x156>
 8010e88:	4b12      	ldr	r3, [pc, #72]	; (8010ed4 <_nxe_ip_create+0x198>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a12      	ldr	r2, [pc, #72]	; (8010ed8 <_nxe_ip_create+0x19c>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d101      	bne.n	8010e96 <_nxe_ip_create+0x15a>
 8010e92:	2311      	movs	r3, #17
 8010e94:	e011      	b.n	8010eba <_nxe_ip_create+0x17e>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 8010e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e98:	9304      	str	r3, [sp, #16]
 8010e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e9c:	9303      	str	r3, [sp, #12]
 8010e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ea0:	9302      	str	r3, [sp, #8]
 8010ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ea4:	9301      	str	r3, [sp, #4]
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	9300      	str	r3, [sp, #0]
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	687a      	ldr	r2, [r7, #4]
 8010eae:	68b9      	ldr	r1, [r7, #8]
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f7f8 fb51 	bl	8009558 <_nx_ip_create>
 8010eb6:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 8010eb8:	69fb      	ldr	r3, [r7, #28]
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3730      	adds	r7, #48	; 0x30
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	5041434b 	.word	0x5041434b
 8010ec8:	240022d0 	.word	0x240022d0
 8010ecc:	240022cc 	.word	0x240022cc
 8010ed0:	2400008c 	.word	0x2400008c
 8010ed4:	240023d0 	.word	0x240023d0
 8010ed8:	24002470 	.word	0x24002470

08010edc <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b086      	sub	sp, #24
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	60f8      	str	r0, [r7, #12]
 8010ee4:	60b9      	str	r1, [r7, #8]
 8010ee6:	607a      	str	r2, [r7, #4]
 8010ee8:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d007      	beq.n	8010f00 <_nxe_packet_allocate+0x24>
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4a18      	ldr	r2, [pc, #96]	; (8010f58 <_nxe_packet_allocate+0x7c>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d102      	bne.n	8010f00 <_nxe_packet_allocate+0x24>
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d101      	bne.n	8010f04 <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 8010f00:	2307      	movs	r3, #7
 8010f02:	e025      	b.n	8010f50 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f003 0303 	and.w	r3, r3, #3
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d001      	beq.n	8010f12 <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 8010f0e:	230a      	movs	r3, #10
 8010f10:	e01e      	b.n	8010f50 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d013      	beq.n	8010f40 <_nxe_packet_allocate+0x64>
 8010f18:	4b10      	ldr	r3, [pc, #64]	; (8010f5c <_nxe_packet_allocate+0x80>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00d      	beq.n	8010f3c <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010f20:	f3ef 8305 	mrs	r3, IPSR
 8010f24:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010f26:	693a      	ldr	r2, [r7, #16]
 8010f28:	4b0d      	ldr	r3, [pc, #52]	; (8010f60 <_nxe_packet_allocate+0x84>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4313      	orrs	r3, r2
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d104      	bne.n	8010f3c <_nxe_packet_allocate+0x60>
 8010f32:	4b0a      	ldr	r3, [pc, #40]	; (8010f5c <_nxe_packet_allocate+0x80>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4a0b      	ldr	r2, [pc, #44]	; (8010f64 <_nxe_packet_allocate+0x88>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d101      	bne.n	8010f40 <_nxe_packet_allocate+0x64>
 8010f3c:	2311      	movs	r3, #17
 8010f3e:	e007      	b.n	8010f50 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	68b9      	ldr	r1, [r7, #8]
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f7fa fb7c 	bl	800b644 <_nx_packet_allocate>
 8010f4c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8010f4e:	697b      	ldr	r3, [r7, #20]
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3718      	adds	r7, #24
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	5041434b 	.word	0x5041434b
 8010f5c:	240023d0 	.word	0x240023d0
 8010f60:	2400008c 	.word	0x2400008c
 8010f64:	24002470 	.word	0x24002470

08010f68 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b094      	sub	sp, #80	; 0x50
 8010f6c:	af02      	add	r7, sp, #8
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
 8010f74:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 8010f76:	2300      	movs	r3, #0
 8010f78:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d005      	beq.n	8010f8c <_nxe_packet_pool_create+0x24>
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d002      	beq.n	8010f8c <_nxe_packet_pool_create+0x24>
 8010f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f88:	2b3c      	cmp	r3, #60	; 0x3c
 8010f8a:	d001      	beq.n	8010f90 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 8010f8c:	2307      	movs	r3, #7
 8010f8e:	e0a7      	b.n	80110e0 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	3303      	adds	r3, #3
 8010f94:	f023 0303 	bic.w	r3, r3, #3
 8010f98:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8010f9a:	683a      	ldr	r2, [r7, #0]
 8010f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f9e:	1ad2      	subs	r2, r2, r3
 8010fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa2:	4413      	add	r3, r2
 8010fa4:	f023 0303 	bic.w	r3, r3, #3
 8010fa8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8010faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fac:	333c      	adds	r3, #60	; 0x3c
 8010fae:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8010fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb2:	3303      	adds	r3, #3
 8010fb4:	f023 0303 	bic.w	r3, r3, #3
 8010fb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8010fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8010fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	3303      	adds	r3, #3
 8010fca:	f023 0203 	bic.w	r2, r3, #3
 8010fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 8010fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fd6:	2b04      	cmp	r3, #4
 8010fd8:	d908      	bls.n	8010fec <_nxe_packet_pool_create+0x84>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d005      	beq.n	8010fec <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 8010fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe4:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 8010fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d201      	bcs.n	8010ff0 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 8010fec:	2309      	movs	r3, #9
 8010fee:	e077      	b.n	80110e0 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 8010ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	683a      	ldr	r2, [r7, #0]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8010ffa:	f002 f9e5 	bl	80133c8 <_tx_thread_identify>
 8010ffe:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 8011000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011002:	2b00      	cmp	r3, #0
 8011004:	d006      	beq.n	8011014 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8011006:	f107 0310 	add.w	r3, r7, #16
 801100a:	461a      	mov	r2, r3
 801100c:	2100      	movs	r1, #0
 801100e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011010:	f002 fa34 	bl	801347c <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 8011014:	4b34      	ldr	r3, [pc, #208]	; (80110e8 <_nxe_packet_pool_create+0x180>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 801101a:	4b34      	ldr	r3, [pc, #208]	; (80110ec <_nxe_packet_pool_create+0x184>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 8011020:	e02b      	b.n	801107a <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 8011022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011024:	6a1a      	ldr	r2, [r3, #32]
 8011026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102a:	3b01      	subs	r3, #1
 801102c:	4413      	add	r3, r2
 801102e:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011034:	429a      	cmp	r2, r3
 8011036:	d011      	beq.n	801105c <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8011038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801103a:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 801103c:	683a      	ldr	r2, [r7, #0]
 801103e:	429a      	cmp	r2, r3
 8011040:	d303      	bcc.n	801104a <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8011042:	683a      	ldr	r2, [r7, #0]
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	429a      	cmp	r2, r3
 8011048:	d308      	bcc.n	801105c <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 801104a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801104c:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 801104e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011050:	429a      	cmp	r2, r3
 8011052:	d30f      	bcc.n	8011074 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 8011054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	429a      	cmp	r2, r3
 801105a:	d20b      	bcs.n	8011074 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	2b00      	cmp	r3, #0
 8011060:	d006      	beq.n	8011070 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	f107 0210 	add.w	r2, r7, #16
 8011068:	4619      	mov	r1, r3
 801106a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801106c:	f002 fa06 	bl	801347c <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 8011070:	2307      	movs	r3, #7
 8011072:	e035      	b.n	80110e0 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 8011074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011078:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 801107a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801107c:	1e5a      	subs	r2, r3, #1
 801107e:	643a      	str	r2, [r7, #64]	; 0x40
 8011080:	2b00      	cmp	r3, #0
 8011082:	d1ce      	bne.n	8011022 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 8011084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011086:	2b00      	cmp	r3, #0
 8011088:	d006      	beq.n	8011098 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	f107 0210 	add.w	r2, r7, #16
 8011090:	4619      	mov	r1, r3
 8011092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011094:	f002 f9f2 	bl	801347c <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011098:	f3ef 8305 	mrs	r3, IPSR
 801109c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801109e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 80110a0:	4b13      	ldr	r3, [pc, #76]	; (80110f0 <_nxe_packet_pool_create+0x188>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4313      	orrs	r3, r2
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d009      	beq.n	80110be <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80110aa:	f3ef 8305 	mrs	r3, IPSR
 80110ae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80110b0:	697a      	ldr	r2, [r7, #20]
 80110b2:	4b0f      	ldr	r3, [pc, #60]	; (80110f0 <_nxe_packet_pool_create+0x188>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4313      	orrs	r3, r2
 80110b8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80110bc:	d304      	bcc.n	80110c8 <_nxe_packet_pool_create+0x160>
 80110be:	4b0d      	ldr	r3, [pc, #52]	; (80110f4 <_nxe_packet_pool_create+0x18c>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4a0d      	ldr	r2, [pc, #52]	; (80110f8 <_nxe_packet_pool_create+0x190>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d101      	bne.n	80110cc <_nxe_packet_pool_create+0x164>
 80110c8:	2311      	movs	r3, #17
 80110ca:	e009      	b.n	80110e0 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 80110cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	68b9      	ldr	r1, [r7, #8]
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f7fa fdb2 	bl	800bc40 <_nx_packet_pool_create>
 80110dc:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 80110de:	6a3b      	ldr	r3, [r7, #32]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3748      	adds	r7, #72	; 0x48
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	240022d8 	.word	0x240022d8
 80110ec:	240022d4 	.word	0x240022d4
 80110f0:	2400008c 	.word	0x2400008c
 80110f4:	240023d0 	.word	0x240023d0
 80110f8:	24002470 	.word	0x24002470

080110fc <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d009      	beq.n	8011124 <_nxe_packet_release+0x28>
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d005      	beq.n	8011124 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 801111e:	4a12      	ldr	r2, [pc, #72]	; (8011168 <_nxe_packet_release+0x6c>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d001      	beq.n	8011128 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 8011124:	2307      	movs	r3, #7
 8011126:	e01a      	b.n	801115e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	689a      	ldr	r2, [r3, #8]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	691b      	ldr	r3, [r3, #16]
 8011130:	429a      	cmp	r2, r3
 8011132:	d201      	bcs.n	8011138 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 8011134:	2302      	movs	r3, #2
 8011136:	e012      	b.n	801115e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	68da      	ldr	r2, [r3, #12]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	695b      	ldr	r3, [r3, #20]
 8011140:	429a      	cmp	r2, r3
 8011142:	d901      	bls.n	8011148 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 8011144:	2303      	movs	r3, #3
 8011146:	e00a      	b.n	801115e <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f7fa fed3 	bl	800bef4 <_nx_packet_release>
 801114e:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d102      	bne.n	801115c <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 801115c:	68bb      	ldr	r3, [r7, #8]
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	5041434b 	.word	0x5041434b

0801116c <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b084      	sub	sp, #16
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d009      	beq.n	8011194 <_nxe_packet_transmit_release+0x28>
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d005      	beq.n	8011194 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 801118e:	4a12      	ldr	r2, [pc, #72]	; (80111d8 <_nxe_packet_transmit_release+0x6c>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d001      	beq.n	8011198 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 8011194:	2307      	movs	r3, #7
 8011196:	e01a      	b.n	80111ce <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	689a      	ldr	r2, [r3, #8]
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	691b      	ldr	r3, [r3, #16]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d201      	bcs.n	80111a8 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 80111a4:	2302      	movs	r3, #2
 80111a6:	e012      	b.n	80111ce <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	68da      	ldr	r2, [r3, #12]
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	695b      	ldr	r3, [r3, #20]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d901      	bls.n	80111b8 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 80111b4:	2303      	movs	r3, #3
 80111b6:	e00a      	b.n	80111ce <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 80111b8:	68f8      	ldr	r0, [r7, #12]
 80111ba:	f7fa ff53 	bl	800c064 <_nx_packet_transmit_release>
 80111be:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d102      	bne.n	80111cc <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2200      	movs	r2, #0
 80111ca:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 80111cc:	68bb      	ldr	r3, [r7, #8]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	5041434b 	.word	0x5041434b

080111dc <_nxe_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_enable(NX_IP *ip_ptr)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b086      	sub	sp, #24
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d004      	beq.n	80111f4 <_nxe_tcp_enable+0x18>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4a15      	ldr	r2, [pc, #84]	; (8011244 <_nxe_tcp_enable+0x68>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d001      	beq.n	80111f8 <_nxe_tcp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 80111f4:	2307      	movs	r3, #7
 80111f6:	e020      	b.n	801123a <_nxe_tcp_enable+0x5e>
    }

    /* Check to see if TCP is already enabled.  */
    if (ip_ptr -> nx_ip_tcp_packet_receive)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <_nxe_tcp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8011202:	2315      	movs	r3, #21
 8011204:	e019      	b.n	801123a <_nxe_tcp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011206:	f3ef 8305 	mrs	r3, IPSR
 801120a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801120c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 801120e:	4b0e      	ldr	r3, [pc, #56]	; (8011248 <_nxe_tcp_enable+0x6c>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	4313      	orrs	r3, r2
 8011214:	2b00      	cmp	r3, #0
 8011216:	d00b      	beq.n	8011230 <_nxe_tcp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011218:	f3ef 8305 	mrs	r3, IPSR
 801121c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801121e:	68fa      	ldr	r2, [r7, #12]
 8011220:	4b09      	ldr	r3, [pc, #36]	; (8011248 <_nxe_tcp_enable+0x6c>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4313      	orrs	r3, r2
 8011226:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801122a:	d201      	bcs.n	8011230 <_nxe_tcp_enable+0x54>
 801122c:	2311      	movs	r3, #17
 801122e:	e004      	b.n	801123a <_nxe_tcp_enable+0x5e>

    /* Call actual TCP enable function.  */
    status =  _nx_tcp_enable(ip_ptr);
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f7fb fa13 	bl	800c65c <_nx_tcp_enable>
 8011236:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8011238:	697b      	ldr	r3, [r7, #20]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	49502020 	.word	0x49502020
 8011248:	2400008c 	.word	0x2400008c

0801124c <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b086      	sub	sp, #24
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d004      	beq.n	8011264 <_nxe_udp_enable+0x18>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a15      	ldr	r2, [pc, #84]	; (80112b4 <_nxe_udp_enable+0x68>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d001      	beq.n	8011268 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8011264:	2307      	movs	r3, #7
 8011266:	e020      	b.n	80112aa <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801126e:	2b00      	cmp	r3, #0
 8011270:	d001      	beq.n	8011276 <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8011272:	2315      	movs	r3, #21
 8011274:	e019      	b.n	80112aa <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011276:	f3ef 8305 	mrs	r3, IPSR
 801127a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801127c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 801127e:	4b0e      	ldr	r3, [pc, #56]	; (80112b8 <_nxe_udp_enable+0x6c>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4313      	orrs	r3, r2
 8011284:	2b00      	cmp	r3, #0
 8011286:	d00b      	beq.n	80112a0 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011288:	f3ef 8305 	mrs	r3, IPSR
 801128c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	4b09      	ldr	r3, [pc, #36]	; (80112b8 <_nxe_udp_enable+0x6c>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4313      	orrs	r3, r2
 8011296:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801129a:	d201      	bcs.n	80112a0 <_nxe_udp_enable+0x54>
 801129c:	2311      	movs	r3, #17
 801129e:	e004      	b.n	80112aa <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f7fe fa91 	bl	800f7c8 <_nx_udp_enable>
 80112a6:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 80112a8:	697b      	ldr	r3, [r7, #20]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3718      	adds	r7, #24
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	49502020 	.word	0x49502020
 80112b8:	2400008c 	.word	0x2400008c

080112bc <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b096      	sub	sp, #88	; 0x58
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	3303      	adds	r3, #3
 80112ce:	f023 0303 	bic.w	r3, r3, #3
 80112d2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80112d4:	f3ef 8310 	mrs	r3, PRIMASK
 80112d8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80112da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80112dc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80112de:	b672      	cpsid	i
    return(int_posture);
 80112e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80112e2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80112e4:	4b55      	ldr	r3, [pc, #340]	; (801143c <_tx_byte_allocate+0x180>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 80112ea:	2300      	movs	r3, #0
 80112ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80112f2:	621a      	str	r2, [r3, #32]
 80112f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fa:	f383 8810 	msr	PRIMASK, r3
}
 80112fe:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8011300:	6879      	ldr	r1, [r7, #4]
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f000 f9b2 	bl	801166c <_tx_byte_pool_search>
 8011308:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801130a:	f3ef 8310 	mrs	r3, PRIMASK
 801130e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011312:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011314:	b672      	cpsid	i
    return(int_posture);
 8011316:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8011318:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 801131a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <_tx_byte_allocate+0x6a>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8011320:	2301      	movs	r3, #1
 8011322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011324:	e006      	b.n	8011334 <_tx_byte_allocate+0x78>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	6a1b      	ldr	r3, [r3, #32]
 801132a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801132c:	429a      	cmp	r2, r3
 801132e:	d101      	bne.n	8011334 <_tx_byte_allocate+0x78>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8011330:	2301      	movs	r3, #1
 8011332:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8011334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0d9      	beq.n	80112ee <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801133e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8011340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011342:	2b00      	cmp	r3, #0
 8011344:	d008      	beq.n	8011358 <_tx_byte_allocate+0x9c>
 8011346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011348:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	f383 8810 	msr	PRIMASK, r3
}
 8011350:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8011352:	2300      	movs	r3, #0
 8011354:	653b      	str	r3, [r7, #80]	; 0x50
 8011356:	e06c      	b.n	8011432 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d061      	beq.n	8011422 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801135e:	4b38      	ldr	r3, [pc, #224]	; (8011440 <_tx_byte_allocate+0x184>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d007      	beq.n	8011376 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8011366:	2310      	movs	r3, #16
 8011368:	653b      	str	r3, [r7, #80]	; 0x50
 801136a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801136c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	f383 8810 	msr	PRIMASK, r3
}
 8011374:	e05d      	b.n	8011432 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8011376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011378:	4a32      	ldr	r2, [pc, #200]	; (8011444 <_tx_byte_allocate+0x188>)
 801137a:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 801137c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8011382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8011388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801138e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011390:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011394:	1c5a      	adds	r2, r3, #1
 8011396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011398:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113a0:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113a6:	1c5a      	adds	r2, r3, #1
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80113ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d109      	bne.n	80113c6 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113b6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80113b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113bc:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80113be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113c2:	675a      	str	r2, [r3, #116]	; 0x74
 80113c4:	e011      	b.n	80113ea <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80113cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80113d0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80113d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113d6:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80113d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113dc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80113de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113e2:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80113e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113e8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80113ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113ec:	2209      	movs	r2, #9
 80113ee:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80113f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113f2:	2201      	movs	r2, #1
 80113f4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80113f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113f8:	683a      	ldr	r2, [r7, #0]
 80113fa:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80113fc:	4b10      	ldr	r3, [pc, #64]	; (8011440 <_tx_byte_allocate+0x184>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	3301      	adds	r3, #1
 8011402:	4a0f      	ldr	r2, [pc, #60]	; (8011440 <_tx_byte_allocate+0x184>)
 8011404:	6013      	str	r3, [r2, #0]
 8011406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011408:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	f383 8810 	msr	PRIMASK, r3
}
 8011410:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011412:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011414:	f002 fb72 	bl	8013afc <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801141a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801141e:	653b      	str	r3, [r7, #80]	; 0x50
 8011420:	e007      	b.n	8011432 <_tx_byte_allocate+0x176>
 8011422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011424:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	f383 8810 	msr	PRIMASK, r3
}
 801142c:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 801142e:	2310      	movs	r3, #16
 8011430:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8011432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011434:	4618      	mov	r0, r3
 8011436:	3758      	adds	r7, #88	; 0x58
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	240023d0 	.word	0x240023d0
 8011440:	240023cc 	.word	0x240023cc
 8011444:	08011449 	.word	0x08011449

08011448 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b08e      	sub	sp, #56	; 0x38
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011452:	f3ef 8310 	mrs	r3, PRIMASK
 8011456:	623b      	str	r3, [r7, #32]
    return(posture);
 8011458:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801145a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801145c:	b672      	cpsid	i
    return(int_posture);
 801145e:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8011460:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011466:	4a33      	ldr	r2, [pc, #204]	; (8011534 <_tx_byte_pool_cleanup+0xec>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d158      	bne.n	801151e <_tx_byte_pool_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011472:	683a      	ldr	r2, [r7, #0]
 8011474:	429a      	cmp	r2, r3
 8011476:	d152      	bne.n	801151e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801147c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 801147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011480:	2b00      	cmp	r3, #0
 8011482:	d04c      	beq.n	801151e <_tx_byte_pool_cleanup+0xd6>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8011484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	4a2b      	ldr	r2, [pc, #172]	; (8011538 <_tx_byte_pool_cleanup+0xf0>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d147      	bne.n	801151e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801148e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011492:	2b00      	cmp	r3, #0
 8011494:	d043      	beq.n	801151e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2200      	movs	r2, #0
 801149a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 801149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a0:	1e5a      	subs	r2, r3, #1
 80114a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a4:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80114a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114aa:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80114ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d103      	bne.n	80114ba <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80114b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b4:	2200      	movs	r2, #0
 80114b6:	625a      	str	r2, [r3, #36]	; 0x24
 80114b8:	e013      	b.n	80114e2 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114be:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114c4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80114c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ca:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80114cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114d0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80114d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d102      	bne.n	80114e2 <_tx_byte_pool_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80114dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114e0:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114e6:	2b09      	cmp	r3, #9
 80114e8:	d119      	bne.n	801151e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2210      	movs	r2, #16
 80114ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80114f2:	4b12      	ldr	r3, [pc, #72]	; (801153c <_tx_byte_pool_cleanup+0xf4>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3301      	adds	r3, #1
 80114f8:	4a10      	ldr	r2, [pc, #64]	; (801153c <_tx_byte_pool_cleanup+0xf4>)
 80114fa:	6013      	str	r3, [r2, #0]
 80114fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	f383 8810 	msr	PRIMASK, r3
}
 8011506:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f002 f9f7 	bl	80138fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801150e:	f3ef 8310 	mrs	r3, PRIMASK
 8011512:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011514:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011516:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011518:	b672      	cpsid	i
    return(int_posture);
 801151a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801151c:	637b      	str	r3, [r7, #52]	; 0x34
 801151e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011520:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f383 8810 	msr	PRIMASK, r3
}
 8011528:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801152a:	bf00      	nop
 801152c:	3738      	adds	r7, #56	; 0x38
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	08011449 	.word	0x08011449
 8011538:	42595445 	.word	0x42595445
 801153c:	240023cc 	.word	0x240023cc

08011540 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b08e      	sub	sp, #56	; 0x38
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
 801154c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801154e:	2234      	movs	r2, #52	; 0x34
 8011550:	2100      	movs	r1, #0
 8011552:	68f8      	ldr	r0, [r7, #12]
 8011554:	f004 f8cc 	bl	80156f0 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	f023 0303 	bic.w	r3, r3, #3
 801155e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	68ba      	ldr	r2, [r7, #8]
 8011564:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	683a      	ldr	r2, [r7, #0]
 8011570:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	f1a3 0208 	sub.w	r2, r3, #8
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2202      	movs	r2, #2
 801158c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8011592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	4413      	add	r3, r2
 8011598:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801159c:	3b04      	subs	r3, #4
 801159e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80115a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80115a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ac:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80115ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b0:	3b04      	subs	r3, #4
 80115b2:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80115b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80115b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80115c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80115c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115ca:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80115d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d2:	3304      	adds	r3, #4
 80115d4:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80115d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d8:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80115da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115dc:	4a1f      	ldr	r2, [pc, #124]	; (801165c <_tx_byte_pool_create+0x11c>)
 80115de:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2200      	movs	r2, #0
 80115e4:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115e6:	f3ef 8310 	mrs	r3, PRIMASK
 80115ea:	61bb      	str	r3, [r7, #24]
    return(posture);
 80115ec:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80115ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80115f0:	b672      	cpsid	i
    return(int_posture);
 80115f2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80115f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	4a19      	ldr	r2, [pc, #100]	; (8011660 <_tx_byte_pool_create+0x120>)
 80115fa:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80115fc:	4b19      	ldr	r3, [pc, #100]	; (8011664 <_tx_byte_pool_create+0x124>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d109      	bne.n	8011618 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8011604:	4a18      	ldr	r2, [pc, #96]	; (8011668 <_tx_byte_pool_create+0x128>)
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	68fa      	ldr	r2, [r7, #12]
 801160e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	631a      	str	r2, [r3, #48]	; 0x30
 8011616:	e011      	b.n	801163c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8011618:	4b13      	ldr	r3, [pc, #76]	; (8011668 <_tx_byte_pool_create+0x128>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011622:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8011624:	6a3b      	ldr	r3, [r7, #32]
 8011626:	68fa      	ldr	r2, [r7, #12]
 8011628:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	69fa      	ldr	r2, [r7, #28]
 8011634:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6a3a      	ldr	r2, [r7, #32]
 801163a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 801163c:	4b09      	ldr	r3, [pc, #36]	; (8011664 <_tx_byte_pool_create+0x124>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	3301      	adds	r3, #1
 8011642:	4a08      	ldr	r2, [pc, #32]	; (8011664 <_tx_byte_pool_create+0x124>)
 8011644:	6013      	str	r3, [r2, #0]
 8011646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011648:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	f383 8810 	msr	PRIMASK, r3
}
 8011650:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3738      	adds	r7, #56	; 0x38
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}
 801165c:	ffffeeee 	.word	0xffffeeee
 8011660:	42595445 	.word	0x42595445
 8011664:	24002330 	.word	0x24002330
 8011668:	24002314 	.word	0x24002314

0801166c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 801166c:	b480      	push	{r7}
 801166e:	b097      	sub	sp, #92	; 0x5c
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8011676:	2300      	movs	r3, #0
 8011678:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801167a:	f3ef 8310 	mrs	r3, PRIMASK
 801167e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011682:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011684:	b672      	cpsid	i
    return(int_posture);
 8011686:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8011688:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	689a      	ldr	r2, [r3, #8]
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	3b02      	subs	r3, #2
 8011694:	00db      	lsls	r3, r3, #3
 8011696:	4413      	add	r3, r2
 8011698:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801169a:	683a      	ldr	r2, [r7, #0]
 801169c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801169e:	429a      	cmp	r2, r3
 80116a0:	d308      	bcc.n	80116b4 <_tx_byte_pool_search+0x48>
 80116a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	f383 8810 	msr	PRIMASK, r3
}
 80116ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80116ae:	2300      	movs	r3, #0
 80116b0:	653b      	str	r3, [r7, #80]	; 0x50
 80116b2:	e0dd      	b.n	8011870 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80116b4:	4b72      	ldr	r3, [pc, #456]	; (8011880 <_tx_byte_pool_search+0x214>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80116be:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	695b      	ldr	r3, [r3, #20]
 80116c4:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	3301      	adds	r3, #1
 80116cc:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80116ce:	2300      	movs	r3, #0
 80116d0:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80116d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d4:	3304      	adds	r3, #4
 80116d6:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80116d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116da:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80116dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4a68      	ldr	r2, [pc, #416]	; (8011884 <_tx_byte_pool_search+0x218>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d143      	bne.n	801176e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80116e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d104      	bne.n	80116f6 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80116f0:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80116f2:	2301      	movs	r3, #1
 80116f4:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80116f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116f8:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80116fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8011700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8011708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801170a:	3b08      	subs	r3, #8
 801170c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801170e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	429a      	cmp	r2, r3
 8011714:	d257      	bcs.n	80117c6 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8011716:	2300      	movs	r3, #0
 8011718:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171c:	3304      	adds	r3, #4
 801171e:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011722:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8011724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4a56      	ldr	r2, [pc, #344]	; (8011884 <_tx_byte_pool_search+0x218>)
 801172a:	4293      	cmp	r3, r2
 801172c:	d113      	bne.n	8011756 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011730:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8011732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011738:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	1e5a      	subs	r2, r3, #1
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	695b      	ldr	r3, [r3, #20]
 8011748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801174a:	429a      	cmp	r2, r3
 801174c:	d114      	bne.n	8011778 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011752:	615a      	str	r2, [r3, #20]
 8011754:	e010      	b.n	8011778 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8011756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011758:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 801175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8011760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011762:	2b00      	cmp	r3, #0
 8011764:	d008      	beq.n	8011778 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8011766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011768:	3b01      	subs	r3, #1
 801176a:	64bb      	str	r3, [r7, #72]	; 0x48
 801176c:	e004      	b.n	8011778 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801176e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011770:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8011778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801177a:	2b00      	cmp	r3, #0
 801177c:	d002      	beq.n	8011784 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801177e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011780:	3b01      	subs	r3, #1
 8011782:	64bb      	str	r3, [r7, #72]	; 0x48
 8011784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011786:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	f383 8810 	msr	PRIMASK, r3
}
 801178e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011790:	f3ef 8310 	mrs	r3, PRIMASK
 8011794:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011796:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011798:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801179a:	b672      	cpsid	i
    return(int_posture);
 801179c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 801179e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6a1b      	ldr	r3, [r3, #32]
 80117a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d009      	beq.n	80117be <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	3301      	adds	r3, #1
 80117b6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80117bc:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80117be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d186      	bne.n	80116d2 <_tx_byte_pool_search+0x66>
 80117c4:	e000      	b.n	80117c8 <_tx_byte_pool_search+0x15c>
                    break;
 80117c6:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80117c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d048      	beq.n	8011860 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80117ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	1ad3      	subs	r3, r2, r3
 80117d4:	2b13      	cmp	r3, #19
 80117d6:	d91e      	bls.n	8011816 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	3308      	adds	r3, #8
 80117dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117de:	4413      	add	r3, r2
 80117e0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80117e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e4:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80117e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117e8:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80117ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ec:	681a      	ldr	r2, [r3, #0]
 80117ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f0:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80117f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f4:	3304      	adds	r3, #4
 80117f6:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80117f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fa:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80117fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117fe:	4a21      	ldr	r2, [pc, #132]	; (8011884 <_tx_byte_pool_search+0x218>)
 8011800:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 801180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011810:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8011816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011818:	3304      	adds	r3, #4
 801181a:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 801181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181e:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	689a      	ldr	r2, [r3, #8]
 801182a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	f1a3 0208 	sub.w	r2, r3, #8
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	695b      	ldr	r3, [r3, #20]
 801183a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801183c:	429a      	cmp	r2, r3
 801183e:	d105      	bne.n	801184c <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011842:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8011844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	615a      	str	r2, [r3, #20]
 801184c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801184e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f383 8810 	msr	PRIMASK, r3
}
 8011856:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8011858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801185a:	3308      	adds	r3, #8
 801185c:	653b      	str	r3, [r7, #80]	; 0x50
 801185e:	e007      	b.n	8011870 <_tx_byte_pool_search+0x204>
 8011860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011862:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	f383 8810 	msr	PRIMASK, r3
}
 801186a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 801186c:	2300      	movs	r3, #0
 801186e:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8011870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011872:	4618      	mov	r0, r3
 8011874:	375c      	adds	r7, #92	; 0x5c
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	240023d0 	.word	0x240023d0
 8011884:	ffffeeee 	.word	0xffffeeee

08011888 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b08e      	sub	sp, #56	; 0x38
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011892:	f3ef 8310 	mrs	r3, PRIMASK
 8011896:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011898:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801189a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801189c:	b672      	cpsid	i
    return(int_posture);
 801189e:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 80118a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118a6:	4a38      	ldr	r2, [pc, #224]	; (8011988 <_tx_event_flags_cleanup+0x100>)
 80118a8:	4293      	cmp	r3, r2
 80118aa:	d162      	bne.n	8011972 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80118b2:	683a      	ldr	r2, [r7, #0]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d15c      	bne.n	8011972 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118bc:	633b      	str	r3, [r7, #48]	; 0x30
    
            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 80118be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d056      	beq.n	8011972 <_tx_event_flags_cleanup+0xea>
            {
                
                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 80118c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	4a30      	ldr	r2, [pc, #192]	; (801198c <_tx_event_flags_cleanup+0x104>)
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d151      	bne.n	8011972 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80118ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d04d      	beq.n	8011972 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80118dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118de:	695b      	ldr	r3, [r3, #20]
 80118e0:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 80118e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e4:	691b      	ldr	r3, [r3, #16]
 80118e6:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the 
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place 
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 80118e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d020      	beq.n	8011930 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 80118ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f0:	3b01      	subs	r3, #1
 80118f2:	62fb      	str	r3, [r7, #44]	; 0x2c
              
                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 80118f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118f8:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80118fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d103      	bne.n	8011908 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */
        
                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8011900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011902:	2200      	movs	r2, #0
 8011904:	611a      	str	r2, [r3, #16]
 8011906:	e016      	b.n	8011936 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */
    
                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801190c:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011912:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011916:	6a3a      	ldr	r2, [r7, #32]
 8011918:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801191a:	6a3b      	ldr	r3, [r7, #32]
 801191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801191e:	671a      	str	r2, [r3, #112]	; 0x70
                
                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8011920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	429a      	cmp	r2, r3
 8011926:	d106      	bne.n	8011936 <_tx_event_flags_cleanup+0xae>
                                {
                
                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8011928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801192a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801192c:	611a      	str	r2, [r3, #16]
 801192e:	e002      	b.n	8011936 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {
                        
                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8011930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011932:	2201      	movs	r2, #1
 8011934:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801193a:	2b07      	cmp	r3, #7
 801193c:	d119      	bne.n	8011972 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2207      	movs	r2, #7
 8011942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011946:	4b12      	ldr	r3, [pc, #72]	; (8011990 <_tx_event_flags_cleanup+0x108>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	3301      	adds	r3, #1
 801194c:	4a10      	ldr	r2, [pc, #64]	; (8011990 <_tx_event_flags_cleanup+0x108>)
 801194e:	6013      	str	r3, [r2, #0]
 8011950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011952:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f383 8810 	msr	PRIMASK, r3
}
 801195a:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing 
                               from the system timer thread right now which normally executes at the 
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f001 ffcd 	bl	80138fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011962:	f3ef 8310 	mrs	r3, PRIMASK
 8011966:	617b      	str	r3, [r7, #20]
    return(posture);
 8011968:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801196a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801196c:	b672      	cpsid	i
    return(int_posture);
 801196e:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011970:	637b      	str	r3, [r7, #52]	; 0x34
 8011972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011974:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	f383 8810 	msr	PRIMASK, r3
}
 801197c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801197e:	bf00      	nop
 8011980:	3738      	adds	r7, #56	; 0x38
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop
 8011988:	08011889 	.word	0x08011889
 801198c:	4456444e 	.word	0x4456444e
 8011990:	240023cc 	.word	0x240023cc

08011994 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b088      	sub	sp, #32
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 801199e:	2224      	movs	r2, #36	; 0x24
 80119a0:	2100      	movs	r1, #0
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f003 fea4 	bl	80156f0 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80119ae:	f3ef 8310 	mrs	r3, PRIMASK
 80119b2:	613b      	str	r3, [r7, #16]
    return(posture);
 80119b4:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80119b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80119b8:	b672      	cpsid	i
    return(int_posture);
 80119ba:	68fb      	ldr	r3, [r7, #12]
    
    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 80119bc:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	4a18      	ldr	r2, [pc, #96]	; (8011a24 <_tx_event_flags_create+0x90>)
 80119c2:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80119c4:	4b18      	ldr	r3, [pc, #96]	; (8011a28 <_tx_event_flags_create+0x94>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d109      	bne.n	80119e0 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 80119cc:	4a17      	ldr	r2, [pc, #92]	; (8011a2c <_tx_event_flags_create+0x98>)
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	61da      	str	r2, [r3, #28]
 80119de:	e011      	b.n	8011a04 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 80119e0:	4b12      	ldr	r3, [pc, #72]	; (8011a2c <_tx_event_flags_create+0x98>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 80119e6:	69bb      	ldr	r3, [r7, #24]
 80119e8:	69db      	ldr	r3, [r3, #28]
 80119ea:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 80119ec:	69bb      	ldr	r3, [r7, #24]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	697a      	ldr	r2, [r7, #20]
 80119fc:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	69ba      	ldr	r2, [r7, #24]
 8011a02:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8011a04:	4b08      	ldr	r3, [pc, #32]	; (8011a28 <_tx_event_flags_create+0x94>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	4a07      	ldr	r2, [pc, #28]	; (8011a28 <_tx_event_flags_create+0x94>)
 8011a0c:	6013      	str	r3, [r2, #0]
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	f383 8810 	msr	PRIMASK, r3
}
 8011a18:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011a1a:	2300      	movs	r3, #0
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3720      	adds	r7, #32
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	4456444e 	.word	0x4456444e
 8011a28:	24002324 	.word	0x24002324
 8011a2c:	24002300 	.word	0x24002300

08011a30 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b096      	sub	sp, #88	; 0x58
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
 8011a3c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a42:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011a46:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a48:	b672      	cpsid	i
    return(int_posture);
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8011a4c:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	689b      	ldr	r3, [r3, #8]
 8011a52:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f003 0302 	and.w	r3, r3, #2
 8011a5a:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	6a1b      	ldr	r3, [r3, #32]
 8011a60:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 8011a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d004      	beq.n	8011a72 <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8011a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a6a:	43db      	mvns	r3, r3
 8011a6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a6e:	4013      	ands	r3, r2
 8011a70:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8011a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a74:	2b02      	cmp	r3, #2
 8011a76:	d10a      	bne.n	8011a8e <_tx_event_flags_get+0x5e>
    {
    
        /* AND request is present.  */
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8011a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	4013      	ands	r3, r2
 8011a7e:	64bb      	str	r3, [r7, #72]	; 0x48
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8011a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d006      	beq.n	8011a96 <_tx_event_flags_get+0x66>
        {
        
            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8011a88:	2300      	movs	r3, #0
 8011a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a8c:	e003      	b.n	8011a96 <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8011a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	4013      	ands	r3, r2
 8011a94:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    
    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 8011a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d029      	beq.n	8011af0 <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011aa0:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f003 0301 	and.w	r3, r3, #1
 8011aa8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 8011aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d11c      	bne.n	8011aea <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	695b      	ldr	r3, [r3, #20]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d005      	beq.n	8011ac8 <_tx_event_flags_get+0x98>
            {
            
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	691b      	ldr	r3, [r3, #16]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d101      	bne.n	8011ac8 <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8011ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d106      	bne.n	8011adc <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	6a1a      	ldr	r2, [r3, #32]
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	621a      	str	r2, [r3, #32]
 8011ada:	e006      	b.n	8011aea <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	689a      	ldr	r2, [r3, #8]
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	43db      	mvns	r3, r3
 8011ae4:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8011aea:	2300      	movs	r3, #0
 8011aec:	653b      	str	r3, [r7, #80]	; 0x50
 8011aee:	e070      	b.n	8011bd2 <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d06b      	beq.n	8011bce <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8011af6:	4b3c      	ldr	r3, [pc, #240]	; (8011be8 <_tx_event_flags_get+0x1b8>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d002      	beq.n	8011b04 <_tx_event_flags_get+0xd4>
            {
            
                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 8011afe:	2307      	movs	r3, #7
 8011b00:	653b      	str	r3, [r7, #80]	; 0x50
 8011b02:	e066      	b.n	8011bd2 <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8011b04:	4b39      	ldr	r3, [pc, #228]	; (8011bec <_tx_event_flags_get+0x1bc>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8011b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0c:	4a38      	ldr	r2, [pc, #224]	; (8011bf0 <_tx_event_flags_get+0x1c0>)
 8011b0e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 8011b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b12:	68ba      	ldr	r2, [r7, #8]
 8011b14:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 8011b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8011b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b20:	683a      	ldr	r2, [r7, #0]
 8011b22:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 8011b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b26:	68fa      	ldr	r2, [r7, #12]
 8011b28:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8011b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011b30:	1c5a      	adds	r2, r3, #1
 8011b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b34:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	695b      	ldr	r3, [r3, #20]
 8011b3c:	637b      	str	r3, [r7, #52]	; 0x34
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d109      	bne.n	8011b58 <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b48:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8011b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b4e:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8011b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b54:	675a      	str	r2, [r3, #116]	; 0x74
 8011b56:	e011      	b.n	8011b7c <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b62:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b68:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b6e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b74:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b7a:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	695b      	ldr	r3, [r3, #20]
 8011b80:	1c5a      	adds	r2, r3, #1
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	615a      	str	r2, [r3, #20]
            
                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8011b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b88:	2207      	movs	r2, #7
 8011b8a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8e:	2201      	movs	r2, #1
 8011b90:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b96:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011b98:	4b13      	ldr	r3, [pc, #76]	; (8011be8 <_tx_event_flags_get+0x1b8>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	4a12      	ldr	r2, [pc, #72]	; (8011be8 <_tx_event_flags_get+0x1b8>)
 8011ba0:	6013      	str	r3, [r2, #0]
 8011ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ba4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	f383 8810 	msr	PRIMASK, r3
}
 8011bac:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011bae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011bb0:	f001 ffa4 	bl	8013afc <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8011bb8:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011bba:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011bbc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011bbe:	b672      	cpsid	i
    return(int_posture);
 8011bc0:	69bb      	ldr	r3, [r7, #24]
    
                /* Disable interrupts.  */
                TX_DISABLE
 8011bc2:	657b      	str	r3, [r7, #84]	; 0x54
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bca:	653b      	str	r3, [r7, #80]	; 0x50
 8011bcc:	e001      	b.n	8011bd2 <_tx_event_flags_get+0x1a2>
        }
        else
        {
            
            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8011bce:	2307      	movs	r3, #7
 8011bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8011bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bd4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	f383 8810 	msr	PRIMASK, r3
}
 8011bdc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8011bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3758      	adds	r7, #88	; 0x58
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	240023cc 	.word	0x240023cc
 8011bec:	240023d0 	.word	0x240023d0
 8011bf0:	08011889 	.word	0x08011889

08011bf4 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b0a6      	sub	sp, #152	; 0x98
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c00:	f3ef 8310 	mrs	r3, PRIMASK
 8011c04:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8011c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8011c08:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c0a:	b672      	cpsid	i
    return(int_posture);
 8011c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8011c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f003 0302 	and.w	r3, r3, #2
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d023      	beq.n	8011c64 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	695b      	ldr	r3, [r3, #20]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d005      	beq.n	8011c34 <_tx_event_flags_set+0x40>
        {
            
            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	691b      	ldr	r3, [r3, #16]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d101      	bne.n	8011c34 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8011c30:	2301      	movs	r3, #1
 8011c32:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8011c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d107      	bne.n	8011c4a <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6a1a      	ldr	r2, [r3, #32]
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	43db      	mvns	r3, r3
 8011c42:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	621a      	str	r2, [r3, #32]
 8011c48:	e005      	b.n	8011c56 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the 
               specified flags by "ANDing" the flags into the current events 
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	689a      	ldr	r2, [r3, #8]
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	609a      	str	r2, [r3, #8]
 8011c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011c5a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c5e:	f383 8810 	msr	PRIMASK, r3
}
 8011c62:	e1d4      	b.n	801200e <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	689a      	ldr	r2, [r3, #8]
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6a1b      	ldr	r3, [r3, #32]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d006      	beq.n	8011c86 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6a1a      	ldr	r2, [r3, #32]
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	43db      	mvns	r3, r3
 8011c80:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8011c86:	2300      	movs	r3, #0
 8011c88:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	695b      	ldr	r3, [r3, #20]
 8011c8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	691b      	ldr	r3, [r3, #16]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f000 81a6 	beq.w	8011fe8 <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event 
               flag group.  */
            if (suspended_count == ((UINT) 1))
 8011c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d169      	bne.n	8011d78 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	691b      	ldr	r3, [r3, #16]
 8011ca8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	689b      	ldr	r3, [r3, #8]
 8011cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
            
                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8011cb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cb8:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 8011cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011cc2:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8011cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cc6:	f003 0302 	and.w	r3, r3, #2
 8011cca:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8011ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011cce:	2b02      	cmp	r3, #2
 8011cd0:	d10a      	bne.n	8011ce8 <_tx_event_flags_set+0xf4>
                {
    
                    /* AND request is present.  */
        
                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8011cd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	67bb      	str	r3, [r7, #120]	; 0x78
        
                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 8011cda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d006      	beq.n	8011cf0 <_tx_event_flags_set+0xfc>
                    {
        
                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8011ce6:	e003      	b.n	8011cf0 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8011ce8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011cea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cec:	4013      	ands	r3, r2
 8011cee:	67bb      	str	r3, [r7, #120]	; 0x78
                }
    
                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8011cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	f000 817f 	beq.w	8011ff6 <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d02:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 8011d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d08:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8011d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d0c:	f003 0301 	and.w	r3, r3, #1
 8011d10:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8011d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d14:	2b01      	cmp	r3, #1
 8011d16:	d106      	bne.n	8011d26 <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	689a      	ldr	r2, [r3, #8]
 8011d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d1e:	43db      	mvns	r3, r3
 8011d20:	401a      	ands	r2, r3
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d36:	2200      	movs	r2, #0
 8011d38:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d3e:	2200      	movs	r2, #0
 8011d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8011d44:	4ba7      	ldr	r3, [pc, #668]	; (8011fe4 <_tx_event_flags_set+0x3f0>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3301      	adds	r3, #1
 8011d4a:	4aa6      	ldr	r2, [pc, #664]	; (8011fe4 <_tx_event_flags_set+0x3f0>)
 8011d4c:	6013      	str	r3, [r2, #0]
 8011d4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011d52:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d56:	f383 8810 	msr	PRIMASK, r3
}
 8011d5a:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8011d5c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011d60:	f001 fdcc 	bl	80138fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d64:	f3ef 8310 	mrs	r3, PRIMASK
 8011d68:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8011d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8011d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d6e:	b672      	cpsid	i
    return(int_posture);
 8011d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8011d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011d76:	e13e      	b.n	8011ff6 <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be 
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 8011d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	611a      	str	r2, [r3, #16]
        
                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 8011d94:	2300      	movs	r3, #0
 8011d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	689b      	ldr	r3, [r3, #8]
 8011d9e:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8011da0:	4b90      	ldr	r3, [pc, #576]	; (8011fe4 <_tx_event_flags_set+0x3f0>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	3301      	adds	r3, #1
 8011da6:	4a8f      	ldr	r2, [pc, #572]	; (8011fe4 <_tx_event_flags_set+0x3f0>)
 8011da8:	6013      	str	r3, [r2, #0]
 8011daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db2:	f383 8810 	msr	PRIMASK, r3
}
 8011db6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011db8:	f3ef 8310 	mrs	r3, PRIMASK
 8011dbc:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8011dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8011dc0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011dc2:	b672      	cpsid	i
    return(int_posture);
 8011dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 8011dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d00f      	beq.n	8011df2 <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 8011dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	695b      	ldr	r3, [r3, #20]
 8011de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011dee:	4313      	orrs	r3, r2
 8011df0:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8011df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011df8:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8011dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e00:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 8011e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e0a:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8011e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e0e:	f003 0302 	and.w	r3, r3, #2
 8011e12:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 8011e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e16:	2b02      	cmp	r3, #2
 8011e18:	d10a      	bne.n	8011e30 <_tx_event_flags_set+0x23c>
                    {
    
                        /* AND request is present.  */
        
                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8011e1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e1e:	4013      	ands	r3, r2
 8011e20:	67bb      	str	r3, [r7, #120]	; 0x78
        
                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 8011e22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d006      	beq.n	8011e38 <_tx_event_flags_set+0x244>
                        {
        
                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e2e:	e003      	b.n	8011e38 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8011e30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e34:	4013      	ands	r3, r2
 8011e36:	67bb      	str	r3, [r7, #120]	; 0x78
                    }
    
                    /* Check to see if the thread had a timeout or wait abort during the event search processing.  
                       If so, just set the flags satisfied to ensure the processing here removes the thread from 
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8011e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e3e:	2b07      	cmp	r3, #7
 8011e40:	d001      	beq.n	8011e46 <_tx_event_flags_set+0x252>
                    {
            
                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8011e42:	2301      	movs	r3, #1
 8011e44:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8011e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d06b      	beq.n	8011f24 <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	677b      	str	r3, [r7, #116]	; 0x74
    
                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8011e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e56:	2b07      	cmp	r3, #7
 8011e58:	d11d      	bne.n	8011e96 <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e60:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 8011e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011e66:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8011e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e6a:	f003 0301 	and.w	r3, r3, #1
 8011e6e:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8011e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d106      	bne.n	8011e84 <_tx_event_flags_set+0x290>
                            {
                
                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	689a      	ldr	r2, [r3, #8]
 8011e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e7c:	43db      	mvns	r3, r3
 8011e7e:	401a      	ands	r2, r3
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	609a      	str	r2, [r3, #8]
                            }
            
                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e88:	2200      	movs	r2, #0
 8011e8a:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011e8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e90:	2200      	movs	r2, #0
 8011e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8011e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e9c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d103      	bne.n	8011eac <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011eaa:	e018      	b.n	8011ede <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8011eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eb2:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eba:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ebe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ec0:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8011ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ec6:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8011ec8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011ecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d104      	bne.n	8011ede <_tx_event_flags_set+0x2ea>
                            {
                                
                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8011ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	695b      	ldr	r3, [r3, #20]
 8011ee2:	1e5a      	subs	r2, r3, #1
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8011ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10c      	bne.n	8011f0a <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 8011ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011ef4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 8011ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    
                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8011f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011f04:	2200      	movs	r2, #0
 8011f06:	671a      	str	r2, [r3, #112]	; 0x70
 8011f08:	e00c      	b.n	8011f24 <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */
                
                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8011f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011f0e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011f12:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8011f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011f18:	2200      	movs	r2, #0
 8011f1a:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 8011f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8011f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8011f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f2e:	3b01      	subs	r3, #1
 8011f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            
                } while (suspended_count != TX_NO_SUSPENSIONS);
 8011f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	f47f af36 	bne.w	8011daa <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011f44:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	6a1b      	ldr	r3, [r3, #32]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d00a      	beq.n	8011f64 <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	689a      	ldr	r2, [r3, #8]
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	6a1b      	ldr	r3, [r3, #32]
 8011f56:	43db      	mvns	r3, r3
 8011f58:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2200      	movs	r2, #0
 8011f62:	621a      	str	r2, [r3, #32]
 8011f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011f68:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6c:	f383 8810 	msr	PRIMASK, r3
}
 8011f70:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8011f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8011f7a:	e01f      	b.n	8011fbc <_tx_event_flags_set+0x3c8>
                {
    
                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8011f7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f82:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f84:	f3ef 8310 	mrs	r3, PRIMASK
 8011f88:	623b      	str	r3, [r7, #32]
    return(posture);
 8011f8a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011f8c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f8e:	b672      	cpsid	i
    return(int_posture);
 8011f90:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8011f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8011f96:	4b13      	ldr	r3, [pc, #76]	; (8011fe4 <_tx_event_flags_set+0x3f0>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	4a11      	ldr	r2, [pc, #68]	; (8011fe4 <_tx_event_flags_set+0x3f0>)
 8011f9e:	6013      	str	r3, [r2, #0]
 8011fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011fa4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa8:	f383 8810 	msr	PRIMASK, r3
}
 8011fac:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8011fae:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011fb2:	f001 fca3 	bl	80138fc <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8011fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8011fbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d1db      	bne.n	8011f7c <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8011fc8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011fca:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011fcc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011fce:	b672      	cpsid	i
    return(int_posture);
 8011fd0:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 8011fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 8011fd6:	4b03      	ldr	r3, [pc, #12]	; (8011fe4 <_tx_event_flags_set+0x3f0>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	3b01      	subs	r3, #1
 8011fdc:	4a01      	ldr	r2, [pc, #4]	; (8011fe4 <_tx_event_flags_set+0x3f0>)
 8011fde:	6013      	str	r3, [r2, #0]
 8011fe0:	e009      	b.n	8011ff6 <_tx_event_flags_set+0x402>
 8011fe2:	bf00      	nop
 8011fe4:	240023cc 	.word	0x240023cc
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	695b      	ldr	r3, [r3, #20]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d002      	beq.n	8011ff6 <_tx_event_flags_set+0x402>
            {
                    
                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	60da      	str	r2, [r3, #12]
 8011ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011ffa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	f383 8810 	msr	PRIMASK, r3
}
 8012002:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 8012004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012006:	2b01      	cmp	r3, #1
 8012008:	d101      	bne.n	801200e <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 801200a:	f001 fc3d 	bl	8013888 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 801200e:	2300      	movs	r3, #0
}
 8012010:	4618      	mov	r0, r3
 8012012:	3798      	adds	r7, #152	; 0x98
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 801201c:	f001 f9f2 	bl	8013404 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8012020:	f002 f80c 	bl	801403c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8012024:	4b12      	ldr	r3, [pc, #72]	; (8012070 <_tx_initialize_high_level+0x58>)
 8012026:	2200      	movs	r2, #0
 8012028:	601a      	str	r2, [r3, #0]
 801202a:	4b12      	ldr	r3, [pc, #72]	; (8012074 <_tx_initialize_high_level+0x5c>)
 801202c:	2200      	movs	r2, #0
 801202e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8012030:	4b11      	ldr	r3, [pc, #68]	; (8012078 <_tx_initialize_high_level+0x60>)
 8012032:	2200      	movs	r2, #0
 8012034:	601a      	str	r2, [r3, #0]
 8012036:	4b11      	ldr	r3, [pc, #68]	; (801207c <_tx_initialize_high_level+0x64>)
 8012038:	2200      	movs	r2, #0
 801203a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 801203c:	4b10      	ldr	r3, [pc, #64]	; (8012080 <_tx_initialize_high_level+0x68>)
 801203e:	2200      	movs	r2, #0
 8012040:	601a      	str	r2, [r3, #0]
 8012042:	4b10      	ldr	r3, [pc, #64]	; (8012084 <_tx_initialize_high_level+0x6c>)
 8012044:	2200      	movs	r2, #0
 8012046:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8012048:	4b0f      	ldr	r3, [pc, #60]	; (8012088 <_tx_initialize_high_level+0x70>)
 801204a:	2200      	movs	r2, #0
 801204c:	601a      	str	r2, [r3, #0]
 801204e:	4b0f      	ldr	r3, [pc, #60]	; (801208c <_tx_initialize_high_level+0x74>)
 8012050:	2200      	movs	r2, #0
 8012052:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8012054:	4b0e      	ldr	r3, [pc, #56]	; (8012090 <_tx_initialize_high_level+0x78>)
 8012056:	2200      	movs	r2, #0
 8012058:	601a      	str	r2, [r3, #0]
 801205a:	4b0e      	ldr	r3, [pc, #56]	; (8012094 <_tx_initialize_high_level+0x7c>)
 801205c:	2200      	movs	r2, #0
 801205e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8012060:	4b0d      	ldr	r3, [pc, #52]	; (8012098 <_tx_initialize_high_level+0x80>)
 8012062:	2200      	movs	r2, #0
 8012064:	601a      	str	r2, [r3, #0]
 8012066:	4b0d      	ldr	r3, [pc, #52]	; (801209c <_tx_initialize_high_level+0x84>)
 8012068:	2200      	movs	r2, #0
 801206a:	601a      	str	r2, [r3, #0]
#endif
}
 801206c:	bf00      	nop
 801206e:	bd80      	pop	{r7, pc}
 8012070:	24002310 	.word	0x24002310
 8012074:	24002320 	.word	0x24002320
 8012078:	2400232c 	.word	0x2400232c
 801207c:	2400230c 	.word	0x2400230c
 8012080:	24002300 	.word	0x24002300
 8012084:	24002324 	.word	0x24002324
 8012088:	24002328 	.word	0x24002328
 801208c:	2400231c 	.word	0x2400231c
 8012090:	24002314 	.word	0x24002314
 8012094:	24002330 	.word	0x24002330
 8012098:	24002308 	.word	0x24002308
 801209c:	24002304 	.word	0x24002304

080120a0 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80120a4:	4b10      	ldr	r3, [pc, #64]	; (80120e8 <_tx_initialize_kernel_enter+0x48>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80120ac:	d00c      	beq.n	80120c8 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80120ae:	4b0e      	ldr	r3, [pc, #56]	; (80120e8 <_tx_initialize_kernel_enter+0x48>)
 80120b0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80120b4:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80120b6:	f7ee f913 	bl	80002e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 80120ba:	f7ff ffad 	bl	8012018 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80120be:	4b0b      	ldr	r3, [pc, #44]	; (80120ec <_tx_initialize_kernel_enter+0x4c>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	3301      	adds	r3, #1
 80120c4:	4a09      	ldr	r2, [pc, #36]	; (80120ec <_tx_initialize_kernel_enter+0x4c>)
 80120c6:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80120c8:	4b07      	ldr	r3, [pc, #28]	; (80120e8 <_tx_initialize_kernel_enter+0x48>)
 80120ca:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80120ce:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80120d0:	4b07      	ldr	r3, [pc, #28]	; (80120f0 <_tx_initialize_kernel_enter+0x50>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7ee fa73 	bl	80005c0 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80120da:	4b03      	ldr	r3, [pc, #12]	; (80120e8 <_tx_initialize_kernel_enter+0x48>)
 80120dc:	2200      	movs	r2, #0
 80120de:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80120e0:	f7ee f93e 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80120e4:	bf00      	nop
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	2400008c 	.word	0x2400008c
 80120ec:	240023cc 	.word	0x240023cc
 80120f0:	24002318 	.word	0x24002318

080120f4 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b08e      	sub	sp, #56	; 0x38
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120fe:	f3ef 8310 	mrs	r3, PRIMASK
 8012102:	623b      	str	r3, [r7, #32]
    return(posture);
 8012104:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012106:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012108:	b672      	cpsid	i
    return(int_posture);
 801210a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 801210c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012112:	4a33      	ldr	r2, [pc, #204]	; (80121e0 <_tx_mutex_cleanup+0xec>)
 8012114:	4293      	cmp	r3, r2
 8012116:	d158      	bne.n	80121ca <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801211e:	683a      	ldr	r2, [r7, #0]
 8012120:	429a      	cmp	r2, r3
 8012122:	d152      	bne.n	80121ca <_tx_mutex_cleanup+0xd6>
        {
   
            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012128:	633b      	str	r3, [r7, #48]	; 0x30
    
            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 801212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212c:	2b00      	cmp	r3, #0
 801212e:	d04c      	beq.n	80121ca <_tx_mutex_cleanup+0xd6>
            {
    
                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8012130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	4a2b      	ldr	r2, [pc, #172]	; (80121e4 <_tx_mutex_cleanup+0xf0>)
 8012136:	4293      	cmp	r3, r2
 8012138:	d147      	bne.n	80121ca <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213c:	69db      	ldr	r3, [r3, #28]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d043      	beq.n	80121ca <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2200      	movs	r2, #0
 8012146:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8012148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214a:	69db      	ldr	r3, [r3, #28]
 801214c:	1e5a      	subs	r2, r3, #1
 801214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012150:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	69db      	ldr	r3, [r3, #28]
 8012156:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215a:	2b00      	cmp	r3, #0
 801215c:	d103      	bne.n	8012166 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012160:	2200      	movs	r2, #0
 8012162:	619a      	str	r2, [r3, #24]
 8012164:	e013      	b.n	801218e <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */
    
                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801216a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012170:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012176:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801217c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 801217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012180:	699b      	ldr	r3, [r3, #24]
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	429a      	cmp	r2, r3
 8012186:	d102      	bne.n	801218e <_tx_mutex_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8012188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801218c:	619a      	str	r2, [r3, #24]
                            }
                        }
 
                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012192:	2b0d      	cmp	r3, #13
 8012194:	d119      	bne.n	80121ca <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	221d      	movs	r2, #29
 801219a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801219e:	4b12      	ldr	r3, [pc, #72]	; (80121e8 <_tx_mutex_cleanup+0xf4>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	3301      	adds	r3, #1
 80121a4:	4a10      	ldr	r2, [pc, #64]	; (80121e8 <_tx_mutex_cleanup+0xf4>)
 80121a6:	6013      	str	r3, [r2, #0]
 80121a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	f383 8810 	msr	PRIMASK, r3
}
 80121b2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE
    
                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f001 fba1 	bl	80138fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121ba:	f3ef 8310 	mrs	r3, PRIMASK
 80121be:	61bb      	str	r3, [r7, #24]
    return(posture);
 80121c0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80121c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80121c4:	b672      	cpsid	i
    return(int_posture);
 80121c6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80121c8:	637b      	str	r3, [r7, #52]	; 0x34
 80121ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f383 8810 	msr	PRIMASK, r3
}
 80121d4:	bf00      	nop
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80121d6:	bf00      	nop
 80121d8:	3738      	adds	r7, #56	; 0x38
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	080120f5 	.word	0x080120f5
 80121e4:	4d555445 	.word	0x4d555445
 80121e8:	240023cc 	.word	0x240023cc

080121ec <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b08a      	sub	sp, #40	; 0x28
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121f4:	f3ef 8310 	mrs	r3, PRIMASK
 80121f8:	61fb      	str	r3, [r7, #28]
    return(posture);
 80121fa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80121fc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80121fe:	b672      	cpsid	i
    return(int_posture);
 8012200:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8012202:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012204:	4b1a      	ldr	r3, [pc, #104]	; (8012270 <_tx_mutex_thread_release+0x84>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	3301      	adds	r3, #1
 801220a:	4a19      	ldr	r2, [pc, #100]	; (8012270 <_tx_mutex_thread_release+0x84>)
 801220c:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {
    
        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012214:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8012216:	6a3b      	ldr	r3, [r7, #32]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d017      	beq.n	801224c <_tx_mutex_thread_release+0x60>
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801221c:	6a3b      	ldr	r3, [r7, #32]
 801221e:	2201      	movs	r2, #1
 8012220:	609a      	str	r2, [r3, #8]
 8012222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012224:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	f383 8810 	msr	PRIMASK, r3
}
 801222c:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 801222e:	6a38      	ldr	r0, [r7, #32]
 8012230:	f000 fb9c 	bl	801296c <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012234:	f3ef 8310 	mrs	r3, PRIMASK
 8012238:	617b      	str	r3, [r7, #20]
    return(posture);
 801223a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801223c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801223e:	b672      	cpsid	i
    return(int_posture);
 8012240:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8012242:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801224a:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 801224c:	6a3b      	ldr	r3, [r7, #32]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d1dd      	bne.n	801220e <_tx_mutex_thread_release+0x22>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8012252:	4b07      	ldr	r3, [pc, #28]	; (8012270 <_tx_mutex_thread_release+0x84>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	3b01      	subs	r3, #1
 8012258:	4a05      	ldr	r2, [pc, #20]	; (8012270 <_tx_mutex_thread_release+0x84>)
 801225a:	6013      	str	r3, [r2, #0]
 801225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	f383 8810 	msr	PRIMASK, r3
}
 8012266:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 8012268:	bf00      	nop
 801226a:	3728      	adds	r7, #40	; 0x28
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	240023cc 	.word	0x240023cc

08012274 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b08a      	sub	sp, #40	; 0x28
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8012280:	2234      	movs	r2, #52	; 0x34
 8012282:	2100      	movs	r1, #0
 8012284:	68f8      	ldr	r0, [r7, #12]
 8012286:	f003 fa33 	bl	80156f0 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	68ba      	ldr	r2, [r7, #8]
 801228e:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012296:	f3ef 8310 	mrs	r3, PRIMASK
 801229a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801229c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801229e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80122a0:	b672      	cpsid	i
    return(int_posture);
 80122a2:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80122a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	4a1a      	ldr	r2, [pc, #104]	; (8012314 <_tx_mutex_create+0xa0>)
 80122aa:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80122ac:	4b1a      	ldr	r3, [pc, #104]	; (8012318 <_tx_mutex_create+0xa4>)
 80122ae:	4a1b      	ldr	r2, [pc, #108]	; (801231c <_tx_mutex_create+0xa8>)
 80122b0:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80122b2:	4b1b      	ldr	r3, [pc, #108]	; (8012320 <_tx_mutex_create+0xac>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d109      	bne.n	80122ce <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80122ba:	4a1a      	ldr	r2, [pc, #104]	; (8012324 <_tx_mutex_create+0xb0>)
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	68fa      	ldr	r2, [r7, #12]
 80122c4:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	68fa      	ldr	r2, [r7, #12]
 80122ca:	625a      	str	r2, [r3, #36]	; 0x24
 80122cc:	e011      	b.n	80122f2 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80122ce:	4b15      	ldr	r3, [pc, #84]	; (8012324 <_tx_mutex_create+0xb0>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80122d4:	6a3b      	ldr	r3, [r7, #32]
 80122d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d8:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80122da:	6a3b      	ldr	r3, [r7, #32]
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	68fa      	ldr	r2, [r7, #12]
 80122e4:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	69fa      	ldr	r2, [r7, #28]
 80122ea:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	6a3a      	ldr	r2, [r7, #32]
 80122f0:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80122f2:	4b0b      	ldr	r3, [pc, #44]	; (8012320 <_tx_mutex_create+0xac>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	3301      	adds	r3, #1
 80122f8:	4a09      	ldr	r2, [pc, #36]	; (8012320 <_tx_mutex_create+0xac>)
 80122fa:	6013      	str	r3, [r2, #0]
 80122fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	f383 8810 	msr	PRIMASK, r3
}
 8012306:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012308:	2300      	movs	r3, #0
}
 801230a:	4618      	mov	r0, r3
 801230c:	3728      	adds	r7, #40	; 0x28
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	4d555445 	.word	0x4d555445
 8012318:	240023b4 	.word	0x240023b4
 801231c:	080121ed 	.word	0x080121ed
 8012320:	24002304 	.word	0x24002304
 8012324:	24002308 	.word	0x24002308

08012328 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b096      	sub	sp, #88	; 0x58
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012330:	f3ef 8310 	mrs	r3, PRIMASK
 8012334:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012338:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801233a:	b672      	cpsid	i
    return(int_posture);
 801233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 801233e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8012346:	4b4a      	ldr	r3, [pc, #296]	; (8012470 <_tx_mutex_delete+0x148>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	3b01      	subs	r3, #1
 801234c:	4a48      	ldr	r2, [pc, #288]	; (8012470 <_tx_mutex_delete+0x148>)
 801234e:	6013      	str	r3, [r2, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8012350:	4b47      	ldr	r3, [pc, #284]	; (8012470 <_tx_mutex_delete+0x148>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d103      	bne.n	8012360 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8012358:	4b46      	ldr	r3, [pc, #280]	; (8012474 <_tx_mutex_delete+0x14c>)
 801235a:	2200      	movs	r2, #0
 801235c:	601a      	str	r2, [r3, #0]
 801235e:	e013      	b.n	8012388 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6a1b      	ldr	r3, [r3, #32]
 8012364:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801236a:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 801236c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801236e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012370:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8012372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012376:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8012378:	4b3e      	ldr	r3, [pc, #248]	; (8012474 <_tx_mutex_delete+0x14c>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	429a      	cmp	r2, r3
 8012380:	d102      	bne.n	8012388 <_tx_mutex_delete+0x60>
        {
        
            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8012382:	4a3c      	ldr	r2, [pc, #240]	; (8012474 <_tx_mutex_delete+0x14c>)
 8012384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012386:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012388:	4b3b      	ldr	r3, [pc, #236]	; (8012478 <_tx_mutex_delete+0x150>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	3301      	adds	r3, #1
 801238e:	4a3a      	ldr	r2, [pc, #232]	; (8012478 <_tx_mutex_delete+0x150>)
 8012390:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	699b      	ldr	r3, [r3, #24]
 8012396:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2200      	movs	r2, #0
 801239c:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	69db      	ldr	r3, [r3, #28]
 80123a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 80123b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d013      	beq.n	80123de <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2201      	movs	r2, #1
 80123ba:	609a      	str	r2, [r3, #8]
 80123bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123be:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c2:	f383 8810 	msr	PRIMASK, r3
}
 80123c6:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f000 facf 	bl	801296c <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123ce:	f3ef 8310 	mrs	r3, PRIMASK
 80123d2:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80123d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80123d8:	b672      	cpsid	i
    return(int_posture);
 80123da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 80123dc:	657b      	str	r3, [r7, #84]	; 0x54
 80123de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123e0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e4:	f383 8810 	msr	PRIMASK, r3
}
 80123e8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 80123ea:	e024      	b.n	8012436 <_tx_mutex_delete+0x10e>
    {
      
        /* Decrement the suspension count.  */
        suspended_count--;
 80123ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123ee:	3b01      	subs	r3, #1
 80123f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123f2:	f3ef 8310 	mrs	r3, PRIMASK
 80123f6:	61fb      	str	r3, [r7, #28]
    return(posture);
 80123f8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80123fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80123fc:	b672      	cpsid	i
    return(int_posture);
 80123fe:	69bb      	ldr	r3, [r7, #24]
      
        /* Lockout interrupts.  */
        TX_DISABLE
 8012400:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012404:	2200      	movs	r2, #0
 8012406:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8012408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801240a:	2201      	movs	r2, #1
 801240c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8012410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012414:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8012416:	4b18      	ldr	r3, [pc, #96]	; (8012478 <_tx_mutex_delete+0x150>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	3301      	adds	r3, #1
 801241c:	4a16      	ldr	r2, [pc, #88]	; (8012478 <_tx_mutex_delete+0x150>)
 801241e:	6013      	str	r3, [r2, #0]
 8012420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012422:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012424:	6a3b      	ldr	r3, [r7, #32]
 8012426:	f383 8810 	msr	PRIMASK, r3
}
 801242a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801242c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801242e:	f001 fa65 	bl	80138fc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8012432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012434:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8012436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012438:	2b00      	cmp	r3, #0
 801243a:	d1d7      	bne.n	80123ec <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801243c:	f3ef 8310 	mrs	r3, PRIMASK
 8012440:	613b      	str	r3, [r7, #16]
    return(posture);
 8012442:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8012444:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012446:	b672      	cpsid	i
    return(int_posture);
 8012448:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801244a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 801244c:	4b0a      	ldr	r3, [pc, #40]	; (8012478 <_tx_mutex_delete+0x150>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	3b01      	subs	r3, #1
 8012452:	4a09      	ldr	r2, [pc, #36]	; (8012478 <_tx_mutex_delete+0x150>)
 8012454:	6013      	str	r3, [r2, #0]
 8012456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012458:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	f383 8810 	msr	PRIMASK, r3
}
 8012460:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8012462:	f001 fa11 	bl	8013888 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012466:	2300      	movs	r3, #0
}
 8012468:	4618      	mov	r0, r3
 801246a:	3758      	adds	r7, #88	; 0x58
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	24002304 	.word	0x24002304
 8012474:	24002308 	.word	0x24002308
 8012478:	240023cc 	.word	0x240023cc

0801247c <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b092      	sub	sp, #72	; 0x48
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012486:	f3ef 8310 	mrs	r3, PRIMASK
 801248a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801248e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012490:	b672      	cpsid	i
    return(int_posture);
 8012492:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8012494:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012496:	4b7a      	ldr	r3, [pc, #488]	; (8012680 <_tx_mutex_get+0x204>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	689b      	ldr	r3, [r3, #8]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d144      	bne.n	801252e <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2201      	movs	r2, #1
 80124a8:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80124ae:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80124b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d032      	beq.n	801251c <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	691b      	ldr	r3, [r3, #16]
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d106      	bne.n	80124cc <_tx_mutex_get+0x50>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80124be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2220      	movs	r2, #32
 80124ca:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80124cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80124d2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 80124d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00f      	beq.n	80124fa <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 80124da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124de:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80124e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80124e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124f0:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80124f8:	e009      	b.n	801250e <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80124fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 801250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012514:	1c5a      	adds	r2, r3, #1
 8012516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012518:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 801251c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801251e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	f383 8810 	msr	PRIMASK, r3
}
 8012526:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8012528:	2300      	movs	r3, #0
 801252a:	647b      	str	r3, [r7, #68]	; 0x44
 801252c:	e0a2      	b.n	8012674 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012534:	429a      	cmp	r2, r3
 8012536:	d10d      	bne.n	8012554 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just 
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	609a      	str	r2, [r3, #8]
 8012542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012544:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	f383 8810 	msr	PRIMASK, r3
}
 801254c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801254e:	2300      	movs	r3, #0
 8012550:	647b      	str	r3, [r7, #68]	; 0x44
 8012552:	e08f      	b.n	8012674 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	f000 8084 	beq.w	8012664 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801255c:	4b49      	ldr	r3, [pc, #292]	; (8012684 <_tx_mutex_get+0x208>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d008      	beq.n	8012576 <_tx_mutex_get+0xfa>
 8012564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012566:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	f383 8810 	msr	PRIMASK, r3
}
 801256e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8012570:	231d      	movs	r3, #29
 8012572:	647b      	str	r3, [r7, #68]	; 0x44
 8012574:	e07e      	b.n	8012674 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 801257c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801257e:	4a42      	ldr	r2, [pc, #264]	; (8012688 <_tx_mutex_get+0x20c>)
 8012580:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8012582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012584:	687a      	ldr	r2, [r7, #4]
 8012586:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801258a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801258e:	1c5a      	adds	r2, r3, #1
 8012590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012592:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	69db      	ldr	r3, [r3, #28]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d109      	bne.n	80125b2 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125a2:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80125a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125a8:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80125aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125ae:	675a      	str	r2, [r3, #116]	; 0x74
 80125b0:	e011      	b.n	80125d6 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	699b      	ldr	r3, [r3, #24]
 80125b6:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80125b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125bc:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80125be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c2:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80125c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125c8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80125ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125ce:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80125d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125d4:	675a      	str	r2, [r3, #116]	; 0x74
                }
            
                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	69db      	ldr	r3, [r3, #28]
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80125e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e2:	220d      	movs	r2, #13
 80125e4:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80125e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e8:	2201      	movs	r2, #1
 80125ea:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80125ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ee:	683a      	ldr	r2, [r7, #0]
 80125f0:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80125f2:	4b24      	ldr	r3, [pc, #144]	; (8012684 <_tx_mutex_get+0x208>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	3301      	adds	r3, #1
 80125f8:	4a22      	ldr	r2, [pc, #136]	; (8012684 <_tx_mutex_get+0x208>)
 80125fa:	6013      	str	r3, [r2, #0]
 80125fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	f383 8810 	msr	PRIMASK, r3
}
 8012606:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread 
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	691b      	ldr	r3, [r3, #16]
 801260c:	2b01      	cmp	r3, #1
 801260e:	d121      	bne.n	8012654 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012618:	429a      	cmp	r2, r3
 801261a:	d903      	bls.n	8012624 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 801261c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8012624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801262e:	429a      	cmp	r2, r3
 8012630:	d204      	bcs.n	801263c <_tx_mutex_get+0x1c0>
                    {
                    
                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8012632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012638:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 801263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012644:	429a      	cmp	r2, r3
 8012646:	d905      	bls.n	8012654 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8012648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801264c:	4619      	mov	r1, r3
 801264e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012650:	f000 f8ce 	bl	80127f0 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012654:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012656:	f001 fa51 	bl	8013afc <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801265c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012660:	647b      	str	r3, [r7, #68]	; 0x44
 8012662:	e007      	b.n	8012674 <_tx_mutex_get+0x1f8>
 8012664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012666:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f383 8810 	msr	PRIMASK, r3
}
 801266e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8012670:	231d      	movs	r3, #29
 8012672:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8012674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012676:	4618      	mov	r0, r3
 8012678:	3748      	adds	r7, #72	; 0x48
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
 801267e:	bf00      	nop
 8012680:	240023d0 	.word	0x240023d0
 8012684:	240023cc 	.word	0x240023cc
 8012688:	080120f5 	.word	0x080120f5

0801268c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b092      	sub	sp, #72	; 0x48
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012694:	f3ef 8310 	mrs	r3, PRIMASK
 8012698:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801269c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801269e:	b672      	cpsid	i
    return(int_posture);
 80126a0:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80126a2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	69db      	ldr	r3, [r3, #28]
 80126a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 80126aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d805      	bhi.n	80126bc <_tx_mutex_prioritize+0x30>
 80126b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126b2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	f383 8810 	msr	PRIMASK, r3
}
 80126ba:	e092      	b.n	80127e2 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 80126bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126be:	2b02      	cmp	r3, #2
 80126c0:	d114      	bne.n	80126ec <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	699b      	ldr	r3, [r3, #24]
 80126c6:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 80126c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126cc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 80126ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d202      	bcs.n	80126e0 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126de:	619a      	str	r2, [r3, #24]
 80126e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	f383 8810 	msr	PRIMASK, r3
}
 80126ea:	e07a      	b.n	80127e2 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	699b      	ldr	r3, [r3, #24]
 80126f0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80126f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80126f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126fa:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80126fc:	4b3b      	ldr	r3, [pc, #236]	; (80127ec <_tx_mutex_prioritize+0x160>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	3301      	adds	r3, #1
 8012702:	4a3a      	ldr	r2, [pc, #232]	; (80127ec <_tx_mutex_prioritize+0x160>)
 8012704:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8012706:	2300      	movs	r3, #0
 8012708:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 801270a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801270e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012712:	429a      	cmp	r2, r3
 8012714:	d201      	bcs.n	801271a <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8012716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012718:	63fb      	str	r3, [r7, #60]	; 0x3c
 801271a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801271c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f383 8810 	msr	PRIMASK, r3
}
 8012724:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012726:	f3ef 8310 	mrs	r3, PRIMASK
 801272a:	617b      	str	r3, [r7, #20]
    return(posture);
 801272c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801272e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012730:	b672      	cpsid	i
    return(int_posture);
 8012732:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012734:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	699b      	ldr	r3, [r3, #24]
 801273a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801273c:	429a      	cmp	r2, r3
 801273e:	d002      	beq.n	8012746 <_tx_mutex_prioritize+0xba>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8012740:	2301      	movs	r3, #1
 8012742:	633b      	str	r3, [r7, #48]	; 0x30
 8012744:	e006      	b.n	8012754 <_tx_mutex_prioritize+0xc8>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	69db      	ldr	r3, [r3, #28]
 801274a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801274c:	429a      	cmp	r2, r3
 801274e:	d001      	beq.n	8012754 <_tx_mutex_prioritize+0xc8>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8012750:	2301      	movs	r3, #1
 8012752:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8012754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012756:	2b00      	cmp	r3, #0
 8012758:	d103      	bne.n	8012762 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801275a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801275e:	643b      	str	r3, [r7, #64]	; 0x40
 8012760:	e00c      	b.n	801277c <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	699b      	ldr	r3, [r3, #24]
 8012766:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	69db      	ldr	r3, [r3, #28]
 801276c:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8012772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012776:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8012778:	2300      	movs	r3, #0
 801277a:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 801277c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012780:	429a      	cmp	r2, r3
 8012782:	d1c2      	bne.n	801270a <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8012784:	4b19      	ldr	r3, [pc, #100]	; (80127ec <_tx_mutex_prioritize+0x160>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	3b01      	subs	r3, #1
 801278a:	4a18      	ldr	r2, [pc, #96]	; (80127ec <_tx_mutex_prioritize+0x160>)
 801278c:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 801278e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012792:	429a      	cmp	r2, r3
 8012794:	d01d      	beq.n	80127d2 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8012796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801279a:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 801279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801279e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127a0:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80127a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127a6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80127a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127ac:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80127ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127b2:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80127b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127b8:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 80127ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127be:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80127c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127c4:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80127c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127ca:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127d0:	619a      	str	r2, [r3, #24]
 80127d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127d4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	f383 8810 	msr	PRIMASK, r3
}
 80127dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80127de:	f001 f853 	bl	8013888 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80127e2:	2300      	movs	r3, #0
#endif
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3748      	adds	r7, #72	; 0x48
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	240023cc 	.word	0x240023cc

080127f0 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b090      	sub	sp, #64	; 0x40
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127fa:	f3ef 8310 	mrs	r3, PRIMASK
 80127fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012802:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012804:	b672      	cpsid	i
    return(int_posture);
 8012806:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012808:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801280e:	2b00      	cmp	r3, #0
 8012810:	d017      	beq.n	8012842 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	683a      	ldr	r2, [r7, #0]
 8012816:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801281e:	683a      	ldr	r2, [r7, #0]
 8012820:	429a      	cmp	r2, r3
 8012822:	d905      	bls.n	8012830 <_tx_mutex_priority_change+0x40>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	63da      	str	r2, [r3, #60]	; 0x3c
 801282e:	e002      	b.n	8012836 <_tx_mutex_priority_change+0x46>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	683a      	ldr	r2, [r7, #0]
 8012834:	63da      	str	r2, [r3, #60]	; 0x3c
 8012836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012838:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283c:	f383 8810 	msr	PRIMASK, r3
}
 8012840:	e089      	b.n	8012956 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8012842:	4b47      	ldr	r3, [pc, #284]	; (8012960 <_tx_mutex_priority_change+0x170>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801284c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 801284e:	4b45      	ldr	r3, [pc, #276]	; (8012964 <_tx_mutex_priority_change+0x174>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	3302      	adds	r3, #2
 8012854:	4a43      	ldr	r2, [pc, #268]	; (8012964 <_tx_mutex_priority_change+0x174>)
 8012856:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	220e      	movs	r2, #14
 801285c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2201      	movs	r2, #1
 8012862:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2200      	movs	r2, #0
 8012868:	64da      	str	r2, [r3, #76]	; 0x4c
 801286a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801286c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	f383 8810 	msr	PRIMASK, r3
}
 8012874:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the 
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f001 f940 	bl	8013afc <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801287c:	f3ef 8310 	mrs	r3, PRIMASK
 8012880:	623b      	str	r3, [r7, #32]
    return(posture);
 8012882:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012884:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012886:	b672      	cpsid	i
    return(int_posture);
 8012888:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 801288a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have 
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	683a      	ldr	r2, [r7, #0]
 8012890:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012898:	683a      	ldr	r2, [r7, #0]
 801289a:	429a      	cmp	r2, r3
 801289c:	d905      	bls.n	80128aa <_tx_mutex_priority_change+0xba>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80128a8:	e002      	b.n	80128b0 <_tx_mutex_priority_change+0xc0>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	683a      	ldr	r2, [r7, #0]
 80128ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80128b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	f383 8810 	msr	PRIMASK, r3
}
 80128ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f001 f81d 	bl	80138fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80128c2:	f3ef 8310 	mrs	r3, PRIMASK
 80128c6:	617b      	str	r3, [r7, #20]
    return(posture);
 80128c8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80128ca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80128cc:	b672      	cpsid	i
    return(int_posture);
 80128ce:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 80128d0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
        
        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 80128d2:	4b23      	ldr	r3, [pc, #140]	; (8012960 <_tx_mutex_priority_change+0x170>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 80128d8:	687a      	ldr	r2, [r7, #4]
 80128da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128dc:	429a      	cmp	r2, r3
 80128de:	d034      	beq.n	801294a <_tx_mutex_priority_change+0x15a>
        {
        
            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d130      	bne.n	801294a <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d811      	bhi.n	8012918 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d126      	bne.n	801294a <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 80128fc:	4a18      	ldr	r2, [pc, #96]	; (8012960 <_tx_mutex_priority_change+0x170>)
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8012902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	429a      	cmp	r2, r3
 8012908:	d21f      	bcs.n	801294a <_tx_mutex_priority_change+0x15a>
                        {
                        
                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801290e:	4916      	ldr	r1, [pc, #88]	; (8012968 <_tx_mutex_priority_change+0x178>)
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012916:	e018      	b.n	801294a <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012920:	429a      	cmp	r2, r3
 8012922:	d212      	bcs.n	801294a <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801292c:	429a      	cmp	r2, r3
 801292e:	d80c      	bhi.n	801294a <_tx_mutex_priority_change+0x15a>
                        {
                
                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012930:	4a0b      	ldr	r2, [pc, #44]	; (8012960 <_tx_mutex_priority_change+0x170>)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8012936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	429a      	cmp	r2, r3
 801293c:	d205      	bcs.n	801294a <_tx_mutex_priority_change+0x15a>
                            {
                        
                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012942:	4909      	ldr	r1, [pc, #36]	; (8012968 <_tx_mutex_priority_change+0x178>)
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801294c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	f383 8810 	msr	PRIMASK, r3
}
 8012954:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012956:	bf00      	nop
 8012958:	3740      	adds	r7, #64	; 0x40
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	240023d4 	.word	0x240023d4
 8012964:	240023cc 	.word	0x240023cc
 8012968:	24002334 	.word	0x24002334

0801296c <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b0a6      	sub	sp, #152	; 0x98
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8012974:	2320      	movs	r3, #32
 8012976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801297a:	f3ef 8310 	mrs	r3, PRIMASK
 801297e:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8012980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8012982:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8012984:	b672      	cpsid	i
    return(int_posture);
 8012986:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8012988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	2b00      	cmp	r3, #0
 8012992:	f000 81ff 	beq.w	8012d94 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801299c:	4ba3      	ldr	r3, [pc, #652]	; (8012c2c <_tx_mutex_put+0x2c0>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	68db      	ldr	r3, [r3, #12]
 80129a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d00d      	beq.n	80129c8 <_tx_mutex_put+0x5c>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 80129ac:	4ba0      	ldr	r3, [pc, #640]	; (8012c30 <_tx_mutex_put+0x2c4>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d109      	bne.n	80129c8 <_tx_mutex_put+0x5c>
 80129b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129b8:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129bc:	f383 8810 	msr	PRIMASK, r3
}
 80129c0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 80129c2:	231e      	movs	r3, #30
 80129c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }
        
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 80129c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80129cc:	2b20      	cmp	r3, #32
 80129ce:	f040 81eb 	bne.w	8012da8 <_tx_mutex_put+0x43c>
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	689b      	ldr	r3, [r3, #8]
 80129d6:	1e5a      	subs	r2, r3, #1
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d00a      	beq.n	80129fa <_tx_mutex_put+0x8e>
 80129e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129e8:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ec:	f383 8810 	msr	PRIMASK, r3
}
 80129f0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 80129f2:	2300      	movs	r3, #0
 80129f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80129f8:	e1d6      	b.n	8012da8 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80129fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d10a      	bne.n	8012a16 <_tx_mutex_put+0xaa>
 8012a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012a04:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a08:	f383 8810 	msr	PRIMASK, r3
}
 8012a0c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012a14:	e1c8      	b.n	8012da8 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8012a16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012a1c:	1e5a      	subs	r2, r3, #1
 8012a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8012a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d104      	bne.n	8012a38 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8012a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a30:	2200      	movs	r2, #0
 8012a32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8012a36:	e019      	b.n	8012a6c <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a44:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8012a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012a4c:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8012a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012a54:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8012a56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d104      	bne.n	8012a6c <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8012a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012a68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	699b      	ldr	r3, [r3, #24]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d110      	bne.n	8012a96 <_tx_mutex_put+0x12a>
                    {
                    
                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	691b      	ldr	r3, [r3, #16]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d10c      	bne.n	8012a96 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	60da      	str	r2, [r3, #12]
 8012a82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012a86:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a8a:	f383 8810 	msr	PRIMASK, r3
}
 8012a8e:	bf00      	nop
                            
                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8012a90:	2300      	movs	r3, #0
 8012a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }
                     
                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8012a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012a9a:	2b20      	cmp	r3, #32
 8012a9c:	f040 8184 	bne.w	8012da8 <_tx_mutex_put+0x43c>
                    {
   
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8012aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	691b      	ldr	r3, [r3, #16]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d155      	bne.n	8012b64 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012ab8:	4b5d      	ldr	r3, [pc, #372]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	3301      	adds	r3, #1
 8012abe:	4a5c      	ldr	r2, [pc, #368]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012ac0:	6013      	str	r3, [r2, #0]
 8012ac2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ac6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012aca:	f383 8810 	msr	PRIMASK, r3
}
 8012ace:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012ad0:	2320      	movs	r3, #32
 8012ad2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            
                            /* Search the owned mutexes for this thread to determine the highest priority for this 
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8012ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ad8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8012ae0:	e01f      	b.n	8012b22 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8012ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ae6:	691b      	ldr	r3, [r3, #16]
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d10b      	bne.n	8012b04 <_tx_mutex_put+0x198>
                                {
                            
                                    /* Determine if highest priority field of the mutex is higher than the priority to 
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8012aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d904      	bls.n	8012b04 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8012afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8012b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8012b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012b14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d102      	bne.n	8012b22 <_tx_mutex_put+0x1b6>
                                {
                            
                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8012b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1db      	bne.n	8012ae2 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8012b2e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8012b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8012b32:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b34:	b672      	cpsid	i
    return(int_posture);
 8012b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012b3c:	4b3c      	ldr	r3, [pc, #240]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	3b01      	subs	r3, #1
 8012b42:	4a3b      	ldr	r2, [pc, #236]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012b44:	6013      	str	r3, [r2, #0]
#endif
                       
                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8012b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                                
                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8012b50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d203      	bcs.n	8012b64 <_tx_mutex_put+0x1f8>
                            {
                            
                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8012b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	69db      	ldr	r3, [r3, #28]
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d920      	bls.n	8012bae <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	691b      	ldr	r3, [r3, #16]
 8012b70:	2b01      	cmp	r3, #1
 8012b72:	d11c      	bne.n	8012bae <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8012b74:	4b2e      	ldr	r3, [pc, #184]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	3301      	adds	r3, #1
 8012b7a:	4a2d      	ldr	r2, [pc, #180]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012b7c:	6013      	str	r3, [r2, #0]
 8012b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b82:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b86:	f383 8810 	msr	PRIMASK, r3
}
 8012b8a:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff fd7d 	bl	801268c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b92:	f3ef 8310 	mrs	r3, PRIMASK
 8012b96:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012b9a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b9c:	b672      	cpsid	i
    return(int_posture);
 8012b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8012ba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8012ba4:	4b22      	ldr	r3, [pc, #136]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	3b01      	subs	r3, #1
 8012baa:	4a21      	ldr	r2, [pc, #132]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012bac:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	699b      	ldr	r3, [r3, #24]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d13e      	bne.n	8012c34 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012bb6:	4b1e      	ldr	r3, [pc, #120]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	3301      	adds	r3, #1
 8012bbc:	4a1c      	ldr	r2, [pc, #112]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012bbe:	6013      	str	r3, [r2, #0]
 8012bc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc8:	f383 8810 	msr	PRIMASK, r3
}
 8012bcc:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that 
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2220      	movs	r2, #32
 8012bd2:	629a      	str	r2, [r3, #40]	; 0x28
  
                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bda:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d006      	beq.n	8012bf0 <_tx_mutex_put+0x284>
                            {
                      
                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7ff fe00 	bl	80127f0 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8012bf4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012bf8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012bfa:	b672      	cpsid	i
    return(int_posture);
 8012bfc:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8012bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012c02:	4b0b      	ldr	r3, [pc, #44]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	3b01      	subs	r3, #1
 8012c08:	4a09      	ldr	r2, [pc, #36]	; (8012c30 <_tx_mutex_put+0x2c4>)
 8012c0a:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	60da      	str	r2, [r3, #12]
 8012c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012c16:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1a:	f383 8810 	msr	PRIMASK, r3
}
 8012c1e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8012c20:	f000 fe32 	bl	8013888 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8012c24:	2300      	movs	r3, #0
 8012c26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012c2a:	e0bd      	b.n	8012da8 <_tx_mutex_put+0x43c>
 8012c2c:	240023d0 	.word	0x240023d0
 8012c30:	240023cc 	.word	0x240023cc
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	699b      	ldr	r3, [r3, #24]
 8012c38:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	691b      	ldr	r3, [r3, #16]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d10a      	bne.n	8012c58 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	68db      	ldr	r3, [r3, #12]
 8012c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        
                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8012c4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2220      	movs	r2, #32
 8012c56:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8012c58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012c5e:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8012c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d10a      	bne.n	8012c7c <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8012c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c68:	687a      	ldr	r2, [r7, #4]
 8012c6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	687a      	ldr	r2, [r7, #4]
 8012c72:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	631a      	str	r2, [r3, #48]	; 0x30
 8012c7a:	e016      	b.n	8012caa <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8012c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8012c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c8c:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8012c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8012c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012ca0:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012ca8:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8012caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cac:	1c5a      	adds	r2, r3, #1
 8012cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012cbe:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	69db      	ldr	r3, [r3, #28]
 8012cc4:	1e5a      	subs	r2, r3, #1
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	61da      	str	r2, [r3, #28]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	69db      	ldr	r3, [r3, #28]
 8012cce:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8012cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d103      	bne.n	8012cde <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	619a      	str	r2, [r3, #24]
 8012cdc:	e00e      	b.n	8012cfc <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8012cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ce2:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012ce8:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8012cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cee:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8012cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012cf2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012cf4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8012cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012cf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012cfa:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cfe:	2200      	movs	r2, #0
 8012d00:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d04:	2200      	movs	r2, #0
 8012d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012d0a:	4b2a      	ldr	r3, [pc, #168]	; (8012db4 <_tx_mutex_put+0x448>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	3301      	adds	r3, #1
 8012d10:	4a28      	ldr	r2, [pc, #160]	; (8012db4 <_tx_mutex_put+0x448>)
 8012d12:	6013      	str	r3, [r2, #0]
 8012d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d18:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	f383 8810 	msr	PRIMASK, r3
}
 8012d20:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	691b      	ldr	r3, [r3, #16]
 8012d26:	2b01      	cmp	r3, #1
 8012d28:	d12d      	bne.n	8012d86 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */
        
                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	69db      	ldr	r3, [r3, #28]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d01c      	beq.n	8012d6c <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f7ff fcaa 	bl	801268c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d38:	f3ef 8310 	mrs	r3, PRIMASK
 8012d3c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012d3e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012d40:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d42:	b672      	cpsid	i
    return(int_posture);
 8012d44:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8012d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	699b      	ldr	r3, [r3, #24]
 8012d4e:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8012d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d003      	beq.n	8012d5e <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8012d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8012d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d62:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	f383 8810 	msr	PRIMASK, r3
}
 8012d6a:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */
                    
                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8012d6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d72:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d005      	beq.n	8012d86 <_tx_mutex_put+0x41a>
                                {
        
                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8012d7a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012d7e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8012d82:	f7ff fd35 	bl	80127f0 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8012d86:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012d88:	f000 fdb8 	bl	80138fc <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012d92:	e009      	b.n	8012da8 <_tx_mutex_put+0x43c>
 8012d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d98:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f383 8810 	msr	PRIMASK, r3
}
 8012da0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8012da2:	231e      	movs	r3, #30
 8012da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8012da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3798      	adds	r7, #152	; 0x98
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	240023cc 	.word	0x240023cc

08012db8 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b08e      	sub	sp, #56	; 0x38
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8012dc6:	623b      	str	r3, [r7, #32]
    return(posture);
 8012dc8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012dca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012dcc:	b672      	cpsid	i
    return(int_posture);
 8012dce:	69fb      	ldr	r3, [r7, #28]
    

#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8012dd0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012dd6:	4a33      	ldr	r2, [pc, #204]	; (8012ea4 <_tx_semaphore_cleanup+0xec>)
 8012dd8:	4293      	cmp	r3, r2
 8012dda:	d158      	bne.n	8012e8e <_tx_semaphore_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012de2:	683a      	ldr	r2, [r7, #0]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d152      	bne.n	8012e8e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dec:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8012dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d04c      	beq.n	8012e8e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8012df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	4a2b      	ldr	r2, [pc, #172]	; (8012ea8 <_tx_semaphore_cleanup+0xf0>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d147      	bne.n	8012e8e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e00:	691b      	ldr	r3, [r3, #16]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d043      	beq.n	8012e8e <_tx_semaphore_cleanup+0xd6>
#endif
                
                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8012e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0e:	691b      	ldr	r3, [r3, #16]
 8012e10:	1e5a      	subs	r2, r3, #1
 8012e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e14:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8012e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e18:	691b      	ldr	r3, [r3, #16]
 8012e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d103      	bne.n	8012e2a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8012e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e24:	2200      	movs	r2, #0
 8012e26:	60da      	str	r2, [r3, #12]
 8012e28:	e013      	b.n	8012e52 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e2e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e34:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e3a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e40:	671a      	str	r2, [r3, #112]	; 0x70
            
                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8012e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e44:	68db      	ldr	r3, [r3, #12]
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d102      	bne.n	8012e52 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8012e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e50:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e56:	2b06      	cmp	r3, #6
 8012e58:	d119      	bne.n	8012e8e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	220d      	movs	r2, #13
 8012e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012e62:	4b12      	ldr	r3, [pc, #72]	; (8012eac <_tx_semaphore_cleanup+0xf4>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	3301      	adds	r3, #1
 8012e68:	4a10      	ldr	r2, [pc, #64]	; (8012eac <_tx_semaphore_cleanup+0xf4>)
 8012e6a:	6013      	str	r3, [r2, #0]
 8012e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e6e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	f383 8810 	msr	PRIMASK, r3
}
 8012e76:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f000 fd3f 	bl	80138fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8012e82:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012e84:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012e86:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e88:	b672      	cpsid	i
    return(int_posture);
 8012e8a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8012e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f383 8810 	msr	PRIMASK, r3
}
 8012e98:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012e9a:	bf00      	nop
 8012e9c:	3738      	adds	r7, #56	; 0x38
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	08012db9 	.word	0x08012db9
 8012ea8:	53454d41 	.word	0x53454d41
 8012eac:	240023cc 	.word	0x240023cc

08012eb0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b08a      	sub	sp, #40	; 0x28
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8012ebc:	221c      	movs	r2, #28
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	68f8      	ldr	r0, [r7, #12]
 8012ec2:	f002 fc15 	bl	80156f0 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	68ba      	ldr	r2, [r7, #8]
 8012eca:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8012ed6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012ed8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012eda:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012edc:	b672      	cpsid	i
    return(int_posture);
 8012ede:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8012ee0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	4a18      	ldr	r2, [pc, #96]	; (8012f48 <_tx_semaphore_create+0x98>)
 8012ee6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8012ee8:	4b18      	ldr	r3, [pc, #96]	; (8012f4c <_tx_semaphore_create+0x9c>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d109      	bne.n	8012f04 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8012ef0:	4a17      	ldr	r2, [pc, #92]	; (8012f50 <_tx_semaphore_create+0xa0>)
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	68fa      	ldr	r2, [r7, #12]
 8012efa:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	619a      	str	r2, [r3, #24]
 8012f02:	e011      	b.n	8012f28 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8012f04:	4b12      	ldr	r3, [pc, #72]	; (8012f50 <_tx_semaphore_create+0xa0>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8012f0a:	6a3b      	ldr	r3, [r7, #32]
 8012f0c:	699b      	ldr	r3, [r3, #24]
 8012f0e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8012f10:	6a3b      	ldr	r3, [r7, #32]
 8012f12:	68fa      	ldr	r2, [r7, #12]
 8012f14:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8012f16:	69fb      	ldr	r3, [r7, #28]
 8012f18:	68fa      	ldr	r2, [r7, #12]
 8012f1a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	69fa      	ldr	r2, [r7, #28]
 8012f20:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	6a3a      	ldr	r2, [r7, #32]
 8012f26:	615a      	str	r2, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8012f28:	4b08      	ldr	r3, [pc, #32]	; (8012f4c <_tx_semaphore_create+0x9c>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	4a07      	ldr	r2, [pc, #28]	; (8012f4c <_tx_semaphore_create+0x9c>)
 8012f30:	6013      	str	r3, [r2, #0]
 8012f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	f383 8810 	msr	PRIMASK, r3
}
 8012f3c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012f3e:	2300      	movs	r3, #0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3728      	adds	r7, #40	; 0x28
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	53454d41 	.word	0x53454d41
 8012f4c:	24002320 	.word	0x24002320
 8012f50:	24002310 	.word	0x24002310

08012f54 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b08e      	sub	sp, #56	; 0x38
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f62:	f3ef 8310 	mrs	r3, PRIMASK
 8012f66:	623b      	str	r3, [r7, #32]
    return(posture);
 8012f68:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012f6a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f6c:	b672      	cpsid	i
    return(int_posture);
 8012f6e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8012f70:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	689b      	ldr	r3, [r3, #8]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00a      	beq.n	8012f90 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	689b      	ldr	r3, [r3, #8]
 8012f7e:	1e5a      	subs	r2, r3, #1
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	609a      	str	r2, [r3, #8]
 8012f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f86:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	f383 8810 	msr	PRIMASK, r3
}
 8012f8e:	e068      	b.n	8013062 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d05d      	beq.n	8013052 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8012f96:	4b35      	ldr	r3, [pc, #212]	; (801306c <_tx_semaphore_get+0x118>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d008      	beq.n	8012fb0 <_tx_semaphore_get+0x5c>
 8012f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	f383 8810 	msr	PRIMASK, r3
}
 8012fa8:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8012faa:	230d      	movs	r3, #13
 8012fac:	637b      	str	r3, [r7, #52]	; 0x34
 8012fae:	e058      	b.n	8013062 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012fb0:	4b2f      	ldr	r3, [pc, #188]	; (8013070 <_tx_semaphore_get+0x11c>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8012fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb8:	4a2e      	ldr	r2, [pc, #184]	; (8013074 <_tx_semaphore_get+0x120>)
 8012fba:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8012fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8012fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012fc8:	1c5a      	adds	r2, r3, #1
 8012fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fcc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	691b      	ldr	r3, [r3, #16]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d109      	bne.n	8012fec <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fdc:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8012fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fe2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8012fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fe8:	675a      	str	r2, [r3, #116]	; 0x74
 8012fea:	e011      	b.n	8013010 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	68db      	ldr	r3, [r3, #12]
 8012ff0:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ff6:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ffc:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013002:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013008:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801300e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	691b      	ldr	r3, [r3, #16]
 8013014:	1c5a      	adds	r2, r3, #1
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 801301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301c:	2206      	movs	r2, #6
 801301e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013022:	2201      	movs	r2, #1
 8013024:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013028:	683a      	ldr	r2, [r7, #0]
 801302a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801302c:	4b0f      	ldr	r3, [pc, #60]	; (801306c <_tx_semaphore_get+0x118>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	3301      	adds	r3, #1
 8013032:	4a0e      	ldr	r2, [pc, #56]	; (801306c <_tx_semaphore_get+0x118>)
 8013034:	6013      	str	r3, [r2, #0]
 8013036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013038:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	f383 8810 	msr	PRIMASK, r3
}
 8013040:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013044:	f000 fd5a 	bl	8013afc <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801304e:	637b      	str	r3, [r7, #52]	; 0x34
 8013050:	e007      	b.n	8013062 <_tx_semaphore_get+0x10e>
 8013052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013054:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	f383 8810 	msr	PRIMASK, r3
}
 801305c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801305e:	230d      	movs	r3, #13
 8013060:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8013062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013064:	4618      	mov	r0, r3
 8013066:	3738      	adds	r7, #56	; 0x38
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}
 801306c:	240023cc 	.word	0x240023cc
 8013070:	240023d0 	.word	0x240023d0
 8013074:	08012db9 	.word	0x08012db9

08013078 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b08c      	sub	sp, #48	; 0x30
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013080:	f3ef 8310 	mrs	r3, PRIMASK
 8013084:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013086:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013088:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801308a:	b672      	cpsid	i
    return(int_posture);
 801308c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801308e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	691b      	ldr	r3, [r3, #16]
 8013094:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8013096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013098:	2b00      	cmp	r3, #0
 801309a:	d10a      	bne.n	80130b2 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	689b      	ldr	r3, [r3, #8]
 80130a0:	1c5a      	adds	r2, r3, #1
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	609a      	str	r2, [r3, #8]
 80130a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	f383 8810 	msr	PRIMASK, r3
}
 80130b0:	e033      	b.n	801311a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80130b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ba:	3b01      	subs	r3, #1
 80130bc:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80130be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d103      	bne.n	80130cc <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2200      	movs	r2, #0
 80130c8:	60da      	str	r2, [r3, #12]
 80130ca:	e00e      	b.n	80130ea <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130d0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6a3a      	ldr	r2, [r7, #32]
 80130d6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80130d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130dc:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80130de:	6a3b      	ldr	r3, [r7, #32]
 80130e0:	69fa      	ldr	r2, [r7, #28]
 80130e2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	6a3a      	ldr	r2, [r7, #32]
 80130e8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130ee:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	2200      	movs	r2, #0
 80130f4:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80130f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f8:	2200      	movs	r2, #0
 80130fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80130fe:	4b09      	ldr	r3, [pc, #36]	; (8013124 <_tx_semaphore_put+0xac>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	3301      	adds	r3, #1
 8013104:	4a07      	ldr	r2, [pc, #28]	; (8013124 <_tx_semaphore_put+0xac>)
 8013106:	6013      	str	r3, [r2, #0]
 8013108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	f383 8810 	msr	PRIMASK, r3
}
 8013112:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013116:	f000 fbf1 	bl	80138fc <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801311a:	2300      	movs	r3, #0
}
 801311c:	4618      	mov	r0, r3
 801311e:	3730      	adds	r7, #48	; 0x30
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	240023cc 	.word	0x240023cc

08013128 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b092      	sub	sp, #72	; 0x48
 801312c:	af00      	add	r7, sp, #0
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	607a      	str	r2, [r7, #4]
 8013134:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8013136:	2300      	movs	r3, #0
 8013138:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801313a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801313c:	21ef      	movs	r1, #239	; 0xef
 801313e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013140:	f002 fad6 	bl	80156f0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8013144:	22b0      	movs	r2, #176	; 0xb0
 8013146:	2100      	movs	r1, #0
 8013148:	68f8      	ldr	r0, [r7, #12]
 801314a:	f002 fad1 	bl	80156f0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	68ba      	ldr	r2, [r7, #8]
 8013152:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	687a      	ldr	r2, [r7, #4]
 8013158:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	683a      	ldr	r2, [r7, #0]
 801315e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013164:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801316a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013170:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013176:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801317e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013184:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2220      	movs	r2, #32
 801318a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801318e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013190:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8013192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013194:	3b01      	subs	r3, #1
 8013196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013198:	4413      	add	r3, r2
 801319a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80131a0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80131a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80131a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d007      	beq.n	80131ba <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2200      	movs	r2, #0
 80131ae:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	2200      	movs	r2, #0
 80131b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80131b8:	e006      	b.n	80131c8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80131be:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80131c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2203      	movs	r2, #3
 80131cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	4a48      	ldr	r2, [pc, #288]	; (80132f4 <_tx_thread_create+0x1cc>)
 80131d2:	655a      	str	r2, [r3, #84]	; 0x54
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80131da:	4947      	ldr	r1, [pc, #284]	; (80132f8 <_tx_thread_create+0x1d0>)
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	f7ed f91f 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80131e2:	f3ef 8310 	mrs	r3, PRIMASK
 80131e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80131e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80131ea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80131ec:	b672      	cpsid	i
    return(int_posture);
 80131ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80131f0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	4a41      	ldr	r2, [pc, #260]	; (80132fc <_tx_thread_create+0x1d4>)
 80131f6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80131f8:	4b41      	ldr	r3, [pc, #260]	; (8013300 <_tx_thread_create+0x1d8>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10b      	bne.n	8013218 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8013200:	4a40      	ldr	r2, [pc, #256]	; (8013304 <_tx_thread_create+0x1dc>)
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	68fa      	ldr	r2, [r7, #12]
 801320a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	68fa      	ldr	r2, [r7, #12]
 8013212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8013216:	e016      	b.n	8013246 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8013218:	4b3a      	ldr	r3, [pc, #232]	; (8013304 <_tx_thread_create+0x1dc>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 801321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013224:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8013226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013228:	68fa      	ldr	r2, [r7, #12]
 801322a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013230:	68fa      	ldr	r2, [r7, #12]
 8013232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801323a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8013246:	4b2e      	ldr	r3, [pc, #184]	; (8013300 <_tx_thread_create+0x1d8>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	3301      	adds	r3, #1
 801324c:	4a2c      	ldr	r2, [pc, #176]	; (8013300 <_tx_thread_create+0x1d8>)
 801324e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013250:	4b2d      	ldr	r3, [pc, #180]	; (8013308 <_tx_thread_create+0x1e0>)
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	3301      	adds	r3, #1
 8013256:	4a2c      	ldr	r2, [pc, #176]	; (8013308 <_tx_thread_create+0x1e0>)
 8013258:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801325a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801325c:	2b01      	cmp	r3, #1
 801325e:	d129      	bne.n	80132b4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013260:	f3ef 8305 	mrs	r3, IPSR
 8013264:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8013266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8013268:	4b28      	ldr	r3, [pc, #160]	; (801330c <_tx_thread_create+0x1e4>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	4313      	orrs	r3, r2
 801326e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013272:	d30d      	bcc.n	8013290 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8013274:	4b26      	ldr	r3, [pc, #152]	; (8013310 <_tx_thread_create+0x1e8>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801327a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801327c:	2b00      	cmp	r3, #0
 801327e:	d009      	beq.n	8013294 <_tx_thread_create+0x16c>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8013280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013284:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8013286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801328a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801328c:	63da      	str	r2, [r3, #60]	; 0x3c
 801328e:	e001      	b.n	8013294 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8013290:	2300      	movs	r3, #0
 8013292:	647b      	str	r3, [r7, #68]	; 0x44
 8013294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013296:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013298:	6a3b      	ldr	r3, [r7, #32]
 801329a:	f383 8810 	msr	PRIMASK, r3
}
 801329e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80132a0:	68f8      	ldr	r0, [r7, #12]
 80132a2:	f000 fb2b 	bl	80138fc <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80132a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d01e      	beq.n	80132ea <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80132ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80132b2:	e01a      	b.n	80132ea <_tx_thread_create+0x1c2>
 80132b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	f383 8810 	msr	PRIMASK, r3
}
 80132be:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132c0:	f3ef 8310 	mrs	r3, PRIMASK
 80132c4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80132c6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80132c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132ca:	b672      	cpsid	i
    return(int_posture);
 80132cc:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80132ce:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80132d0:	4b0d      	ldr	r3, [pc, #52]	; (8013308 <_tx_thread_create+0x1e0>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	3b01      	subs	r3, #1
 80132d6:	4a0c      	ldr	r2, [pc, #48]	; (8013308 <_tx_thread_create+0x1e0>)
 80132d8:	6013      	str	r3, [r2, #0]
 80132da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	f383 8810 	msr	PRIMASK, r3
}
 80132e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80132e6:	f000 facf 	bl	8013888 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80132ea:	2300      	movs	r3, #0
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3748      	adds	r7, #72	; 0x48
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	08013dd1 	.word	0x08013dd1
 80132f8:	080136f1 	.word	0x080136f1
 80132fc:	54485244 	.word	0x54485244
 8013300:	240023c4 	.word	0x240023c4
 8013304:	240023bc 	.word	0x240023bc
 8013308:	240023cc 	.word	0x240023cc
 801330c:	2400008c 	.word	0x2400008c
 8013310:	240023d4 	.word	0x240023d4

08013314 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8013314:	b480      	push	{r7}
 8013316:	b08b      	sub	sp, #44	; 0x2c
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801331c:	2300      	movs	r3, #0
 801331e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013320:	f3ef 8310 	mrs	r3, PRIMASK
 8013324:	617b      	str	r3, [r7, #20]
    return(posture);
 8013326:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013328:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801332a:	b672      	cpsid	i
    return(int_posture);
 801332c:	693b      	ldr	r3, [r7, #16]
    
    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 801332e:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013334:	2b01      	cmp	r3, #1
 8013336:	d00b      	beq.n	8013350 <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801333c:	2b02      	cmp	r3, #2
 801333e:	d007      	beq.n	8013350 <_tx_thread_delete+0x3c>
 8013340:	6a3b      	ldr	r3, [r7, #32]
 8013342:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	f383 8810 	msr	PRIMASK, r3
}
 801334a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 801334c:	2311      	movs	r3, #17
 801334e:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8013350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013352:	2b00      	cmp	r3, #0
 8013354:	d12d      	bne.n	80133b2 <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2200      	movs	r2, #0
 801335a:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 801335c:	4b18      	ldr	r3, [pc, #96]	; (80133c0 <_tx_thread_delete+0xac>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	3b01      	subs	r3, #1
 8013362:	4a17      	ldr	r2, [pc, #92]	; (80133c0 <_tx_thread_delete+0xac>)
 8013364:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8013366:	4b16      	ldr	r3, [pc, #88]	; (80133c0 <_tx_thread_delete+0xac>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d103      	bne.n	8013376 <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 801336e:	4b15      	ldr	r3, [pc, #84]	; (80133c4 <_tx_thread_delete+0xb0>)
 8013370:	2200      	movs	r2, #0
 8013372:	601a      	str	r2, [r3, #0]
 8013374:	e017      	b.n	80133a6 <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801337c:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013384:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	69ba      	ldr	r2, [r7, #24]
 801338a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	69fa      	ldr	r2, [r7, #28]
 8013392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8013396:	4b0b      	ldr	r3, [pc, #44]	; (80133c4 <_tx_thread_delete+0xb0>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	687a      	ldr	r2, [r7, #4]
 801339c:	429a      	cmp	r2, r3
 801339e:	d102      	bne.n	80133a6 <_tx_thread_delete+0x92>
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 80133a0:	4a08      	ldr	r2, [pc, #32]	; (80133c4 <_tx_thread_delete+0xb0>)
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	6013      	str	r3, [r2, #0]
 80133a6:	6a3b      	ldr	r3, [r7, #32]
 80133a8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	f383 8810 	msr	PRIMASK, r3
}
 80133b0:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 80133b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	372c      	adds	r7, #44	; 0x2c
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr
 80133c0:	240023c4 	.word	0x240023c4
 80133c4:	240023bc 	.word	0x240023bc

080133c8 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b087      	sub	sp, #28
 80133cc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133ce:	f3ef 8310 	mrs	r3, PRIMASK
 80133d2:	60bb      	str	r3, [r7, #8]
    return(posture);
 80133d4:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80133d6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80133d8:	b672      	cpsid	i
    return(int_posture);
 80133da:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA

    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80133dc:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80133de:	4b08      	ldr	r3, [pc, #32]	; (8013400 <_tx_thread_identify+0x38>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	613b      	str	r3, [r7, #16]
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	f383 8810 	msr	PRIMASK, r3
}
 80133ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80133f0:	693b      	ldr	r3, [r7, #16]
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	371c      	adds	r7, #28
 80133f6:	46bd      	mov	sp, r7
 80133f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fc:	4770      	bx	lr
 80133fe:	bf00      	nop
 8013400:	240023d0 	.word	0x240023d0

08013404 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8013408:	4b12      	ldr	r3, [pc, #72]	; (8013454 <_tx_thread_initialize+0x50>)
 801340a:	2200      	movs	r2, #0
 801340c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801340e:	4b12      	ldr	r3, [pc, #72]	; (8013458 <_tx_thread_initialize+0x54>)
 8013410:	2200      	movs	r2, #0
 8013412:	601a      	str	r2, [r3, #0]
 8013414:	4b11      	ldr	r3, [pc, #68]	; (801345c <_tx_thread_initialize+0x58>)
 8013416:	2200      	movs	r2, #0
 8013418:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801341a:	4b11      	ldr	r3, [pc, #68]	; (8013460 <_tx_thread_initialize+0x5c>)
 801341c:	2220      	movs	r2, #32
 801341e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8013420:	2280      	movs	r2, #128	; 0x80
 8013422:	2100      	movs	r1, #0
 8013424:	480f      	ldr	r0, [pc, #60]	; (8013464 <_tx_thread_initialize+0x60>)
 8013426:	f002 f963 	bl	80156f0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 801342a:	4b0f      	ldr	r3, [pc, #60]	; (8013468 <_tx_thread_initialize+0x64>)
 801342c:	2200      	movs	r2, #0
 801342e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8013430:	4b0e      	ldr	r3, [pc, #56]	; (801346c <_tx_thread_initialize+0x68>)
 8013432:	2200      	movs	r2, #0
 8013434:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8013436:	4b0e      	ldr	r3, [pc, #56]	; (8013470 <_tx_thread_initialize+0x6c>)
 8013438:	2200      	movs	r2, #0
 801343a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 801343c:	4b0d      	ldr	r3, [pc, #52]	; (8013474 <_tx_thread_initialize+0x70>)
 801343e:	2200      	movs	r2, #0
 8013440:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8013442:	4b0d      	ldr	r3, [pc, #52]	; (8013478 <_tx_thread_initialize+0x74>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 801344a:	4a0b      	ldr	r2, [pc, #44]	; (8013478 <_tx_thread_initialize+0x74>)
 801344c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801344e:	bf00      	nop
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	240023d0 	.word	0x240023d0
 8013458:	240023d4 	.word	0x240023d4
 801345c:	240023b8 	.word	0x240023b8
 8013460:	240023d8 	.word	0x240023d8
 8013464:	24002334 	.word	0x24002334
 8013468:	240023bc 	.word	0x240023bc
 801346c:	240023c4 	.word	0x240023c4
 8013470:	240023cc 	.word	0x240023cc
 8013474:	240023b4 	.word	0x240023b4
 8013478:	240023c0 	.word	0x240023c0

0801347c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b08c      	sub	sp, #48	; 0x30
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013488:	2300      	movs	r3, #0
 801348a:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the 
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013492:	68ba      	ldr	r2, [r7, #8]
 8013494:	429a      	cmp	r2, r3
 8013496:	d004      	beq.n	80134a2 <_tx_thread_preemption_change+0x26>
    {
    
        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d001      	beq.n	80134a2 <_tx_thread_preemption_change+0x26>
        {
        
            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 801349e:	2300      	movs	r3, #0
 80134a0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134a2:	f3ef 8310 	mrs	r3, PRIMASK
 80134a6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80134a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80134aa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80134ac:	b672      	cpsid	i
    return(int_posture);
 80134ae:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80134b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80134b8:	68ba      	ldr	r2, [r7, #8]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d902      	bls.n	80134c4 <_tx_thread_preemption_change+0x48>
    {
            
        /* Return error.  */
        status =  TX_THRESH_ERROR;
 80134be:	2318      	movs	r3, #24
 80134c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80134c2:	e03e      	b.n	8013542 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	68ba      	ldr	r2, [r7, #8]
 80134d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80134dc:	68ba      	ldr	r2, [r7, #8]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d203      	bcs.n	80134ea <_tx_thread_preemption_change+0x6e>
        {
    
            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80134e8:	e004      	b.n	80134f4 <_tx_thread_preemption_change+0x78>
        }
        else
        {
    
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f8:	4b17      	ldr	r3, [pc, #92]	; (8013558 <_tx_thread_preemption_change+0xdc>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d920      	bls.n	8013542 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8013500:	4b15      	ldr	r3, [pc, #84]	; (8013558 <_tx_thread_preemption_change+0xdc>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	429a      	cmp	r2, r3
 8013508:	d91b      	bls.n	8013542 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 801350a:	4b14      	ldr	r3, [pc, #80]	; (801355c <_tx_thread_preemption_change+0xe0>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	68fa      	ldr	r2, [r7, #12]
 8013510:	429a      	cmp	r2, r3
 8013512:	d116      	bne.n	8013542 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013514:	4b10      	ldr	r3, [pc, #64]	; (8013558 <_tx_thread_preemption_change+0xdc>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4a11      	ldr	r2, [pc, #68]	; (8013560 <_tx_thread_preemption_change+0xe4>)
 801351a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801351e:	4a0f      	ldr	r2, [pc, #60]	; (801355c <_tx_thread_preemption_change+0xe0>)
 8013520:	6013      	str	r3, [r2, #0]
 8013522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013524:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	f383 8810 	msr	PRIMASK, r3
}
 801352c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 801352e:	f000 f9ab 	bl	8013888 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013532:	f3ef 8310 	mrs	r3, PRIMASK
 8013536:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013538:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801353a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801353c:	b672      	cpsid	i
    return(int_posture);
 801353e:	69bb      	ldr	r3, [r7, #24]
                    
                    /* Disable interrupts.  */
                    TX_DISABLE
 8013540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013544:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	f383 8810 	msr	PRIMASK, r3
}
 801354c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
 801354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8013550:	4618      	mov	r0, r3
 8013552:	3730      	adds	r7, #48	; 0x30
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}
 8013558:	240023d8 	.word	0x240023d8
 801355c:	240023d4 	.word	0x240023d4
 8013560:	24002334 	.word	0x24002334

08013564 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 8013564:	b480      	push	{r7}
 8013566:	b08b      	sub	sp, #44	; 0x2c
 8013568:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801356a:	4b2b      	ldr	r3, [pc, #172]	; (8013618 <_tx_thread_relinquish+0xb4>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013570:	f3ef 8310 	mrs	r3, PRIMASK
 8013574:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013576:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013578:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801357a:	b672      	cpsid	i
    return(int_posture);
 801357c:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 801357e:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013582:	69db      	ldr	r3, [r3, #28]
 8013584:	4a25      	ldr	r2, [pc, #148]	; (801361c <_tx_thread_relinquish+0xb8>)
 8013586:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 8013588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801358c:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013590:	6a1b      	ldr	r3, [r3, #32]
 8013592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013594:	429a      	cmp	r2, r3
 8013596:	d009      	beq.n	80135ac <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 8013598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801359a:	6a1a      	ldr	r2, [r3, #32]
 801359c:	4920      	ldr	r1, [pc, #128]	; (8013620 <_tx_thread_relinquish+0xbc>)
 801359e:	69fb      	ldr	r3, [r7, #28]
 80135a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 80135a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a6:	6a1b      	ldr	r3, [r3, #32]
 80135a8:	4a1e      	ldr	r2, [pc, #120]	; (8013624 <_tx_thread_relinquish+0xc0>)
 80135aa:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 80135ac:	4b1e      	ldr	r3, [pc, #120]	; (8013628 <_tx_thread_relinquish+0xc4>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	69fa      	ldr	r2, [r7, #28]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d906      	bls.n	80135c4 <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80135b6:	4b1c      	ldr	r3, [pc, #112]	; (8013628 <_tx_thread_relinquish+0xc4>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	4a19      	ldr	r2, [pc, #100]	; (8013620 <_tx_thread_relinquish+0xbc>)
 80135bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135c0:	4a18      	ldr	r2, [pc, #96]	; (8013624 <_tx_thread_relinquish+0xc0>)
 80135c2:	6013      	str	r3, [r2, #0]
 80135c4:	6a3b      	ldr	r3, [r7, #32]
 80135c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	f383 8810 	msr	PRIMASK, r3
}
 80135ce:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 80135d0:	4b14      	ldr	r3, [pc, #80]	; (8013624 <_tx_thread_relinquish+0xc0>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d017      	beq.n	801360a <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80135da:	4b14      	ldr	r3, [pc, #80]	; (801362c <_tx_thread_relinquish+0xc8>)
 80135dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80135e2:	f3ef 8305 	mrs	r3, IPSR
 80135e6:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80135e8:	68fb      	ldr	r3, [r7, #12]
    if (__get_ipsr_value() == 0)
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d10c      	bne.n	8013608 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135ee:	f3ef 8310 	mrs	r3, PRIMASK
 80135f2:	60bb      	str	r3, [r7, #8]
    return(posture);
 80135f4:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 80135f6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80135f8:	b662      	cpsie	i
}
 80135fa:	bf00      	nop
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	f383 8810 	msr	PRIMASK, r3
}
 8013606:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8013608:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 801360a:	bf00      	nop
 801360c:	372c      	adds	r7, #44	; 0x2c
 801360e:	46bd      	mov	sp, r7
 8013610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013614:	4770      	bx	lr
 8013616:	bf00      	nop
 8013618:	240023d0 	.word	0x240023d0
 801361c:	24002464 	.word	0x24002464
 8013620:	24002334 	.word	0x24002334
 8013624:	240023d4 	.word	0x240023d4
 8013628:	240023d8 	.word	0x240023d8
 801362c:	e000ed04 	.word	0xe000ed04

08013630 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b08c      	sub	sp, #48	; 0x30
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8013638:	2300      	movs	r3, #0
 801363a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801363c:	f3ef 8310 	mrs	r3, PRIMASK
 8013640:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013642:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013644:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013646:	b672      	cpsid	i
    return(int_posture);
 8013648:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801364a:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013650:	2b03      	cmp	r3, #3
 8013652:	d12f      	bne.n	80136b4 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013654:	f3ef 8305 	mrs	r3, IPSR
 8013658:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801365a:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801365c:	4b21      	ldr	r3, [pc, #132]	; (80136e4 <_tx_thread_resume+0xb4>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	4313      	orrs	r3, r2
 8013662:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013666:	d30d      	bcc.n	8013684 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8013668:	4b1f      	ldr	r3, [pc, #124]	; (80136e8 <_tx_thread_resume+0xb8>)
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013670:	2b00      	cmp	r3, #0
 8013672:	d009      	beq.n	8013688 <_tx_thread_resume+0x58>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8013674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013678:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013680:	63da      	str	r2, [r3, #60]	; 0x3c
 8013682:	e001      	b.n	8013688 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8013684:	2300      	movs	r3, #0
 8013686:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8013688:	4b18      	ldr	r3, [pc, #96]	; (80136ec <_tx_thread_resume+0xbc>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	3301      	adds	r3, #1
 801368e:	4a17      	ldr	r2, [pc, #92]	; (80136ec <_tx_thread_resume+0xbc>)
 8013690:	6013      	str	r3, [r2, #0]
 8013692:	6a3b      	ldr	r3, [r7, #32]
 8013694:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	f383 8810 	msr	PRIMASK, r3
}
 801369c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f000 f92c 	bl	80138fc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d002      	beq.n	80136b0 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80136aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136ae:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 80136b0:	2300      	movs	r3, #0
 80136b2:	e012      	b.n	80136da <_tx_thread_resume+0xaa>
        
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136b8:	2b01      	cmp	r3, #1
 80136ba:	d105      	bne.n	80136c8 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2200      	movs	r2, #0
 80136c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 80136c2:	2319      	movs	r3, #25
 80136c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136c6:	e001      	b.n	80136cc <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 80136c8:	2312      	movs	r3, #18
 80136ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136cc:	6a3b      	ldr	r3, [r7, #32]
 80136ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f383 8810 	msr	PRIMASK, r3
}
 80136d6:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 80136d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3730      	adds	r7, #48	; 0x30
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	2400008c 	.word	0x2400008c
 80136e8:	240023d4 	.word	0x240023d4
 80136ec:	240023cc 	.word	0x240023cc

080136f0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b088      	sub	sp, #32
 80136f4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80136f6:	4b21      	ldr	r3, [pc, #132]	; (801377c <_tx_thread_shell_entry+0x8c>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013700:	69fa      	ldr	r2, [r7, #28]
 8013702:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013704:	4610      	mov	r0, r2
 8013706:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8013708:	4b1d      	ldr	r3, [pc, #116]	; (8013780 <_tx_thread_shell_entry+0x90>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d003      	beq.n	8013718 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8013710:	4b1b      	ldr	r3, [pc, #108]	; (8013780 <_tx_thread_shell_entry+0x90>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	69f8      	ldr	r0, [r7, #28]
 8013716:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013718:	f3ef 8310 	mrs	r3, PRIMASK
 801371c:	607b      	str	r3, [r7, #4]
    return(posture);
 801371e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8013720:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013722:	b672      	cpsid	i
    return(int_posture);
 8013724:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8013726:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	2201      	movs	r2, #1
 801372c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	2201      	movs	r2, #1
 8013732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	2200      	movs	r2, #0
 8013738:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801373a:	4b12      	ldr	r3, [pc, #72]	; (8013784 <_tx_thread_shell_entry+0x94>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	3301      	adds	r3, #1
 8013740:	4a10      	ldr	r2, [pc, #64]	; (8013784 <_tx_thread_shell_entry+0x94>)
 8013742:	6013      	str	r3, [r2, #0]
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	f383 8810 	msr	PRIMASK, r3
}
 801374e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8013750:	f3ef 8314 	mrs	r3, CONTROL
 8013754:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8013756:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8013758:	617b      	str	r3, [r7, #20]
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	f023 0304 	bic.w	r3, r3, #4
 8013760:	617b      	str	r3, [r7, #20]
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	f383 8814 	msr	CONTROL, r3
}
 801376c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801376e:	69f8      	ldr	r0, [r7, #28]
 8013770:	f000 f9c4 	bl	8013afc <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8013774:	bf00      	nop
 8013776:	3720      	adds	r7, #32
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}
 801377c:	240023d0 	.word	0x240023d0
 8013780:	240023b4 	.word	0x240023b4
 8013784:	240023cc 	.word	0x240023cc

08013788 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b08e      	sub	sp, #56	; 0x38
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013790:	f3ef 8310 	mrs	r3, PRIMASK
 8013794:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013796:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013798:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801379a:	b672      	cpsid	i
    return(int_posture);
 801379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801379e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80137a0:	4b35      	ldr	r3, [pc, #212]	; (8013878 <_tx_thread_sleep+0xf0>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80137a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d108      	bne.n	80137be <_tx_thread_sleep+0x36>
 80137ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137b0:	6a3b      	ldr	r3, [r7, #32]
 80137b2:	f383 8810 	msr	PRIMASK, r3
}
 80137b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80137b8:	2313      	movs	r3, #19
 80137ba:	637b      	str	r3, [r7, #52]	; 0x34
 80137bc:	e056      	b.n	801386c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80137be:	f3ef 8305 	mrs	r3, IPSR
 80137c2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80137c4:	69fa      	ldr	r2, [r7, #28]
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80137c6:	4b2d      	ldr	r3, [pc, #180]	; (801387c <_tx_thread_sleep+0xf4>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4313      	orrs	r3, r2
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d008      	beq.n	80137e2 <_tx_thread_sleep+0x5a>
 80137d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137d4:	69bb      	ldr	r3, [r7, #24]
 80137d6:	f383 8810 	msr	PRIMASK, r3
}
 80137da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80137dc:	2313      	movs	r3, #19
 80137de:	637b      	str	r3, [r7, #52]	; 0x34
 80137e0:	e044      	b.n	801386c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80137e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e4:	4a26      	ldr	r2, [pc, #152]	; (8013880 <_tx_thread_sleep+0xf8>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d108      	bne.n	80137fc <_tx_thread_sleep+0x74>
 80137ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	f383 8810 	msr	PRIMASK, r3
}
 80137f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80137f6:	2313      	movs	r3, #19
 80137f8:	637b      	str	r3, [r7, #52]	; 0x34
 80137fa:	e037      	b.n	801386c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d108      	bne.n	8013814 <_tx_thread_sleep+0x8c>
 8013802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013804:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	f383 8810 	msr	PRIMASK, r3
}
 801380c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801380e:	2300      	movs	r3, #0
 8013810:	637b      	str	r3, [r7, #52]	; 0x34
 8013812:	e02b      	b.n	801386c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013814:	4b1b      	ldr	r3, [pc, #108]	; (8013884 <_tx_thread_sleep+0xfc>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d008      	beq.n	801382e <_tx_thread_sleep+0xa6>
 801381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f383 8810 	msr	PRIMASK, r3
}
 8013826:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8013828:	2313      	movs	r3, #19
 801382a:	637b      	str	r3, [r7, #52]	; 0x34
 801382c:	e01e      	b.n	801386c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013830:	2204      	movs	r2, #4
 8013832:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013836:	2201      	movs	r2, #1
 8013838:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383c:	2200      	movs	r2, #0
 801383e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8013842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013844:	687a      	ldr	r2, [r7, #4]
 8013846:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013848:	4b0e      	ldr	r3, [pc, #56]	; (8013884 <_tx_thread_sleep+0xfc>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	3301      	adds	r3, #1
 801384e:	4a0d      	ldr	r2, [pc, #52]	; (8013884 <_tx_thread_sleep+0xfc>)
 8013850:	6013      	str	r3, [r2, #0]
 8013852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013854:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	f383 8810 	msr	PRIMASK, r3
}
 801385c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801385e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013860:	f000 f94c 	bl	8013afc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801386a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    
    /* Return completion status.  */
    return(status);
 801386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801386e:	4618      	mov	r0, r3
 8013870:	3738      	adds	r7, #56	; 0x38
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	240023d0 	.word	0x240023d0
 801387c:	2400008c 	.word	0x2400008c
 8013880:	24002470 	.word	0x24002470
 8013884:	240023cc 	.word	0x240023cc

08013888 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8013888:	b480      	push	{r7}
 801388a:	b089      	sub	sp, #36	; 0x24
 801388c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801388e:	4b17      	ldr	r3, [pc, #92]	; (80138ec <_tx_thread_system_preempt_check+0x64>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8013894:	69fb      	ldr	r3, [r7, #28]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d121      	bne.n	80138de <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801389a:	4b15      	ldr	r3, [pc, #84]	; (80138f0 <_tx_thread_system_preempt_check+0x68>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80138a0:	4b14      	ldr	r3, [pc, #80]	; (80138f4 <_tx_thread_system_preempt_check+0x6c>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80138a6:	69ba      	ldr	r2, [r7, #24]
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d017      	beq.n	80138de <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80138ae:	4b12      	ldr	r3, [pc, #72]	; (80138f8 <_tx_thread_system_preempt_check+0x70>)
 80138b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138b4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80138b6:	f3ef 8305 	mrs	r3, IPSR
 80138ba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80138bc:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d10c      	bne.n	80138dc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80138c2:	f3ef 8310 	mrs	r3, PRIMASK
 80138c6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80138c8:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 80138ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80138cc:	b662      	cpsie	i
}
 80138ce:	bf00      	nop
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f383 8810 	msr	PRIMASK, r3
}
 80138da:	bf00      	nop
}
 80138dc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80138de:	bf00      	nop
 80138e0:	3724      	adds	r7, #36	; 0x24
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr
 80138ea:	bf00      	nop
 80138ec:	240023cc 	.word	0x240023cc
 80138f0:	240023d0 	.word	0x240023d0
 80138f4:	240023d4 	.word	0x240023d4
 80138f8:	e000ed04 	.word	0xe000ed04

080138fc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b096      	sub	sp, #88	; 0x58
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013904:	f3ef 8310 	mrs	r3, PRIMASK
 8013908:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801390c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801390e:	b672      	cpsid	i
    return(int_posture);
 8013910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8013912:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013918:	2b00      	cmp	r3, #0
 801391a:	d005      	beq.n	8013928 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	334c      	adds	r3, #76	; 0x4c
 8013920:	4618      	mov	r0, r3
 8013922:	f000 fc69 	bl	80141f8 <_tx_timer_system_deactivate>
 8013926:	e002      	b.n	801392e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2200      	movs	r2, #0
 801392c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801392e:	4b6c      	ldr	r3, [pc, #432]	; (8013ae0 <_tx_thread_system_resume+0x1e4>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	3b01      	subs	r3, #1
 8013934:	4a6a      	ldr	r2, [pc, #424]	; (8013ae0 <_tx_thread_system_resume+0x1e4>)
 8013936:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801393c:	2b00      	cmp	r3, #0
 801393e:	f040 8083 	bne.w	8013a48 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013946:	2b00      	cmp	r3, #0
 8013948:	f000 8097 	beq.w	8013a7a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013950:	2b00      	cmp	r3, #0
 8013952:	d172      	bne.n	8013a3a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2200      	movs	r2, #0
 8013958:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801395e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8013960:	4a60      	ldr	r2, [pc, #384]	; (8013ae4 <_tx_thread_system_resume+0x1e8>)
 8013962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013968:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 801396a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801396c:	2b00      	cmp	r3, #0
 801396e:	d154      	bne.n	8013a1a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8013970:	495c      	ldr	r1, [pc, #368]	; (8013ae4 <_tx_thread_system_resume+0x1e8>)
 8013972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	687a      	ldr	r2, [r7, #4]
 801397e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	687a      	ldr	r2, [r7, #4]
 8013984:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8013986:	2201      	movs	r2, #1
 8013988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801398a:	fa02 f303 	lsl.w	r3, r2, r3
 801398e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8013990:	4b55      	ldr	r3, [pc, #340]	; (8013ae8 <_tx_thread_system_resume+0x1ec>)
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013996:	4313      	orrs	r3, r2
 8013998:	4a53      	ldr	r2, [pc, #332]	; (8013ae8 <_tx_thread_system_resume+0x1ec>)
 801399a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 801399c:	4b53      	ldr	r3, [pc, #332]	; (8013aec <_tx_thread_system_resume+0x1f0>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d269      	bcs.n	8013a7a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80139a6:	4a51      	ldr	r2, [pc, #324]	; (8013aec <_tx_thread_system_resume+0x1f0>)
 80139a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139aa:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80139ac:	4b50      	ldr	r3, [pc, #320]	; (8013af0 <_tx_thread_system_resume+0x1f4>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80139b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d103      	bne.n	80139c0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80139b8:	4a4d      	ldr	r2, [pc, #308]	; (8013af0 <_tx_thread_system_resume+0x1f4>)
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6013      	str	r3, [r2, #0]
 80139be:	e05c      	b.n	8013a7a <_tx_thread_system_resume+0x17e>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80139c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d257      	bcs.n	8013a7a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80139ca:	4a49      	ldr	r2, [pc, #292]	; (8013af0 <_tx_thread_system_resume+0x1f4>)
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6013      	str	r3, [r2, #0]
 80139d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139d6:	f383 8810 	msr	PRIMASK, r3
}
 80139da:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80139dc:	4b40      	ldr	r3, [pc, #256]	; (8013ae0 <_tx_thread_system_resume+0x1e4>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80139e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d174      	bne.n	8013ad2 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80139e8:	4b42      	ldr	r3, [pc, #264]	; (8013af4 <_tx_thread_system_resume+0x1f8>)
 80139ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139ee:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80139f0:	f3ef 8305 	mrs	r3, IPSR
 80139f4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80139f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d10c      	bne.n	8013a16 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80139fc:	f3ef 8310 	mrs	r3, PRIMASK
 8013a00:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8013a04:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013a06:	b662      	cpsie	i
}
 8013a08:	bf00      	nop
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	f383 8810 	msr	PRIMASK, r3
}
 8013a14:	bf00      	nop
}
 8013a16:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8013a18:	e05b      	b.n	8013ad2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8013a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a1e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8013a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a22:	687a      	ldr	r2, [r7, #4]
 8013a24:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8013a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a28:	687a      	ldr	r2, [r7, #4]
 8013a2a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a30:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a36:	621a      	str	r2, [r3, #32]
 8013a38:	e01f      	b.n	8013a7a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2203      	movs	r2, #3
 8013a44:	631a      	str	r2, [r3, #48]	; 0x30
 8013a46:	e018      	b.n	8013a7a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	d014      	beq.n	8013a7a <_tx_thread_system_resume+0x17e>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a54:	2b02      	cmp	r3, #2
 8013a56:	d010      	beq.n	8013a7a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d106      	bne.n	8013a6e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2200      	movs	r2, #0
 8013a64:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8013a6c:	e005      	b.n	8013a7a <_tx_thread_system_resume+0x17e>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2203      	movs	r2, #3
 8013a78:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013a7a:	4b1f      	ldr	r3, [pc, #124]	; (8013af8 <_tx_thread_system_resume+0x1fc>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a82:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	f383 8810 	msr	PRIMASK, r3
}
 8013a8a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8013a8c:	4b18      	ldr	r3, [pc, #96]	; (8013af0 <_tx_thread_system_resume+0x1f4>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d020      	beq.n	8013ad8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013a96:	4b12      	ldr	r3, [pc, #72]	; (8013ae0 <_tx_thread_system_resume+0x1e4>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8013a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d11a      	bne.n	8013ad8 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013aa2:	4b14      	ldr	r3, [pc, #80]	; (8013af4 <_tx_thread_system_resume+0x1f8>)
 8013aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aa8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013aaa:	f3ef 8305 	mrs	r3, IPSR
 8013aae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013ab0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d10f      	bne.n	8013ad6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8013aba:	613b      	str	r3, [r7, #16]
    return(posture);
 8013abc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8013abe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013ac0:	b662      	cpsie	i
}
 8013ac2:	bf00      	nop
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	f383 8810 	msr	PRIMASK, r3
}
 8013ace:	bf00      	nop
}
 8013ad0:	e001      	b.n	8013ad6 <_tx_thread_system_resume+0x1da>
                                return;
 8013ad2:	bf00      	nop
 8013ad4:	e000      	b.n	8013ad8 <_tx_thread_system_resume+0x1dc>
 8013ad6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8013ad8:	3758      	adds	r7, #88	; 0x58
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	240023cc 	.word	0x240023cc
 8013ae4:	24002334 	.word	0x24002334
 8013ae8:	240023b8 	.word	0x240023b8
 8013aec:	240023d8 	.word	0x240023d8
 8013af0:	240023d4 	.word	0x240023d4
 8013af4:	e000ed04 	.word	0xe000ed04
 8013af8:	240023d0 	.word	0x240023d0

08013afc <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b09e      	sub	sp, #120	; 0x78
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013b04:	4b81      	ldr	r3, [pc, #516]	; (8013d0c <_tx_thread_system_suspend+0x210>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8013b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8013b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8013b12:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b14:	b672      	cpsid	i
    return(int_posture);
 8013b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8013b18:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8013b1a:	687a      	ldr	r2, [r7, #4]
 8013b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d112      	bne.n	8013b48 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b26:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8013b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d008      	beq.n	8013b40 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8013b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b34:	d004      	beq.n	8013b40 <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	334c      	adds	r3, #76	; 0x4c
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f000 fafa 	bl	8014134 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	69db      	ldr	r3, [r3, #28]
 8013b44:	4a72      	ldr	r2, [pc, #456]	; (8013d10 <_tx_thread_system_suspend+0x214>)
 8013b46:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8013b48:	4b72      	ldr	r3, [pc, #456]	; (8013d14 <_tx_thread_system_suspend+0x218>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	4a71      	ldr	r2, [pc, #452]	; (8013d14 <_tx_thread_system_suspend+0x218>)
 8013b50:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	f040 80a6 	bne.w	8013ca8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b66:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6a1b      	ldr	r3, [r3, #32]
 8013b6c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8013b6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d015      	beq.n	8013ba2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b7a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8013b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b80:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8013b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013b86:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8013b88:	4a63      	ldr	r2, [pc, #396]	; (8013d18 <_tx_thread_system_suspend+0x21c>)
 8013b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d157      	bne.n	8013c46 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8013b96:	4960      	ldr	r1, [pc, #384]	; (8013d18 <_tx_thread_system_suspend+0x21c>)
 8013b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013ba0:	e051      	b.n	8013c46 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8013ba2:	4a5d      	ldr	r2, [pc, #372]	; (8013d18 <_tx_thread_system_suspend+0x21c>)
 8013ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ba6:	2100      	movs	r1, #0
 8013ba8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8013bac:	2201      	movs	r2, #1
 8013bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8013bb4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8013bb6:	4b59      	ldr	r3, [pc, #356]	; (8013d1c <_tx_thread_system_suspend+0x220>)
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bbc:	43db      	mvns	r3, r3
 8013bbe:	4013      	ands	r3, r2
 8013bc0:	4a56      	ldr	r2, [pc, #344]	; (8013d1c <_tx_thread_system_suspend+0x220>)
 8013bc2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8013bc8:	4b54      	ldr	r3, [pc, #336]	; (8013d1c <_tx_thread_system_suspend+0x220>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8013bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d12b      	bne.n	8013c2c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013bd4:	4b52      	ldr	r3, [pc, #328]	; (8013d20 <_tx_thread_system_suspend+0x224>)
 8013bd6:	2220      	movs	r2, #32
 8013bd8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8013bda:	4b52      	ldr	r3, [pc, #328]	; (8013d24 <_tx_thread_system_suspend+0x228>)
 8013bdc:	2200      	movs	r2, #0
 8013bde:	601a      	str	r2, [r3, #0]
 8013be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013be2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013be6:	f383 8810 	msr	PRIMASK, r3
}
 8013bea:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013bec:	4b49      	ldr	r3, [pc, #292]	; (8013d14 <_tx_thread_system_suspend+0x218>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8013bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	f040 8081 	bne.w	8013cfc <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013bfa:	4b4b      	ldr	r3, [pc, #300]	; (8013d28 <_tx_thread_system_suspend+0x22c>)
 8013bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c00:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c02:	f3ef 8305 	mrs	r3, IPSR
 8013c06:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8013c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d10c      	bne.n	8013c28 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8013c12:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8013c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8013c16:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013c18:	b662      	cpsie	i
}
 8013c1a:	bf00      	nop
 8013c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c1e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c22:	f383 8810 	msr	PRIMASK, r3
}
 8013c26:	bf00      	nop
}
 8013c28:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8013c2a:	e067      	b.n	8013cfc <_tx_thread_system_suspend+0x200>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8013c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c2e:	fa93 f3a3 	rbit	r3, r3
 8013c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8013c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c36:	fab3 f383 	clz	r3, r3
 8013c3a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8013c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c40:	4413      	add	r3, r2
 8013c42:	4a37      	ldr	r2, [pc, #220]	; (8013d20 <_tx_thread_system_suspend+0x224>)
 8013c44:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8013c46:	4b37      	ldr	r3, [pc, #220]	; (8013d24 <_tx_thread_system_suspend+0x228>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d12b      	bne.n	8013ca8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013c50:	4b33      	ldr	r3, [pc, #204]	; (8013d20 <_tx_thread_system_suspend+0x224>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	4a30      	ldr	r2, [pc, #192]	; (8013d18 <_tx_thread_system_suspend+0x21c>)
 8013c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c5a:	4a32      	ldr	r2, [pc, #200]	; (8013d24 <_tx_thread_system_suspend+0x228>)
 8013c5c:	6013      	str	r3, [r2, #0]
 8013c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c60:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c64:	f383 8810 	msr	PRIMASK, r3
}
 8013c68:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013c6a:	4b2a      	ldr	r3, [pc, #168]	; (8013d14 <_tx_thread_system_suspend+0x218>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8013c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d144      	bne.n	8013d00 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013c76:	4b2c      	ldr	r3, [pc, #176]	; (8013d28 <_tx_thread_system_suspend+0x22c>)
 8013c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c7c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c7e:	f3ef 8305 	mrs	r3, IPSR
 8013c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8013c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d10c      	bne.n	8013ca4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8013c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8013c92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013c94:	b662      	cpsie	i
}
 8013c96:	bf00      	nop
 8013c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c9c:	6a3b      	ldr	r3, [r7, #32]
 8013c9e:	f383 8810 	msr	PRIMASK, r3
}
 8013ca2:	bf00      	nop
}
 8013ca4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8013ca6:	e02b      	b.n	8013d00 <_tx_thread_system_suspend+0x204>
 8013ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013caa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	f383 8810 	msr	PRIMASK, r3
}
 8013cb2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8013cb4:	4b1b      	ldr	r3, [pc, #108]	; (8013d24 <_tx_thread_system_suspend+0x228>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d022      	beq.n	8013d04 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013cbe:	4b15      	ldr	r3, [pc, #84]	; (8013d14 <_tx_thread_system_suspend+0x218>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8013cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d11c      	bne.n	8013d04 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013cca:	4b17      	ldr	r3, [pc, #92]	; (8013d28 <_tx_thread_system_suspend+0x22c>)
 8013ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cd0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013cd2:	f3ef 8305 	mrs	r3, IPSR
 8013cd6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013cd8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d10c      	bne.n	8013cf8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013cde:	f3ef 8310 	mrs	r3, PRIMASK
 8013ce2:	617b      	str	r3, [r7, #20]
    return(posture);
 8013ce4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8013ce6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013ce8:	b662      	cpsie	i
}
 8013cea:	bf00      	nop
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	f383 8810 	msr	PRIMASK, r3
}
 8013cf6:	bf00      	nop
}
 8013cf8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8013cfa:	e003      	b.n	8013d04 <_tx_thread_system_suspend+0x208>
                return;
 8013cfc:	bf00      	nop
 8013cfe:	e002      	b.n	8013d06 <_tx_thread_system_suspend+0x20a>
            return;
 8013d00:	bf00      	nop
 8013d02:	e000      	b.n	8013d06 <_tx_thread_system_suspend+0x20a>
    return;
 8013d04:	bf00      	nop
}
 8013d06:	3778      	adds	r7, #120	; 0x78
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	240023d0 	.word	0x240023d0
 8013d10:	24002464 	.word	0x24002464
 8013d14:	240023cc 	.word	0x240023cc
 8013d18:	24002334 	.word	0x24002334
 8013d1c:	240023b8 	.word	0x240023b8
 8013d20:	240023d8 	.word	0x240023d8
 8013d24:	240023d4 	.word	0x240023d4
 8013d28:	e000ed04 	.word	0xe000ed04

08013d2c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b087      	sub	sp, #28
 8013d30:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013d32:	4b21      	ldr	r3, [pc, #132]	; (8013db8 <_tx_thread_time_slice+0x8c>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d38:	f3ef 8310 	mrs	r3, PRIMASK
 8013d3c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8013d40:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d42:	b672      	cpsid	i
    return(int_posture);
 8013d44:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8013d46:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013d48:	4b1c      	ldr	r3, [pc, #112]	; (8013dbc <_tx_thread_time_slice+0x90>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d024      	beq.n	8013d9e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d120      	bne.n	8013d9e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	69da      	ldr	r2, [r3, #28]
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	699b      	ldr	r3, [r3, #24]
 8013d68:	4a15      	ldr	r2, [pc, #84]	; (8013dc0 <_tx_thread_time_slice+0x94>)
 8013d6a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	6a1b      	ldr	r3, [r3, #32]
 8013d70:	697a      	ldr	r2, [r7, #20]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d013      	beq.n	8013d9e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d10d      	bne.n	8013d9e <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d86:	697a      	ldr	r2, [r7, #20]
 8013d88:	6a12      	ldr	r2, [r2, #32]
 8013d8a:	490e      	ldr	r1, [pc, #56]	; (8013dc4 <_tx_thread_time_slice+0x98>)
 8013d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013d90:	4b0d      	ldr	r3, [pc, #52]	; (8013dc8 <_tx_thread_time_slice+0x9c>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4a0b      	ldr	r2, [pc, #44]	; (8013dc4 <_tx_thread_time_slice+0x98>)
 8013d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d9a:	4a0c      	ldr	r2, [pc, #48]	; (8013dcc <_tx_thread_time_slice+0xa0>)
 8013d9c:	6013      	str	r3, [r2, #0]
 8013d9e:	693b      	ldr	r3, [r7, #16]
 8013da0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f383 8810 	msr	PRIMASK, r3
}
 8013da8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8013daa:	bf00      	nop
 8013dac:	371c      	adds	r7, #28
 8013dae:	46bd      	mov	sp, r7
 8013db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop
 8013db8:	240023d0 	.word	0x240023d0
 8013dbc:	24002938 	.word	0x24002938
 8013dc0:	24002464 	.word	0x24002464
 8013dc4:	24002334 	.word	0x24002334
 8013dc8:	240023d8 	.word	0x240023d8
 8013dcc:	240023d4 	.word	0x240023d4

08013dd0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b08a      	sub	sp, #40	; 0x28
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8013de0:	617b      	str	r3, [r7, #20]
    return(posture);
 8013de2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013de4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013de6:	b672      	cpsid	i
    return(int_posture);
 8013de8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8013dea:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8013dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013df0:	2b04      	cmp	r3, #4
 8013df2:	d10e      	bne.n	8013e12 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8013df4:	4b13      	ldr	r3, [pc, #76]	; (8013e44 <_tx_thread_timeout+0x74>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	4a12      	ldr	r2, [pc, #72]	; (8013e44 <_tx_thread_timeout+0x74>)
 8013dfc:	6013      	str	r3, [r2, #0]
 8013dfe:	6a3b      	ldr	r3, [r7, #32]
 8013e00:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f383 8810 	msr	PRIMASK, r3
}
 8013e08:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e0c:	f7ff fd76 	bl	80138fc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8013e10:	e013      	b.n	8013e3a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8013e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e16:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8013e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013e1e:	61bb      	str	r3, [r7, #24]
 8013e20:	6a3b      	ldr	r3, [r7, #32]
 8013e22:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	f383 8810 	msr	PRIMASK, r3
}
 8013e2a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d003      	beq.n	8013e3a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	69b9      	ldr	r1, [r7, #24]
 8013e36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e38:	4798      	blx	r3
}
 8013e3a:	bf00      	nop
 8013e3c:	3728      	adds	r7, #40	; 0x28
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
 8013e42:	bf00      	nop
 8013e44:	240023cc 	.word	0x240023cc

08013e48 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b088      	sub	sp, #32
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e50:	f3ef 8310 	mrs	r3, PRIMASK
 8013e54:	617b      	str	r3, [r7, #20]
    return(posture);
 8013e56:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013e58:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e5a:	b672      	cpsid	i
    return(int_posture);
 8013e5c:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013e5e:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6a1b      	ldr	r3, [r3, #32]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d002      	beq.n	8013e6e <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 8013e68:	2317      	movs	r3, #23
 8013e6a:	61fb      	str	r3, [r7, #28]
 8013e6c:	e00d      	b.n	8013e8a <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	689b      	ldr	r3, [r3, #8]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d102      	bne.n	8013e7c <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 8013e76:	2317      	movs	r3, #23
 8013e78:	61fb      	str	r3, [r7, #28]
 8013e7a:	e006      	b.n	8013e8a <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	3308      	adds	r3, #8
 8013e80:	4618      	mov	r0, r3
 8013e82:	f000 f957 	bl	8014134 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 8013e86:	2300      	movs	r3, #0
 8013e88:	61fb      	str	r3, [r7, #28]
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f383 8810 	msr	PRIMASK, r3
}
 8013e94:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8013e96:	69fb      	ldr	r3, [r7, #28]
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3720      	adds	r7, #32
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b08a      	sub	sp, #40	; 0x28
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	607a      	str	r2, [r7, #4]
 8013eac:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8013eae:	222c      	movs	r2, #44	; 0x2c
 8013eb0:	2100      	movs	r1, #0
 8013eb2:	68f8      	ldr	r0, [r7, #12]
 8013eb4:	f001 fc1c 	bl	80156f0 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	68ba      	ldr	r2, [r7, #8]
 8013ebc:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ec2:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ec8:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	683a      	ldr	r2, [r7, #0]
 8013ed4:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8013eda:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013edc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013ede:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ee0:	b672      	cpsid	i
    return(int_posture);
 8013ee2:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013ee4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	4a1c      	ldr	r2, [pc, #112]	; (8013f5c <_tx_timer_create+0xbc>)
 8013eea:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8013eec:	4b1c      	ldr	r3, [pc, #112]	; (8013f60 <_tx_timer_create+0xc0>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d109      	bne.n	8013f08 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8013ef4:	4a1b      	ldr	r2, [pc, #108]	; (8013f64 <_tx_timer_create+0xc4>)
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	68fa      	ldr	r2, [r7, #12]
 8013efe:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	68fa      	ldr	r2, [r7, #12]
 8013f04:	629a      	str	r2, [r3, #40]	; 0x28
 8013f06:	e011      	b.n	8013f2c <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8013f08:	4b16      	ldr	r3, [pc, #88]	; (8013f64 <_tx_timer_create+0xc4>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8013f0e:	6a3b      	ldr	r3, [r7, #32]
 8013f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f12:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8013f14:	6a3b      	ldr	r3, [r7, #32]
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8013f1a:	69fb      	ldr	r3, [r7, #28]
 8013f1c:	68fa      	ldr	r2, [r7, #12]
 8013f1e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	69fa      	ldr	r2, [r7, #28]
 8013f24:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	6a3a      	ldr	r2, [r7, #32]
 8013f2a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8013f2c:	4b0c      	ldr	r3, [pc, #48]	; (8013f60 <_tx_timer_create+0xc0>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	3301      	adds	r3, #1
 8013f32:	4a0b      	ldr	r2, [pc, #44]	; (8013f60 <_tx_timer_create+0xc0>)
 8013f34:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8013f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f38:	2b01      	cmp	r3, #1
 8013f3a:	d104      	bne.n	8013f46 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	3308      	adds	r3, #8
 8013f40:	4618      	mov	r0, r3
 8013f42:	f000 f8f7 	bl	8014134 <_tx_timer_system_activate>
 8013f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f48:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	f383 8810 	msr	PRIMASK, r3
}
 8013f50:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013f52:	2300      	movs	r3, #0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3728      	adds	r7, #40	; 0x28
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	4154494d 	.word	0x4154494d
 8013f60:	24002934 	.word	0x24002934
 8013f64:	24002528 	.word	0x24002528

08013f68 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b088      	sub	sp, #32
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f70:	f3ef 8310 	mrs	r3, PRIMASK
 8013f74:	613b      	str	r3, [r7, #16]
    return(posture);
 8013f76:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013f78:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f7a:	b672      	cpsid	i
    return(int_posture);
 8013f7c:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 8013f7e:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6a1b      	ldr	r3, [r3, #32]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d004      	beq.n	8013f92 <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	3308      	adds	r3, #8
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f000 f933 	bl	80141f8 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2200      	movs	r2, #0
 8013f96:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 8013f98:	4b15      	ldr	r3, [pc, #84]	; (8013ff0 <_tx_timer_delete+0x88>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	3b01      	subs	r3, #1
 8013f9e:	4a14      	ldr	r2, [pc, #80]	; (8013ff0 <_tx_timer_delete+0x88>)
 8013fa0:	6013      	str	r3, [r2, #0]
    
    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8013fa2:	4b13      	ldr	r3, [pc, #76]	; (8013ff0 <_tx_timer_delete+0x88>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d103      	bne.n	8013fb2 <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 8013faa:	4b12      	ldr	r3, [pc, #72]	; (8013ff4 <_tx_timer_delete+0x8c>)
 8013fac:	2200      	movs	r2, #0
 8013fae:	601a      	str	r2, [r3, #0]
 8013fb0:	e013      	b.n	8013fda <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fb6:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fbc:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	697a      	ldr	r2, [r7, #20]
 8013fc2:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	69ba      	ldr	r2, [r7, #24]
 8013fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 8013fca:	4b0a      	ldr	r3, [pc, #40]	; (8013ff4 <_tx_timer_delete+0x8c>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	687a      	ldr	r2, [r7, #4]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d102      	bne.n	8013fda <_tx_timer_delete+0x72>
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 8013fd4:	4a07      	ldr	r2, [pc, #28]	; (8013ff4 <_tx_timer_delete+0x8c>)
 8013fd6:	69bb      	ldr	r3, [r7, #24]
 8013fd8:	6013      	str	r3, [r2, #0]
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	f383 8810 	msr	PRIMASK, r3
}
 8013fe4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013fe6:	2300      	movs	r3, #0
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3720      	adds	r7, #32
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	24002934 	.word	0x24002934
 8013ff4:	24002528 	.word	0x24002528

08013ff8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b084      	sub	sp, #16
 8013ffc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8014002:	607b      	str	r3, [r7, #4]
    return(posture);
 8014004:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8014006:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014008:	b672      	cpsid	i
    return(int_posture);
 801400a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 801400c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801400e:	4b09      	ldr	r3, [pc, #36]	; (8014034 <_tx_timer_expiration_process+0x3c>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	3301      	adds	r3, #1
 8014014:	4a07      	ldr	r2, [pc, #28]	; (8014034 <_tx_timer_expiration_process+0x3c>)
 8014016:	6013      	str	r3, [r2, #0]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	f383 8810 	msr	PRIMASK, r3
}
 8014022:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8014024:	4804      	ldr	r0, [pc, #16]	; (8014038 <_tx_timer_expiration_process+0x40>)
 8014026:	f7ff fc69 	bl	80138fc <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801402a:	bf00      	nop
 801402c:	3710      	adds	r7, #16
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	240023cc 	.word	0x240023cc
 8014038:	24002470 	.word	0x24002470

0801403c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 801403c:	b590      	push	{r4, r7, lr}
 801403e:	b089      	sub	sp, #36	; 0x24
 8014040:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8014042:	4b28      	ldr	r3, [pc, #160]	; (80140e4 <_tx_timer_initialize+0xa8>)
 8014044:	2200      	movs	r2, #0
 8014046:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8014048:	4b27      	ldr	r3, [pc, #156]	; (80140e8 <_tx_timer_initialize+0xac>)
 801404a:	2200      	movs	r2, #0
 801404c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801404e:	4b27      	ldr	r3, [pc, #156]	; (80140ec <_tx_timer_initialize+0xb0>)
 8014050:	2200      	movs	r2, #0
 8014052:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8014054:	4b26      	ldr	r3, [pc, #152]	; (80140f0 <_tx_timer_initialize+0xb4>)
 8014056:	2200      	movs	r2, #0
 8014058:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801405a:	4b26      	ldr	r3, [pc, #152]	; (80140f4 <_tx_timer_initialize+0xb8>)
 801405c:	2200      	movs	r2, #0
 801405e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8014060:	2280      	movs	r2, #128	; 0x80
 8014062:	2100      	movs	r1, #0
 8014064:	4824      	ldr	r0, [pc, #144]	; (80140f8 <_tx_timer_initialize+0xbc>)
 8014066:	f001 fb43 	bl	80156f0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801406a:	4b24      	ldr	r3, [pc, #144]	; (80140fc <_tx_timer_initialize+0xc0>)
 801406c:	4a22      	ldr	r2, [pc, #136]	; (80140f8 <_tx_timer_initialize+0xbc>)
 801406e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8014070:	4b23      	ldr	r3, [pc, #140]	; (8014100 <_tx_timer_initialize+0xc4>)
 8014072:	4a21      	ldr	r2, [pc, #132]	; (80140f8 <_tx_timer_initialize+0xbc>)
 8014074:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8014076:	4b23      	ldr	r3, [pc, #140]	; (8014104 <_tx_timer_initialize+0xc8>)
 8014078:	4a23      	ldr	r2, [pc, #140]	; (8014108 <_tx_timer_initialize+0xcc>)
 801407a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801407c:	4b21      	ldr	r3, [pc, #132]	; (8014104 <_tx_timer_initialize+0xc8>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	3304      	adds	r3, #4
 8014082:	4a20      	ldr	r2, [pc, #128]	; (8014104 <_tx_timer_initialize+0xc8>)
 8014084:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8014086:	4b21      	ldr	r3, [pc, #132]	; (801410c <_tx_timer_initialize+0xd0>)
 8014088:	4a21      	ldr	r2, [pc, #132]	; (8014110 <_tx_timer_initialize+0xd4>)
 801408a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801408c:	4b21      	ldr	r3, [pc, #132]	; (8014114 <_tx_timer_initialize+0xd8>)
 801408e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014092:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8014094:	4b20      	ldr	r3, [pc, #128]	; (8014118 <_tx_timer_initialize+0xdc>)
 8014096:	2200      	movs	r2, #0
 8014098:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 801409a:	4b1c      	ldr	r3, [pc, #112]	; (801410c <_tx_timer_initialize+0xd0>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	4a1d      	ldr	r2, [pc, #116]	; (8014114 <_tx_timer_initialize+0xd8>)
 80140a0:	6812      	ldr	r2, [r2, #0]
 80140a2:	491d      	ldr	r1, [pc, #116]	; (8014118 <_tx_timer_initialize+0xdc>)
 80140a4:	6809      	ldr	r1, [r1, #0]
 80140a6:	481c      	ldr	r0, [pc, #112]	; (8014118 <_tx_timer_initialize+0xdc>)
 80140a8:	6800      	ldr	r0, [r0, #0]
 80140aa:	2400      	movs	r4, #0
 80140ac:	9405      	str	r4, [sp, #20]
 80140ae:	2400      	movs	r4, #0
 80140b0:	9404      	str	r4, [sp, #16]
 80140b2:	9003      	str	r0, [sp, #12]
 80140b4:	9102      	str	r1, [sp, #8]
 80140b6:	9201      	str	r2, [sp, #4]
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	4b18      	ldr	r3, [pc, #96]	; (801411c <_tx_timer_initialize+0xe0>)
 80140bc:	4a18      	ldr	r2, [pc, #96]	; (8014120 <_tx_timer_initialize+0xe4>)
 80140be:	4919      	ldr	r1, [pc, #100]	; (8014124 <_tx_timer_initialize+0xe8>)
 80140c0:	4819      	ldr	r0, [pc, #100]	; (8014128 <_tx_timer_initialize+0xec>)
 80140c2:	f7ff f831 	bl	8013128 <_tx_thread_create>
 80140c6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d1e5      	bne.n	801409a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80140ce:	4b17      	ldr	r3, [pc, #92]	; (801412c <_tx_timer_initialize+0xf0>)
 80140d0:	2200      	movs	r2, #0
 80140d2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80140d4:	4b16      	ldr	r3, [pc, #88]	; (8014130 <_tx_timer_initialize+0xf4>)
 80140d6:	2200      	movs	r2, #0
 80140d8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80140da:	bf00      	nop
 80140dc:	370c      	adds	r7, #12
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd90      	pop	{r4, r7, pc}
 80140e2:	bf00      	nop
 80140e4:	2400293c 	.word	0x2400293c
 80140e8:	24002464 	.word	0x24002464
 80140ec:	24002938 	.word	0x24002938
 80140f0:	24002460 	.word	0x24002460
 80140f4:	24002520 	.word	0x24002520
 80140f8:	240023e0 	.word	0x240023e0
 80140fc:	24002524 	.word	0x24002524
 8014100:	240023dc 	.word	0x240023dc
 8014104:	2400246c 	.word	0x2400246c
 8014108:	2400245c 	.word	0x2400245c
 801410c:	24002930 	.word	0x24002930
 8014110:	24002530 	.word	0x24002530
 8014114:	2400252c 	.word	0x2400252c
 8014118:	24002468 	.word	0x24002468
 801411c:	4154494d 	.word	0x4154494d
 8014120:	08014269 	.word	0x08014269
 8014124:	08016b54 	.word	0x08016b54
 8014128:	24002470 	.word	0x24002470
 801412c:	24002528 	.word	0x24002528
 8014130:	24002934 	.word	0x24002934

08014134 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014134:	b480      	push	{r7}
 8014136:	b089      	sub	sp, #36	; 0x24
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d04a      	beq.n	80141de <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801414e:	d046      	beq.n	80141de <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	699b      	ldr	r3, [r3, #24]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d142      	bne.n	80141de <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	2b20      	cmp	r3, #32
 801415c:	d902      	bls.n	8014164 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801415e:	231f      	movs	r3, #31
 8014160:	61bb      	str	r3, [r7, #24]
 8014162:	e002      	b.n	801416a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	3b01      	subs	r3, #1
 8014168:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801416a:	4b20      	ldr	r3, [pc, #128]	; (80141ec <_tx_timer_system_activate+0xb8>)
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	69bb      	ldr	r3, [r7, #24]
 8014170:	009b      	lsls	r3, r3, #2
 8014172:	4413      	add	r3, r2
 8014174:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8014176:	4b1e      	ldr	r3, [pc, #120]	; (80141f0 <_tx_timer_system_activate+0xbc>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	69fa      	ldr	r2, [r7, #28]
 801417c:	429a      	cmp	r2, r3
 801417e:	d30b      	bcc.n	8014198 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8014180:	4b1b      	ldr	r3, [pc, #108]	; (80141f0 <_tx_timer_system_activate+0xbc>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	69fa      	ldr	r2, [r7, #28]
 8014186:	1ad3      	subs	r3, r2, r3
 8014188:	109b      	asrs	r3, r3, #2
 801418a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801418c:	4b19      	ldr	r3, [pc, #100]	; (80141f4 <_tx_timer_system_activate+0xc0>)
 801418e:	681a      	ldr	r2, [r3, #0]
 8014190:	693b      	ldr	r3, [r7, #16]
 8014192:	009b      	lsls	r3, r3, #2
 8014194:	4413      	add	r3, r2
 8014196:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d109      	bne.n	80141b4 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	687a      	ldr	r2, [r7, #4]
 80141aa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80141ac:	69fb      	ldr	r3, [r7, #28]
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	601a      	str	r2, [r3, #0]
 80141b2:	e011      	b.n	80141d8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80141b4:	69fb      	ldr	r3, [r7, #28]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	695b      	ldr	r3, [r3, #20]
 80141be:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	687a      	ldr	r2, [r7, #4]
 80141ca:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	68fa      	ldr	r2, [r7, #12]
 80141d0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	68ba      	ldr	r2, [r7, #8]
 80141d6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	69fa      	ldr	r2, [r7, #28]
 80141dc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80141de:	bf00      	nop
 80141e0:	3724      	adds	r7, #36	; 0x24
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop
 80141ec:	240023dc 	.word	0x240023dc
 80141f0:	2400246c 	.word	0x2400246c
 80141f4:	24002524 	.word	0x24002524

080141f8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b087      	sub	sp, #28
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	699b      	ldr	r3, [r3, #24]
 8014204:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d026      	beq.n	801425a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	691b      	ldr	r3, [r3, #16]
 8014210:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	429a      	cmp	r2, r3
 8014218:	d108      	bne.n	801422c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	687a      	ldr	r2, [r7, #4]
 8014220:	429a      	cmp	r2, r3
 8014222:	d117      	bne.n	8014254 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	2200      	movs	r2, #0
 8014228:	601a      	str	r2, [r3, #0]
 801422a:	e013      	b.n	8014254 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	695b      	ldr	r3, [r3, #20]
 8014230:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	68fa      	ldr	r2, [r7, #12]
 8014236:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	693a      	ldr	r2, [r7, #16]
 801423c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	687a      	ldr	r2, [r7, #4]
 8014244:	429a      	cmp	r2, r3
 8014246:	d105      	bne.n	8014254 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	697a      	ldr	r2, [r7, #20]
 801424c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	693a      	ldr	r2, [r7, #16]
 8014252:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2200      	movs	r2, #0
 8014258:	619a      	str	r2, [r3, #24]
    }
}
 801425a:	bf00      	nop
 801425c:	371c      	adds	r7, #28
 801425e:	46bd      	mov	sp, r7
 8014260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014264:	4770      	bx	lr
	...

08014268 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b098      	sub	sp, #96	; 0x60
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8014270:	2300      	movs	r3, #0
 8014272:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	4a73      	ldr	r2, [pc, #460]	; (8014444 <_tx_timer_thread_entry+0x1dc>)
 8014278:	4293      	cmp	r3, r2
 801427a:	f040 80de 	bne.w	801443a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801427e:	f3ef 8310 	mrs	r3, PRIMASK
 8014282:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8014284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8014286:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8014288:	b672      	cpsid	i
    return(int_posture);
 801428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801428c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801428e:	4b6e      	ldr	r3, [pc, #440]	; (8014448 <_tx_timer_thread_entry+0x1e0>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d003      	beq.n	80142a4 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f107 020c 	add.w	r2, r7, #12
 80142a2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80142a4:	4b68      	ldr	r3, [pc, #416]	; (8014448 <_tx_timer_thread_entry+0x1e0>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	2200      	movs	r2, #0
 80142aa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80142ac:	4b66      	ldr	r3, [pc, #408]	; (8014448 <_tx_timer_thread_entry+0x1e0>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	3304      	adds	r3, #4
 80142b2:	4a65      	ldr	r2, [pc, #404]	; (8014448 <_tx_timer_thread_entry+0x1e0>)
 80142b4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80142b6:	4b64      	ldr	r3, [pc, #400]	; (8014448 <_tx_timer_thread_entry+0x1e0>)
 80142b8:	681a      	ldr	r2, [r3, #0]
 80142ba:	4b64      	ldr	r3, [pc, #400]	; (801444c <_tx_timer_thread_entry+0x1e4>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d103      	bne.n	80142ca <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 80142c2:	4b63      	ldr	r3, [pc, #396]	; (8014450 <_tx_timer_thread_entry+0x1e8>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a60      	ldr	r2, [pc, #384]	; (8014448 <_tx_timer_thread_entry+0x1e0>)
 80142c8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80142ca:	4b62      	ldr	r3, [pc, #392]	; (8014454 <_tx_timer_thread_entry+0x1ec>)
 80142cc:	2200      	movs	r2, #0
 80142ce:	601a      	str	r2, [r3, #0]
 80142d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142d2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d6:	f383 8810 	msr	PRIMASK, r3
}
 80142da:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142dc:	f3ef 8310 	mrs	r3, PRIMASK
 80142e0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80142e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80142e4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80142e6:	b672      	cpsid	i
    return(int_posture);
 80142e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80142ea:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80142ec:	e07f      	b.n	80143ee <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	691b      	ldr	r3, [r3, #16]
 80142f6:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80142f8:	2300      	movs	r3, #0
 80142fa:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80142fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014300:	429a      	cmp	r2, r3
 8014302:	d102      	bne.n	801430a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8014304:	2300      	movs	r3, #0
 8014306:	60fb      	str	r3, [r7, #12]
 8014308:	e00e      	b.n	8014328 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801430a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801430c:	695b      	ldr	r3, [r3, #20]
 801430e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014314:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801431a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801431c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801431e:	f107 020c 	add.w	r2, r7, #12
 8014322:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8014324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014326:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8014328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b20      	cmp	r3, #32
 801432e:	d911      	bls.n	8014354 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8014330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8014338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801433a:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 801433c:	2300      	movs	r3, #0
 801433e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014342:	f107 0208 	add.w	r2, r7, #8
 8014346:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8014348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801434a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801434c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014350:	60bb      	str	r3, [r7, #8]
 8014352:	e01a      	b.n	801438a <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8014354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014356:	689b      	ldr	r3, [r3, #8]
 8014358:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801435c:	68db      	ldr	r3, [r3, #12]
 801435e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8014360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014362:	685a      	ldr	r2, [r3, #4]
 8014364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014366:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8014368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d009      	beq.n	8014384 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014372:	f107 0208 	add.w	r2, r7, #8
 8014376:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8014378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801437a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801437c:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801437e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014380:	60bb      	str	r3, [r7, #8]
 8014382:	e002      	b.n	801438a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8014384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014386:	2200      	movs	r2, #0
 8014388:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801438a:	4a33      	ldr	r2, [pc, #204]	; (8014458 <_tx_timer_thread_entry+0x1f0>)
 801438c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801438e:	6013      	str	r3, [r2, #0]
 8014390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014392:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014396:	f383 8810 	msr	PRIMASK, r3
}
 801439a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 801439c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d002      	beq.n	80143a8 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 80143a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80143a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80143a6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80143a8:	f3ef 8310 	mrs	r3, PRIMASK
 80143ac:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80143ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80143b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80143b2:	b672      	cpsid	i
    return(int_posture);
 80143b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80143b6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80143b8:	4b27      	ldr	r3, [pc, #156]	; (8014458 <_tx_timer_thread_entry+0x1f0>)
 80143ba:	2200      	movs	r2, #0
 80143bc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80143c2:	429a      	cmp	r2, r3
 80143c4:	d105      	bne.n	80143d2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80143c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143c8:	2200      	movs	r2, #0
 80143ca:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80143cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80143ce:	f7ff feb1 	bl	8014134 <_tx_timer_system_activate>
 80143d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80143d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	f383 8810 	msr	PRIMASK, r3
}
 80143dc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80143de:	f3ef 8310 	mrs	r3, PRIMASK
 80143e2:	623b      	str	r3, [r7, #32]
    return(posture);
 80143e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80143e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80143e8:	b672      	cpsid	i
    return(int_posture);
 80143ea:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80143ec:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	f47f af7c 	bne.w	80142ee <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80143f6:	4b17      	ldr	r3, [pc, #92]	; (8014454 <_tx_timer_thread_entry+0x1ec>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d116      	bne.n	801442c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80143fe:	4b17      	ldr	r3, [pc, #92]	; (801445c <_tx_timer_thread_entry+0x1f4>)
 8014400:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014404:	2203      	movs	r2, #3
 8014406:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801440a:	2201      	movs	r2, #1
 801440c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801440e:	4b14      	ldr	r3, [pc, #80]	; (8014460 <_tx_timer_thread_entry+0x1f8>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	3301      	adds	r3, #1
 8014414:	4a12      	ldr	r2, [pc, #72]	; (8014460 <_tx_timer_thread_entry+0x1f8>)
 8014416:	6013      	str	r3, [r2, #0]
 8014418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801441a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	f383 8810 	msr	PRIMASK, r3
}
 8014422:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8014424:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014426:	f7ff fb69 	bl	8013afc <_tx_thread_system_suspend>
 801442a:	e728      	b.n	801427e <_tx_timer_thread_entry+0x16>
 801442c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801442e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	f383 8810 	msr	PRIMASK, r3
}
 8014436:	bf00      	nop
            TX_DISABLE
 8014438:	e721      	b.n	801427e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801443a:	bf00      	nop
 801443c:	3760      	adds	r7, #96	; 0x60
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
 8014442:	bf00      	nop
 8014444:	4154494d 	.word	0x4154494d
 8014448:	240023dc 	.word	0x240023dc
 801444c:	2400246c 	.word	0x2400246c
 8014450:	24002524 	.word	0x24002524
 8014454:	24002460 	.word	0x24002460
 8014458:	24002520 	.word	0x24002520
 801445c:	24002470 	.word	0x24002470
 8014460:	240023cc 	.word	0x240023cc

08014464 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b08a      	sub	sp, #40	; 0x28
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	607a      	str	r2, [r7, #4]
 8014470:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014472:	2300      	movs	r3, #0
 8014474:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d102      	bne.n	8014482 <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801447c:	2302      	movs	r3, #2
 801447e:	627b      	str	r3, [r7, #36]	; 0x24
 8014480:	e029      	b.n	80144d6 <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4a2d      	ldr	r2, [pc, #180]	; (801453c <_txe_byte_allocate+0xd8>)
 8014488:	4293      	cmp	r3, r2
 801448a:	d002      	beq.n	8014492 <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801448c:	2302      	movs	r3, #2
 801448e:	627b      	str	r3, [r7, #36]	; 0x24
 8014490:	e021      	b.n	80144d6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d102      	bne.n	801449e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8014498:	2303      	movs	r3, #3
 801449a:	627b      	str	r3, [r7, #36]	; 0x24
 801449c:	e01b      	b.n	80144d6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d102      	bne.n	80144aa <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80144a4:	2305      	movs	r3, #5
 80144a6:	627b      	str	r3, [r7, #36]	; 0x24
 80144a8:	e015      	b.n	80144d6 <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	69db      	ldr	r3, [r3, #28]
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	429a      	cmp	r2, r3
 80144b2:	d902      	bls.n	80144ba <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80144b4:	2305      	movs	r3, #5
 80144b6:	627b      	str	r3, [r7, #36]	; 0x24
 80144b8:	e00d      	b.n	80144d6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d00a      	beq.n	80144d6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80144c0:	f3ef 8305 	mrs	r3, IPSR
 80144c4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80144c6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80144c8:	4b1d      	ldr	r3, [pc, #116]	; (8014540 <_txe_byte_allocate+0xdc>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	4313      	orrs	r3, r2
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d001      	beq.n	80144d6 <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80144d2:	2304      	movs	r3, #4
 80144d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80144d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d108      	bne.n	80144ee <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80144dc:	4b19      	ldr	r3, [pc, #100]	; (8014544 <_txe_byte_allocate+0xe0>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80144e2:	6a3b      	ldr	r3, [r7, #32]
 80144e4:	4a18      	ldr	r2, [pc, #96]	; (8014548 <_txe_byte_allocate+0xe4>)
 80144e6:	4293      	cmp	r3, r2
 80144e8:	d101      	bne.n	80144ee <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80144ea:	2313      	movs	r3, #19
 80144ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80144ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d114      	bne.n	801451e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80144f4:	f3ef 8305 	mrs	r3, IPSR
 80144f8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80144fa:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80144fc:	4b10      	ldr	r3, [pc, #64]	; (8014540 <_txe_byte_allocate+0xdc>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	4313      	orrs	r3, r2
 8014502:	2b00      	cmp	r3, #0
 8014504:	d00b      	beq.n	801451e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014506:	f3ef 8305 	mrs	r3, IPSR
 801450a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801450c:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801450e:	4b0c      	ldr	r3, [pc, #48]	; (8014540 <_txe_byte_allocate+0xdc>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	4313      	orrs	r3, r2
 8014514:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014518:	d201      	bcs.n	801451e <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801451a:	2313      	movs	r3, #19
 801451c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014520:	2b00      	cmp	r3, #0
 8014522:	d106      	bne.n	8014532 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	68b9      	ldr	r1, [r7, #8]
 801452a:	68f8      	ldr	r0, [r7, #12]
 801452c:	f7fc fec6 	bl	80112bc <_tx_byte_allocate>
 8014530:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8014532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014534:	4618      	mov	r0, r3
 8014536:	3728      	adds	r7, #40	; 0x28
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	42595445 	.word	0x42595445
 8014540:	2400008c 	.word	0x2400008c
 8014544:	240023d0 	.word	0x240023d0
 8014548:	24002470 	.word	0x24002470

0801454c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b092      	sub	sp, #72	; 0x48
 8014550:	af00      	add	r7, sp, #0
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	607a      	str	r2, [r7, #4]
 8014558:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801455a:	2300      	movs	r3, #0
 801455c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d102      	bne.n	801456a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014564:	2302      	movs	r3, #2
 8014566:	647b      	str	r3, [r7, #68]	; 0x44
 8014568:	e075      	b.n	8014656 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 801456a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801456c:	2b34      	cmp	r3, #52	; 0x34
 801456e:	d002      	beq.n	8014576 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014570:	2302      	movs	r3, #2
 8014572:	647b      	str	r3, [r7, #68]	; 0x44
 8014574:	e06f      	b.n	8014656 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014576:	f3ef 8310 	mrs	r3, PRIMASK
 801457a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801457e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014580:	b672      	cpsid	i
    return(int_posture);
 8014582:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8014584:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014586:	4b3b      	ldr	r3, [pc, #236]	; (8014674 <_txe_byte_pool_create+0x128>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	3301      	adds	r3, #1
 801458c:	4a39      	ldr	r2, [pc, #228]	; (8014674 <_txe_byte_pool_create+0x128>)
 801458e:	6013      	str	r3, [r2, #0]
 8014590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014592:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014596:	f383 8810 	msr	PRIMASK, r3
}
 801459a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 801459c:	4b36      	ldr	r3, [pc, #216]	; (8014678 <_txe_byte_pool_create+0x12c>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80145a2:	2300      	movs	r3, #0
 80145a4:	643b      	str	r3, [r7, #64]	; 0x40
 80145a6:	e009      	b.n	80145bc <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80145a8:	68fa      	ldr	r2, [r7, #12]
 80145aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d00b      	beq.n	80145c8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80145b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80145b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145b8:	3301      	adds	r3, #1
 80145ba:	643b      	str	r3, [r7, #64]	; 0x40
 80145bc:	4b2f      	ldr	r3, [pc, #188]	; (801467c <_txe_byte_pool_create+0x130>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d3f0      	bcc.n	80145a8 <_txe_byte_pool_create+0x5c>
 80145c6:	e000      	b.n	80145ca <_txe_byte_pool_create+0x7e>
                break;
 80145c8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80145ca:	f3ef 8310 	mrs	r3, PRIMASK
 80145ce:	623b      	str	r3, [r7, #32]
    return(posture);
 80145d0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80145d2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80145d4:	b672      	cpsid	i
    return(int_posture);
 80145d6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80145d8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80145da:	4b26      	ldr	r3, [pc, #152]	; (8014674 <_txe_byte_pool_create+0x128>)
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	3b01      	subs	r3, #1
 80145e0:	4a24      	ldr	r2, [pc, #144]	; (8014674 <_txe_byte_pool_create+0x128>)
 80145e2:	6013      	str	r3, [r2, #0]
 80145e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80145e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ea:	f383 8810 	msr	PRIMASK, r3
}
 80145ee:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80145f0:	f7ff f94a 	bl	8013888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80145f4:	68fa      	ldr	r2, [r7, #12]
 80145f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d102      	bne.n	8014602 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80145fc:	2302      	movs	r3, #2
 80145fe:	647b      	str	r3, [r7, #68]	; 0x44
 8014600:	e029      	b.n	8014656 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d102      	bne.n	801460e <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8014608:	2303      	movs	r3, #3
 801460a:	647b      	str	r3, [r7, #68]	; 0x44
 801460c:	e023      	b.n	8014656 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	2b63      	cmp	r3, #99	; 0x63
 8014612:	d802      	bhi.n	801461a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8014614:	2305      	movs	r3, #5
 8014616:	647b      	str	r3, [r7, #68]	; 0x44
 8014618:	e01d      	b.n	8014656 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801461a:	4b19      	ldr	r3, [pc, #100]	; (8014680 <_txe_byte_pool_create+0x134>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014622:	4a18      	ldr	r2, [pc, #96]	; (8014684 <_txe_byte_pool_create+0x138>)
 8014624:	4293      	cmp	r3, r2
 8014626:	d101      	bne.n	801462c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014628:	2313      	movs	r3, #19
 801462a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801462c:	f3ef 8305 	mrs	r3, IPSR
 8014630:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014632:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014634:	4b14      	ldr	r3, [pc, #80]	; (8014688 <_txe_byte_pool_create+0x13c>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	4313      	orrs	r3, r2
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00b      	beq.n	8014656 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801463e:	f3ef 8305 	mrs	r3, IPSR
 8014642:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014644:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014646:	4b10      	ldr	r3, [pc, #64]	; (8014688 <_txe_byte_pool_create+0x13c>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	4313      	orrs	r3, r2
 801464c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014650:	d201      	bcs.n	8014656 <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014652:	2313      	movs	r3, #19
 8014654:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014658:	2b00      	cmp	r3, #0
 801465a:	d106      	bne.n	801466a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	687a      	ldr	r2, [r7, #4]
 8014660:	68b9      	ldr	r1, [r7, #8]
 8014662:	68f8      	ldr	r0, [r7, #12]
 8014664:	f7fc ff6c 	bl	8011540 <_tx_byte_pool_create>
 8014668:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801466a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801466c:	4618      	mov	r0, r3
 801466e:	3748      	adds	r7, #72	; 0x48
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	240023cc 	.word	0x240023cc
 8014678:	24002314 	.word	0x24002314
 801467c:	24002330 	.word	0x24002330
 8014680:	240023d0 	.word	0x240023d0
 8014684:	24002470 	.word	0x24002470
 8014688:	2400008c 	.word	0x2400008c

0801468c <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b092      	sub	sp, #72	; 0x48
 8014690:	af00      	add	r7, sp, #0
 8014692:	60f8      	str	r0, [r7, #12]
 8014694:	60b9      	str	r1, [r7, #8]
 8014696:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014698:	2300      	movs	r3, #0
 801469a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d102      	bne.n	80146a8 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80146a2:	2306      	movs	r3, #6
 80146a4:	647b      	str	r3, [r7, #68]	; 0x44
 80146a6:	e069      	b.n	801477c <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2b24      	cmp	r3, #36	; 0x24
 80146ac:	d002      	beq.n	80146b4 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80146ae:	2306      	movs	r3, #6
 80146b0:	647b      	str	r3, [r7, #68]	; 0x44
 80146b2:	e063      	b.n	801477c <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146b4:	f3ef 8310 	mrs	r3, PRIMASK
 80146b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80146ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80146bc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80146be:	b672      	cpsid	i
    return(int_posture);
 80146c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80146c2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80146c4:	4b34      	ldr	r3, [pc, #208]	; (8014798 <_txe_event_flags_create+0x10c>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	3301      	adds	r3, #1
 80146ca:	4a33      	ldr	r2, [pc, #204]	; (8014798 <_txe_event_flags_create+0x10c>)
 80146cc:	6013      	str	r3, [r2, #0]
 80146ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d4:	f383 8810 	msr	PRIMASK, r3
}
 80146d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 80146da:	4b30      	ldr	r3, [pc, #192]	; (801479c <_txe_event_flags_create+0x110>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 80146e0:	2300      	movs	r3, #0
 80146e2:	643b      	str	r3, [r7, #64]	; 0x40
 80146e4:	e009      	b.n	80146fa <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 80146e6:	68fa      	ldr	r2, [r7, #12]
 80146e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d00b      	beq.n	8014706 <_txe_event_flags_create+0x7a>
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 80146ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146f0:	699b      	ldr	r3, [r3, #24]
 80146f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 80146f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146f6:	3301      	adds	r3, #1
 80146f8:	643b      	str	r3, [r7, #64]	; 0x40
 80146fa:	4b29      	ldr	r3, [pc, #164]	; (80147a0 <_txe_event_flags_create+0x114>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014700:	429a      	cmp	r2, r3
 8014702:	d3f0      	bcc.n	80146e6 <_txe_event_flags_create+0x5a>
 8014704:	e000      	b.n	8014708 <_txe_event_flags_create+0x7c>
                break;
 8014706:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014708:	f3ef 8310 	mrs	r3, PRIMASK
 801470c:	623b      	str	r3, [r7, #32]
    return(posture);
 801470e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014710:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014712:	b672      	cpsid	i
    return(int_posture);
 8014714:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014716:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014718:	4b1f      	ldr	r3, [pc, #124]	; (8014798 <_txe_event_flags_create+0x10c>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	3b01      	subs	r3, #1
 801471e:	4a1e      	ldr	r2, [pc, #120]	; (8014798 <_txe_event_flags_create+0x10c>)
 8014720:	6013      	str	r3, [r2, #0]
 8014722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014724:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014728:	f383 8810 	msr	PRIMASK, r3
}
 801472c:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801472e:	f7ff f8ab 	bl	8013888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8014732:	68fa      	ldr	r2, [r7, #12]
 8014734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014736:	429a      	cmp	r2, r3
 8014738:	d102      	bne.n	8014740 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 801473a:	2306      	movs	r3, #6
 801473c:	647b      	str	r3, [r7, #68]	; 0x44
 801473e:	e01d      	b.n	801477c <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014740:	4b18      	ldr	r3, [pc, #96]	; (80147a4 <_txe_event_flags_create+0x118>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014748:	4a17      	ldr	r2, [pc, #92]	; (80147a8 <_txe_event_flags_create+0x11c>)
 801474a:	4293      	cmp	r3, r2
 801474c:	d101      	bne.n	8014752 <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801474e:	2313      	movs	r3, #19
 8014750:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014752:	f3ef 8305 	mrs	r3, IPSR
 8014756:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014758:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801475a:	4b14      	ldr	r3, [pc, #80]	; (80147ac <_txe_event_flags_create+0x120>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	4313      	orrs	r3, r2
 8014760:	2b00      	cmp	r3, #0
 8014762:	d00b      	beq.n	801477c <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014764:	f3ef 8305 	mrs	r3, IPSR
 8014768:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801476a:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801476c:	4b0f      	ldr	r3, [pc, #60]	; (80147ac <_txe_event_flags_create+0x120>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4313      	orrs	r3, r2
 8014772:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014776:	d201      	bcs.n	801477c <_txe_event_flags_create+0xf0>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014778:	2313      	movs	r3, #19
 801477a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801477c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801477e:	2b00      	cmp	r3, #0
 8014780:	d104      	bne.n	801478c <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8014782:	68b9      	ldr	r1, [r7, #8]
 8014784:	68f8      	ldr	r0, [r7, #12]
 8014786:	f7fd f905 	bl	8011994 <_tx_event_flags_create>
 801478a:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801478e:	4618      	mov	r0, r3
 8014790:	3748      	adds	r7, #72	; 0x48
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
 8014796:	bf00      	nop
 8014798:	240023cc 	.word	0x240023cc
 801479c:	24002300 	.word	0x24002300
 80147a0:	24002324 	.word	0x24002324
 80147a4:	240023d0 	.word	0x240023d0
 80147a8:	24002470 	.word	0x24002470
 80147ac:	2400008c 	.word	0x2400008c

080147b0 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b08a      	sub	sp, #40	; 0x28
 80147b4:	af02      	add	r7, sp, #8
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	60b9      	str	r1, [r7, #8]
 80147ba:	607a      	str	r2, [r7, #4]
 80147bc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80147be:	2300      	movs	r3, #0
 80147c0:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d102      	bne.n	80147ce <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80147c8:	2306      	movs	r3, #6
 80147ca:	61fb      	str	r3, [r7, #28]
 80147cc:	e025      	b.n	801481a <_txe_event_flags_get+0x6a>
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	4a1e      	ldr	r2, [pc, #120]	; (801484c <_txe_event_flags_get+0x9c>)
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d002      	beq.n	80147de <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80147d8:	2306      	movs	r3, #6
 80147da:	61fb      	str	r3, [r7, #28]
 80147dc:	e01d      	b.n	801481a <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d102      	bne.n	80147ea <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80147e4:	2303      	movs	r3, #3
 80147e6:	61fb      	str	r3, [r7, #28]
 80147e8:	e017      	b.n	801481a <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80147ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d014      	beq.n	801481a <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80147f0:	f3ef 8305 	mrs	r3, IPSR
 80147f4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80147f6:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80147f8:	4b15      	ldr	r3, [pc, #84]	; (8014850 <_txe_event_flags_get+0xa0>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	4313      	orrs	r3, r2
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d002      	beq.n	8014808 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014802:	2304      	movs	r3, #4
 8014804:	61fb      	str	r3, [r7, #28]
 8014806:	e008      	b.n	801481a <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014808:	4b12      	ldr	r3, [pc, #72]	; (8014854 <_txe_event_flags_get+0xa4>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801480e:	69bb      	ldr	r3, [r7, #24]
 8014810:	4a11      	ldr	r2, [pc, #68]	; (8014858 <_txe_event_flags_get+0xa8>)
 8014812:	4293      	cmp	r3, r2
 8014814:	d101      	bne.n	801481a <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8014816:	2304      	movs	r3, #4
 8014818:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d104      	bne.n	801482a <_txe_event_flags_get+0x7a>
    {
    
        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b03      	cmp	r3, #3
 8014824:	d901      	bls.n	801482a <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8014826:	2308      	movs	r3, #8
 8014828:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d108      	bne.n	8014842 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8014830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014832:	9300      	str	r3, [sp, #0]
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	68b9      	ldr	r1, [r7, #8]
 801483a:	68f8      	ldr	r0, [r7, #12]
 801483c:	f7fd f8f8 	bl	8011a30 <_tx_event_flags_get>
 8014840:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8014842:	69fb      	ldr	r3, [r7, #28]
}
 8014844:	4618      	mov	r0, r3
 8014846:	3720      	adds	r7, #32
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}
 801484c:	4456444e 	.word	0x4456444e
 8014850:	2400008c 	.word	0x2400008c
 8014854:	240023d0 	.word	0x240023d0
 8014858:	24002470 	.word	0x24002470

0801485c <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b086      	sub	sp, #24
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014868:	2300      	movs	r3, #0
 801486a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d102      	bne.n	8014878 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8014872:	2306      	movs	r3, #6
 8014874:	617b      	str	r3, [r7, #20]
 8014876:	e00f      	b.n	8014898 <_txe_event_flags_set+0x3c>
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	4a0d      	ldr	r2, [pc, #52]	; (80148b4 <_txe_event_flags_set+0x58>)
 801487e:	4293      	cmp	r3, r2
 8014880:	d002      	beq.n	8014888 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8014882:	2306      	movs	r3, #6
 8014884:	617b      	str	r3, [r7, #20]
 8014886:	e007      	b.n	8014898 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2b02      	cmp	r3, #2
 801488c:	d004      	beq.n	8014898 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d001      	beq.n	8014898 <_txe_event_flags_set+0x3c>
            {
        
                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8014894:	2308      	movs	r3, #8
 8014896:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d105      	bne.n	80148aa <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	68b9      	ldr	r1, [r7, #8]
 80148a2:	68f8      	ldr	r0, [r7, #12]
 80148a4:	f7fd f9a6 	bl	8011bf4 <_tx_event_flags_set>
 80148a8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80148aa:	697b      	ldr	r3, [r7, #20]
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3718      	adds	r7, #24
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	4456444e 	.word	0x4456444e

080148b8 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b092      	sub	sp, #72	; 0x48
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
 80148c4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80148c6:	2300      	movs	r3, #0
 80148c8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d102      	bne.n	80148d6 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80148d0:	231c      	movs	r3, #28
 80148d2:	647b      	str	r3, [r7, #68]	; 0x44
 80148d4:	e053      	b.n	801497e <_txe_mutex_create+0xc6>
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	2b34      	cmp	r3, #52	; 0x34
 80148da:	d002      	beq.n	80148e2 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80148dc:	231c      	movs	r3, #28
 80148de:	647b      	str	r3, [r7, #68]	; 0x44
 80148e0:	e04d      	b.n	801497e <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80148e2:	f3ef 8310 	mrs	r3, PRIMASK
 80148e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80148e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80148ea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80148ec:	b672      	cpsid	i
    return(int_posture);
 80148ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80148f0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80148f2:	4b3a      	ldr	r3, [pc, #232]	; (80149dc <_txe_mutex_create+0x124>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	3301      	adds	r3, #1
 80148f8:	4a38      	ldr	r2, [pc, #224]	; (80149dc <_txe_mutex_create+0x124>)
 80148fa:	6013      	str	r3, [r2, #0]
 80148fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fe:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014902:	f383 8810 	msr	PRIMASK, r3
}
 8014906:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8014908:	4b35      	ldr	r3, [pc, #212]	; (80149e0 <_txe_mutex_create+0x128>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801490e:	2300      	movs	r3, #0
 8014910:	643b      	str	r3, [r7, #64]	; 0x40
 8014912:	e009      	b.n	8014928 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8014914:	68fa      	ldr	r2, [r7, #12]
 8014916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014918:	429a      	cmp	r2, r3
 801491a:	d00b      	beq.n	8014934 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 801491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801491e:	6a1b      	ldr	r3, [r3, #32]
 8014920:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8014922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014924:	3301      	adds	r3, #1
 8014926:	643b      	str	r3, [r7, #64]	; 0x40
 8014928:	4b2e      	ldr	r3, [pc, #184]	; (80149e4 <_txe_mutex_create+0x12c>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801492e:	429a      	cmp	r2, r3
 8014930:	d3f0      	bcc.n	8014914 <_txe_mutex_create+0x5c>
 8014932:	e000      	b.n	8014936 <_txe_mutex_create+0x7e>
                break;
 8014934:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014936:	f3ef 8310 	mrs	r3, PRIMASK
 801493a:	623b      	str	r3, [r7, #32]
    return(posture);
 801493c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801493e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014940:	b672      	cpsid	i
    return(int_posture);
 8014942:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014944:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014946:	4b25      	ldr	r3, [pc, #148]	; (80149dc <_txe_mutex_create+0x124>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	3b01      	subs	r3, #1
 801494c:	4a23      	ldr	r2, [pc, #140]	; (80149dc <_txe_mutex_create+0x124>)
 801494e:	6013      	str	r3, [r2, #0]
 8014950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014952:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014956:	f383 8810 	msr	PRIMASK, r3
}
 801495a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801495c:	f7fe ff94 	bl	8013888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8014960:	68fa      	ldr	r2, [r7, #12]
 8014962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014964:	429a      	cmp	r2, r3
 8014966:	d102      	bne.n	801496e <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8014968:	231c      	movs	r3, #28
 801496a:	647b      	str	r3, [r7, #68]	; 0x44
 801496c:	e007      	b.n	801497e <_txe_mutex_create+0xc6>
        }
        else
        {
        
            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2b01      	cmp	r3, #1
 8014972:	d004      	beq.n	801497e <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d001      	beq.n	801497e <_txe_mutex_create+0xc6>
                {
        
                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 801497a:	231f      	movs	r3, #31
 801497c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801497e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014980:	2b00      	cmp	r3, #0
 8014982:	d11d      	bne.n	80149c0 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8014984:	4b18      	ldr	r3, [pc, #96]	; (80149e8 <_txe_mutex_create+0x130>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801498c:	4a17      	ldr	r2, [pc, #92]	; (80149ec <_txe_mutex_create+0x134>)
 801498e:	4293      	cmp	r3, r2
 8014990:	d101      	bne.n	8014996 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014992:	2313      	movs	r3, #19
 8014994:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014996:	f3ef 8305 	mrs	r3, IPSR
 801499a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801499c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801499e:	4b14      	ldr	r3, [pc, #80]	; (80149f0 <_txe_mutex_create+0x138>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	4313      	orrs	r3, r2
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d00b      	beq.n	80149c0 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80149a8:	f3ef 8305 	mrs	r3, IPSR
 80149ac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80149ae:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80149b0:	4b0f      	ldr	r3, [pc, #60]	; (80149f0 <_txe_mutex_create+0x138>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	4313      	orrs	r3, r2
 80149b6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80149ba:	d201      	bcs.n	80149c0 <_txe_mutex_create+0x108>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80149bc:	2313      	movs	r3, #19
 80149be:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80149c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d105      	bne.n	80149d2 <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	68b9      	ldr	r1, [r7, #8]
 80149ca:	68f8      	ldr	r0, [r7, #12]
 80149cc:	f7fd fc52 	bl	8012274 <_tx_mutex_create>
 80149d0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80149d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3748      	adds	r7, #72	; 0x48
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	240023cc 	.word	0x240023cc
 80149e0:	24002308 	.word	0x24002308
 80149e4:	24002304 	.word	0x24002304
 80149e8:	240023d0 	.word	0x240023d0
 80149ec:	24002470 	.word	0x24002470
 80149f0:	2400008c 	.word	0x2400008c

080149f4 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b086      	sub	sp, #24
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80149fc:	2300      	movs	r3, #0
 80149fe:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d102      	bne.n	8014a0c <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014a06:	231c      	movs	r3, #28
 8014a08:	617b      	str	r3, [r7, #20]
 8014a0a:	e023      	b.n	8014a54 <_txe_mutex_delete+0x60>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	4a13      	ldr	r2, [pc, #76]	; (8014a60 <_txe_mutex_delete+0x6c>)
 8014a12:	4293      	cmp	r3, r2
 8014a14:	d002      	beq.n	8014a1c <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014a16:	231c      	movs	r3, #28
 8014a18:	617b      	str	r3, [r7, #20]
 8014a1a:	e01b      	b.n	8014a54 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014a1c:	f3ef 8305 	mrs	r3, IPSR
 8014a20:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014a22:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014a24:	4b0f      	ldr	r3, [pc, #60]	; (8014a64 <_txe_mutex_delete+0x70>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4313      	orrs	r3, r2
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d002      	beq.n	8014a34 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8014a2e:	2313      	movs	r3, #19
 8014a30:	617b      	str	r3, [r7, #20]
 8014a32:	e00f      	b.n	8014a54 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8014a34:	4b0c      	ldr	r3, [pc, #48]	; (8014a68 <_txe_mutex_delete+0x74>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8014a3a:	693b      	ldr	r3, [r7, #16]
 8014a3c:	4a0b      	ldr	r2, [pc, #44]	; (8014a6c <_txe_mutex_delete+0x78>)
 8014a3e:	4293      	cmp	r3, r2
 8014a40:	d101      	bne.n	8014a46 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014a42:	2313      	movs	r3, #19
 8014a44:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d103      	bne.n	8014a54 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7fd fc6b 	bl	8012328 <_tx_mutex_delete>
 8014a52:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8014a54:	697b      	ldr	r3, [r7, #20]
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3718      	adds	r7, #24
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	4d555445 	.word	0x4d555445
 8014a64:	2400008c 	.word	0x2400008c
 8014a68:	240023d0 	.word	0x240023d0
 8014a6c:	24002470 	.word	0x24002470

08014a70 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b088      	sub	sp, #32
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
 8014a78:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d102      	bne.n	8014a8a <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014a84:	231c      	movs	r3, #28
 8014a86:	61fb      	str	r3, [r7, #28]
 8014a88:	e01f      	b.n	8014aca <_txe_mutex_get+0x5a>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	4a21      	ldr	r2, [pc, #132]	; (8014b14 <_txe_mutex_get+0xa4>)
 8014a90:	4293      	cmp	r3, r2
 8014a92:	d002      	beq.n	8014a9a <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014a94:	231c      	movs	r3, #28
 8014a96:	61fb      	str	r3, [r7, #28]
 8014a98:	e017      	b.n	8014aca <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d014      	beq.n	8014aca <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014aa0:	f3ef 8305 	mrs	r3, IPSR
 8014aa4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014aa6:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014aa8:	4b1b      	ldr	r3, [pc, #108]	; (8014b18 <_txe_mutex_get+0xa8>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	4313      	orrs	r3, r2
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d002      	beq.n	8014ab8 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014ab2:	2304      	movs	r3, #4
 8014ab4:	61fb      	str	r3, [r7, #28]
 8014ab6:	e008      	b.n	8014aca <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014ab8:	4b18      	ldr	r3, [pc, #96]	; (8014b1c <_txe_mutex_get+0xac>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014abe:	69bb      	ldr	r3, [r7, #24]
 8014ac0:	4a17      	ldr	r2, [pc, #92]	; (8014b20 <_txe_mutex_get+0xb0>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d101      	bne.n	8014aca <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8014ac6:	2304      	movs	r3, #4
 8014ac8:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d114      	bne.n	8014afa <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ad0:	f3ef 8305 	mrs	r3, IPSR
 8014ad4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014ad6:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014ad8:	4b0f      	ldr	r3, [pc, #60]	; (8014b18 <_txe_mutex_get+0xa8>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	4313      	orrs	r3, r2
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d00b      	beq.n	8014afa <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ae2:	f3ef 8305 	mrs	r3, IPSR
 8014ae6:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014ae8:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014aea:	4b0b      	ldr	r3, [pc, #44]	; (8014b18 <_txe_mutex_get+0xa8>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	4313      	orrs	r3, r2
 8014af0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014af4:	d201      	bcs.n	8014afa <_txe_mutex_get+0x8a>
            {
        
                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014af6:	2313      	movs	r3, #19
 8014af8:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014afa:	69fb      	ldr	r3, [r7, #28]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d104      	bne.n	8014b0a <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8014b00:	6839      	ldr	r1, [r7, #0]
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f7fd fcba 	bl	801247c <_tx_mutex_get>
 8014b08:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8014b0a:	69fb      	ldr	r3, [r7, #28]
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3720      	adds	r7, #32
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	4d555445 	.word	0x4d555445
 8014b18:	2400008c 	.word	0x2400008c
 8014b1c:	240023d0 	.word	0x240023d0
 8014b20:	24002470 	.word	0x24002470

08014b24 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b086      	sub	sp, #24
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d102      	bne.n	8014b3c <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014b36:	231c      	movs	r3, #28
 8014b38:	617b      	str	r3, [r7, #20]
 8014b3a:	e01c      	b.n	8014b76 <_txe_mutex_put+0x52>
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	4a13      	ldr	r2, [pc, #76]	; (8014b90 <_txe_mutex_put+0x6c>)
 8014b42:	4293      	cmp	r3, r2
 8014b44:	d002      	beq.n	8014b4c <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014b46:	231c      	movs	r3, #28
 8014b48:	617b      	str	r3, [r7, #20]
 8014b4a:	e014      	b.n	8014b76 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014b4c:	f3ef 8305 	mrs	r3, IPSR
 8014b50:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014b52:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014b54:	4b0f      	ldr	r3, [pc, #60]	; (8014b94 <_txe_mutex_put+0x70>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	4313      	orrs	r3, r2
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d00b      	beq.n	8014b76 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014b5e:	f3ef 8305 	mrs	r3, IPSR
 8014b62:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014b64:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014b66:	4b0b      	ldr	r3, [pc, #44]	; (8014b94 <_txe_mutex_put+0x70>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	4313      	orrs	r3, r2
 8014b6c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014b70:	d201      	bcs.n	8014b76 <_txe_mutex_put+0x52>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014b72:	2313      	movs	r3, #19
 8014b74:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d103      	bne.n	8014b84 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f7fd fef5 	bl	801296c <_tx_mutex_put>
 8014b82:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014b84:	697b      	ldr	r3, [r7, #20]
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3718      	adds	r7, #24
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}
 8014b8e:	bf00      	nop
 8014b90:	4d555445 	.word	0x4d555445
 8014b94:	2400008c 	.word	0x2400008c

08014b98 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b092      	sub	sp, #72	; 0x48
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	607a      	str	r2, [r7, #4]
 8014ba4:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d102      	bne.n	8014bb6 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014bb0:	230c      	movs	r3, #12
 8014bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8014bb4:	e054      	b.n	8014c60 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	2b1c      	cmp	r3, #28
 8014bba:	d002      	beq.n	8014bc2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014bbc:	230c      	movs	r3, #12
 8014bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8014bc0:	e04e      	b.n	8014c60 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8014bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014bca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014bcc:	b672      	cpsid	i
    return(int_posture);
 8014bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014bd0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014bd2:	4b36      	ldr	r3, [pc, #216]	; (8014cac <_txe_semaphore_create+0x114>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	4a34      	ldr	r2, [pc, #208]	; (8014cac <_txe_semaphore_create+0x114>)
 8014bda:	6013      	str	r3, [r2, #0]
 8014bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bde:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be2:	f383 8810 	msr	PRIMASK, r3
}
 8014be6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8014be8:	4b31      	ldr	r3, [pc, #196]	; (8014cb0 <_txe_semaphore_create+0x118>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8014bee:	2300      	movs	r3, #0
 8014bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8014bf2:	e009      	b.n	8014c08 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8014bf4:	68fa      	ldr	r2, [r7, #12]
 8014bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	d00b      	beq.n	8014c14 <_txe_semaphore_create+0x7c>
            }
            else
            {
            
                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8014bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bfe:	695b      	ldr	r3, [r3, #20]
 8014c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8014c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c04:	3301      	adds	r3, #1
 8014c06:	643b      	str	r3, [r7, #64]	; 0x40
 8014c08:	4b2a      	ldr	r3, [pc, #168]	; (8014cb4 <_txe_semaphore_create+0x11c>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	d3f0      	bcc.n	8014bf4 <_txe_semaphore_create+0x5c>
 8014c12:	e000      	b.n	8014c16 <_txe_semaphore_create+0x7e>
                break;
 8014c14:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c16:	f3ef 8310 	mrs	r3, PRIMASK
 8014c1a:	623b      	str	r3, [r7, #32]
    return(posture);
 8014c1c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014c1e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c20:	b672      	cpsid	i
    return(int_posture);
 8014c22:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014c24:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014c26:	4b21      	ldr	r3, [pc, #132]	; (8014cac <_txe_semaphore_create+0x114>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	3b01      	subs	r3, #1
 8014c2c:	4a1f      	ldr	r2, [pc, #124]	; (8014cac <_txe_semaphore_create+0x114>)
 8014c2e:	6013      	str	r3, [r2, #0]
 8014c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c32:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c36:	f383 8810 	msr	PRIMASK, r3
}
 8014c3a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014c3c:	f7fe fe24 	bl	8013888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8014c40:	68fa      	ldr	r2, [r7, #12]
 8014c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d102      	bne.n	8014c4e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8014c48:	230c      	movs	r3, #12
 8014c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8014c4c:	e008      	b.n	8014c60 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014c4e:	4b1a      	ldr	r3, [pc, #104]	; (8014cb8 <_txe_semaphore_create+0x120>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c56:	4a19      	ldr	r2, [pc, #100]	; (8014cbc <_txe_semaphore_create+0x124>)
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	d101      	bne.n	8014c60 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014c5c:	2313      	movs	r3, #19
 8014c5e:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d114      	bne.n	8014c90 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014c66:	f3ef 8305 	mrs	r3, IPSR
 8014c6a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014c6c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014c6e:	4b14      	ldr	r3, [pc, #80]	; (8014cc0 <_txe_semaphore_create+0x128>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	4313      	orrs	r3, r2
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d00b      	beq.n	8014c90 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014c78:	f3ef 8305 	mrs	r3, IPSR
 8014c7c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014c7e:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014c80:	4b0f      	ldr	r3, [pc, #60]	; (8014cc0 <_txe_semaphore_create+0x128>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	4313      	orrs	r3, r2
 8014c86:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014c8a:	d201      	bcs.n	8014c90 <_txe_semaphore_create+0xf8>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014c8c:	2313      	movs	r3, #19
 8014c8e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d105      	bne.n	8014ca2 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	68b9      	ldr	r1, [r7, #8]
 8014c9a:	68f8      	ldr	r0, [r7, #12]
 8014c9c:	f7fe f908 	bl	8012eb0 <_tx_semaphore_create>
 8014ca0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8014ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3748      	adds	r7, #72	; 0x48
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	240023cc 	.word	0x240023cc
 8014cb0:	24002310 	.word	0x24002310
 8014cb4:	24002320 	.word	0x24002320
 8014cb8:	240023d0 	.word	0x240023d0
 8014cbc:	24002470 	.word	0x24002470
 8014cc0:	2400008c 	.word	0x2400008c

08014cc4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b086      	sub	sp, #24
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d102      	bne.n	8014cde <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014cd8:	230c      	movs	r3, #12
 8014cda:	617b      	str	r3, [r7, #20]
 8014cdc:	e01f      	b.n	8014d1e <_txe_semaphore_get+0x5a>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	4a15      	ldr	r2, [pc, #84]	; (8014d38 <_txe_semaphore_get+0x74>)
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	d002      	beq.n	8014cee <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014ce8:	230c      	movs	r3, #12
 8014cea:	617b      	str	r3, [r7, #20]
 8014cec:	e017      	b.n	8014d1e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d014      	beq.n	8014d1e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014cf4:	f3ef 8305 	mrs	r3, IPSR
 8014cf8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014cfa:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014cfc:	4b0f      	ldr	r3, [pc, #60]	; (8014d3c <_txe_semaphore_get+0x78>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4313      	orrs	r3, r2
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d002      	beq.n	8014d0c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014d06:	2304      	movs	r3, #4
 8014d08:	617b      	str	r3, [r7, #20]
 8014d0a:	e008      	b.n	8014d1e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014d0c:	4b0c      	ldr	r3, [pc, #48]	; (8014d40 <_txe_semaphore_get+0x7c>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	4a0b      	ldr	r2, [pc, #44]	; (8014d44 <_txe_semaphore_get+0x80>)
 8014d16:	4293      	cmp	r3, r2
 8014d18:	d101      	bne.n	8014d1e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8014d1a:	2304      	movs	r3, #4
 8014d1c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014d1e:	697b      	ldr	r3, [r7, #20]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d104      	bne.n	8014d2e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8014d24:	6839      	ldr	r1, [r7, #0]
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f7fe f914 	bl	8012f54 <_tx_semaphore_get>
 8014d2c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014d2e:	697b      	ldr	r3, [r7, #20]
}
 8014d30:	4618      	mov	r0, r3
 8014d32:	3718      	adds	r7, #24
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	53454d41 	.word	0x53454d41
 8014d3c:	2400008c 	.word	0x2400008c
 8014d40:	240023d0 	.word	0x240023d0
 8014d44:	24002470 	.word	0x24002470

08014d48 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b084      	sub	sp, #16
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d102      	bne.n	8014d5c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014d56:	230c      	movs	r3, #12
 8014d58:	60fb      	str	r3, [r7, #12]
 8014d5a:	e00b      	b.n	8014d74 <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	4a07      	ldr	r2, [pc, #28]	; (8014d80 <_txe_semaphore_put+0x38>)
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d002      	beq.n	8014d6c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014d66:	230c      	movs	r3, #12
 8014d68:	60fb      	str	r3, [r7, #12]
 8014d6a:	e003      	b.n	8014d74 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f7fe f983 	bl	8013078 <_tx_semaphore_put>
 8014d72:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014d74:	68fb      	ldr	r3, [r7, #12]
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3710      	adds	r7, #16
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	53454d41 	.word	0x53454d41

08014d84 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b09a      	sub	sp, #104	; 0x68
 8014d88:	af06      	add	r7, sp, #24
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	607a      	str	r2, [r7, #4]
 8014d90:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014d92:	2300      	movs	r3, #0
 8014d94:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d102      	bne.n	8014da2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014d9c:	230e      	movs	r3, #14
 8014d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014da0:	e0bb      	b.n	8014f1a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8014da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014da4:	2bb0      	cmp	r3, #176	; 0xb0
 8014da6:	d002      	beq.n	8014dae <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014da8:	230e      	movs	r3, #14
 8014daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014dac:	e0b5      	b.n	8014f1a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014dae:	f3ef 8310 	mrs	r3, PRIMASK
 8014db2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014db6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014db8:	b672      	cpsid	i
    return(int_posture);
 8014dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014dbc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014dbe:	4b64      	ldr	r3, [pc, #400]	; (8014f50 <_txe_thread_create+0x1cc>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	4a62      	ldr	r2, [pc, #392]	; (8014f50 <_txe_thread_create+0x1cc>)
 8014dc6:	6013      	str	r3, [r2, #0]
 8014dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dce:	f383 8810 	msr	PRIMASK, r3
}
 8014dd2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8014dd8:	4b5e      	ldr	r3, [pc, #376]	; (8014f54 <_txe_thread_create+0x1d0>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8014dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014de0:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8014de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014de4:	3b01      	subs	r3, #1
 8014de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014de8:	4413      	add	r3, r2
 8014dea:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8014dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dee:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014df0:	2300      	movs	r3, #0
 8014df2:	647b      	str	r3, [r7, #68]	; 0x44
 8014df4:	e02b      	b.n	8014e4e <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8014df6:	68fa      	ldr	r2, [r7, #12]
 8014df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	d101      	bne.n	8014e02 <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8014dfe:	2301      	movs	r3, #1
 8014e00:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8014e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d028      	beq.n	8014e5a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8014e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e0a:	68db      	ldr	r3, [r3, #12]
 8014e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	d308      	bcc.n	8014e24 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8014e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e14:	691b      	ldr	r3, [r3, #16]
 8014e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d203      	bcs.n	8014e24 <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014e20:	2301      	movs	r3, #1
 8014e22:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8014e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e26:	68db      	ldr	r3, [r3, #12]
 8014e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d308      	bcc.n	8014e40 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8014e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e30:	691b      	ldr	r3, [r3, #16]
 8014e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d203      	bcs.n	8014e40 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8014e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e46:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e4a:	3301      	adds	r3, #1
 8014e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8014e4e:	4b42      	ldr	r3, [pc, #264]	; (8014f58 <_txe_thread_create+0x1d4>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d3ce      	bcc.n	8014df6 <_txe_thread_create+0x72>
 8014e58:	e000      	b.n	8014e5c <_txe_thread_create+0xd8>
                break;
 8014e5a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8014e60:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014e62:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014e64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e66:	b672      	cpsid	i
    return(int_posture);
 8014e68:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014e6a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014e6c:	4b38      	ldr	r3, [pc, #224]	; (8014f50 <_txe_thread_create+0x1cc>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	4a37      	ldr	r2, [pc, #220]	; (8014f50 <_txe_thread_create+0x1cc>)
 8014e74:	6013      	str	r3, [r2, #0]
 8014e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e78:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e7a:	6a3b      	ldr	r3, [r7, #32]
 8014e7c:	f383 8810 	msr	PRIMASK, r3
}
 8014e80:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014e82:	f7fe fd01 	bl	8013888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8014e86:	68fa      	ldr	r2, [r7, #12]
 8014e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d102      	bne.n	8014e94 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8014e8e:	230e      	movs	r3, #14
 8014e90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e92:	e042      	b.n	8014f1a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8014e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d102      	bne.n	8014ea0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8014e9a:	2303      	movs	r3, #3
 8014e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e9e:	e03c      	b.n	8014f1a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d102      	bne.n	8014eac <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8014ea6:	2303      	movs	r3, #3
 8014ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014eaa:	e036      	b.n	8014f1a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8014eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014eae:	2bc7      	cmp	r3, #199	; 0xc7
 8014eb0:	d802      	bhi.n	8014eb8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8014eb2:	2305      	movs	r3, #5
 8014eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014eb6:	e030      	b.n	8014f1a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8014eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014eba:	2b1f      	cmp	r3, #31
 8014ebc:	d902      	bls.n	8014ec4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8014ebe:	230f      	movs	r3, #15
 8014ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ec2:	e02a      	b.n	8014f1a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8014ec4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	d902      	bls.n	8014ed2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8014ecc:	2318      	movs	r3, #24
 8014ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ed0:	e023      	b.n	8014f1a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8014ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	d902      	bls.n	8014ede <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8014ed8:	2310      	movs	r3, #16
 8014eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014edc:	e01d      	b.n	8014f1a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8014ede:	4b1f      	ldr	r3, [pc, #124]	; (8014f5c <_txe_thread_create+0x1d8>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8014ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee6:	4a1e      	ldr	r2, [pc, #120]	; (8014f60 <_txe_thread_create+0x1dc>)
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	d101      	bne.n	8014ef0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014eec:	2313      	movs	r3, #19
 8014eee:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ef0:	f3ef 8305 	mrs	r3, IPSR
 8014ef4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014ef6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014ef8:	4b1a      	ldr	r3, [pc, #104]	; (8014f64 <_txe_thread_create+0x1e0>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	4313      	orrs	r3, r2
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d00b      	beq.n	8014f1a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014f02:	f3ef 8305 	mrs	r3, IPSR
 8014f06:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014f08:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014f0a:	4b16      	ldr	r3, [pc, #88]	; (8014f64 <_txe_thread_create+0x1e0>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	4313      	orrs	r3, r2
 8014f10:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014f14:	d201      	bcs.n	8014f1a <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014f16:	2313      	movs	r3, #19
 8014f18:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d112      	bne.n	8014f46 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8014f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f22:	9305      	str	r3, [sp, #20]
 8014f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f26:	9304      	str	r3, [sp, #16]
 8014f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f2a:	9303      	str	r3, [sp, #12]
 8014f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f2e:	9302      	str	r3, [sp, #8]
 8014f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f32:	9301      	str	r3, [sp, #4]
 8014f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	687a      	ldr	r2, [r7, #4]
 8014f3c:	68b9      	ldr	r1, [r7, #8]
 8014f3e:	68f8      	ldr	r0, [r7, #12]
 8014f40:	f7fe f8f2 	bl	8013128 <_tx_thread_create>
 8014f44:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8014f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3750      	adds	r7, #80	; 0x50
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	240023cc 	.word	0x240023cc
 8014f54:	240023bc 	.word	0x240023bc
 8014f58:	240023c4 	.word	0x240023c4
 8014f5c:	240023d0 	.word	0x240023d0
 8014f60:	24002470 	.word	0x24002470
 8014f64:	2400008c 	.word	0x2400008c

08014f68 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014f70:	f3ef 8305 	mrs	r3, IPSR
 8014f74:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8014f76:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014f78:	4b0f      	ldr	r3, [pc, #60]	; (8014fb8 <_txe_thread_delete+0x50>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	4313      	orrs	r3, r2
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d002      	beq.n	8014f88 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8014f82:	2313      	movs	r3, #19
 8014f84:	60fb      	str	r3, [r7, #12]
 8014f86:	e011      	b.n	8014fac <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d102      	bne.n	8014f94 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014f8e:	230e      	movs	r3, #14
 8014f90:	60fb      	str	r3, [r7, #12]
 8014f92:	e00b      	b.n	8014fac <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	4a08      	ldr	r2, [pc, #32]	; (8014fbc <_txe_thread_delete+0x54>)
 8014f9a:	4293      	cmp	r3, r2
 8014f9c:	d002      	beq.n	8014fa4 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014f9e:	230e      	movs	r3, #14
 8014fa0:	60fb      	str	r3, [r7, #12]
 8014fa2:	e003      	b.n	8014fac <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f7fe f9b5 	bl	8013314 <_tx_thread_delete>
 8014faa:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014fac:	68fb      	ldr	r3, [r7, #12]
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3710      	adds	r7, #16
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	2400008c 	.word	0x2400008c
 8014fbc:	54485244 	.word	0x54485244

08014fc0 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8014fc6:	4b0a      	ldr	r3, [pc, #40]	; (8014ff0 <_txe_thread_relinquish+0x30>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d00a      	beq.n	8014fe8 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014fd2:	f3ef 8305 	mrs	r3, IPSR
 8014fd6:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 8014fd8:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8014fda:	4b06      	ldr	r3, [pc, #24]	; (8014ff4 <_txe_thread_relinquish+0x34>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	4313      	orrs	r3, r2
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d101      	bne.n	8014fe8 <_txe_thread_relinquish+0x28>
        {
        
            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 8014fe4:	f7fe fabe 	bl	8013564 <_tx_thread_relinquish>
        }
    }
}
 8014fe8:	bf00      	nop
 8014fea:	3708      	adds	r7, #8
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	240023d0 	.word	0x240023d0
 8014ff4:	2400008c 	.word	0x2400008c

08014ff8 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d102      	bne.n	801500c <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8015006:	230e      	movs	r3, #14
 8015008:	60fb      	str	r3, [r7, #12]
 801500a:	e00b      	b.n	8015024 <_txe_thread_resume+0x2c>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	4a07      	ldr	r2, [pc, #28]	; (8015030 <_txe_thread_resume+0x38>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d002      	beq.n	801501c <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8015016:	230e      	movs	r3, #14
 8015018:	60fb      	str	r3, [r7, #12]
 801501a:	e003      	b.n	8015024 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7fe fb07 	bl	8013630 <_tx_thread_resume>
 8015022:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8015024:	68fb      	ldr	r3, [r7, #12]
}
 8015026:	4618      	mov	r0, r3
 8015028:	3710      	adds	r7, #16
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	54485244 	.word	0x54485244

08015034 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b084      	sub	sp, #16
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d102      	bne.n	8015048 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8015042:	2315      	movs	r3, #21
 8015044:	60fb      	str	r3, [r7, #12]
 8015046:	e00b      	b.n	8015060 <_txe_timer_activate+0x2c>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4a07      	ldr	r2, [pc, #28]	; (801506c <_txe_timer_activate+0x38>)
 801504e:	4293      	cmp	r3, r2
 8015050:	d002      	beq.n	8015058 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8015052:	2315      	movs	r3, #21
 8015054:	60fb      	str	r3, [r7, #12]
 8015056:	e003      	b.n	8015060 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7fe fef5 	bl	8013e48 <_tx_timer_activate>
 801505e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8015060:	68fb      	ldr	r3, [r7, #12]
}
 8015062:	4618      	mov	r0, r3
 8015064:	3710      	adds	r7, #16
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
 801506a:	bf00      	nop
 801506c:	4154494d 	.word	0x4154494d

08015070 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b096      	sub	sp, #88	; 0x58
 8015074:	af04      	add	r7, sp, #16
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	60b9      	str	r1, [r7, #8]
 801507a:	607a      	str	r2, [r7, #4]
 801507c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801507e:	2300      	movs	r3, #0
 8015080:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d102      	bne.n	801508e <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8015088:	2315      	movs	r3, #21
 801508a:	647b      	str	r3, [r7, #68]	; 0x44
 801508c:	e059      	b.n	8015142 <_txe_timer_create+0xd2>
    }
    
    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 801508e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015090:	2b2c      	cmp	r3, #44	; 0x2c
 8015092:	d002      	beq.n	801509a <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8015094:	2315      	movs	r3, #21
 8015096:	647b      	str	r3, [r7, #68]	; 0x44
 8015098:	e053      	b.n	8015142 <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801509a:	f3ef 8310 	mrs	r3, PRIMASK
 801509e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80150a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80150a2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80150a4:	b672      	cpsid	i
    return(int_posture);
 80150a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80150a8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80150aa:	4b41      	ldr	r3, [pc, #260]	; (80151b0 <_txe_timer_create+0x140>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	3301      	adds	r3, #1
 80150b0:	4a3f      	ldr	r2, [pc, #252]	; (80151b0 <_txe_timer_create+0x140>)
 80150b2:	6013      	str	r3, [r2, #0]
 80150b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ba:	f383 8810 	msr	PRIMASK, r3
}
 80150be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 80150c0:	4b3c      	ldr	r3, [pc, #240]	; (80151b4 <_txe_timer_create+0x144>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 80150c6:	2300      	movs	r3, #0
 80150c8:	643b      	str	r3, [r7, #64]	; 0x40
 80150ca:	e009      	b.n	80150e0 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 80150cc:	68fa      	ldr	r2, [r7, #12]
 80150ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d00b      	beq.n	80150ec <_txe_timer_create+0x7c>
            }
            else
            {
        
                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 80150d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 80150da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150dc:	3301      	adds	r3, #1
 80150de:	643b      	str	r3, [r7, #64]	; 0x40
 80150e0:	4b35      	ldr	r3, [pc, #212]	; (80151b8 <_txe_timer_create+0x148>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d3f0      	bcc.n	80150cc <_txe_timer_create+0x5c>
 80150ea:	e000      	b.n	80150ee <_txe_timer_create+0x7e>
                break;
 80150ec:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80150ee:	f3ef 8310 	mrs	r3, PRIMASK
 80150f2:	623b      	str	r3, [r7, #32]
    return(posture);
 80150f4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80150f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80150f8:	b672      	cpsid	i
    return(int_posture);
 80150fa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80150fc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80150fe:	4b2c      	ldr	r3, [pc, #176]	; (80151b0 <_txe_timer_create+0x140>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	3b01      	subs	r3, #1
 8015104:	4a2a      	ldr	r2, [pc, #168]	; (80151b0 <_txe_timer_create+0x140>)
 8015106:	6013      	str	r3, [r2, #0]
 8015108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801510a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510e:	f383 8810 	msr	PRIMASK, r3
}
 8015112:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015114:	f7fe fbb8 	bl	8013888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 8015118:	68fa      	ldr	r2, [r7, #12]
 801511a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801511c:	429a      	cmp	r2, r3
 801511e:	d102      	bne.n	8015126 <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 8015120:	2315      	movs	r3, #21
 8015122:	647b      	str	r3, [r7, #68]	; 0x44
 8015124:	e00d      	b.n	8015142 <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 8015126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015128:	2b00      	cmp	r3, #0
 801512a:	d102      	bne.n	8015132 <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 801512c:	2316      	movs	r3, #22
 801512e:	647b      	str	r3, [r7, #68]	; 0x44
 8015130:	e007      	b.n	8015142 <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 8015132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015134:	2b01      	cmp	r3, #1
 8015136:	d004      	beq.n	8015142 <_txe_timer_create+0xd2>
            {
    
                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 8015138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801513a:	2b00      	cmp	r3, #0
 801513c:	d001      	beq.n	8015142 <_txe_timer_create+0xd2>
                {
        
                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 801513e:	2317      	movs	r3, #23
 8015140:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015144:	2b00      	cmp	r3, #0
 8015146:	d11d      	bne.n	8015184 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8015148:	4b1c      	ldr	r3, [pc, #112]	; (80151bc <_txe_timer_create+0x14c>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801514e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015150:	4a1b      	ldr	r2, [pc, #108]	; (80151c0 <_txe_timer_create+0x150>)
 8015152:	4293      	cmp	r3, r2
 8015154:	d101      	bne.n	801515a <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8015156:	2313      	movs	r3, #19
 8015158:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801515a:	f3ef 8305 	mrs	r3, IPSR
 801515e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015160:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015162:	4b18      	ldr	r3, [pc, #96]	; (80151c4 <_txe_timer_create+0x154>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	4313      	orrs	r3, r2
 8015168:	2b00      	cmp	r3, #0
 801516a:	d00b      	beq.n	8015184 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801516c:	f3ef 8305 	mrs	r3, IPSR
 8015170:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015172:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015174:	4b13      	ldr	r3, [pc, #76]	; (80151c4 <_txe_timer_create+0x154>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	4313      	orrs	r3, r2
 801517a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801517e:	d201      	bcs.n	8015184 <_txe_timer_create+0x114>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015180:	2313      	movs	r3, #19
 8015182:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015186:	2b00      	cmp	r3, #0
 8015188:	d10c      	bne.n	80151a4 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 801518a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801518c:	9302      	str	r3, [sp, #8]
 801518e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015190:	9301      	str	r3, [sp, #4]
 8015192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015194:	9300      	str	r3, [sp, #0]
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	687a      	ldr	r2, [r7, #4]
 801519a:	68b9      	ldr	r1, [r7, #8]
 801519c:	68f8      	ldr	r0, [r7, #12]
 801519e:	f7fe fe7f 	bl	8013ea0 <_tx_timer_create>
 80151a2:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 80151a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3748      	adds	r7, #72	; 0x48
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	240023cc 	.word	0x240023cc
 80151b4:	24002528 	.word	0x24002528
 80151b8:	24002934 	.word	0x24002934
 80151bc:	240023d0 	.word	0x240023d0
 80151c0:	24002470 	.word	0x24002470
 80151c4:	2400008c 	.word	0x2400008c

080151c8 <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b086      	sub	sp, #24
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80151d0:	2300      	movs	r3, #0
 80151d2:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d102      	bne.n	80151e0 <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80151da:	2315      	movs	r3, #21
 80151dc:	617b      	str	r3, [r7, #20]
 80151de:	e023      	b.n	8015228 <_txe_timer_delete+0x60>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	4a13      	ldr	r2, [pc, #76]	; (8015234 <_txe_timer_delete+0x6c>)
 80151e6:	4293      	cmp	r3, r2
 80151e8:	d002      	beq.n	80151f0 <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80151ea:	2315      	movs	r3, #21
 80151ec:	617b      	str	r3, [r7, #20]
 80151ee:	e01b      	b.n	8015228 <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80151f0:	f3ef 8305 	mrs	r3, IPSR
 80151f4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80151f6:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80151f8:	4b0f      	ldr	r3, [pc, #60]	; (8015238 <_txe_timer_delete+0x70>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	4313      	orrs	r3, r2
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d002      	beq.n	8015208 <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8015202:	2313      	movs	r3, #19
 8015204:	617b      	str	r3, [r7, #20]
 8015206:	e00f      	b.n	8015228 <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8015208:	4b0c      	ldr	r3, [pc, #48]	; (801523c <_txe_timer_delete+0x74>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	4a0b      	ldr	r2, [pc, #44]	; (8015240 <_txe_timer_delete+0x78>)
 8015212:	4293      	cmp	r3, r2
 8015214:	d101      	bne.n	801521a <_txe_timer_delete+0x52>
        {
        
            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8015216:	2313      	movs	r3, #19
 8015218:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 801521a:	697b      	ldr	r3, [r7, #20]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d103      	bne.n	8015228 <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7fe fea1 	bl	8013f68 <_tx_timer_delete>
 8015226:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8015228:	697b      	ldr	r3, [r7, #20]
}
 801522a:	4618      	mov	r0, r3
 801522c:	3718      	adds	r7, #24
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	4154494d 	.word	0x4154494d
 8015238:	2400008c 	.word	0x2400008c
 801523c:	240023d0 	.word	0x240023d0
 8015240:	24002470 	.word	0x24002470

08015244 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b08c      	sub	sp, #48	; 0x30
 8015248:	af08      	add	r7, sp, #32
 801524a:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 801524c:	2300      	movs	r3, #0
 801524e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN MX_NetXDuo_Init */
  //Avoid HAL and Thread calls in this function, wait for thread creation
  //TX_BYTE_POOL *byte_pool is the 'ThreadX Byte Pool' defined in CubeMX
  //NX_PACKET_POOL AppPool is the 'NetXDuo Memory Pool' defined in CubeMX
  printf("NX_PACKET_POOL_SIZE=%u\r\n",NX_PACKET_POOL_SIZE);
 8015254:	f643 6158 	movw	r1, #15960	; 0x3e58
 8015258:	4876      	ldr	r0, [pc, #472]	; (8015434 <MX_NetXDuo_Init+0x1f0>)
 801525a:	f000 fa51 	bl	8015700 <iprintf>

  //Allocate the memory for packet_pool.
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer,  NX_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 801525e:	2300      	movs	r3, #0
 8015260:	f643 6258 	movw	r2, #15960	; 0x3e58
 8015264:	4974      	ldr	r1, [pc, #464]	; (8015438 <MX_NetXDuo_Init+0x1f4>)
 8015266:	68b8      	ldr	r0, [r7, #8]
 8015268:	f7ff f8fc 	bl	8014464 <_txe_byte_allocate>
 801526c:	4603      	mov	r3, r0
 801526e:	2b00      	cmp	r3, #0
 8015270:	d001      	beq.n	8015276 <MX_NetXDuo_Init+0x32>
  {
    return TX_POOL_ERROR;
 8015272:	2302      	movs	r3, #2
 8015274:	e0da      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  //Create the Packet pool to be used for packet allocation
  ret = nx_packet_pool_create(&nx.AppPool, "Main Packet Pool", PAYLOAD_SIZE, nx.pointer, NX_PACKET_POOL_SIZE);
 8015276:	4b71      	ldr	r3, [pc, #452]	; (801543c <MX_NetXDuo_Init+0x1f8>)
 8015278:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	223c      	movs	r2, #60	; 0x3c
 8015280:	9201      	str	r2, [sp, #4]
 8015282:	f643 6258 	movw	r2, #15960	; 0x3e58
 8015286:	9200      	str	r2, [sp, #0]
 8015288:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801528c:	496c      	ldr	r1, [pc, #432]	; (8015440 <MX_NetXDuo_Init+0x1fc>)
 801528e:	486d      	ldr	r0, [pc, #436]	; (8015444 <MX_NetXDuo_Init+0x200>)
 8015290:	f7fb fe6a 	bl	8010f68 <_nxe_packet_pool_create>
 8015294:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d001      	beq.n	80152a0 <MX_NetXDuo_Init+0x5c>
  {
    return NX_NOT_ENABLED;
 801529c:	2314      	movs	r3, #20
 801529e:	e0c5      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  //Allocate the memory for Ip_Instance
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer,   2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80152a0:	2300      	movs	r3, #0
 80152a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152a6:	4964      	ldr	r1, [pc, #400]	; (8015438 <MX_NetXDuo_Init+0x1f4>)
 80152a8:	68b8      	ldr	r0, [r7, #8]
 80152aa:	f7ff f8db 	bl	8014464 <_txe_byte_allocate>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d001      	beq.n	80152b8 <MX_NetXDuo_Init+0x74>
  {
    return TX_POOL_ERROR;
 80152b4:	2302      	movs	r3, #2
 80152b6:	e0b9      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  //Create the main NX_IP instance
  ret = nx_ip_create(&nx.IpInstance, "Main Ip instance", NULL_ADDRESS, NULL_ADDRESS, &nx.AppPool,nx_stm32_eth_driver,nx.pointer, 2 * DEFAULT_MEMORY_SIZE, DEFAULT_PRIORITY);
 80152b8:	4b60      	ldr	r3, [pc, #384]	; (801543c <MX_NetXDuo_Init+0x1f8>)
 80152ba:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80152c4:	9205      	str	r2, [sp, #20]
 80152c6:	220a      	movs	r2, #10
 80152c8:	9204      	str	r2, [sp, #16]
 80152ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152ce:	9203      	str	r2, [sp, #12]
 80152d0:	9302      	str	r3, [sp, #8]
 80152d2:	4b5d      	ldr	r3, [pc, #372]	; (8015448 <MX_NetXDuo_Init+0x204>)
 80152d4:	9301      	str	r3, [sp, #4]
 80152d6:	4b5b      	ldr	r3, [pc, #364]	; (8015444 <MX_NetXDuo_Init+0x200>)
 80152d8:	9300      	str	r3, [sp, #0]
 80152da:	2300      	movs	r3, #0
 80152dc:	2200      	movs	r2, #0
 80152de:	495b      	ldr	r1, [pc, #364]	; (801544c <MX_NetXDuo_Init+0x208>)
 80152e0:	485b      	ldr	r0, [pc, #364]	; (8015450 <MX_NetXDuo_Init+0x20c>)
 80152e2:	f7fb fd2b 	bl	8010d3c <_nxe_ip_create>
 80152e6:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d001      	beq.n	80152f2 <MX_NetXDuo_Init+0xae>
  {
    return NX_NOT_ENABLED;
 80152ee:	2314      	movs	r3, #20
 80152f0:	e09c      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  // Allocate the memory for ARP
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer, DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80152f2:	2300      	movs	r3, #0
 80152f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80152f8:	494f      	ldr	r1, [pc, #316]	; (8015438 <MX_NetXDuo_Init+0x1f4>)
 80152fa:	68b8      	ldr	r0, [r7, #8]
 80152fc:	f7ff f8b2 	bl	8014464 <_txe_byte_allocate>
 8015300:	4603      	mov	r3, r0
 8015302:	2b00      	cmp	r3, #0
 8015304:	d001      	beq.n	801530a <MX_NetXDuo_Init+0xc6>
  {
    return TX_POOL_ERROR;
 8015306:	2302      	movs	r3, #2
 8015308:	e090      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  //Enable the ARP protocol and provide the ARP cache size for the IP instance
  ret = nx_arp_enable(&nx.IpInstance, (VOID *)nx.pointer, DEFAULT_MEMORY_SIZE);
 801530a:	4b4c      	ldr	r3, [pc, #304]	; (801543c <MX_NetXDuo_Init+0x1f8>)
 801530c:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015316:	4619      	mov	r1, r3
 8015318:	484d      	ldr	r0, [pc, #308]	; (8015450 <MX_NetXDuo_Init+0x20c>)
 801531a:	f7fb fc01 	bl	8010b20 <_nxe_arp_enable>
 801531e:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d001      	beq.n	801532a <MX_NetXDuo_Init+0xe6>
  {
    return NX_NOT_ENABLED;
 8015326:	2314      	movs	r3, #20
 8015328:	e080      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  //Enable the ICMP
  ret = nx_icmp_enable(&nx.IpInstance);
 801532a:	4849      	ldr	r0, [pc, #292]	; (8015450 <MX_NetXDuo_Init+0x20c>)
 801532c:	f7fb fc44 	bl	8010bb8 <_nxe_icmp_enable>
 8015330:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d001      	beq.n	801533c <MX_NetXDuo_Init+0xf8>
  {
    return NX_NOT_ENABLED;
 8015338:	2314      	movs	r3, #20
 801533a:	e077      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  // Enable the UDP protocol required for  DHCP communication
  ret = nx_udp_enable(&nx.IpInstance);
 801533c:	4844      	ldr	r0, [pc, #272]	; (8015450 <MX_NetXDuo_Init+0x20c>)
 801533e:	f7fb ff85 	bl	801124c <_nxe_udp_enable>
 8015342:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d001      	beq.n	801534e <MX_NetXDuo_Init+0x10a>
  {
    return NX_NOT_ENABLED;
 801534a:	2314      	movs	r3, #20
 801534c:	e06e      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  // Enable the TCP protocol
  ret = nx_tcp_enable(&nx.IpInstance);
 801534e:	4840      	ldr	r0, [pc, #256]	; (8015450 <MX_NetXDuo_Init+0x20c>)
 8015350:	f7fb ff44 	bl	80111dc <_nxe_tcp_enable>
 8015354:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d001      	beq.n	8015360 <MX_NetXDuo_Init+0x11c>
  {
    return NX_NOT_ENABLED;
 801535c:	2314      	movs	r3, #20
 801535e:	e065      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  // Allocate the memory for main thread
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8015360:	2300      	movs	r3, #0
 8015362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015366:	4934      	ldr	r1, [pc, #208]	; (8015438 <MX_NetXDuo_Init+0x1f4>)
 8015368:	68b8      	ldr	r0, [r7, #8]
 801536a:	f7ff f87b 	bl	8014464 <_txe_byte_allocate>
 801536e:	4603      	mov	r3, r0
 8015370:	2b00      	cmp	r3, #0
 8015372:	d001      	beq.n	8015378 <MX_NetXDuo_Init+0x134>
  {
    return TX_POOL_ERROR;
 8015374:	2302      	movs	r3, #2
 8015376:	e059      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  // Create the main thread
  ret = tx_thread_create(&nx.AppMainThread, "App Main thread", App_Main_Thread_Entry, 0, nx.pointer, 2 * DEFAULT_MEMORY_SIZE,DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);
 8015378:	4b30      	ldr	r3, [pc, #192]	; (801543c <MX_NetXDuo_Init+0x1f8>)
 801537a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	22b0      	movs	r2, #176	; 0xb0
 8015382:	9206      	str	r2, [sp, #24]
 8015384:	2201      	movs	r2, #1
 8015386:	9205      	str	r2, [sp, #20]
 8015388:	2200      	movs	r2, #0
 801538a:	9204      	str	r2, [sp, #16]
 801538c:	220a      	movs	r2, #10
 801538e:	9203      	str	r2, [sp, #12]
 8015390:	220a      	movs	r2, #10
 8015392:	9202      	str	r2, [sp, #8]
 8015394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015398:	9201      	str	r2, [sp, #4]
 801539a:	9300      	str	r3, [sp, #0]
 801539c:	2300      	movs	r3, #0
 801539e:	4a2d      	ldr	r2, [pc, #180]	; (8015454 <MX_NetXDuo_Init+0x210>)
 80153a0:	492d      	ldr	r1, [pc, #180]	; (8015458 <MX_NetXDuo_Init+0x214>)
 80153a2:	482e      	ldr	r0, [pc, #184]	; (801545c <MX_NetXDuo_Init+0x218>)
 80153a4:	f7ff fcee 	bl	8014d84 <_txe_thread_create>
 80153a8:	60f8      	str	r0, [r7, #12]
  if (ret != TX_SUCCESS)
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d001      	beq.n	80153b4 <MX_NetXDuo_Init+0x170>
  {
    return NX_NOT_ENABLED;
 80153b0:	2314      	movs	r3, #20
 80153b2:	e03b      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  // Allocate the memory for TCP server thread
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80153b4:	2300      	movs	r3, #0
 80153b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80153ba:	491f      	ldr	r1, [pc, #124]	; (8015438 <MX_NetXDuo_Init+0x1f4>)
 80153bc:	68b8      	ldr	r0, [r7, #8]
 80153be:	f7ff f851 	bl	8014464 <_txe_byte_allocate>
 80153c2:	4603      	mov	r3, r0
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d001      	beq.n	80153cc <MX_NetXDuo_Init+0x188>
  {
    return TX_POOL_ERROR;
 80153c8:	2302      	movs	r3, #2
 80153ca:	e02f      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  // create the TCP server thread
  ret = tx_thread_create(&nx.AppTCPThread, "App TCP Thread", App_TCP_Thread_Entry, 0, nx.pointer, 2 * DEFAULT_MEMORY_SIZE,DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);
 80153cc:	4b1b      	ldr	r3, [pc, #108]	; (801543c <MX_NetXDuo_Init+0x1f8>)
 80153ce:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	22b0      	movs	r2, #176	; 0xb0
 80153d6:	9206      	str	r2, [sp, #24]
 80153d8:	2200      	movs	r2, #0
 80153da:	9205      	str	r2, [sp, #20]
 80153dc:	2200      	movs	r2, #0
 80153de:	9204      	str	r2, [sp, #16]
 80153e0:	220a      	movs	r2, #10
 80153e2:	9203      	str	r2, [sp, #12]
 80153e4:	220a      	movs	r2, #10
 80153e6:	9202      	str	r2, [sp, #8]
 80153e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80153ec:	9201      	str	r2, [sp, #4]
 80153ee:	9300      	str	r3, [sp, #0]
 80153f0:	2300      	movs	r3, #0
 80153f2:	4a1b      	ldr	r2, [pc, #108]	; (8015460 <MX_NetXDuo_Init+0x21c>)
 80153f4:	491b      	ldr	r1, [pc, #108]	; (8015464 <MX_NetXDuo_Init+0x220>)
 80153f6:	481c      	ldr	r0, [pc, #112]	; (8015468 <MX_NetXDuo_Init+0x224>)
 80153f8:	f7ff fcc4 	bl	8014d84 <_txe_thread_create>
 80153fc:	60f8      	str	r0, [r7, #12]
  if (ret != TX_SUCCESS)
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d001      	beq.n	8015408 <MX_NetXDuo_Init+0x1c4>
  {
    return NX_NOT_ENABLED;
 8015404:	2314      	movs	r3, #20
 8015406:	e011      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  // create the DHCP client
  ret = nx_dhcp_create(&nx.DHCPClient, &nx.IpInstance, "DHCP Client");
 8015408:	4a18      	ldr	r2, [pc, #96]	; (801546c <MX_NetXDuo_Init+0x228>)
 801540a:	4911      	ldr	r1, [pc, #68]	; (8015450 <MX_NetXDuo_Init+0x20c>)
 801540c:	4818      	ldr	r0, [pc, #96]	; (8015470 <MX_NetXDuo_Init+0x22c>)
 801540e:	f7ef fd91 	bl	8004f34 <_nxe_dhcp_create>
 8015412:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d001      	beq.n	801541e <MX_NetXDuo_Init+0x1da>
  {
    return NX_NOT_ENABLED;
 801541a:	2314      	movs	r3, #20
 801541c:	e006      	b.n	801542c <MX_NetXDuo_Init+0x1e8>
  }

  tx_semaphore_create(&nx.Semaphore, "App Semaphore", 0); // set DHCP notification callback
 801541e:	231c      	movs	r3, #28
 8015420:	2200      	movs	r2, #0
 8015422:	4914      	ldr	r1, [pc, #80]	; (8015474 <MX_NetXDuo_Init+0x230>)
 8015424:	4814      	ldr	r0, [pc, #80]	; (8015478 <MX_NetXDuo_Init+0x234>)
 8015426:	f7ff fbb7 	bl	8014b98 <_txe_semaphore_create>
  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 801542a:	68fb      	ldr	r3, [r7, #12]
}
 801542c:	4618      	mov	r0, r3
 801542e:	3710      	adds	r7, #16
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	08016b68 	.word	0x08016b68
 8015438:	24005340 	.word	0x24005340
 801543c:	24002940 	.word	0x24002940
 8015440:	08016b84 	.word	0x08016b84
 8015444:	24002ac4 	.word	0x24002ac4
 8015448:	08007049 	.word	0x08007049
 801544c:	08016b98 	.word	0x08016b98
 8015450:	24002b08 	.word	0x24002b08
 8015454:	0801547d 	.word	0x0801547d
 8015458:	08016bac 	.word	0x08016bac
 801545c:	24002948 	.word	0x24002948
 8015460:	080155e5 	.word	0x080155e5
 8015464:	08016bbc 	.word	0x08016bbc
 8015468:	240029f8 	.word	0x240029f8
 801546c:	08016bcc 	.word	0x08016bcc
 8015470:	240032cc 	.word	0x240032cc
 8015474:	08016bd8 	.word	0x08016bd8
 8015478:	24002aa8 	.word	0x24002aa8

0801547c <App_Main_Thread_Entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID App_Main_Thread_Entry(ULONG thread_input)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b084      	sub	sp, #16
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
	UINT ret;

	ret = nx_ip_address_change_notify(&nx.IpInstance, ip_address_change_notify_callback, NULL);
 8015484:	2200      	movs	r2, #0
 8015486:	4939      	ldr	r1, [pc, #228]	; (801556c <App_Main_Thread_Entry+0xf0>)
 8015488:	4839      	ldr	r0, [pc, #228]	; (8015570 <App_Main_Thread_Entry+0xf4>)
 801548a:	f7fb fbd5 	bl	8010c38 <_nxe_ip_address_change_notify>
 801548e:	60f8      	str	r0, [r7, #12]
	if (ret != NX_SUCCESS)
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d008      	beq.n	80154a8 <App_Main_Thread_Entry+0x2c>
	{
		printf("F:nx_ip_address_change_notify\r\n");
 8015496:	4837      	ldr	r0, [pc, #220]	; (8015574 <App_Main_Thread_Entry+0xf8>)
 8015498:	f000 f9b8 	bl	801580c <puts>
		nx.fCount++;
 801549c:	4b36      	ldr	r3, [pc, #216]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	3301      	adds	r3, #1
 80154a2:	4a35      	ldr	r2, [pc, #212]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 80154a4:	6053      	str	r3, [r2, #4]
 80154a6:	e007      	b.n	80154b8 <App_Main_Thread_Entry+0x3c>
	}
 	else
 	{
 		printf("S:nx_ip_address_change_notify\r\n");
 80154a8:	4834      	ldr	r0, [pc, #208]	; (801557c <App_Main_Thread_Entry+0x100>)
 80154aa:	f000 f9af 	bl	801580c <puts>
 		nx.sCount++;
 80154ae:	4b32      	ldr	r3, [pc, #200]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	3301      	adds	r3, #1
 80154b4:	4a30      	ldr	r2, [pc, #192]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 80154b6:	6013      	str	r3, [r2, #0]
 	}

	ret = nx_dhcp_start(&nx.DHCPClient);
 80154b8:	4831      	ldr	r0, [pc, #196]	; (8015580 <App_Main_Thread_Entry+0x104>)
 80154ba:	f7ef ff11 	bl	80052e0 <_nxe_dhcp_start>
 80154be:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d008      	beq.n	80154d8 <App_Main_Thread_Entry+0x5c>
  {
  	printf("F:nx_dhcp_start\r\n");
 80154c6:	482f      	ldr	r0, [pc, #188]	; (8015584 <App_Main_Thread_Entry+0x108>)
 80154c8:	f000 f9a0 	bl	801580c <puts>
  	nx.fCount++;
 80154cc:	4b2a      	ldr	r3, [pc, #168]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	3301      	adds	r3, #1
 80154d2:	4a29      	ldr	r2, [pc, #164]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 80154d4:	6053      	str	r3, [r2, #4]
 80154d6:	e007      	b.n	80154e8 <App_Main_Thread_Entry+0x6c>
  }
  else
  {
  	printf("S:nx_dhcp_start\r\n");
 80154d8:	482b      	ldr	r0, [pc, #172]	; (8015588 <App_Main_Thread_Entry+0x10c>)
 80154da:	f000 f997 	bl	801580c <puts>
  	nx.sCount++;
 80154de:	4b26      	ldr	r3, [pc, #152]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	3301      	adds	r3, #1
 80154e4:	4a24      	ldr	r2, [pc, #144]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 80154e6:	6013      	str	r3, [r2, #0]
  }

  printf("I:tx_semaphore_get\r\n");
 80154e8:	4828      	ldr	r0, [pc, #160]	; (801558c <App_Main_Thread_Entry+0x110>)
 80154ea:	f000 f98f 	bl	801580c <puts>
  if(tx_semaphore_get(&nx.Semaphore, TX_WAIT_FOREVER) != TX_SUCCESS) // wait until an IP address is ready
 80154ee:	f04f 31ff 	mov.w	r1, #4294967295
 80154f2:	4827      	ldr	r0, [pc, #156]	; (8015590 <App_Main_Thread_Entry+0x114>)
 80154f4:	f7ff fbe6 	bl	8014cc4 <_txe_semaphore_get>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d008      	beq.n	8015510 <App_Main_Thread_Entry+0x94>
  {
  	printf("F:tx_semaphore_get\r\n");
 80154fe:	4825      	ldr	r0, [pc, #148]	; (8015594 <App_Main_Thread_Entry+0x118>)
 8015500:	f000 f984 	bl	801580c <puts>
  	nx.fCount++;
 8015504:	4b1c      	ldr	r3, [pc, #112]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	3301      	adds	r3, #1
 801550a:	4a1b      	ldr	r2, [pc, #108]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 801550c:	6053      	str	r3, [r2, #4]
 801550e:	e007      	b.n	8015520 <App_Main_Thread_Entry+0xa4>
  }
  else
  {
  	printf("S:tx_semaphore_get\r\n");
 8015510:	4821      	ldr	r0, [pc, #132]	; (8015598 <App_Main_Thread_Entry+0x11c>)
 8015512:	f000 f97b 	bl	801580c <puts>
  	nx.sCount++;
 8015516:	4b18      	ldr	r3, [pc, #96]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	3301      	adds	r3, #1
 801551c:	4a16      	ldr	r2, [pc, #88]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 801551e:	6013      	str	r3, [r2, #0]
  }

  ret = nx_ip_address_get(&nx.IpInstance, &nx.IpAddress, &nx.NetMask);
 8015520:	4a1e      	ldr	r2, [pc, #120]	; (801559c <App_Main_Thread_Entry+0x120>)
 8015522:	491f      	ldr	r1, [pc, #124]	; (80155a0 <App_Main_Thread_Entry+0x124>)
 8015524:	4812      	ldr	r0, [pc, #72]	; (8015570 <App_Main_Thread_Entry+0xf4>)
 8015526:	f7fb fbc5 	bl	8010cb4 <_nxe_ip_address_get>
 801552a:	60f8      	str	r0, [r7, #12]
  if (ret != TX_SUCCESS)
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d008      	beq.n	8015544 <App_Main_Thread_Entry+0xc8>
  {
  	printf("F:nx_ip_address_get\r\n");
 8015532:	481c      	ldr	r0, [pc, #112]	; (80155a4 <App_Main_Thread_Entry+0x128>)
 8015534:	f000 f96a 	bl	801580c <puts>
  	nx.fCount++;
 8015538:	4b0f      	ldr	r3, [pc, #60]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 801553a:	685b      	ldr	r3, [r3, #4]
 801553c:	3301      	adds	r3, #1
 801553e:	4a0e      	ldr	r2, [pc, #56]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 8015540:	6053      	str	r3, [r2, #4]
 8015542:	e007      	b.n	8015554 <App_Main_Thread_Entry+0xd8>
  }
  else
  {
  	printf("S:nx_ip_address_get\r\n");
 8015544:	4818      	ldr	r0, [pc, #96]	; (80155a8 <App_Main_Thread_Entry+0x12c>)
 8015546:	f000 f961 	bl	801580c <puts>
  	nx.sCount++;
 801554a:	4b0b      	ldr	r3, [pc, #44]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	3301      	adds	r3, #1
 8015550:	4a09      	ldr	r2, [pc, #36]	; (8015578 <App_Main_Thread_Entry+0xfc>)
 8015552:	6013      	str	r3, [r2, #0]
  }

  /* the network is correctly initialized, start the TCP server thread */
  tx_thread_resume(&nx.AppTCPThread);
 8015554:	4815      	ldr	r0, [pc, #84]	; (80155ac <App_Main_Thread_Entry+0x130>)
 8015556:	f7ff fd4f 	bl	8014ff8 <_txe_thread_resume>
  /* this thread is not needed any more, relinquish it */
  tx_thread_relinquish();
 801555a:	f7ff fd31 	bl	8014fc0 <_txe_thread_relinquish>
  printf("I:***END OF App_Main_Thread_Entry***\r\n");
 801555e:	4814      	ldr	r0, [pc, #80]	; (80155b0 <App_Main_Thread_Entry+0x134>)
 8015560:	f000 f954 	bl	801580c <puts>
  return;
 8015564:	bf00      	nop
}
 8015566:	3710      	adds	r7, #16
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}
 801556c:	080155b5 	.word	0x080155b5
 8015570:	24002b08 	.word	0x24002b08
 8015574:	08016be8 	.word	0x08016be8
 8015578:	24002940 	.word	0x24002940
 801557c:	08016c08 	.word	0x08016c08
 8015580:	240032cc 	.word	0x240032cc
 8015584:	08016c28 	.word	0x08016c28
 8015588:	08016c3c 	.word	0x08016c3c
 801558c:	08016c50 	.word	0x08016c50
 8015590:	24002aa8 	.word	0x24002aa8
 8015594:	08016c64 	.word	0x08016c64
 8015598:	08016c78 	.word	0x08016c78
 801559c:	24002b04 	.word	0x24002b04
 80155a0:	24002b00 	.word	0x24002b00
 80155a4:	08016c8c 	.word	0x08016c8c
 80155a8:	08016ca4 	.word	0x08016ca4
 80155ac:	240029f8 	.word	0x240029f8
 80155b0:	08016cbc 	.word	0x08016cbc

080155b4 <ip_address_change_notify_callback>:
* @param ip_instance: NX_IP instance registered for this callback.
* @param ptr: VOID* user data pointer
* @retval none
*/
static VOID ip_address_change_notify_callback(NX_IP *ip_instance, VOID *ptr)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	6039      	str	r1, [r7, #0]
	printf("I:ip_address_change_notify_callback\r\n");
 80155be:	4806      	ldr	r0, [pc, #24]	; (80155d8 <ip_address_change_notify_callback+0x24>)
 80155c0:	f000 f924 	bl	801580c <puts>
  tx_semaphore_put(&nx.Semaphore);
 80155c4:	4805      	ldr	r0, [pc, #20]	; (80155dc <ip_address_change_notify_callback+0x28>)
 80155c6:	f7ff fbbf 	bl	8014d48 <_txe_semaphore_put>
  printf("S:ip_address_change_notify_callback\r\n");
 80155ca:	4805      	ldr	r0, [pc, #20]	; (80155e0 <ip_address_change_notify_callback+0x2c>)
 80155cc:	f000 f91e 	bl	801580c <puts>
}
 80155d0:	bf00      	nop
 80155d2:	3708      	adds	r7, #8
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}
 80155d8:	08016ce4 	.word	0x08016ce4
 80155dc:	24002aa8 	.word	0x24002aa8
 80155e0:	08016d0c 	.word	0x08016d0c

080155e4 <App_TCP_Thread_Entry>:
* @param thread_input: thread user data
* @retval none
*/

static VOID App_TCP_Thread_Entry(ULONG thread_input)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b084      	sub	sp, #16
 80155e8:	af02      	add	r7, sp, #8
 80155ea:	6078      	str	r0, [r7, #4]
	printf("I:App_TCP_Thread_Entry\r\n");
 80155ec:	4812      	ldr	r0, [pc, #72]	; (8015638 <App_TCP_Thread_Entry+0x54>)
 80155ee:	f000 f90d 	bl	801580c <puts>


  while(1) //Ping responses will now work.
  {
  	HAL_GPIO_TogglePin(GPO_LED_RED_GPIO_Port, GPO_LED_RED_Pin);
 80155f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80155f6:	4811      	ldr	r0, [pc, #68]	; (801563c <App_TCP_Thread_Entry+0x58>)
 80155f8:	f7ee f9ad 	bl	8003956 <HAL_GPIO_TogglePin>
    PRINT_IP_ADDRESS(nx.IpAddress);
 80155fc:	4b10      	ldr	r3, [pc, #64]	; (8015640 <App_TCP_Thread_Entry+0x5c>)
 80155fe:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8015602:	0e19      	lsrs	r1, r3, #24
 8015604:	4b0e      	ldr	r3, [pc, #56]	; (8015640 <App_TCP_Thread_Entry+0x5c>)
 8015606:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801560a:	0c1b      	lsrs	r3, r3, #16
 801560c:	b2d8      	uxtb	r0, r3
 801560e:	4b0c      	ldr	r3, [pc, #48]	; (8015640 <App_TCP_Thread_Entry+0x5c>)
 8015610:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8015614:	0a1b      	lsrs	r3, r3, #8
 8015616:	b2db      	uxtb	r3, r3
 8015618:	4a09      	ldr	r2, [pc, #36]	; (8015640 <App_TCP_Thread_Entry+0x5c>)
 801561a:	f8d2 21c0 	ldr.w	r2, [r2, #448]	; 0x1c0
 801561e:	b2d2      	uxtb	r2, r2
 8015620:	9201      	str	r2, [sp, #4]
 8015622:	9300      	str	r3, [sp, #0]
 8015624:	4603      	mov	r3, r0
 8015626:	460a      	mov	r2, r1
 8015628:	4906      	ldr	r1, [pc, #24]	; (8015644 <App_TCP_Thread_Entry+0x60>)
 801562a:	4807      	ldr	r0, [pc, #28]	; (8015648 <App_TCP_Thread_Entry+0x64>)
 801562c:	f000 f868 	bl	8015700 <iprintf>
    tx_thread_sleep(100); // Thread sleep for 1s
 8015630:	2064      	movs	r0, #100	; 0x64
 8015632:	f7fe f8a9 	bl	8013788 <_tx_thread_sleep>
  	HAL_GPIO_TogglePin(GPO_LED_RED_GPIO_Port, GPO_LED_RED_Pin);
 8015636:	e7dc      	b.n	80155f2 <App_TCP_Thread_Entry+0xe>
 8015638:	08016d34 	.word	0x08016d34
 801563c:	58020400 	.word	0x58020400
 8015640:	24002940 	.word	0x24002940
 8015644:	08016d4c 	.word	0x08016d4c
 8015648:	08016d5c 	.word	0x08016d5c

0801564c <__errno>:
 801564c:	4b01      	ldr	r3, [pc, #4]	; (8015654 <__errno+0x8>)
 801564e:	6818      	ldr	r0, [r3, #0]
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop
 8015654:	24000090 	.word	0x24000090

08015658 <__libc_init_array>:
 8015658:	b570      	push	{r4, r5, r6, lr}
 801565a:	4d0d      	ldr	r5, [pc, #52]	; (8015690 <__libc_init_array+0x38>)
 801565c:	4c0d      	ldr	r4, [pc, #52]	; (8015694 <__libc_init_array+0x3c>)
 801565e:	1b64      	subs	r4, r4, r5
 8015660:	10a4      	asrs	r4, r4, #2
 8015662:	2600      	movs	r6, #0
 8015664:	42a6      	cmp	r6, r4
 8015666:	d109      	bne.n	801567c <__libc_init_array+0x24>
 8015668:	4d0b      	ldr	r5, [pc, #44]	; (8015698 <__libc_init_array+0x40>)
 801566a:	4c0c      	ldr	r4, [pc, #48]	; (801569c <__libc_init_array+0x44>)
 801566c:	f001 f99e 	bl	80169ac <_init>
 8015670:	1b64      	subs	r4, r4, r5
 8015672:	10a4      	asrs	r4, r4, #2
 8015674:	2600      	movs	r6, #0
 8015676:	42a6      	cmp	r6, r4
 8015678:	d105      	bne.n	8015686 <__libc_init_array+0x2e>
 801567a:	bd70      	pop	{r4, r5, r6, pc}
 801567c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015680:	4798      	blx	r3
 8015682:	3601      	adds	r6, #1
 8015684:	e7ee      	b.n	8015664 <__libc_init_array+0xc>
 8015686:	f855 3b04 	ldr.w	r3, [r5], #4
 801568a:	4798      	blx	r3
 801568c:	3601      	adds	r6, #1
 801568e:	e7f2      	b.n	8015676 <__libc_init_array+0x1e>
 8015690:	08016ed4 	.word	0x08016ed4
 8015694:	08016ed4 	.word	0x08016ed4
 8015698:	08016ed4 	.word	0x08016ed4
 801569c:	08016ed8 	.word	0x08016ed8

080156a0 <memcpy>:
 80156a0:	440a      	add	r2, r1
 80156a2:	4291      	cmp	r1, r2
 80156a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80156a8:	d100      	bne.n	80156ac <memcpy+0xc>
 80156aa:	4770      	bx	lr
 80156ac:	b510      	push	{r4, lr}
 80156ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156b6:	4291      	cmp	r1, r2
 80156b8:	d1f9      	bne.n	80156ae <memcpy+0xe>
 80156ba:	bd10      	pop	{r4, pc}

080156bc <memmove>:
 80156bc:	4288      	cmp	r0, r1
 80156be:	b510      	push	{r4, lr}
 80156c0:	eb01 0402 	add.w	r4, r1, r2
 80156c4:	d902      	bls.n	80156cc <memmove+0x10>
 80156c6:	4284      	cmp	r4, r0
 80156c8:	4623      	mov	r3, r4
 80156ca:	d807      	bhi.n	80156dc <memmove+0x20>
 80156cc:	1e43      	subs	r3, r0, #1
 80156ce:	42a1      	cmp	r1, r4
 80156d0:	d008      	beq.n	80156e4 <memmove+0x28>
 80156d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80156da:	e7f8      	b.n	80156ce <memmove+0x12>
 80156dc:	4402      	add	r2, r0
 80156de:	4601      	mov	r1, r0
 80156e0:	428a      	cmp	r2, r1
 80156e2:	d100      	bne.n	80156e6 <memmove+0x2a>
 80156e4:	bd10      	pop	{r4, pc}
 80156e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80156ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80156ee:	e7f7      	b.n	80156e0 <memmove+0x24>

080156f0 <memset>:
 80156f0:	4402      	add	r2, r0
 80156f2:	4603      	mov	r3, r0
 80156f4:	4293      	cmp	r3, r2
 80156f6:	d100      	bne.n	80156fa <memset+0xa>
 80156f8:	4770      	bx	lr
 80156fa:	f803 1b01 	strb.w	r1, [r3], #1
 80156fe:	e7f9      	b.n	80156f4 <memset+0x4>

08015700 <iprintf>:
 8015700:	b40f      	push	{r0, r1, r2, r3}
 8015702:	4b0a      	ldr	r3, [pc, #40]	; (801572c <iprintf+0x2c>)
 8015704:	b513      	push	{r0, r1, r4, lr}
 8015706:	681c      	ldr	r4, [r3, #0]
 8015708:	b124      	cbz	r4, 8015714 <iprintf+0x14>
 801570a:	69a3      	ldr	r3, [r4, #24]
 801570c:	b913      	cbnz	r3, 8015714 <iprintf+0x14>
 801570e:	4620      	mov	r0, r4
 8015710:	f000 fb82 	bl	8015e18 <__sinit>
 8015714:	ab05      	add	r3, sp, #20
 8015716:	9a04      	ldr	r2, [sp, #16]
 8015718:	68a1      	ldr	r1, [r4, #8]
 801571a:	9301      	str	r3, [sp, #4]
 801571c:	4620      	mov	r0, r4
 801571e:	f000 fd6d 	bl	80161fc <_vfiprintf_r>
 8015722:	b002      	add	sp, #8
 8015724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015728:	b004      	add	sp, #16
 801572a:	4770      	bx	lr
 801572c:	24000090 	.word	0x24000090

08015730 <_puts_r>:
 8015730:	b570      	push	{r4, r5, r6, lr}
 8015732:	460e      	mov	r6, r1
 8015734:	4605      	mov	r5, r0
 8015736:	b118      	cbz	r0, 8015740 <_puts_r+0x10>
 8015738:	6983      	ldr	r3, [r0, #24]
 801573a:	b90b      	cbnz	r3, 8015740 <_puts_r+0x10>
 801573c:	f000 fb6c 	bl	8015e18 <__sinit>
 8015740:	69ab      	ldr	r3, [r5, #24]
 8015742:	68ac      	ldr	r4, [r5, #8]
 8015744:	b913      	cbnz	r3, 801574c <_puts_r+0x1c>
 8015746:	4628      	mov	r0, r5
 8015748:	f000 fb66 	bl	8015e18 <__sinit>
 801574c:	4b2c      	ldr	r3, [pc, #176]	; (8015800 <_puts_r+0xd0>)
 801574e:	429c      	cmp	r4, r3
 8015750:	d120      	bne.n	8015794 <_puts_r+0x64>
 8015752:	686c      	ldr	r4, [r5, #4]
 8015754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015756:	07db      	lsls	r3, r3, #31
 8015758:	d405      	bmi.n	8015766 <_puts_r+0x36>
 801575a:	89a3      	ldrh	r3, [r4, #12]
 801575c:	0598      	lsls	r0, r3, #22
 801575e:	d402      	bmi.n	8015766 <_puts_r+0x36>
 8015760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015762:	f000 fc09 	bl	8015f78 <__retarget_lock_acquire_recursive>
 8015766:	89a3      	ldrh	r3, [r4, #12]
 8015768:	0719      	lsls	r1, r3, #28
 801576a:	d51d      	bpl.n	80157a8 <_puts_r+0x78>
 801576c:	6923      	ldr	r3, [r4, #16]
 801576e:	b1db      	cbz	r3, 80157a8 <_puts_r+0x78>
 8015770:	3e01      	subs	r6, #1
 8015772:	68a3      	ldr	r3, [r4, #8]
 8015774:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015778:	3b01      	subs	r3, #1
 801577a:	60a3      	str	r3, [r4, #8]
 801577c:	bb39      	cbnz	r1, 80157ce <_puts_r+0x9e>
 801577e:	2b00      	cmp	r3, #0
 8015780:	da38      	bge.n	80157f4 <_puts_r+0xc4>
 8015782:	4622      	mov	r2, r4
 8015784:	210a      	movs	r1, #10
 8015786:	4628      	mov	r0, r5
 8015788:	f000 f94e 	bl	8015a28 <__swbuf_r>
 801578c:	3001      	adds	r0, #1
 801578e:	d011      	beq.n	80157b4 <_puts_r+0x84>
 8015790:	250a      	movs	r5, #10
 8015792:	e011      	b.n	80157b8 <_puts_r+0x88>
 8015794:	4b1b      	ldr	r3, [pc, #108]	; (8015804 <_puts_r+0xd4>)
 8015796:	429c      	cmp	r4, r3
 8015798:	d101      	bne.n	801579e <_puts_r+0x6e>
 801579a:	68ac      	ldr	r4, [r5, #8]
 801579c:	e7da      	b.n	8015754 <_puts_r+0x24>
 801579e:	4b1a      	ldr	r3, [pc, #104]	; (8015808 <_puts_r+0xd8>)
 80157a0:	429c      	cmp	r4, r3
 80157a2:	bf08      	it	eq
 80157a4:	68ec      	ldreq	r4, [r5, #12]
 80157a6:	e7d5      	b.n	8015754 <_puts_r+0x24>
 80157a8:	4621      	mov	r1, r4
 80157aa:	4628      	mov	r0, r5
 80157ac:	f000 f98e 	bl	8015acc <__swsetup_r>
 80157b0:	2800      	cmp	r0, #0
 80157b2:	d0dd      	beq.n	8015770 <_puts_r+0x40>
 80157b4:	f04f 35ff 	mov.w	r5, #4294967295
 80157b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80157ba:	07da      	lsls	r2, r3, #31
 80157bc:	d405      	bmi.n	80157ca <_puts_r+0x9a>
 80157be:	89a3      	ldrh	r3, [r4, #12]
 80157c0:	059b      	lsls	r3, r3, #22
 80157c2:	d402      	bmi.n	80157ca <_puts_r+0x9a>
 80157c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157c6:	f000 fbd8 	bl	8015f7a <__retarget_lock_release_recursive>
 80157ca:	4628      	mov	r0, r5
 80157cc:	bd70      	pop	{r4, r5, r6, pc}
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	da04      	bge.n	80157dc <_puts_r+0xac>
 80157d2:	69a2      	ldr	r2, [r4, #24]
 80157d4:	429a      	cmp	r2, r3
 80157d6:	dc06      	bgt.n	80157e6 <_puts_r+0xb6>
 80157d8:	290a      	cmp	r1, #10
 80157da:	d004      	beq.n	80157e6 <_puts_r+0xb6>
 80157dc:	6823      	ldr	r3, [r4, #0]
 80157de:	1c5a      	adds	r2, r3, #1
 80157e0:	6022      	str	r2, [r4, #0]
 80157e2:	7019      	strb	r1, [r3, #0]
 80157e4:	e7c5      	b.n	8015772 <_puts_r+0x42>
 80157e6:	4622      	mov	r2, r4
 80157e8:	4628      	mov	r0, r5
 80157ea:	f000 f91d 	bl	8015a28 <__swbuf_r>
 80157ee:	3001      	adds	r0, #1
 80157f0:	d1bf      	bne.n	8015772 <_puts_r+0x42>
 80157f2:	e7df      	b.n	80157b4 <_puts_r+0x84>
 80157f4:	6823      	ldr	r3, [r4, #0]
 80157f6:	250a      	movs	r5, #10
 80157f8:	1c5a      	adds	r2, r3, #1
 80157fa:	6022      	str	r2, [r4, #0]
 80157fc:	701d      	strb	r5, [r3, #0]
 80157fe:	e7db      	b.n	80157b8 <_puts_r+0x88>
 8015800:	08016e60 	.word	0x08016e60
 8015804:	08016e80 	.word	0x08016e80
 8015808:	08016e40 	.word	0x08016e40

0801580c <puts>:
 801580c:	4b02      	ldr	r3, [pc, #8]	; (8015818 <puts+0xc>)
 801580e:	4601      	mov	r1, r0
 8015810:	6818      	ldr	r0, [r3, #0]
 8015812:	f7ff bf8d 	b.w	8015730 <_puts_r>
 8015816:	bf00      	nop
 8015818:	24000090 	.word	0x24000090

0801581c <rand>:
 801581c:	4b17      	ldr	r3, [pc, #92]	; (801587c <rand+0x60>)
 801581e:	b510      	push	{r4, lr}
 8015820:	681c      	ldr	r4, [r3, #0]
 8015822:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015824:	b9b3      	cbnz	r3, 8015854 <rand+0x38>
 8015826:	2018      	movs	r0, #24
 8015828:	f000 fc0c 	bl	8016044 <malloc>
 801582c:	63a0      	str	r0, [r4, #56]	; 0x38
 801582e:	b928      	cbnz	r0, 801583c <rand+0x20>
 8015830:	4602      	mov	r2, r0
 8015832:	4b13      	ldr	r3, [pc, #76]	; (8015880 <rand+0x64>)
 8015834:	4813      	ldr	r0, [pc, #76]	; (8015884 <rand+0x68>)
 8015836:	214e      	movs	r1, #78	; 0x4e
 8015838:	f000 f9b6 	bl	8015ba8 <__assert_func>
 801583c:	4a12      	ldr	r2, [pc, #72]	; (8015888 <rand+0x6c>)
 801583e:	4b13      	ldr	r3, [pc, #76]	; (801588c <rand+0x70>)
 8015840:	e9c0 2300 	strd	r2, r3, [r0]
 8015844:	4b12      	ldr	r3, [pc, #72]	; (8015890 <rand+0x74>)
 8015846:	6083      	str	r3, [r0, #8]
 8015848:	230b      	movs	r3, #11
 801584a:	8183      	strh	r3, [r0, #12]
 801584c:	2201      	movs	r2, #1
 801584e:	2300      	movs	r3, #0
 8015850:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015854:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015856:	480f      	ldr	r0, [pc, #60]	; (8015894 <rand+0x78>)
 8015858:	690a      	ldr	r2, [r1, #16]
 801585a:	694b      	ldr	r3, [r1, #20]
 801585c:	4c0e      	ldr	r4, [pc, #56]	; (8015898 <rand+0x7c>)
 801585e:	4350      	muls	r0, r2
 8015860:	fb04 0003 	mla	r0, r4, r3, r0
 8015864:	fba2 3404 	umull	r3, r4, r2, r4
 8015868:	1c5a      	adds	r2, r3, #1
 801586a:	4404      	add	r4, r0
 801586c:	f144 0000 	adc.w	r0, r4, #0
 8015870:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015874:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015878:	bd10      	pop	{r4, pc}
 801587a:	bf00      	nop
 801587c:	24000090 	.word	0x24000090
 8015880:	08016d8c 	.word	0x08016d8c
 8015884:	08016da3 	.word	0x08016da3
 8015888:	abcd330e 	.word	0xabcd330e
 801588c:	e66d1234 	.word	0xe66d1234
 8015890:	0005deec 	.word	0x0005deec
 8015894:	5851f42d 	.word	0x5851f42d
 8015898:	4c957f2d 	.word	0x4c957f2d

0801589c <setvbuf>:
 801589c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80158a0:	461d      	mov	r5, r3
 80158a2:	4b5d      	ldr	r3, [pc, #372]	; (8015a18 <setvbuf+0x17c>)
 80158a4:	681f      	ldr	r7, [r3, #0]
 80158a6:	4604      	mov	r4, r0
 80158a8:	460e      	mov	r6, r1
 80158aa:	4690      	mov	r8, r2
 80158ac:	b127      	cbz	r7, 80158b8 <setvbuf+0x1c>
 80158ae:	69bb      	ldr	r3, [r7, #24]
 80158b0:	b913      	cbnz	r3, 80158b8 <setvbuf+0x1c>
 80158b2:	4638      	mov	r0, r7
 80158b4:	f000 fab0 	bl	8015e18 <__sinit>
 80158b8:	4b58      	ldr	r3, [pc, #352]	; (8015a1c <setvbuf+0x180>)
 80158ba:	429c      	cmp	r4, r3
 80158bc:	d167      	bne.n	801598e <setvbuf+0xf2>
 80158be:	687c      	ldr	r4, [r7, #4]
 80158c0:	f1b8 0f02 	cmp.w	r8, #2
 80158c4:	d006      	beq.n	80158d4 <setvbuf+0x38>
 80158c6:	f1b8 0f01 	cmp.w	r8, #1
 80158ca:	f200 809f 	bhi.w	8015a0c <setvbuf+0x170>
 80158ce:	2d00      	cmp	r5, #0
 80158d0:	f2c0 809c 	blt.w	8015a0c <setvbuf+0x170>
 80158d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80158d6:	07db      	lsls	r3, r3, #31
 80158d8:	d405      	bmi.n	80158e6 <setvbuf+0x4a>
 80158da:	89a3      	ldrh	r3, [r4, #12]
 80158dc:	0598      	lsls	r0, r3, #22
 80158de:	d402      	bmi.n	80158e6 <setvbuf+0x4a>
 80158e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80158e2:	f000 fb49 	bl	8015f78 <__retarget_lock_acquire_recursive>
 80158e6:	4621      	mov	r1, r4
 80158e8:	4638      	mov	r0, r7
 80158ea:	f000 fa01 	bl	8015cf0 <_fflush_r>
 80158ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158f0:	b141      	cbz	r1, 8015904 <setvbuf+0x68>
 80158f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158f6:	4299      	cmp	r1, r3
 80158f8:	d002      	beq.n	8015900 <setvbuf+0x64>
 80158fa:	4638      	mov	r0, r7
 80158fc:	f000 fbaa 	bl	8016054 <_free_r>
 8015900:	2300      	movs	r3, #0
 8015902:	6363      	str	r3, [r4, #52]	; 0x34
 8015904:	2300      	movs	r3, #0
 8015906:	61a3      	str	r3, [r4, #24]
 8015908:	6063      	str	r3, [r4, #4]
 801590a:	89a3      	ldrh	r3, [r4, #12]
 801590c:	0619      	lsls	r1, r3, #24
 801590e:	d503      	bpl.n	8015918 <setvbuf+0x7c>
 8015910:	6921      	ldr	r1, [r4, #16]
 8015912:	4638      	mov	r0, r7
 8015914:	f000 fb9e 	bl	8016054 <_free_r>
 8015918:	89a3      	ldrh	r3, [r4, #12]
 801591a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801591e:	f023 0303 	bic.w	r3, r3, #3
 8015922:	f1b8 0f02 	cmp.w	r8, #2
 8015926:	81a3      	strh	r3, [r4, #12]
 8015928:	d06c      	beq.n	8015a04 <setvbuf+0x168>
 801592a:	ab01      	add	r3, sp, #4
 801592c:	466a      	mov	r2, sp
 801592e:	4621      	mov	r1, r4
 8015930:	4638      	mov	r0, r7
 8015932:	f000 fb23 	bl	8015f7c <__swhatbuf_r>
 8015936:	89a3      	ldrh	r3, [r4, #12]
 8015938:	4318      	orrs	r0, r3
 801593a:	81a0      	strh	r0, [r4, #12]
 801593c:	2d00      	cmp	r5, #0
 801593e:	d130      	bne.n	80159a2 <setvbuf+0x106>
 8015940:	9d00      	ldr	r5, [sp, #0]
 8015942:	4628      	mov	r0, r5
 8015944:	f000 fb7e 	bl	8016044 <malloc>
 8015948:	4606      	mov	r6, r0
 801594a:	2800      	cmp	r0, #0
 801594c:	d155      	bne.n	80159fa <setvbuf+0x15e>
 801594e:	f8dd 9000 	ldr.w	r9, [sp]
 8015952:	45a9      	cmp	r9, r5
 8015954:	d14a      	bne.n	80159ec <setvbuf+0x150>
 8015956:	f04f 35ff 	mov.w	r5, #4294967295
 801595a:	2200      	movs	r2, #0
 801595c:	60a2      	str	r2, [r4, #8]
 801595e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8015962:	6022      	str	r2, [r4, #0]
 8015964:	6122      	str	r2, [r4, #16]
 8015966:	2201      	movs	r2, #1
 8015968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801596c:	6162      	str	r2, [r4, #20]
 801596e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015970:	f043 0302 	orr.w	r3, r3, #2
 8015974:	07d2      	lsls	r2, r2, #31
 8015976:	81a3      	strh	r3, [r4, #12]
 8015978:	d405      	bmi.n	8015986 <setvbuf+0xea>
 801597a:	f413 7f00 	tst.w	r3, #512	; 0x200
 801597e:	d102      	bne.n	8015986 <setvbuf+0xea>
 8015980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015982:	f000 fafa 	bl	8015f7a <__retarget_lock_release_recursive>
 8015986:	4628      	mov	r0, r5
 8015988:	b003      	add	sp, #12
 801598a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801598e:	4b24      	ldr	r3, [pc, #144]	; (8015a20 <setvbuf+0x184>)
 8015990:	429c      	cmp	r4, r3
 8015992:	d101      	bne.n	8015998 <setvbuf+0xfc>
 8015994:	68bc      	ldr	r4, [r7, #8]
 8015996:	e793      	b.n	80158c0 <setvbuf+0x24>
 8015998:	4b22      	ldr	r3, [pc, #136]	; (8015a24 <setvbuf+0x188>)
 801599a:	429c      	cmp	r4, r3
 801599c:	bf08      	it	eq
 801599e:	68fc      	ldreq	r4, [r7, #12]
 80159a0:	e78e      	b.n	80158c0 <setvbuf+0x24>
 80159a2:	2e00      	cmp	r6, #0
 80159a4:	d0cd      	beq.n	8015942 <setvbuf+0xa6>
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	b913      	cbnz	r3, 80159b0 <setvbuf+0x114>
 80159aa:	4638      	mov	r0, r7
 80159ac:	f000 fa34 	bl	8015e18 <__sinit>
 80159b0:	f1b8 0f01 	cmp.w	r8, #1
 80159b4:	bf08      	it	eq
 80159b6:	89a3      	ldrheq	r3, [r4, #12]
 80159b8:	6026      	str	r6, [r4, #0]
 80159ba:	bf04      	itt	eq
 80159bc:	f043 0301 	orreq.w	r3, r3, #1
 80159c0:	81a3      	strheq	r3, [r4, #12]
 80159c2:	89a2      	ldrh	r2, [r4, #12]
 80159c4:	f012 0308 	ands.w	r3, r2, #8
 80159c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80159cc:	d01c      	beq.n	8015a08 <setvbuf+0x16c>
 80159ce:	07d3      	lsls	r3, r2, #31
 80159d0:	bf41      	itttt	mi
 80159d2:	2300      	movmi	r3, #0
 80159d4:	426d      	negmi	r5, r5
 80159d6:	60a3      	strmi	r3, [r4, #8]
 80159d8:	61a5      	strmi	r5, [r4, #24]
 80159da:	bf58      	it	pl
 80159dc:	60a5      	strpl	r5, [r4, #8]
 80159de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80159e0:	f015 0501 	ands.w	r5, r5, #1
 80159e4:	d115      	bne.n	8015a12 <setvbuf+0x176>
 80159e6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80159ea:	e7c8      	b.n	801597e <setvbuf+0xe2>
 80159ec:	4648      	mov	r0, r9
 80159ee:	f000 fb29 	bl	8016044 <malloc>
 80159f2:	4606      	mov	r6, r0
 80159f4:	2800      	cmp	r0, #0
 80159f6:	d0ae      	beq.n	8015956 <setvbuf+0xba>
 80159f8:	464d      	mov	r5, r9
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a00:	81a3      	strh	r3, [r4, #12]
 8015a02:	e7d0      	b.n	80159a6 <setvbuf+0x10a>
 8015a04:	2500      	movs	r5, #0
 8015a06:	e7a8      	b.n	801595a <setvbuf+0xbe>
 8015a08:	60a3      	str	r3, [r4, #8]
 8015a0a:	e7e8      	b.n	80159de <setvbuf+0x142>
 8015a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8015a10:	e7b9      	b.n	8015986 <setvbuf+0xea>
 8015a12:	2500      	movs	r5, #0
 8015a14:	e7b7      	b.n	8015986 <setvbuf+0xea>
 8015a16:	bf00      	nop
 8015a18:	24000090 	.word	0x24000090
 8015a1c:	08016e60 	.word	0x08016e60
 8015a20:	08016e80 	.word	0x08016e80
 8015a24:	08016e40 	.word	0x08016e40

08015a28 <__swbuf_r>:
 8015a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a2a:	460e      	mov	r6, r1
 8015a2c:	4614      	mov	r4, r2
 8015a2e:	4605      	mov	r5, r0
 8015a30:	b118      	cbz	r0, 8015a3a <__swbuf_r+0x12>
 8015a32:	6983      	ldr	r3, [r0, #24]
 8015a34:	b90b      	cbnz	r3, 8015a3a <__swbuf_r+0x12>
 8015a36:	f000 f9ef 	bl	8015e18 <__sinit>
 8015a3a:	4b21      	ldr	r3, [pc, #132]	; (8015ac0 <__swbuf_r+0x98>)
 8015a3c:	429c      	cmp	r4, r3
 8015a3e:	d12b      	bne.n	8015a98 <__swbuf_r+0x70>
 8015a40:	686c      	ldr	r4, [r5, #4]
 8015a42:	69a3      	ldr	r3, [r4, #24]
 8015a44:	60a3      	str	r3, [r4, #8]
 8015a46:	89a3      	ldrh	r3, [r4, #12]
 8015a48:	071a      	lsls	r2, r3, #28
 8015a4a:	d52f      	bpl.n	8015aac <__swbuf_r+0x84>
 8015a4c:	6923      	ldr	r3, [r4, #16]
 8015a4e:	b36b      	cbz	r3, 8015aac <__swbuf_r+0x84>
 8015a50:	6923      	ldr	r3, [r4, #16]
 8015a52:	6820      	ldr	r0, [r4, #0]
 8015a54:	1ac0      	subs	r0, r0, r3
 8015a56:	6963      	ldr	r3, [r4, #20]
 8015a58:	b2f6      	uxtb	r6, r6
 8015a5a:	4283      	cmp	r3, r0
 8015a5c:	4637      	mov	r7, r6
 8015a5e:	dc04      	bgt.n	8015a6a <__swbuf_r+0x42>
 8015a60:	4621      	mov	r1, r4
 8015a62:	4628      	mov	r0, r5
 8015a64:	f000 f944 	bl	8015cf0 <_fflush_r>
 8015a68:	bb30      	cbnz	r0, 8015ab8 <__swbuf_r+0x90>
 8015a6a:	68a3      	ldr	r3, [r4, #8]
 8015a6c:	3b01      	subs	r3, #1
 8015a6e:	60a3      	str	r3, [r4, #8]
 8015a70:	6823      	ldr	r3, [r4, #0]
 8015a72:	1c5a      	adds	r2, r3, #1
 8015a74:	6022      	str	r2, [r4, #0]
 8015a76:	701e      	strb	r6, [r3, #0]
 8015a78:	6963      	ldr	r3, [r4, #20]
 8015a7a:	3001      	adds	r0, #1
 8015a7c:	4283      	cmp	r3, r0
 8015a7e:	d004      	beq.n	8015a8a <__swbuf_r+0x62>
 8015a80:	89a3      	ldrh	r3, [r4, #12]
 8015a82:	07db      	lsls	r3, r3, #31
 8015a84:	d506      	bpl.n	8015a94 <__swbuf_r+0x6c>
 8015a86:	2e0a      	cmp	r6, #10
 8015a88:	d104      	bne.n	8015a94 <__swbuf_r+0x6c>
 8015a8a:	4621      	mov	r1, r4
 8015a8c:	4628      	mov	r0, r5
 8015a8e:	f000 f92f 	bl	8015cf0 <_fflush_r>
 8015a92:	b988      	cbnz	r0, 8015ab8 <__swbuf_r+0x90>
 8015a94:	4638      	mov	r0, r7
 8015a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a98:	4b0a      	ldr	r3, [pc, #40]	; (8015ac4 <__swbuf_r+0x9c>)
 8015a9a:	429c      	cmp	r4, r3
 8015a9c:	d101      	bne.n	8015aa2 <__swbuf_r+0x7a>
 8015a9e:	68ac      	ldr	r4, [r5, #8]
 8015aa0:	e7cf      	b.n	8015a42 <__swbuf_r+0x1a>
 8015aa2:	4b09      	ldr	r3, [pc, #36]	; (8015ac8 <__swbuf_r+0xa0>)
 8015aa4:	429c      	cmp	r4, r3
 8015aa6:	bf08      	it	eq
 8015aa8:	68ec      	ldreq	r4, [r5, #12]
 8015aaa:	e7ca      	b.n	8015a42 <__swbuf_r+0x1a>
 8015aac:	4621      	mov	r1, r4
 8015aae:	4628      	mov	r0, r5
 8015ab0:	f000 f80c 	bl	8015acc <__swsetup_r>
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	d0cb      	beq.n	8015a50 <__swbuf_r+0x28>
 8015ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8015abc:	e7ea      	b.n	8015a94 <__swbuf_r+0x6c>
 8015abe:	bf00      	nop
 8015ac0:	08016e60 	.word	0x08016e60
 8015ac4:	08016e80 	.word	0x08016e80
 8015ac8:	08016e40 	.word	0x08016e40

08015acc <__swsetup_r>:
 8015acc:	4b32      	ldr	r3, [pc, #200]	; (8015b98 <__swsetup_r+0xcc>)
 8015ace:	b570      	push	{r4, r5, r6, lr}
 8015ad0:	681d      	ldr	r5, [r3, #0]
 8015ad2:	4606      	mov	r6, r0
 8015ad4:	460c      	mov	r4, r1
 8015ad6:	b125      	cbz	r5, 8015ae2 <__swsetup_r+0x16>
 8015ad8:	69ab      	ldr	r3, [r5, #24]
 8015ada:	b913      	cbnz	r3, 8015ae2 <__swsetup_r+0x16>
 8015adc:	4628      	mov	r0, r5
 8015ade:	f000 f99b 	bl	8015e18 <__sinit>
 8015ae2:	4b2e      	ldr	r3, [pc, #184]	; (8015b9c <__swsetup_r+0xd0>)
 8015ae4:	429c      	cmp	r4, r3
 8015ae6:	d10f      	bne.n	8015b08 <__swsetup_r+0x3c>
 8015ae8:	686c      	ldr	r4, [r5, #4]
 8015aea:	89a3      	ldrh	r3, [r4, #12]
 8015aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015af0:	0719      	lsls	r1, r3, #28
 8015af2:	d42c      	bmi.n	8015b4e <__swsetup_r+0x82>
 8015af4:	06dd      	lsls	r5, r3, #27
 8015af6:	d411      	bmi.n	8015b1c <__swsetup_r+0x50>
 8015af8:	2309      	movs	r3, #9
 8015afa:	6033      	str	r3, [r6, #0]
 8015afc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015b00:	81a3      	strh	r3, [r4, #12]
 8015b02:	f04f 30ff 	mov.w	r0, #4294967295
 8015b06:	e03e      	b.n	8015b86 <__swsetup_r+0xba>
 8015b08:	4b25      	ldr	r3, [pc, #148]	; (8015ba0 <__swsetup_r+0xd4>)
 8015b0a:	429c      	cmp	r4, r3
 8015b0c:	d101      	bne.n	8015b12 <__swsetup_r+0x46>
 8015b0e:	68ac      	ldr	r4, [r5, #8]
 8015b10:	e7eb      	b.n	8015aea <__swsetup_r+0x1e>
 8015b12:	4b24      	ldr	r3, [pc, #144]	; (8015ba4 <__swsetup_r+0xd8>)
 8015b14:	429c      	cmp	r4, r3
 8015b16:	bf08      	it	eq
 8015b18:	68ec      	ldreq	r4, [r5, #12]
 8015b1a:	e7e6      	b.n	8015aea <__swsetup_r+0x1e>
 8015b1c:	0758      	lsls	r0, r3, #29
 8015b1e:	d512      	bpl.n	8015b46 <__swsetup_r+0x7a>
 8015b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b22:	b141      	cbz	r1, 8015b36 <__swsetup_r+0x6a>
 8015b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b28:	4299      	cmp	r1, r3
 8015b2a:	d002      	beq.n	8015b32 <__swsetup_r+0x66>
 8015b2c:	4630      	mov	r0, r6
 8015b2e:	f000 fa91 	bl	8016054 <_free_r>
 8015b32:	2300      	movs	r3, #0
 8015b34:	6363      	str	r3, [r4, #52]	; 0x34
 8015b36:	89a3      	ldrh	r3, [r4, #12]
 8015b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015b3c:	81a3      	strh	r3, [r4, #12]
 8015b3e:	2300      	movs	r3, #0
 8015b40:	6063      	str	r3, [r4, #4]
 8015b42:	6923      	ldr	r3, [r4, #16]
 8015b44:	6023      	str	r3, [r4, #0]
 8015b46:	89a3      	ldrh	r3, [r4, #12]
 8015b48:	f043 0308 	orr.w	r3, r3, #8
 8015b4c:	81a3      	strh	r3, [r4, #12]
 8015b4e:	6923      	ldr	r3, [r4, #16]
 8015b50:	b94b      	cbnz	r3, 8015b66 <__swsetup_r+0x9a>
 8015b52:	89a3      	ldrh	r3, [r4, #12]
 8015b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b5c:	d003      	beq.n	8015b66 <__swsetup_r+0x9a>
 8015b5e:	4621      	mov	r1, r4
 8015b60:	4630      	mov	r0, r6
 8015b62:	f000 fa2f 	bl	8015fc4 <__smakebuf_r>
 8015b66:	89a0      	ldrh	r0, [r4, #12]
 8015b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b6c:	f010 0301 	ands.w	r3, r0, #1
 8015b70:	d00a      	beq.n	8015b88 <__swsetup_r+0xbc>
 8015b72:	2300      	movs	r3, #0
 8015b74:	60a3      	str	r3, [r4, #8]
 8015b76:	6963      	ldr	r3, [r4, #20]
 8015b78:	425b      	negs	r3, r3
 8015b7a:	61a3      	str	r3, [r4, #24]
 8015b7c:	6923      	ldr	r3, [r4, #16]
 8015b7e:	b943      	cbnz	r3, 8015b92 <__swsetup_r+0xc6>
 8015b80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015b84:	d1ba      	bne.n	8015afc <__swsetup_r+0x30>
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
 8015b88:	0781      	lsls	r1, r0, #30
 8015b8a:	bf58      	it	pl
 8015b8c:	6963      	ldrpl	r3, [r4, #20]
 8015b8e:	60a3      	str	r3, [r4, #8]
 8015b90:	e7f4      	b.n	8015b7c <__swsetup_r+0xb0>
 8015b92:	2000      	movs	r0, #0
 8015b94:	e7f7      	b.n	8015b86 <__swsetup_r+0xba>
 8015b96:	bf00      	nop
 8015b98:	24000090 	.word	0x24000090
 8015b9c:	08016e60 	.word	0x08016e60
 8015ba0:	08016e80 	.word	0x08016e80
 8015ba4:	08016e40 	.word	0x08016e40

08015ba8 <__assert_func>:
 8015ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015baa:	4614      	mov	r4, r2
 8015bac:	461a      	mov	r2, r3
 8015bae:	4b09      	ldr	r3, [pc, #36]	; (8015bd4 <__assert_func+0x2c>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	4605      	mov	r5, r0
 8015bb4:	68d8      	ldr	r0, [r3, #12]
 8015bb6:	b14c      	cbz	r4, 8015bcc <__assert_func+0x24>
 8015bb8:	4b07      	ldr	r3, [pc, #28]	; (8015bd8 <__assert_func+0x30>)
 8015bba:	9100      	str	r1, [sp, #0]
 8015bbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015bc0:	4906      	ldr	r1, [pc, #24]	; (8015bdc <__assert_func+0x34>)
 8015bc2:	462b      	mov	r3, r5
 8015bc4:	f000 f9a6 	bl	8015f14 <fiprintf>
 8015bc8:	f000 fe42 	bl	8016850 <abort>
 8015bcc:	4b04      	ldr	r3, [pc, #16]	; (8015be0 <__assert_func+0x38>)
 8015bce:	461c      	mov	r4, r3
 8015bd0:	e7f3      	b.n	8015bba <__assert_func+0x12>
 8015bd2:	bf00      	nop
 8015bd4:	24000090 	.word	0x24000090
 8015bd8:	08016e02 	.word	0x08016e02
 8015bdc:	08016e0f 	.word	0x08016e0f
 8015be0:	08016e3d 	.word	0x08016e3d

08015be4 <__sflush_r>:
 8015be4:	898a      	ldrh	r2, [r1, #12]
 8015be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bea:	4605      	mov	r5, r0
 8015bec:	0710      	lsls	r0, r2, #28
 8015bee:	460c      	mov	r4, r1
 8015bf0:	d458      	bmi.n	8015ca4 <__sflush_r+0xc0>
 8015bf2:	684b      	ldr	r3, [r1, #4]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	dc05      	bgt.n	8015c04 <__sflush_r+0x20>
 8015bf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	dc02      	bgt.n	8015c04 <__sflush_r+0x20>
 8015bfe:	2000      	movs	r0, #0
 8015c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c06:	2e00      	cmp	r6, #0
 8015c08:	d0f9      	beq.n	8015bfe <__sflush_r+0x1a>
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015c10:	682f      	ldr	r7, [r5, #0]
 8015c12:	602b      	str	r3, [r5, #0]
 8015c14:	d032      	beq.n	8015c7c <__sflush_r+0x98>
 8015c16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015c18:	89a3      	ldrh	r3, [r4, #12]
 8015c1a:	075a      	lsls	r2, r3, #29
 8015c1c:	d505      	bpl.n	8015c2a <__sflush_r+0x46>
 8015c1e:	6863      	ldr	r3, [r4, #4]
 8015c20:	1ac0      	subs	r0, r0, r3
 8015c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015c24:	b10b      	cbz	r3, 8015c2a <__sflush_r+0x46>
 8015c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c28:	1ac0      	subs	r0, r0, r3
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	4602      	mov	r2, r0
 8015c2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c30:	6a21      	ldr	r1, [r4, #32]
 8015c32:	4628      	mov	r0, r5
 8015c34:	47b0      	blx	r6
 8015c36:	1c43      	adds	r3, r0, #1
 8015c38:	89a3      	ldrh	r3, [r4, #12]
 8015c3a:	d106      	bne.n	8015c4a <__sflush_r+0x66>
 8015c3c:	6829      	ldr	r1, [r5, #0]
 8015c3e:	291d      	cmp	r1, #29
 8015c40:	d82c      	bhi.n	8015c9c <__sflush_r+0xb8>
 8015c42:	4a2a      	ldr	r2, [pc, #168]	; (8015cec <__sflush_r+0x108>)
 8015c44:	40ca      	lsrs	r2, r1
 8015c46:	07d6      	lsls	r6, r2, #31
 8015c48:	d528      	bpl.n	8015c9c <__sflush_r+0xb8>
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	6062      	str	r2, [r4, #4]
 8015c4e:	04d9      	lsls	r1, r3, #19
 8015c50:	6922      	ldr	r2, [r4, #16]
 8015c52:	6022      	str	r2, [r4, #0]
 8015c54:	d504      	bpl.n	8015c60 <__sflush_r+0x7c>
 8015c56:	1c42      	adds	r2, r0, #1
 8015c58:	d101      	bne.n	8015c5e <__sflush_r+0x7a>
 8015c5a:	682b      	ldr	r3, [r5, #0]
 8015c5c:	b903      	cbnz	r3, 8015c60 <__sflush_r+0x7c>
 8015c5e:	6560      	str	r0, [r4, #84]	; 0x54
 8015c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c62:	602f      	str	r7, [r5, #0]
 8015c64:	2900      	cmp	r1, #0
 8015c66:	d0ca      	beq.n	8015bfe <__sflush_r+0x1a>
 8015c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c6c:	4299      	cmp	r1, r3
 8015c6e:	d002      	beq.n	8015c76 <__sflush_r+0x92>
 8015c70:	4628      	mov	r0, r5
 8015c72:	f000 f9ef 	bl	8016054 <_free_r>
 8015c76:	2000      	movs	r0, #0
 8015c78:	6360      	str	r0, [r4, #52]	; 0x34
 8015c7a:	e7c1      	b.n	8015c00 <__sflush_r+0x1c>
 8015c7c:	6a21      	ldr	r1, [r4, #32]
 8015c7e:	2301      	movs	r3, #1
 8015c80:	4628      	mov	r0, r5
 8015c82:	47b0      	blx	r6
 8015c84:	1c41      	adds	r1, r0, #1
 8015c86:	d1c7      	bne.n	8015c18 <__sflush_r+0x34>
 8015c88:	682b      	ldr	r3, [r5, #0]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d0c4      	beq.n	8015c18 <__sflush_r+0x34>
 8015c8e:	2b1d      	cmp	r3, #29
 8015c90:	d001      	beq.n	8015c96 <__sflush_r+0xb2>
 8015c92:	2b16      	cmp	r3, #22
 8015c94:	d101      	bne.n	8015c9a <__sflush_r+0xb6>
 8015c96:	602f      	str	r7, [r5, #0]
 8015c98:	e7b1      	b.n	8015bfe <__sflush_r+0x1a>
 8015c9a:	89a3      	ldrh	r3, [r4, #12]
 8015c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ca0:	81a3      	strh	r3, [r4, #12]
 8015ca2:	e7ad      	b.n	8015c00 <__sflush_r+0x1c>
 8015ca4:	690f      	ldr	r7, [r1, #16]
 8015ca6:	2f00      	cmp	r7, #0
 8015ca8:	d0a9      	beq.n	8015bfe <__sflush_r+0x1a>
 8015caa:	0793      	lsls	r3, r2, #30
 8015cac:	680e      	ldr	r6, [r1, #0]
 8015cae:	bf08      	it	eq
 8015cb0:	694b      	ldreq	r3, [r1, #20]
 8015cb2:	600f      	str	r7, [r1, #0]
 8015cb4:	bf18      	it	ne
 8015cb6:	2300      	movne	r3, #0
 8015cb8:	eba6 0807 	sub.w	r8, r6, r7
 8015cbc:	608b      	str	r3, [r1, #8]
 8015cbe:	f1b8 0f00 	cmp.w	r8, #0
 8015cc2:	dd9c      	ble.n	8015bfe <__sflush_r+0x1a>
 8015cc4:	6a21      	ldr	r1, [r4, #32]
 8015cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015cc8:	4643      	mov	r3, r8
 8015cca:	463a      	mov	r2, r7
 8015ccc:	4628      	mov	r0, r5
 8015cce:	47b0      	blx	r6
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	dc06      	bgt.n	8015ce2 <__sflush_r+0xfe>
 8015cd4:	89a3      	ldrh	r3, [r4, #12]
 8015cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cda:	81a3      	strh	r3, [r4, #12]
 8015cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8015ce0:	e78e      	b.n	8015c00 <__sflush_r+0x1c>
 8015ce2:	4407      	add	r7, r0
 8015ce4:	eba8 0800 	sub.w	r8, r8, r0
 8015ce8:	e7e9      	b.n	8015cbe <__sflush_r+0xda>
 8015cea:	bf00      	nop
 8015cec:	20400001 	.word	0x20400001

08015cf0 <_fflush_r>:
 8015cf0:	b538      	push	{r3, r4, r5, lr}
 8015cf2:	690b      	ldr	r3, [r1, #16]
 8015cf4:	4605      	mov	r5, r0
 8015cf6:	460c      	mov	r4, r1
 8015cf8:	b913      	cbnz	r3, 8015d00 <_fflush_r+0x10>
 8015cfa:	2500      	movs	r5, #0
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	bd38      	pop	{r3, r4, r5, pc}
 8015d00:	b118      	cbz	r0, 8015d0a <_fflush_r+0x1a>
 8015d02:	6983      	ldr	r3, [r0, #24]
 8015d04:	b90b      	cbnz	r3, 8015d0a <_fflush_r+0x1a>
 8015d06:	f000 f887 	bl	8015e18 <__sinit>
 8015d0a:	4b14      	ldr	r3, [pc, #80]	; (8015d5c <_fflush_r+0x6c>)
 8015d0c:	429c      	cmp	r4, r3
 8015d0e:	d11b      	bne.n	8015d48 <_fflush_r+0x58>
 8015d10:	686c      	ldr	r4, [r5, #4]
 8015d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d0ef      	beq.n	8015cfa <_fflush_r+0xa>
 8015d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015d1c:	07d0      	lsls	r0, r2, #31
 8015d1e:	d404      	bmi.n	8015d2a <_fflush_r+0x3a>
 8015d20:	0599      	lsls	r1, r3, #22
 8015d22:	d402      	bmi.n	8015d2a <_fflush_r+0x3a>
 8015d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d26:	f000 f927 	bl	8015f78 <__retarget_lock_acquire_recursive>
 8015d2a:	4628      	mov	r0, r5
 8015d2c:	4621      	mov	r1, r4
 8015d2e:	f7ff ff59 	bl	8015be4 <__sflush_r>
 8015d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015d34:	07da      	lsls	r2, r3, #31
 8015d36:	4605      	mov	r5, r0
 8015d38:	d4e0      	bmi.n	8015cfc <_fflush_r+0xc>
 8015d3a:	89a3      	ldrh	r3, [r4, #12]
 8015d3c:	059b      	lsls	r3, r3, #22
 8015d3e:	d4dd      	bmi.n	8015cfc <_fflush_r+0xc>
 8015d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d42:	f000 f91a 	bl	8015f7a <__retarget_lock_release_recursive>
 8015d46:	e7d9      	b.n	8015cfc <_fflush_r+0xc>
 8015d48:	4b05      	ldr	r3, [pc, #20]	; (8015d60 <_fflush_r+0x70>)
 8015d4a:	429c      	cmp	r4, r3
 8015d4c:	d101      	bne.n	8015d52 <_fflush_r+0x62>
 8015d4e:	68ac      	ldr	r4, [r5, #8]
 8015d50:	e7df      	b.n	8015d12 <_fflush_r+0x22>
 8015d52:	4b04      	ldr	r3, [pc, #16]	; (8015d64 <_fflush_r+0x74>)
 8015d54:	429c      	cmp	r4, r3
 8015d56:	bf08      	it	eq
 8015d58:	68ec      	ldreq	r4, [r5, #12]
 8015d5a:	e7da      	b.n	8015d12 <_fflush_r+0x22>
 8015d5c:	08016e60 	.word	0x08016e60
 8015d60:	08016e80 	.word	0x08016e80
 8015d64:	08016e40 	.word	0x08016e40

08015d68 <std>:
 8015d68:	2300      	movs	r3, #0
 8015d6a:	b510      	push	{r4, lr}
 8015d6c:	4604      	mov	r4, r0
 8015d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8015d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015d76:	6083      	str	r3, [r0, #8]
 8015d78:	8181      	strh	r1, [r0, #12]
 8015d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8015d7c:	81c2      	strh	r2, [r0, #14]
 8015d7e:	6183      	str	r3, [r0, #24]
 8015d80:	4619      	mov	r1, r3
 8015d82:	2208      	movs	r2, #8
 8015d84:	305c      	adds	r0, #92	; 0x5c
 8015d86:	f7ff fcb3 	bl	80156f0 <memset>
 8015d8a:	4b05      	ldr	r3, [pc, #20]	; (8015da0 <std+0x38>)
 8015d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8015d8e:	4b05      	ldr	r3, [pc, #20]	; (8015da4 <std+0x3c>)
 8015d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8015d92:	4b05      	ldr	r3, [pc, #20]	; (8015da8 <std+0x40>)
 8015d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d96:	4b05      	ldr	r3, [pc, #20]	; (8015dac <std+0x44>)
 8015d98:	6224      	str	r4, [r4, #32]
 8015d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8015d9c:	bd10      	pop	{r4, pc}
 8015d9e:	bf00      	nop
 8015da0:	080167a5 	.word	0x080167a5
 8015da4:	080167c7 	.word	0x080167c7
 8015da8:	080167ff 	.word	0x080167ff
 8015dac:	08016823 	.word	0x08016823

08015db0 <_cleanup_r>:
 8015db0:	4901      	ldr	r1, [pc, #4]	; (8015db8 <_cleanup_r+0x8>)
 8015db2:	f000 b8c1 	b.w	8015f38 <_fwalk_reent>
 8015db6:	bf00      	nop
 8015db8:	08015cf1 	.word	0x08015cf1

08015dbc <__sfmoreglue>:
 8015dbc:	b570      	push	{r4, r5, r6, lr}
 8015dbe:	1e4a      	subs	r2, r1, #1
 8015dc0:	2568      	movs	r5, #104	; 0x68
 8015dc2:	4355      	muls	r5, r2
 8015dc4:	460e      	mov	r6, r1
 8015dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015dca:	f000 f993 	bl	80160f4 <_malloc_r>
 8015dce:	4604      	mov	r4, r0
 8015dd0:	b140      	cbz	r0, 8015de4 <__sfmoreglue+0x28>
 8015dd2:	2100      	movs	r1, #0
 8015dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8015dd8:	300c      	adds	r0, #12
 8015dda:	60a0      	str	r0, [r4, #8]
 8015ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015de0:	f7ff fc86 	bl	80156f0 <memset>
 8015de4:	4620      	mov	r0, r4
 8015de6:	bd70      	pop	{r4, r5, r6, pc}

08015de8 <__sfp_lock_acquire>:
 8015de8:	4801      	ldr	r0, [pc, #4]	; (8015df0 <__sfp_lock_acquire+0x8>)
 8015dea:	f000 b8c5 	b.w	8015f78 <__retarget_lock_acquire_recursive>
 8015dee:	bf00      	nop
 8015df0:	2400534c 	.word	0x2400534c

08015df4 <__sfp_lock_release>:
 8015df4:	4801      	ldr	r0, [pc, #4]	; (8015dfc <__sfp_lock_release+0x8>)
 8015df6:	f000 b8c0 	b.w	8015f7a <__retarget_lock_release_recursive>
 8015dfa:	bf00      	nop
 8015dfc:	2400534c 	.word	0x2400534c

08015e00 <__sinit_lock_acquire>:
 8015e00:	4801      	ldr	r0, [pc, #4]	; (8015e08 <__sinit_lock_acquire+0x8>)
 8015e02:	f000 b8b9 	b.w	8015f78 <__retarget_lock_acquire_recursive>
 8015e06:	bf00      	nop
 8015e08:	24005347 	.word	0x24005347

08015e0c <__sinit_lock_release>:
 8015e0c:	4801      	ldr	r0, [pc, #4]	; (8015e14 <__sinit_lock_release+0x8>)
 8015e0e:	f000 b8b4 	b.w	8015f7a <__retarget_lock_release_recursive>
 8015e12:	bf00      	nop
 8015e14:	24005347 	.word	0x24005347

08015e18 <__sinit>:
 8015e18:	b510      	push	{r4, lr}
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	f7ff fff0 	bl	8015e00 <__sinit_lock_acquire>
 8015e20:	69a3      	ldr	r3, [r4, #24]
 8015e22:	b11b      	cbz	r3, 8015e2c <__sinit+0x14>
 8015e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e28:	f7ff bff0 	b.w	8015e0c <__sinit_lock_release>
 8015e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015e30:	6523      	str	r3, [r4, #80]	; 0x50
 8015e32:	4b13      	ldr	r3, [pc, #76]	; (8015e80 <__sinit+0x68>)
 8015e34:	4a13      	ldr	r2, [pc, #76]	; (8015e84 <__sinit+0x6c>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8015e3a:	42a3      	cmp	r3, r4
 8015e3c:	bf04      	itt	eq
 8015e3e:	2301      	moveq	r3, #1
 8015e40:	61a3      	streq	r3, [r4, #24]
 8015e42:	4620      	mov	r0, r4
 8015e44:	f000 f820 	bl	8015e88 <__sfp>
 8015e48:	6060      	str	r0, [r4, #4]
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	f000 f81c 	bl	8015e88 <__sfp>
 8015e50:	60a0      	str	r0, [r4, #8]
 8015e52:	4620      	mov	r0, r4
 8015e54:	f000 f818 	bl	8015e88 <__sfp>
 8015e58:	2200      	movs	r2, #0
 8015e5a:	60e0      	str	r0, [r4, #12]
 8015e5c:	2104      	movs	r1, #4
 8015e5e:	6860      	ldr	r0, [r4, #4]
 8015e60:	f7ff ff82 	bl	8015d68 <std>
 8015e64:	68a0      	ldr	r0, [r4, #8]
 8015e66:	2201      	movs	r2, #1
 8015e68:	2109      	movs	r1, #9
 8015e6a:	f7ff ff7d 	bl	8015d68 <std>
 8015e6e:	68e0      	ldr	r0, [r4, #12]
 8015e70:	2202      	movs	r2, #2
 8015e72:	2112      	movs	r1, #18
 8015e74:	f7ff ff78 	bl	8015d68 <std>
 8015e78:	2301      	movs	r3, #1
 8015e7a:	61a3      	str	r3, [r4, #24]
 8015e7c:	e7d2      	b.n	8015e24 <__sinit+0xc>
 8015e7e:	bf00      	nop
 8015e80:	08016d88 	.word	0x08016d88
 8015e84:	08015db1 	.word	0x08015db1

08015e88 <__sfp>:
 8015e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e8a:	4607      	mov	r7, r0
 8015e8c:	f7ff ffac 	bl	8015de8 <__sfp_lock_acquire>
 8015e90:	4b1e      	ldr	r3, [pc, #120]	; (8015f0c <__sfp+0x84>)
 8015e92:	681e      	ldr	r6, [r3, #0]
 8015e94:	69b3      	ldr	r3, [r6, #24]
 8015e96:	b913      	cbnz	r3, 8015e9e <__sfp+0x16>
 8015e98:	4630      	mov	r0, r6
 8015e9a:	f7ff ffbd 	bl	8015e18 <__sinit>
 8015e9e:	3648      	adds	r6, #72	; 0x48
 8015ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015ea4:	3b01      	subs	r3, #1
 8015ea6:	d503      	bpl.n	8015eb0 <__sfp+0x28>
 8015ea8:	6833      	ldr	r3, [r6, #0]
 8015eaa:	b30b      	cbz	r3, 8015ef0 <__sfp+0x68>
 8015eac:	6836      	ldr	r6, [r6, #0]
 8015eae:	e7f7      	b.n	8015ea0 <__sfp+0x18>
 8015eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015eb4:	b9d5      	cbnz	r5, 8015eec <__sfp+0x64>
 8015eb6:	4b16      	ldr	r3, [pc, #88]	; (8015f10 <__sfp+0x88>)
 8015eb8:	60e3      	str	r3, [r4, #12]
 8015eba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8015ec0:	f000 f859 	bl	8015f76 <__retarget_lock_init_recursive>
 8015ec4:	f7ff ff96 	bl	8015df4 <__sfp_lock_release>
 8015ec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015ecc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015ed0:	6025      	str	r5, [r4, #0]
 8015ed2:	61a5      	str	r5, [r4, #24]
 8015ed4:	2208      	movs	r2, #8
 8015ed6:	4629      	mov	r1, r5
 8015ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015edc:	f7ff fc08 	bl	80156f0 <memset>
 8015ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015ee8:	4620      	mov	r0, r4
 8015eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015eec:	3468      	adds	r4, #104	; 0x68
 8015eee:	e7d9      	b.n	8015ea4 <__sfp+0x1c>
 8015ef0:	2104      	movs	r1, #4
 8015ef2:	4638      	mov	r0, r7
 8015ef4:	f7ff ff62 	bl	8015dbc <__sfmoreglue>
 8015ef8:	4604      	mov	r4, r0
 8015efa:	6030      	str	r0, [r6, #0]
 8015efc:	2800      	cmp	r0, #0
 8015efe:	d1d5      	bne.n	8015eac <__sfp+0x24>
 8015f00:	f7ff ff78 	bl	8015df4 <__sfp_lock_release>
 8015f04:	230c      	movs	r3, #12
 8015f06:	603b      	str	r3, [r7, #0]
 8015f08:	e7ee      	b.n	8015ee8 <__sfp+0x60>
 8015f0a:	bf00      	nop
 8015f0c:	08016d88 	.word	0x08016d88
 8015f10:	ffff0001 	.word	0xffff0001

08015f14 <fiprintf>:
 8015f14:	b40e      	push	{r1, r2, r3}
 8015f16:	b503      	push	{r0, r1, lr}
 8015f18:	4601      	mov	r1, r0
 8015f1a:	ab03      	add	r3, sp, #12
 8015f1c:	4805      	ldr	r0, [pc, #20]	; (8015f34 <fiprintf+0x20>)
 8015f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f22:	6800      	ldr	r0, [r0, #0]
 8015f24:	9301      	str	r3, [sp, #4]
 8015f26:	f000 f969 	bl	80161fc <_vfiprintf_r>
 8015f2a:	b002      	add	sp, #8
 8015f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f30:	b003      	add	sp, #12
 8015f32:	4770      	bx	lr
 8015f34:	24000090 	.word	0x24000090

08015f38 <_fwalk_reent>:
 8015f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f3c:	4606      	mov	r6, r0
 8015f3e:	4688      	mov	r8, r1
 8015f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015f44:	2700      	movs	r7, #0
 8015f46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015f4a:	f1b9 0901 	subs.w	r9, r9, #1
 8015f4e:	d505      	bpl.n	8015f5c <_fwalk_reent+0x24>
 8015f50:	6824      	ldr	r4, [r4, #0]
 8015f52:	2c00      	cmp	r4, #0
 8015f54:	d1f7      	bne.n	8015f46 <_fwalk_reent+0xe>
 8015f56:	4638      	mov	r0, r7
 8015f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f5c:	89ab      	ldrh	r3, [r5, #12]
 8015f5e:	2b01      	cmp	r3, #1
 8015f60:	d907      	bls.n	8015f72 <_fwalk_reent+0x3a>
 8015f62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015f66:	3301      	adds	r3, #1
 8015f68:	d003      	beq.n	8015f72 <_fwalk_reent+0x3a>
 8015f6a:	4629      	mov	r1, r5
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	47c0      	blx	r8
 8015f70:	4307      	orrs	r7, r0
 8015f72:	3568      	adds	r5, #104	; 0x68
 8015f74:	e7e9      	b.n	8015f4a <_fwalk_reent+0x12>

08015f76 <__retarget_lock_init_recursive>:
 8015f76:	4770      	bx	lr

08015f78 <__retarget_lock_acquire_recursive>:
 8015f78:	4770      	bx	lr

08015f7a <__retarget_lock_release_recursive>:
 8015f7a:	4770      	bx	lr

08015f7c <__swhatbuf_r>:
 8015f7c:	b570      	push	{r4, r5, r6, lr}
 8015f7e:	460e      	mov	r6, r1
 8015f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f84:	2900      	cmp	r1, #0
 8015f86:	b096      	sub	sp, #88	; 0x58
 8015f88:	4614      	mov	r4, r2
 8015f8a:	461d      	mov	r5, r3
 8015f8c:	da07      	bge.n	8015f9e <__swhatbuf_r+0x22>
 8015f8e:	2300      	movs	r3, #0
 8015f90:	602b      	str	r3, [r5, #0]
 8015f92:	89b3      	ldrh	r3, [r6, #12]
 8015f94:	061a      	lsls	r2, r3, #24
 8015f96:	d410      	bmi.n	8015fba <__swhatbuf_r+0x3e>
 8015f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f9c:	e00e      	b.n	8015fbc <__swhatbuf_r+0x40>
 8015f9e:	466a      	mov	r2, sp
 8015fa0:	f000 fc6e 	bl	8016880 <_fstat_r>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	dbf2      	blt.n	8015f8e <__swhatbuf_r+0x12>
 8015fa8:	9a01      	ldr	r2, [sp, #4]
 8015faa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015fae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015fb2:	425a      	negs	r2, r3
 8015fb4:	415a      	adcs	r2, r3
 8015fb6:	602a      	str	r2, [r5, #0]
 8015fb8:	e7ee      	b.n	8015f98 <__swhatbuf_r+0x1c>
 8015fba:	2340      	movs	r3, #64	; 0x40
 8015fbc:	2000      	movs	r0, #0
 8015fbe:	6023      	str	r3, [r4, #0]
 8015fc0:	b016      	add	sp, #88	; 0x58
 8015fc2:	bd70      	pop	{r4, r5, r6, pc}

08015fc4 <__smakebuf_r>:
 8015fc4:	898b      	ldrh	r3, [r1, #12]
 8015fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015fc8:	079d      	lsls	r5, r3, #30
 8015fca:	4606      	mov	r6, r0
 8015fcc:	460c      	mov	r4, r1
 8015fce:	d507      	bpl.n	8015fe0 <__smakebuf_r+0x1c>
 8015fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015fd4:	6023      	str	r3, [r4, #0]
 8015fd6:	6123      	str	r3, [r4, #16]
 8015fd8:	2301      	movs	r3, #1
 8015fda:	6163      	str	r3, [r4, #20]
 8015fdc:	b002      	add	sp, #8
 8015fde:	bd70      	pop	{r4, r5, r6, pc}
 8015fe0:	ab01      	add	r3, sp, #4
 8015fe2:	466a      	mov	r2, sp
 8015fe4:	f7ff ffca 	bl	8015f7c <__swhatbuf_r>
 8015fe8:	9900      	ldr	r1, [sp, #0]
 8015fea:	4605      	mov	r5, r0
 8015fec:	4630      	mov	r0, r6
 8015fee:	f000 f881 	bl	80160f4 <_malloc_r>
 8015ff2:	b948      	cbnz	r0, 8016008 <__smakebuf_r+0x44>
 8015ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ff8:	059a      	lsls	r2, r3, #22
 8015ffa:	d4ef      	bmi.n	8015fdc <__smakebuf_r+0x18>
 8015ffc:	f023 0303 	bic.w	r3, r3, #3
 8016000:	f043 0302 	orr.w	r3, r3, #2
 8016004:	81a3      	strh	r3, [r4, #12]
 8016006:	e7e3      	b.n	8015fd0 <__smakebuf_r+0xc>
 8016008:	4b0d      	ldr	r3, [pc, #52]	; (8016040 <__smakebuf_r+0x7c>)
 801600a:	62b3      	str	r3, [r6, #40]	; 0x28
 801600c:	89a3      	ldrh	r3, [r4, #12]
 801600e:	6020      	str	r0, [r4, #0]
 8016010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016014:	81a3      	strh	r3, [r4, #12]
 8016016:	9b00      	ldr	r3, [sp, #0]
 8016018:	6163      	str	r3, [r4, #20]
 801601a:	9b01      	ldr	r3, [sp, #4]
 801601c:	6120      	str	r0, [r4, #16]
 801601e:	b15b      	cbz	r3, 8016038 <__smakebuf_r+0x74>
 8016020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016024:	4630      	mov	r0, r6
 8016026:	f000 fc3d 	bl	80168a4 <_isatty_r>
 801602a:	b128      	cbz	r0, 8016038 <__smakebuf_r+0x74>
 801602c:	89a3      	ldrh	r3, [r4, #12]
 801602e:	f023 0303 	bic.w	r3, r3, #3
 8016032:	f043 0301 	orr.w	r3, r3, #1
 8016036:	81a3      	strh	r3, [r4, #12]
 8016038:	89a0      	ldrh	r0, [r4, #12]
 801603a:	4305      	orrs	r5, r0
 801603c:	81a5      	strh	r5, [r4, #12]
 801603e:	e7cd      	b.n	8015fdc <__smakebuf_r+0x18>
 8016040:	08015db1 	.word	0x08015db1

08016044 <malloc>:
 8016044:	4b02      	ldr	r3, [pc, #8]	; (8016050 <malloc+0xc>)
 8016046:	4601      	mov	r1, r0
 8016048:	6818      	ldr	r0, [r3, #0]
 801604a:	f000 b853 	b.w	80160f4 <_malloc_r>
 801604e:	bf00      	nop
 8016050:	24000090 	.word	0x24000090

08016054 <_free_r>:
 8016054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016056:	2900      	cmp	r1, #0
 8016058:	d048      	beq.n	80160ec <_free_r+0x98>
 801605a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801605e:	9001      	str	r0, [sp, #4]
 8016060:	2b00      	cmp	r3, #0
 8016062:	f1a1 0404 	sub.w	r4, r1, #4
 8016066:	bfb8      	it	lt
 8016068:	18e4      	addlt	r4, r4, r3
 801606a:	f000 fc3d 	bl	80168e8 <__malloc_lock>
 801606e:	4a20      	ldr	r2, [pc, #128]	; (80160f0 <_free_r+0x9c>)
 8016070:	9801      	ldr	r0, [sp, #4]
 8016072:	6813      	ldr	r3, [r2, #0]
 8016074:	4615      	mov	r5, r2
 8016076:	b933      	cbnz	r3, 8016086 <_free_r+0x32>
 8016078:	6063      	str	r3, [r4, #4]
 801607a:	6014      	str	r4, [r2, #0]
 801607c:	b003      	add	sp, #12
 801607e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016082:	f000 bc37 	b.w	80168f4 <__malloc_unlock>
 8016086:	42a3      	cmp	r3, r4
 8016088:	d90b      	bls.n	80160a2 <_free_r+0x4e>
 801608a:	6821      	ldr	r1, [r4, #0]
 801608c:	1862      	adds	r2, r4, r1
 801608e:	4293      	cmp	r3, r2
 8016090:	bf04      	itt	eq
 8016092:	681a      	ldreq	r2, [r3, #0]
 8016094:	685b      	ldreq	r3, [r3, #4]
 8016096:	6063      	str	r3, [r4, #4]
 8016098:	bf04      	itt	eq
 801609a:	1852      	addeq	r2, r2, r1
 801609c:	6022      	streq	r2, [r4, #0]
 801609e:	602c      	str	r4, [r5, #0]
 80160a0:	e7ec      	b.n	801607c <_free_r+0x28>
 80160a2:	461a      	mov	r2, r3
 80160a4:	685b      	ldr	r3, [r3, #4]
 80160a6:	b10b      	cbz	r3, 80160ac <_free_r+0x58>
 80160a8:	42a3      	cmp	r3, r4
 80160aa:	d9fa      	bls.n	80160a2 <_free_r+0x4e>
 80160ac:	6811      	ldr	r1, [r2, #0]
 80160ae:	1855      	adds	r5, r2, r1
 80160b0:	42a5      	cmp	r5, r4
 80160b2:	d10b      	bne.n	80160cc <_free_r+0x78>
 80160b4:	6824      	ldr	r4, [r4, #0]
 80160b6:	4421      	add	r1, r4
 80160b8:	1854      	adds	r4, r2, r1
 80160ba:	42a3      	cmp	r3, r4
 80160bc:	6011      	str	r1, [r2, #0]
 80160be:	d1dd      	bne.n	801607c <_free_r+0x28>
 80160c0:	681c      	ldr	r4, [r3, #0]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	6053      	str	r3, [r2, #4]
 80160c6:	4421      	add	r1, r4
 80160c8:	6011      	str	r1, [r2, #0]
 80160ca:	e7d7      	b.n	801607c <_free_r+0x28>
 80160cc:	d902      	bls.n	80160d4 <_free_r+0x80>
 80160ce:	230c      	movs	r3, #12
 80160d0:	6003      	str	r3, [r0, #0]
 80160d2:	e7d3      	b.n	801607c <_free_r+0x28>
 80160d4:	6825      	ldr	r5, [r4, #0]
 80160d6:	1961      	adds	r1, r4, r5
 80160d8:	428b      	cmp	r3, r1
 80160da:	bf04      	itt	eq
 80160dc:	6819      	ldreq	r1, [r3, #0]
 80160de:	685b      	ldreq	r3, [r3, #4]
 80160e0:	6063      	str	r3, [r4, #4]
 80160e2:	bf04      	itt	eq
 80160e4:	1949      	addeq	r1, r1, r5
 80160e6:	6021      	streq	r1, [r4, #0]
 80160e8:	6054      	str	r4, [r2, #4]
 80160ea:	e7c7      	b.n	801607c <_free_r+0x28>
 80160ec:	b003      	add	sp, #12
 80160ee:	bd30      	pop	{r4, r5, pc}
 80160f0:	24002164 	.word	0x24002164

080160f4 <_malloc_r>:
 80160f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160f6:	1ccd      	adds	r5, r1, #3
 80160f8:	f025 0503 	bic.w	r5, r5, #3
 80160fc:	3508      	adds	r5, #8
 80160fe:	2d0c      	cmp	r5, #12
 8016100:	bf38      	it	cc
 8016102:	250c      	movcc	r5, #12
 8016104:	2d00      	cmp	r5, #0
 8016106:	4606      	mov	r6, r0
 8016108:	db01      	blt.n	801610e <_malloc_r+0x1a>
 801610a:	42a9      	cmp	r1, r5
 801610c:	d903      	bls.n	8016116 <_malloc_r+0x22>
 801610e:	230c      	movs	r3, #12
 8016110:	6033      	str	r3, [r6, #0]
 8016112:	2000      	movs	r0, #0
 8016114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016116:	f000 fbe7 	bl	80168e8 <__malloc_lock>
 801611a:	4921      	ldr	r1, [pc, #132]	; (80161a0 <_malloc_r+0xac>)
 801611c:	680a      	ldr	r2, [r1, #0]
 801611e:	4614      	mov	r4, r2
 8016120:	b99c      	cbnz	r4, 801614a <_malloc_r+0x56>
 8016122:	4f20      	ldr	r7, [pc, #128]	; (80161a4 <_malloc_r+0xb0>)
 8016124:	683b      	ldr	r3, [r7, #0]
 8016126:	b923      	cbnz	r3, 8016132 <_malloc_r+0x3e>
 8016128:	4621      	mov	r1, r4
 801612a:	4630      	mov	r0, r6
 801612c:	f000 fb2a 	bl	8016784 <_sbrk_r>
 8016130:	6038      	str	r0, [r7, #0]
 8016132:	4629      	mov	r1, r5
 8016134:	4630      	mov	r0, r6
 8016136:	f000 fb25 	bl	8016784 <_sbrk_r>
 801613a:	1c43      	adds	r3, r0, #1
 801613c:	d123      	bne.n	8016186 <_malloc_r+0x92>
 801613e:	230c      	movs	r3, #12
 8016140:	6033      	str	r3, [r6, #0]
 8016142:	4630      	mov	r0, r6
 8016144:	f000 fbd6 	bl	80168f4 <__malloc_unlock>
 8016148:	e7e3      	b.n	8016112 <_malloc_r+0x1e>
 801614a:	6823      	ldr	r3, [r4, #0]
 801614c:	1b5b      	subs	r3, r3, r5
 801614e:	d417      	bmi.n	8016180 <_malloc_r+0x8c>
 8016150:	2b0b      	cmp	r3, #11
 8016152:	d903      	bls.n	801615c <_malloc_r+0x68>
 8016154:	6023      	str	r3, [r4, #0]
 8016156:	441c      	add	r4, r3
 8016158:	6025      	str	r5, [r4, #0]
 801615a:	e004      	b.n	8016166 <_malloc_r+0x72>
 801615c:	6863      	ldr	r3, [r4, #4]
 801615e:	42a2      	cmp	r2, r4
 8016160:	bf0c      	ite	eq
 8016162:	600b      	streq	r3, [r1, #0]
 8016164:	6053      	strne	r3, [r2, #4]
 8016166:	4630      	mov	r0, r6
 8016168:	f000 fbc4 	bl	80168f4 <__malloc_unlock>
 801616c:	f104 000b 	add.w	r0, r4, #11
 8016170:	1d23      	adds	r3, r4, #4
 8016172:	f020 0007 	bic.w	r0, r0, #7
 8016176:	1ac2      	subs	r2, r0, r3
 8016178:	d0cc      	beq.n	8016114 <_malloc_r+0x20>
 801617a:	1a1b      	subs	r3, r3, r0
 801617c:	50a3      	str	r3, [r4, r2]
 801617e:	e7c9      	b.n	8016114 <_malloc_r+0x20>
 8016180:	4622      	mov	r2, r4
 8016182:	6864      	ldr	r4, [r4, #4]
 8016184:	e7cc      	b.n	8016120 <_malloc_r+0x2c>
 8016186:	1cc4      	adds	r4, r0, #3
 8016188:	f024 0403 	bic.w	r4, r4, #3
 801618c:	42a0      	cmp	r0, r4
 801618e:	d0e3      	beq.n	8016158 <_malloc_r+0x64>
 8016190:	1a21      	subs	r1, r4, r0
 8016192:	4630      	mov	r0, r6
 8016194:	f000 faf6 	bl	8016784 <_sbrk_r>
 8016198:	3001      	adds	r0, #1
 801619a:	d1dd      	bne.n	8016158 <_malloc_r+0x64>
 801619c:	e7cf      	b.n	801613e <_malloc_r+0x4a>
 801619e:	bf00      	nop
 80161a0:	24002164 	.word	0x24002164
 80161a4:	24002168 	.word	0x24002168

080161a8 <__sfputc_r>:
 80161a8:	6893      	ldr	r3, [r2, #8]
 80161aa:	3b01      	subs	r3, #1
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	b410      	push	{r4}
 80161b0:	6093      	str	r3, [r2, #8]
 80161b2:	da08      	bge.n	80161c6 <__sfputc_r+0x1e>
 80161b4:	6994      	ldr	r4, [r2, #24]
 80161b6:	42a3      	cmp	r3, r4
 80161b8:	db01      	blt.n	80161be <__sfputc_r+0x16>
 80161ba:	290a      	cmp	r1, #10
 80161bc:	d103      	bne.n	80161c6 <__sfputc_r+0x1e>
 80161be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161c2:	f7ff bc31 	b.w	8015a28 <__swbuf_r>
 80161c6:	6813      	ldr	r3, [r2, #0]
 80161c8:	1c58      	adds	r0, r3, #1
 80161ca:	6010      	str	r0, [r2, #0]
 80161cc:	7019      	strb	r1, [r3, #0]
 80161ce:	4608      	mov	r0, r1
 80161d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161d4:	4770      	bx	lr

080161d6 <__sfputs_r>:
 80161d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161d8:	4606      	mov	r6, r0
 80161da:	460f      	mov	r7, r1
 80161dc:	4614      	mov	r4, r2
 80161de:	18d5      	adds	r5, r2, r3
 80161e0:	42ac      	cmp	r4, r5
 80161e2:	d101      	bne.n	80161e8 <__sfputs_r+0x12>
 80161e4:	2000      	movs	r0, #0
 80161e6:	e007      	b.n	80161f8 <__sfputs_r+0x22>
 80161e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161ec:	463a      	mov	r2, r7
 80161ee:	4630      	mov	r0, r6
 80161f0:	f7ff ffda 	bl	80161a8 <__sfputc_r>
 80161f4:	1c43      	adds	r3, r0, #1
 80161f6:	d1f3      	bne.n	80161e0 <__sfputs_r+0xa>
 80161f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080161fc <_vfiprintf_r>:
 80161fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016200:	460d      	mov	r5, r1
 8016202:	b09d      	sub	sp, #116	; 0x74
 8016204:	4614      	mov	r4, r2
 8016206:	4698      	mov	r8, r3
 8016208:	4606      	mov	r6, r0
 801620a:	b118      	cbz	r0, 8016214 <_vfiprintf_r+0x18>
 801620c:	6983      	ldr	r3, [r0, #24]
 801620e:	b90b      	cbnz	r3, 8016214 <_vfiprintf_r+0x18>
 8016210:	f7ff fe02 	bl	8015e18 <__sinit>
 8016214:	4b89      	ldr	r3, [pc, #548]	; (801643c <_vfiprintf_r+0x240>)
 8016216:	429d      	cmp	r5, r3
 8016218:	d11b      	bne.n	8016252 <_vfiprintf_r+0x56>
 801621a:	6875      	ldr	r5, [r6, #4]
 801621c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801621e:	07d9      	lsls	r1, r3, #31
 8016220:	d405      	bmi.n	801622e <_vfiprintf_r+0x32>
 8016222:	89ab      	ldrh	r3, [r5, #12]
 8016224:	059a      	lsls	r2, r3, #22
 8016226:	d402      	bmi.n	801622e <_vfiprintf_r+0x32>
 8016228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801622a:	f7ff fea5 	bl	8015f78 <__retarget_lock_acquire_recursive>
 801622e:	89ab      	ldrh	r3, [r5, #12]
 8016230:	071b      	lsls	r3, r3, #28
 8016232:	d501      	bpl.n	8016238 <_vfiprintf_r+0x3c>
 8016234:	692b      	ldr	r3, [r5, #16]
 8016236:	b9eb      	cbnz	r3, 8016274 <_vfiprintf_r+0x78>
 8016238:	4629      	mov	r1, r5
 801623a:	4630      	mov	r0, r6
 801623c:	f7ff fc46 	bl	8015acc <__swsetup_r>
 8016240:	b1c0      	cbz	r0, 8016274 <_vfiprintf_r+0x78>
 8016242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016244:	07dc      	lsls	r4, r3, #31
 8016246:	d50e      	bpl.n	8016266 <_vfiprintf_r+0x6a>
 8016248:	f04f 30ff 	mov.w	r0, #4294967295
 801624c:	b01d      	add	sp, #116	; 0x74
 801624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016252:	4b7b      	ldr	r3, [pc, #492]	; (8016440 <_vfiprintf_r+0x244>)
 8016254:	429d      	cmp	r5, r3
 8016256:	d101      	bne.n	801625c <_vfiprintf_r+0x60>
 8016258:	68b5      	ldr	r5, [r6, #8]
 801625a:	e7df      	b.n	801621c <_vfiprintf_r+0x20>
 801625c:	4b79      	ldr	r3, [pc, #484]	; (8016444 <_vfiprintf_r+0x248>)
 801625e:	429d      	cmp	r5, r3
 8016260:	bf08      	it	eq
 8016262:	68f5      	ldreq	r5, [r6, #12]
 8016264:	e7da      	b.n	801621c <_vfiprintf_r+0x20>
 8016266:	89ab      	ldrh	r3, [r5, #12]
 8016268:	0598      	lsls	r0, r3, #22
 801626a:	d4ed      	bmi.n	8016248 <_vfiprintf_r+0x4c>
 801626c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801626e:	f7ff fe84 	bl	8015f7a <__retarget_lock_release_recursive>
 8016272:	e7e9      	b.n	8016248 <_vfiprintf_r+0x4c>
 8016274:	2300      	movs	r3, #0
 8016276:	9309      	str	r3, [sp, #36]	; 0x24
 8016278:	2320      	movs	r3, #32
 801627a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801627e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016282:	2330      	movs	r3, #48	; 0x30
 8016284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016448 <_vfiprintf_r+0x24c>
 8016288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801628c:	f04f 0901 	mov.w	r9, #1
 8016290:	4623      	mov	r3, r4
 8016292:	469a      	mov	sl, r3
 8016294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016298:	b10a      	cbz	r2, 801629e <_vfiprintf_r+0xa2>
 801629a:	2a25      	cmp	r2, #37	; 0x25
 801629c:	d1f9      	bne.n	8016292 <_vfiprintf_r+0x96>
 801629e:	ebba 0b04 	subs.w	fp, sl, r4
 80162a2:	d00b      	beq.n	80162bc <_vfiprintf_r+0xc0>
 80162a4:	465b      	mov	r3, fp
 80162a6:	4622      	mov	r2, r4
 80162a8:	4629      	mov	r1, r5
 80162aa:	4630      	mov	r0, r6
 80162ac:	f7ff ff93 	bl	80161d6 <__sfputs_r>
 80162b0:	3001      	adds	r0, #1
 80162b2:	f000 80aa 	beq.w	801640a <_vfiprintf_r+0x20e>
 80162b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162b8:	445a      	add	r2, fp
 80162ba:	9209      	str	r2, [sp, #36]	; 0x24
 80162bc:	f89a 3000 	ldrb.w	r3, [sl]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	f000 80a2 	beq.w	801640a <_vfiprintf_r+0x20e>
 80162c6:	2300      	movs	r3, #0
 80162c8:	f04f 32ff 	mov.w	r2, #4294967295
 80162cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162d0:	f10a 0a01 	add.w	sl, sl, #1
 80162d4:	9304      	str	r3, [sp, #16]
 80162d6:	9307      	str	r3, [sp, #28]
 80162d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162dc:	931a      	str	r3, [sp, #104]	; 0x68
 80162de:	4654      	mov	r4, sl
 80162e0:	2205      	movs	r2, #5
 80162e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162e6:	4858      	ldr	r0, [pc, #352]	; (8016448 <_vfiprintf_r+0x24c>)
 80162e8:	f7ea f91a 	bl	8000520 <memchr>
 80162ec:	9a04      	ldr	r2, [sp, #16]
 80162ee:	b9d8      	cbnz	r0, 8016328 <_vfiprintf_r+0x12c>
 80162f0:	06d1      	lsls	r1, r2, #27
 80162f2:	bf44      	itt	mi
 80162f4:	2320      	movmi	r3, #32
 80162f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162fa:	0713      	lsls	r3, r2, #28
 80162fc:	bf44      	itt	mi
 80162fe:	232b      	movmi	r3, #43	; 0x2b
 8016300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016304:	f89a 3000 	ldrb.w	r3, [sl]
 8016308:	2b2a      	cmp	r3, #42	; 0x2a
 801630a:	d015      	beq.n	8016338 <_vfiprintf_r+0x13c>
 801630c:	9a07      	ldr	r2, [sp, #28]
 801630e:	4654      	mov	r4, sl
 8016310:	2000      	movs	r0, #0
 8016312:	f04f 0c0a 	mov.w	ip, #10
 8016316:	4621      	mov	r1, r4
 8016318:	f811 3b01 	ldrb.w	r3, [r1], #1
 801631c:	3b30      	subs	r3, #48	; 0x30
 801631e:	2b09      	cmp	r3, #9
 8016320:	d94e      	bls.n	80163c0 <_vfiprintf_r+0x1c4>
 8016322:	b1b0      	cbz	r0, 8016352 <_vfiprintf_r+0x156>
 8016324:	9207      	str	r2, [sp, #28]
 8016326:	e014      	b.n	8016352 <_vfiprintf_r+0x156>
 8016328:	eba0 0308 	sub.w	r3, r0, r8
 801632c:	fa09 f303 	lsl.w	r3, r9, r3
 8016330:	4313      	orrs	r3, r2
 8016332:	9304      	str	r3, [sp, #16]
 8016334:	46a2      	mov	sl, r4
 8016336:	e7d2      	b.n	80162de <_vfiprintf_r+0xe2>
 8016338:	9b03      	ldr	r3, [sp, #12]
 801633a:	1d19      	adds	r1, r3, #4
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	9103      	str	r1, [sp, #12]
 8016340:	2b00      	cmp	r3, #0
 8016342:	bfbb      	ittet	lt
 8016344:	425b      	neglt	r3, r3
 8016346:	f042 0202 	orrlt.w	r2, r2, #2
 801634a:	9307      	strge	r3, [sp, #28]
 801634c:	9307      	strlt	r3, [sp, #28]
 801634e:	bfb8      	it	lt
 8016350:	9204      	strlt	r2, [sp, #16]
 8016352:	7823      	ldrb	r3, [r4, #0]
 8016354:	2b2e      	cmp	r3, #46	; 0x2e
 8016356:	d10c      	bne.n	8016372 <_vfiprintf_r+0x176>
 8016358:	7863      	ldrb	r3, [r4, #1]
 801635a:	2b2a      	cmp	r3, #42	; 0x2a
 801635c:	d135      	bne.n	80163ca <_vfiprintf_r+0x1ce>
 801635e:	9b03      	ldr	r3, [sp, #12]
 8016360:	1d1a      	adds	r2, r3, #4
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	9203      	str	r2, [sp, #12]
 8016366:	2b00      	cmp	r3, #0
 8016368:	bfb8      	it	lt
 801636a:	f04f 33ff 	movlt.w	r3, #4294967295
 801636e:	3402      	adds	r4, #2
 8016370:	9305      	str	r3, [sp, #20]
 8016372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016458 <_vfiprintf_r+0x25c>
 8016376:	7821      	ldrb	r1, [r4, #0]
 8016378:	2203      	movs	r2, #3
 801637a:	4650      	mov	r0, sl
 801637c:	f7ea f8d0 	bl	8000520 <memchr>
 8016380:	b140      	cbz	r0, 8016394 <_vfiprintf_r+0x198>
 8016382:	2340      	movs	r3, #64	; 0x40
 8016384:	eba0 000a 	sub.w	r0, r0, sl
 8016388:	fa03 f000 	lsl.w	r0, r3, r0
 801638c:	9b04      	ldr	r3, [sp, #16]
 801638e:	4303      	orrs	r3, r0
 8016390:	3401      	adds	r4, #1
 8016392:	9304      	str	r3, [sp, #16]
 8016394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016398:	482c      	ldr	r0, [pc, #176]	; (801644c <_vfiprintf_r+0x250>)
 801639a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801639e:	2206      	movs	r2, #6
 80163a0:	f7ea f8be 	bl	8000520 <memchr>
 80163a4:	2800      	cmp	r0, #0
 80163a6:	d03f      	beq.n	8016428 <_vfiprintf_r+0x22c>
 80163a8:	4b29      	ldr	r3, [pc, #164]	; (8016450 <_vfiprintf_r+0x254>)
 80163aa:	bb1b      	cbnz	r3, 80163f4 <_vfiprintf_r+0x1f8>
 80163ac:	9b03      	ldr	r3, [sp, #12]
 80163ae:	3307      	adds	r3, #7
 80163b0:	f023 0307 	bic.w	r3, r3, #7
 80163b4:	3308      	adds	r3, #8
 80163b6:	9303      	str	r3, [sp, #12]
 80163b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ba:	443b      	add	r3, r7
 80163bc:	9309      	str	r3, [sp, #36]	; 0x24
 80163be:	e767      	b.n	8016290 <_vfiprintf_r+0x94>
 80163c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80163c4:	460c      	mov	r4, r1
 80163c6:	2001      	movs	r0, #1
 80163c8:	e7a5      	b.n	8016316 <_vfiprintf_r+0x11a>
 80163ca:	2300      	movs	r3, #0
 80163cc:	3401      	adds	r4, #1
 80163ce:	9305      	str	r3, [sp, #20]
 80163d0:	4619      	mov	r1, r3
 80163d2:	f04f 0c0a 	mov.w	ip, #10
 80163d6:	4620      	mov	r0, r4
 80163d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163dc:	3a30      	subs	r2, #48	; 0x30
 80163de:	2a09      	cmp	r2, #9
 80163e0:	d903      	bls.n	80163ea <_vfiprintf_r+0x1ee>
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d0c5      	beq.n	8016372 <_vfiprintf_r+0x176>
 80163e6:	9105      	str	r1, [sp, #20]
 80163e8:	e7c3      	b.n	8016372 <_vfiprintf_r+0x176>
 80163ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80163ee:	4604      	mov	r4, r0
 80163f0:	2301      	movs	r3, #1
 80163f2:	e7f0      	b.n	80163d6 <_vfiprintf_r+0x1da>
 80163f4:	ab03      	add	r3, sp, #12
 80163f6:	9300      	str	r3, [sp, #0]
 80163f8:	462a      	mov	r2, r5
 80163fa:	4b16      	ldr	r3, [pc, #88]	; (8016454 <_vfiprintf_r+0x258>)
 80163fc:	a904      	add	r1, sp, #16
 80163fe:	4630      	mov	r0, r6
 8016400:	f3af 8000 	nop.w
 8016404:	4607      	mov	r7, r0
 8016406:	1c78      	adds	r0, r7, #1
 8016408:	d1d6      	bne.n	80163b8 <_vfiprintf_r+0x1bc>
 801640a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801640c:	07d9      	lsls	r1, r3, #31
 801640e:	d405      	bmi.n	801641c <_vfiprintf_r+0x220>
 8016410:	89ab      	ldrh	r3, [r5, #12]
 8016412:	059a      	lsls	r2, r3, #22
 8016414:	d402      	bmi.n	801641c <_vfiprintf_r+0x220>
 8016416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016418:	f7ff fdaf 	bl	8015f7a <__retarget_lock_release_recursive>
 801641c:	89ab      	ldrh	r3, [r5, #12]
 801641e:	065b      	lsls	r3, r3, #25
 8016420:	f53f af12 	bmi.w	8016248 <_vfiprintf_r+0x4c>
 8016424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016426:	e711      	b.n	801624c <_vfiprintf_r+0x50>
 8016428:	ab03      	add	r3, sp, #12
 801642a:	9300      	str	r3, [sp, #0]
 801642c:	462a      	mov	r2, r5
 801642e:	4b09      	ldr	r3, [pc, #36]	; (8016454 <_vfiprintf_r+0x258>)
 8016430:	a904      	add	r1, sp, #16
 8016432:	4630      	mov	r0, r6
 8016434:	f000 f880 	bl	8016538 <_printf_i>
 8016438:	e7e4      	b.n	8016404 <_vfiprintf_r+0x208>
 801643a:	bf00      	nop
 801643c:	08016e60 	.word	0x08016e60
 8016440:	08016e80 	.word	0x08016e80
 8016444:	08016e40 	.word	0x08016e40
 8016448:	08016ea0 	.word	0x08016ea0
 801644c:	08016eaa 	.word	0x08016eaa
 8016450:	00000000 	.word	0x00000000
 8016454:	080161d7 	.word	0x080161d7
 8016458:	08016ea6 	.word	0x08016ea6

0801645c <_printf_common>:
 801645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016460:	4616      	mov	r6, r2
 8016462:	4699      	mov	r9, r3
 8016464:	688a      	ldr	r2, [r1, #8]
 8016466:	690b      	ldr	r3, [r1, #16]
 8016468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801646c:	4293      	cmp	r3, r2
 801646e:	bfb8      	it	lt
 8016470:	4613      	movlt	r3, r2
 8016472:	6033      	str	r3, [r6, #0]
 8016474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016478:	4607      	mov	r7, r0
 801647a:	460c      	mov	r4, r1
 801647c:	b10a      	cbz	r2, 8016482 <_printf_common+0x26>
 801647e:	3301      	adds	r3, #1
 8016480:	6033      	str	r3, [r6, #0]
 8016482:	6823      	ldr	r3, [r4, #0]
 8016484:	0699      	lsls	r1, r3, #26
 8016486:	bf42      	ittt	mi
 8016488:	6833      	ldrmi	r3, [r6, #0]
 801648a:	3302      	addmi	r3, #2
 801648c:	6033      	strmi	r3, [r6, #0]
 801648e:	6825      	ldr	r5, [r4, #0]
 8016490:	f015 0506 	ands.w	r5, r5, #6
 8016494:	d106      	bne.n	80164a4 <_printf_common+0x48>
 8016496:	f104 0a19 	add.w	sl, r4, #25
 801649a:	68e3      	ldr	r3, [r4, #12]
 801649c:	6832      	ldr	r2, [r6, #0]
 801649e:	1a9b      	subs	r3, r3, r2
 80164a0:	42ab      	cmp	r3, r5
 80164a2:	dc26      	bgt.n	80164f2 <_printf_common+0x96>
 80164a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80164a8:	1e13      	subs	r3, r2, #0
 80164aa:	6822      	ldr	r2, [r4, #0]
 80164ac:	bf18      	it	ne
 80164ae:	2301      	movne	r3, #1
 80164b0:	0692      	lsls	r2, r2, #26
 80164b2:	d42b      	bmi.n	801650c <_printf_common+0xb0>
 80164b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80164b8:	4649      	mov	r1, r9
 80164ba:	4638      	mov	r0, r7
 80164bc:	47c0      	blx	r8
 80164be:	3001      	adds	r0, #1
 80164c0:	d01e      	beq.n	8016500 <_printf_common+0xa4>
 80164c2:	6823      	ldr	r3, [r4, #0]
 80164c4:	68e5      	ldr	r5, [r4, #12]
 80164c6:	6832      	ldr	r2, [r6, #0]
 80164c8:	f003 0306 	and.w	r3, r3, #6
 80164cc:	2b04      	cmp	r3, #4
 80164ce:	bf08      	it	eq
 80164d0:	1aad      	subeq	r5, r5, r2
 80164d2:	68a3      	ldr	r3, [r4, #8]
 80164d4:	6922      	ldr	r2, [r4, #16]
 80164d6:	bf0c      	ite	eq
 80164d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80164dc:	2500      	movne	r5, #0
 80164de:	4293      	cmp	r3, r2
 80164e0:	bfc4      	itt	gt
 80164e2:	1a9b      	subgt	r3, r3, r2
 80164e4:	18ed      	addgt	r5, r5, r3
 80164e6:	2600      	movs	r6, #0
 80164e8:	341a      	adds	r4, #26
 80164ea:	42b5      	cmp	r5, r6
 80164ec:	d11a      	bne.n	8016524 <_printf_common+0xc8>
 80164ee:	2000      	movs	r0, #0
 80164f0:	e008      	b.n	8016504 <_printf_common+0xa8>
 80164f2:	2301      	movs	r3, #1
 80164f4:	4652      	mov	r2, sl
 80164f6:	4649      	mov	r1, r9
 80164f8:	4638      	mov	r0, r7
 80164fa:	47c0      	blx	r8
 80164fc:	3001      	adds	r0, #1
 80164fe:	d103      	bne.n	8016508 <_printf_common+0xac>
 8016500:	f04f 30ff 	mov.w	r0, #4294967295
 8016504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016508:	3501      	adds	r5, #1
 801650a:	e7c6      	b.n	801649a <_printf_common+0x3e>
 801650c:	18e1      	adds	r1, r4, r3
 801650e:	1c5a      	adds	r2, r3, #1
 8016510:	2030      	movs	r0, #48	; 0x30
 8016512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016516:	4422      	add	r2, r4
 8016518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801651c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016520:	3302      	adds	r3, #2
 8016522:	e7c7      	b.n	80164b4 <_printf_common+0x58>
 8016524:	2301      	movs	r3, #1
 8016526:	4622      	mov	r2, r4
 8016528:	4649      	mov	r1, r9
 801652a:	4638      	mov	r0, r7
 801652c:	47c0      	blx	r8
 801652e:	3001      	adds	r0, #1
 8016530:	d0e6      	beq.n	8016500 <_printf_common+0xa4>
 8016532:	3601      	adds	r6, #1
 8016534:	e7d9      	b.n	80164ea <_printf_common+0x8e>
	...

08016538 <_printf_i>:
 8016538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801653c:	460c      	mov	r4, r1
 801653e:	4691      	mov	r9, r2
 8016540:	7e27      	ldrb	r7, [r4, #24]
 8016542:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016544:	2f78      	cmp	r7, #120	; 0x78
 8016546:	4680      	mov	r8, r0
 8016548:	469a      	mov	sl, r3
 801654a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801654e:	d807      	bhi.n	8016560 <_printf_i+0x28>
 8016550:	2f62      	cmp	r7, #98	; 0x62
 8016552:	d80a      	bhi.n	801656a <_printf_i+0x32>
 8016554:	2f00      	cmp	r7, #0
 8016556:	f000 80d8 	beq.w	801670a <_printf_i+0x1d2>
 801655a:	2f58      	cmp	r7, #88	; 0x58
 801655c:	f000 80a3 	beq.w	80166a6 <_printf_i+0x16e>
 8016560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016568:	e03a      	b.n	80165e0 <_printf_i+0xa8>
 801656a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801656e:	2b15      	cmp	r3, #21
 8016570:	d8f6      	bhi.n	8016560 <_printf_i+0x28>
 8016572:	a001      	add	r0, pc, #4	; (adr r0, 8016578 <_printf_i+0x40>)
 8016574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016578:	080165d1 	.word	0x080165d1
 801657c:	080165e5 	.word	0x080165e5
 8016580:	08016561 	.word	0x08016561
 8016584:	08016561 	.word	0x08016561
 8016588:	08016561 	.word	0x08016561
 801658c:	08016561 	.word	0x08016561
 8016590:	080165e5 	.word	0x080165e5
 8016594:	08016561 	.word	0x08016561
 8016598:	08016561 	.word	0x08016561
 801659c:	08016561 	.word	0x08016561
 80165a0:	08016561 	.word	0x08016561
 80165a4:	080166f1 	.word	0x080166f1
 80165a8:	08016615 	.word	0x08016615
 80165ac:	080166d3 	.word	0x080166d3
 80165b0:	08016561 	.word	0x08016561
 80165b4:	08016561 	.word	0x08016561
 80165b8:	08016713 	.word	0x08016713
 80165bc:	08016561 	.word	0x08016561
 80165c0:	08016615 	.word	0x08016615
 80165c4:	08016561 	.word	0x08016561
 80165c8:	08016561 	.word	0x08016561
 80165cc:	080166db 	.word	0x080166db
 80165d0:	680b      	ldr	r3, [r1, #0]
 80165d2:	1d1a      	adds	r2, r3, #4
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	600a      	str	r2, [r1, #0]
 80165d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80165dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165e0:	2301      	movs	r3, #1
 80165e2:	e0a3      	b.n	801672c <_printf_i+0x1f4>
 80165e4:	6825      	ldr	r5, [r4, #0]
 80165e6:	6808      	ldr	r0, [r1, #0]
 80165e8:	062e      	lsls	r6, r5, #24
 80165ea:	f100 0304 	add.w	r3, r0, #4
 80165ee:	d50a      	bpl.n	8016606 <_printf_i+0xce>
 80165f0:	6805      	ldr	r5, [r0, #0]
 80165f2:	600b      	str	r3, [r1, #0]
 80165f4:	2d00      	cmp	r5, #0
 80165f6:	da03      	bge.n	8016600 <_printf_i+0xc8>
 80165f8:	232d      	movs	r3, #45	; 0x2d
 80165fa:	426d      	negs	r5, r5
 80165fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016600:	485e      	ldr	r0, [pc, #376]	; (801677c <_printf_i+0x244>)
 8016602:	230a      	movs	r3, #10
 8016604:	e019      	b.n	801663a <_printf_i+0x102>
 8016606:	f015 0f40 	tst.w	r5, #64	; 0x40
 801660a:	6805      	ldr	r5, [r0, #0]
 801660c:	600b      	str	r3, [r1, #0]
 801660e:	bf18      	it	ne
 8016610:	b22d      	sxthne	r5, r5
 8016612:	e7ef      	b.n	80165f4 <_printf_i+0xbc>
 8016614:	680b      	ldr	r3, [r1, #0]
 8016616:	6825      	ldr	r5, [r4, #0]
 8016618:	1d18      	adds	r0, r3, #4
 801661a:	6008      	str	r0, [r1, #0]
 801661c:	0628      	lsls	r0, r5, #24
 801661e:	d501      	bpl.n	8016624 <_printf_i+0xec>
 8016620:	681d      	ldr	r5, [r3, #0]
 8016622:	e002      	b.n	801662a <_printf_i+0xf2>
 8016624:	0669      	lsls	r1, r5, #25
 8016626:	d5fb      	bpl.n	8016620 <_printf_i+0xe8>
 8016628:	881d      	ldrh	r5, [r3, #0]
 801662a:	4854      	ldr	r0, [pc, #336]	; (801677c <_printf_i+0x244>)
 801662c:	2f6f      	cmp	r7, #111	; 0x6f
 801662e:	bf0c      	ite	eq
 8016630:	2308      	moveq	r3, #8
 8016632:	230a      	movne	r3, #10
 8016634:	2100      	movs	r1, #0
 8016636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801663a:	6866      	ldr	r6, [r4, #4]
 801663c:	60a6      	str	r6, [r4, #8]
 801663e:	2e00      	cmp	r6, #0
 8016640:	bfa2      	ittt	ge
 8016642:	6821      	ldrge	r1, [r4, #0]
 8016644:	f021 0104 	bicge.w	r1, r1, #4
 8016648:	6021      	strge	r1, [r4, #0]
 801664a:	b90d      	cbnz	r5, 8016650 <_printf_i+0x118>
 801664c:	2e00      	cmp	r6, #0
 801664e:	d04d      	beq.n	80166ec <_printf_i+0x1b4>
 8016650:	4616      	mov	r6, r2
 8016652:	fbb5 f1f3 	udiv	r1, r5, r3
 8016656:	fb03 5711 	mls	r7, r3, r1, r5
 801665a:	5dc7      	ldrb	r7, [r0, r7]
 801665c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016660:	462f      	mov	r7, r5
 8016662:	42bb      	cmp	r3, r7
 8016664:	460d      	mov	r5, r1
 8016666:	d9f4      	bls.n	8016652 <_printf_i+0x11a>
 8016668:	2b08      	cmp	r3, #8
 801666a:	d10b      	bne.n	8016684 <_printf_i+0x14c>
 801666c:	6823      	ldr	r3, [r4, #0]
 801666e:	07df      	lsls	r7, r3, #31
 8016670:	d508      	bpl.n	8016684 <_printf_i+0x14c>
 8016672:	6923      	ldr	r3, [r4, #16]
 8016674:	6861      	ldr	r1, [r4, #4]
 8016676:	4299      	cmp	r1, r3
 8016678:	bfde      	ittt	le
 801667a:	2330      	movle	r3, #48	; 0x30
 801667c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016684:	1b92      	subs	r2, r2, r6
 8016686:	6122      	str	r2, [r4, #16]
 8016688:	f8cd a000 	str.w	sl, [sp]
 801668c:	464b      	mov	r3, r9
 801668e:	aa03      	add	r2, sp, #12
 8016690:	4621      	mov	r1, r4
 8016692:	4640      	mov	r0, r8
 8016694:	f7ff fee2 	bl	801645c <_printf_common>
 8016698:	3001      	adds	r0, #1
 801669a:	d14c      	bne.n	8016736 <_printf_i+0x1fe>
 801669c:	f04f 30ff 	mov.w	r0, #4294967295
 80166a0:	b004      	add	sp, #16
 80166a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166a6:	4835      	ldr	r0, [pc, #212]	; (801677c <_printf_i+0x244>)
 80166a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80166ac:	6823      	ldr	r3, [r4, #0]
 80166ae:	680e      	ldr	r6, [r1, #0]
 80166b0:	061f      	lsls	r7, r3, #24
 80166b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80166b6:	600e      	str	r6, [r1, #0]
 80166b8:	d514      	bpl.n	80166e4 <_printf_i+0x1ac>
 80166ba:	07d9      	lsls	r1, r3, #31
 80166bc:	bf44      	itt	mi
 80166be:	f043 0320 	orrmi.w	r3, r3, #32
 80166c2:	6023      	strmi	r3, [r4, #0]
 80166c4:	b91d      	cbnz	r5, 80166ce <_printf_i+0x196>
 80166c6:	6823      	ldr	r3, [r4, #0]
 80166c8:	f023 0320 	bic.w	r3, r3, #32
 80166cc:	6023      	str	r3, [r4, #0]
 80166ce:	2310      	movs	r3, #16
 80166d0:	e7b0      	b.n	8016634 <_printf_i+0xfc>
 80166d2:	6823      	ldr	r3, [r4, #0]
 80166d4:	f043 0320 	orr.w	r3, r3, #32
 80166d8:	6023      	str	r3, [r4, #0]
 80166da:	2378      	movs	r3, #120	; 0x78
 80166dc:	4828      	ldr	r0, [pc, #160]	; (8016780 <_printf_i+0x248>)
 80166de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80166e2:	e7e3      	b.n	80166ac <_printf_i+0x174>
 80166e4:	065e      	lsls	r6, r3, #25
 80166e6:	bf48      	it	mi
 80166e8:	b2ad      	uxthmi	r5, r5
 80166ea:	e7e6      	b.n	80166ba <_printf_i+0x182>
 80166ec:	4616      	mov	r6, r2
 80166ee:	e7bb      	b.n	8016668 <_printf_i+0x130>
 80166f0:	680b      	ldr	r3, [r1, #0]
 80166f2:	6826      	ldr	r6, [r4, #0]
 80166f4:	6960      	ldr	r0, [r4, #20]
 80166f6:	1d1d      	adds	r5, r3, #4
 80166f8:	600d      	str	r5, [r1, #0]
 80166fa:	0635      	lsls	r5, r6, #24
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	d501      	bpl.n	8016704 <_printf_i+0x1cc>
 8016700:	6018      	str	r0, [r3, #0]
 8016702:	e002      	b.n	801670a <_printf_i+0x1d2>
 8016704:	0671      	lsls	r1, r6, #25
 8016706:	d5fb      	bpl.n	8016700 <_printf_i+0x1c8>
 8016708:	8018      	strh	r0, [r3, #0]
 801670a:	2300      	movs	r3, #0
 801670c:	6123      	str	r3, [r4, #16]
 801670e:	4616      	mov	r6, r2
 8016710:	e7ba      	b.n	8016688 <_printf_i+0x150>
 8016712:	680b      	ldr	r3, [r1, #0]
 8016714:	1d1a      	adds	r2, r3, #4
 8016716:	600a      	str	r2, [r1, #0]
 8016718:	681e      	ldr	r6, [r3, #0]
 801671a:	6862      	ldr	r2, [r4, #4]
 801671c:	2100      	movs	r1, #0
 801671e:	4630      	mov	r0, r6
 8016720:	f7e9 fefe 	bl	8000520 <memchr>
 8016724:	b108      	cbz	r0, 801672a <_printf_i+0x1f2>
 8016726:	1b80      	subs	r0, r0, r6
 8016728:	6060      	str	r0, [r4, #4]
 801672a:	6863      	ldr	r3, [r4, #4]
 801672c:	6123      	str	r3, [r4, #16]
 801672e:	2300      	movs	r3, #0
 8016730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016734:	e7a8      	b.n	8016688 <_printf_i+0x150>
 8016736:	6923      	ldr	r3, [r4, #16]
 8016738:	4632      	mov	r2, r6
 801673a:	4649      	mov	r1, r9
 801673c:	4640      	mov	r0, r8
 801673e:	47d0      	blx	sl
 8016740:	3001      	adds	r0, #1
 8016742:	d0ab      	beq.n	801669c <_printf_i+0x164>
 8016744:	6823      	ldr	r3, [r4, #0]
 8016746:	079b      	lsls	r3, r3, #30
 8016748:	d413      	bmi.n	8016772 <_printf_i+0x23a>
 801674a:	68e0      	ldr	r0, [r4, #12]
 801674c:	9b03      	ldr	r3, [sp, #12]
 801674e:	4298      	cmp	r0, r3
 8016750:	bfb8      	it	lt
 8016752:	4618      	movlt	r0, r3
 8016754:	e7a4      	b.n	80166a0 <_printf_i+0x168>
 8016756:	2301      	movs	r3, #1
 8016758:	4632      	mov	r2, r6
 801675a:	4649      	mov	r1, r9
 801675c:	4640      	mov	r0, r8
 801675e:	47d0      	blx	sl
 8016760:	3001      	adds	r0, #1
 8016762:	d09b      	beq.n	801669c <_printf_i+0x164>
 8016764:	3501      	adds	r5, #1
 8016766:	68e3      	ldr	r3, [r4, #12]
 8016768:	9903      	ldr	r1, [sp, #12]
 801676a:	1a5b      	subs	r3, r3, r1
 801676c:	42ab      	cmp	r3, r5
 801676e:	dcf2      	bgt.n	8016756 <_printf_i+0x21e>
 8016770:	e7eb      	b.n	801674a <_printf_i+0x212>
 8016772:	2500      	movs	r5, #0
 8016774:	f104 0619 	add.w	r6, r4, #25
 8016778:	e7f5      	b.n	8016766 <_printf_i+0x22e>
 801677a:	bf00      	nop
 801677c:	08016eb1 	.word	0x08016eb1
 8016780:	08016ec2 	.word	0x08016ec2

08016784 <_sbrk_r>:
 8016784:	b538      	push	{r3, r4, r5, lr}
 8016786:	4d06      	ldr	r5, [pc, #24]	; (80167a0 <_sbrk_r+0x1c>)
 8016788:	2300      	movs	r3, #0
 801678a:	4604      	mov	r4, r0
 801678c:	4608      	mov	r0, r1
 801678e:	602b      	str	r3, [r5, #0]
 8016790:	f7ea fc5e 	bl	8001050 <_sbrk>
 8016794:	1c43      	adds	r3, r0, #1
 8016796:	d102      	bne.n	801679e <_sbrk_r+0x1a>
 8016798:	682b      	ldr	r3, [r5, #0]
 801679a:	b103      	cbz	r3, 801679e <_sbrk_r+0x1a>
 801679c:	6023      	str	r3, [r4, #0]
 801679e:	bd38      	pop	{r3, r4, r5, pc}
 80167a0:	24005350 	.word	0x24005350

080167a4 <__sread>:
 80167a4:	b510      	push	{r4, lr}
 80167a6:	460c      	mov	r4, r1
 80167a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167ac:	f000 f8a8 	bl	8016900 <_read_r>
 80167b0:	2800      	cmp	r0, #0
 80167b2:	bfab      	itete	ge
 80167b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80167b6:	89a3      	ldrhlt	r3, [r4, #12]
 80167b8:	181b      	addge	r3, r3, r0
 80167ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80167be:	bfac      	ite	ge
 80167c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80167c2:	81a3      	strhlt	r3, [r4, #12]
 80167c4:	bd10      	pop	{r4, pc}

080167c6 <__swrite>:
 80167c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167ca:	461f      	mov	r7, r3
 80167cc:	898b      	ldrh	r3, [r1, #12]
 80167ce:	05db      	lsls	r3, r3, #23
 80167d0:	4605      	mov	r5, r0
 80167d2:	460c      	mov	r4, r1
 80167d4:	4616      	mov	r6, r2
 80167d6:	d505      	bpl.n	80167e4 <__swrite+0x1e>
 80167d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167dc:	2302      	movs	r3, #2
 80167de:	2200      	movs	r2, #0
 80167e0:	f000 f870 	bl	80168c4 <_lseek_r>
 80167e4:	89a3      	ldrh	r3, [r4, #12]
 80167e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80167ee:	81a3      	strh	r3, [r4, #12]
 80167f0:	4632      	mov	r2, r6
 80167f2:	463b      	mov	r3, r7
 80167f4:	4628      	mov	r0, r5
 80167f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167fa:	f000 b817 	b.w	801682c <_write_r>

080167fe <__sseek>:
 80167fe:	b510      	push	{r4, lr}
 8016800:	460c      	mov	r4, r1
 8016802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016806:	f000 f85d 	bl	80168c4 <_lseek_r>
 801680a:	1c43      	adds	r3, r0, #1
 801680c:	89a3      	ldrh	r3, [r4, #12]
 801680e:	bf15      	itete	ne
 8016810:	6560      	strne	r0, [r4, #84]	; 0x54
 8016812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801681a:	81a3      	strheq	r3, [r4, #12]
 801681c:	bf18      	it	ne
 801681e:	81a3      	strhne	r3, [r4, #12]
 8016820:	bd10      	pop	{r4, pc}

08016822 <__sclose>:
 8016822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016826:	f000 b81b 	b.w	8016860 <_close_r>
	...

0801682c <_write_r>:
 801682c:	b538      	push	{r3, r4, r5, lr}
 801682e:	4d07      	ldr	r5, [pc, #28]	; (801684c <_write_r+0x20>)
 8016830:	4604      	mov	r4, r0
 8016832:	4608      	mov	r0, r1
 8016834:	4611      	mov	r1, r2
 8016836:	2200      	movs	r2, #0
 8016838:	602a      	str	r2, [r5, #0]
 801683a:	461a      	mov	r2, r3
 801683c:	f7ea fbb7 	bl	8000fae <_write>
 8016840:	1c43      	adds	r3, r0, #1
 8016842:	d102      	bne.n	801684a <_write_r+0x1e>
 8016844:	682b      	ldr	r3, [r5, #0]
 8016846:	b103      	cbz	r3, 801684a <_write_r+0x1e>
 8016848:	6023      	str	r3, [r4, #0]
 801684a:	bd38      	pop	{r3, r4, r5, pc}
 801684c:	24005350 	.word	0x24005350

08016850 <abort>:
 8016850:	b508      	push	{r3, lr}
 8016852:	2006      	movs	r0, #6
 8016854:	f000 f88e 	bl	8016974 <raise>
 8016858:	2001      	movs	r0, #1
 801685a:	f7ea fb81 	bl	8000f60 <_exit>
	...

08016860 <_close_r>:
 8016860:	b538      	push	{r3, r4, r5, lr}
 8016862:	4d06      	ldr	r5, [pc, #24]	; (801687c <_close_r+0x1c>)
 8016864:	2300      	movs	r3, #0
 8016866:	4604      	mov	r4, r0
 8016868:	4608      	mov	r0, r1
 801686a:	602b      	str	r3, [r5, #0]
 801686c:	f7ea fbbb 	bl	8000fe6 <_close>
 8016870:	1c43      	adds	r3, r0, #1
 8016872:	d102      	bne.n	801687a <_close_r+0x1a>
 8016874:	682b      	ldr	r3, [r5, #0]
 8016876:	b103      	cbz	r3, 801687a <_close_r+0x1a>
 8016878:	6023      	str	r3, [r4, #0]
 801687a:	bd38      	pop	{r3, r4, r5, pc}
 801687c:	24005350 	.word	0x24005350

08016880 <_fstat_r>:
 8016880:	b538      	push	{r3, r4, r5, lr}
 8016882:	4d07      	ldr	r5, [pc, #28]	; (80168a0 <_fstat_r+0x20>)
 8016884:	2300      	movs	r3, #0
 8016886:	4604      	mov	r4, r0
 8016888:	4608      	mov	r0, r1
 801688a:	4611      	mov	r1, r2
 801688c:	602b      	str	r3, [r5, #0]
 801688e:	f7ea fbb6 	bl	8000ffe <_fstat>
 8016892:	1c43      	adds	r3, r0, #1
 8016894:	d102      	bne.n	801689c <_fstat_r+0x1c>
 8016896:	682b      	ldr	r3, [r5, #0]
 8016898:	b103      	cbz	r3, 801689c <_fstat_r+0x1c>
 801689a:	6023      	str	r3, [r4, #0]
 801689c:	bd38      	pop	{r3, r4, r5, pc}
 801689e:	bf00      	nop
 80168a0:	24005350 	.word	0x24005350

080168a4 <_isatty_r>:
 80168a4:	b538      	push	{r3, r4, r5, lr}
 80168a6:	4d06      	ldr	r5, [pc, #24]	; (80168c0 <_isatty_r+0x1c>)
 80168a8:	2300      	movs	r3, #0
 80168aa:	4604      	mov	r4, r0
 80168ac:	4608      	mov	r0, r1
 80168ae:	602b      	str	r3, [r5, #0]
 80168b0:	f7ea fbb5 	bl	800101e <_isatty>
 80168b4:	1c43      	adds	r3, r0, #1
 80168b6:	d102      	bne.n	80168be <_isatty_r+0x1a>
 80168b8:	682b      	ldr	r3, [r5, #0]
 80168ba:	b103      	cbz	r3, 80168be <_isatty_r+0x1a>
 80168bc:	6023      	str	r3, [r4, #0]
 80168be:	bd38      	pop	{r3, r4, r5, pc}
 80168c0:	24005350 	.word	0x24005350

080168c4 <_lseek_r>:
 80168c4:	b538      	push	{r3, r4, r5, lr}
 80168c6:	4d07      	ldr	r5, [pc, #28]	; (80168e4 <_lseek_r+0x20>)
 80168c8:	4604      	mov	r4, r0
 80168ca:	4608      	mov	r0, r1
 80168cc:	4611      	mov	r1, r2
 80168ce:	2200      	movs	r2, #0
 80168d0:	602a      	str	r2, [r5, #0]
 80168d2:	461a      	mov	r2, r3
 80168d4:	f7ea fbae 	bl	8001034 <_lseek>
 80168d8:	1c43      	adds	r3, r0, #1
 80168da:	d102      	bne.n	80168e2 <_lseek_r+0x1e>
 80168dc:	682b      	ldr	r3, [r5, #0]
 80168de:	b103      	cbz	r3, 80168e2 <_lseek_r+0x1e>
 80168e0:	6023      	str	r3, [r4, #0]
 80168e2:	bd38      	pop	{r3, r4, r5, pc}
 80168e4:	24005350 	.word	0x24005350

080168e8 <__malloc_lock>:
 80168e8:	4801      	ldr	r0, [pc, #4]	; (80168f0 <__malloc_lock+0x8>)
 80168ea:	f7ff bb45 	b.w	8015f78 <__retarget_lock_acquire_recursive>
 80168ee:	bf00      	nop
 80168f0:	24005348 	.word	0x24005348

080168f4 <__malloc_unlock>:
 80168f4:	4801      	ldr	r0, [pc, #4]	; (80168fc <__malloc_unlock+0x8>)
 80168f6:	f7ff bb40 	b.w	8015f7a <__retarget_lock_release_recursive>
 80168fa:	bf00      	nop
 80168fc:	24005348 	.word	0x24005348

08016900 <_read_r>:
 8016900:	b538      	push	{r3, r4, r5, lr}
 8016902:	4d07      	ldr	r5, [pc, #28]	; (8016920 <_read_r+0x20>)
 8016904:	4604      	mov	r4, r0
 8016906:	4608      	mov	r0, r1
 8016908:	4611      	mov	r1, r2
 801690a:	2200      	movs	r2, #0
 801690c:	602a      	str	r2, [r5, #0]
 801690e:	461a      	mov	r2, r3
 8016910:	f7ea fb30 	bl	8000f74 <_read>
 8016914:	1c43      	adds	r3, r0, #1
 8016916:	d102      	bne.n	801691e <_read_r+0x1e>
 8016918:	682b      	ldr	r3, [r5, #0]
 801691a:	b103      	cbz	r3, 801691e <_read_r+0x1e>
 801691c:	6023      	str	r3, [r4, #0]
 801691e:	bd38      	pop	{r3, r4, r5, pc}
 8016920:	24005350 	.word	0x24005350

08016924 <_raise_r>:
 8016924:	291f      	cmp	r1, #31
 8016926:	b538      	push	{r3, r4, r5, lr}
 8016928:	4604      	mov	r4, r0
 801692a:	460d      	mov	r5, r1
 801692c:	d904      	bls.n	8016938 <_raise_r+0x14>
 801692e:	2316      	movs	r3, #22
 8016930:	6003      	str	r3, [r0, #0]
 8016932:	f04f 30ff 	mov.w	r0, #4294967295
 8016936:	bd38      	pop	{r3, r4, r5, pc}
 8016938:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801693a:	b112      	cbz	r2, 8016942 <_raise_r+0x1e>
 801693c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016940:	b94b      	cbnz	r3, 8016956 <_raise_r+0x32>
 8016942:	4620      	mov	r0, r4
 8016944:	f000 f830 	bl	80169a8 <_getpid_r>
 8016948:	462a      	mov	r2, r5
 801694a:	4601      	mov	r1, r0
 801694c:	4620      	mov	r0, r4
 801694e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016952:	f000 b817 	b.w	8016984 <_kill_r>
 8016956:	2b01      	cmp	r3, #1
 8016958:	d00a      	beq.n	8016970 <_raise_r+0x4c>
 801695a:	1c59      	adds	r1, r3, #1
 801695c:	d103      	bne.n	8016966 <_raise_r+0x42>
 801695e:	2316      	movs	r3, #22
 8016960:	6003      	str	r3, [r0, #0]
 8016962:	2001      	movs	r0, #1
 8016964:	e7e7      	b.n	8016936 <_raise_r+0x12>
 8016966:	2400      	movs	r4, #0
 8016968:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801696c:	4628      	mov	r0, r5
 801696e:	4798      	blx	r3
 8016970:	2000      	movs	r0, #0
 8016972:	e7e0      	b.n	8016936 <_raise_r+0x12>

08016974 <raise>:
 8016974:	4b02      	ldr	r3, [pc, #8]	; (8016980 <raise+0xc>)
 8016976:	4601      	mov	r1, r0
 8016978:	6818      	ldr	r0, [r3, #0]
 801697a:	f7ff bfd3 	b.w	8016924 <_raise_r>
 801697e:	bf00      	nop
 8016980:	24000090 	.word	0x24000090

08016984 <_kill_r>:
 8016984:	b538      	push	{r3, r4, r5, lr}
 8016986:	4d07      	ldr	r5, [pc, #28]	; (80169a4 <_kill_r+0x20>)
 8016988:	2300      	movs	r3, #0
 801698a:	4604      	mov	r4, r0
 801698c:	4608      	mov	r0, r1
 801698e:	4611      	mov	r1, r2
 8016990:	602b      	str	r3, [r5, #0]
 8016992:	f7ea fad5 	bl	8000f40 <_kill>
 8016996:	1c43      	adds	r3, r0, #1
 8016998:	d102      	bne.n	80169a0 <_kill_r+0x1c>
 801699a:	682b      	ldr	r3, [r5, #0]
 801699c:	b103      	cbz	r3, 80169a0 <_kill_r+0x1c>
 801699e:	6023      	str	r3, [r4, #0]
 80169a0:	bd38      	pop	{r3, r4, r5, pc}
 80169a2:	bf00      	nop
 80169a4:	24005350 	.word	0x24005350

080169a8 <_getpid_r>:
 80169a8:	f7ea bac2 	b.w	8000f30 <_getpid>

080169ac <_init>:
 80169ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ae:	bf00      	nop
 80169b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169b2:	bc08      	pop	{r3}
 80169b4:	469e      	mov	lr, r3
 80169b6:	4770      	bx	lr

080169b8 <_fini>:
 80169b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ba:	bf00      	nop
 80169bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169be:	bc08      	pop	{r3}
 80169c0:	469e      	mov	lr, r3
 80169c2:	4770      	bx	lr
