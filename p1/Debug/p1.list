
p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016640  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080168e0  080168e0  000268e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016dc4  08016dc4  00026dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016dc8  08016dc8  00026dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f4  24000000  08016dcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005260  240000f4  08016ec0  000300f4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24005354  08016ec0  00035354  2**0
                  ALLOC
  8 .tcp_sec      000000c0  30000000  08016ec0  00040000  2**2
                  ALLOC
  9 .nx_data      00007d00  30000100  08016ec0  00030100  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00196e00  00000000  00000000  00030122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001e415  00000000  00000000  001c6f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae0  00000000  00000000  001e5338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001dc0  00000000  00000000  001e7e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0005681a  00000000  00000000  001e9bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0006c60c  00000000  00000000  002403f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001802d5  00000000  00000000  002ac9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0042ccd3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008148  00000000  00000000  0042cd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000f4 	.word	0x240000f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080168c8 	.word	0x080168c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000f8 	.word	0x240000f8
 80002dc:	080168c8 	.word	0x080168c8

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	240023c8 	.word	0x240023c8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	00493dff 	.word	0x00493dff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	240023cc 	.word	0x240023cc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	240023d0 	.word	0x240023d0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	240023d4 	.word	0x240023d4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24002464 	.word	0x24002464

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f013 fd51 	bl	8013f60 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f013 fbe6 	bl	8013c94 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	2400293c 	.word	0x2400293c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24002464 	.word	0x24002464
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24002938 	.word	0x24002938
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	240023dc 	.word	0x240023dc
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24002460 	.word	0x24002460
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	2400246c 	.word	0x2400246c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24002524 	.word	0x24002524
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	240023cc 	.word	0x240023cc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	240023d0 	.word	0x240023d0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	240023d4 	.word	0x240023d4
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80005c8:	2334      	movs	r3, #52	; 0x34
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80005d0:	4a35      	ldr	r2, [pc, #212]	; (80006a8 <tx_application_define+0xe8>)
 80005d2:	4936      	ldr	r1, [pc, #216]	; (80006ac <tx_application_define+0xec>)
 80005d4:	4836      	ldr	r0, [pc, #216]	; (80006b0 <tx_application_define+0xf0>)
 80005d6:	f013 ff6d 	bl	80144b4 <_txe_byte_pool_create>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <tx_application_define+0x32>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
  	printf("F:tx_byte_pool_create Tx App memory pool\r\n");
 80005e0:	4834      	ldr	r0, [pc, #208]	; (80006b4 <tx_application_define+0xf4>)
 80005e2:	f015 f8a1 	bl	8015728 <puts>
  	aar.fCount++;
 80005e6:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <tx_application_define+0xf8>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a32      	ldr	r2, [pc, #200]	; (80006b8 <tx_application_define+0xf8>)
 80005ee:	6053      	str	r3, [r2, #4]
 80005f0:	e020      	b.n	8000634 <tx_application_define+0x74>
    /* USER CODE END TX_Byte_Pool_Error */
  }
  else
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */
  	printf("S:tx_byte_pool_create Tx App memory pool\r\n");
 80005f2:	4832      	ldr	r0, [pc, #200]	; (80006bc <tx_application_define+0xfc>)
 80005f4:	f015 f898 	bl	8015728 <puts>
  	aar.sCount++;
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <tx_application_define+0xf8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a2e      	ldr	r2, [pc, #184]	; (80006b8 <tx_application_define+0xf8>)
 8000600:	6013      	str	r3, [r2, #0]
    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <tx_application_define+0xf0>)
 8000604:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f000 f86a 	bl	80006e0 <App_ThreadX_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d008      	beq.n	8000624 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
    	printf("F:App_ThreadX_Init\r\n");
 8000612:	482b      	ldr	r0, [pc, #172]	; (80006c0 <tx_application_define+0x100>)
 8000614:	f015 f888 	bl	8015728 <puts>
    	aar.fCount++;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <tx_application_define+0xf8>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <tx_application_define+0xf8>)
 8000620:	6053      	str	r3, [r2, #4]
 8000622:	e007      	b.n	8000634 <tx_application_define+0x74>
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    else
    {
    	printf("S:App_ThreadX_Init\r\n");
 8000624:	4827      	ldr	r0, [pc, #156]	; (80006c4 <tx_application_define+0x104>)
 8000626:	f015 f87f 	bl	8015728 <puts>
    	aar.sCount++;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <tx_application_define+0xf8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <tx_application_define+0xf8>)
 8000632:	6013      	str	r3, [r2, #0]
    }
    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000634:	2334      	movs	r3, #52	; 0x34
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <tx_application_define+0x108>)
 800063e:	4923      	ldr	r1, [pc, #140]	; (80006cc <tx_application_define+0x10c>)
 8000640:	4823      	ldr	r0, [pc, #140]	; (80006d0 <tx_application_define+0x110>)
 8000642:	f013 ff37 	bl	80144b4 <_txe_byte_pool_create>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <tx_application_define+0x9e>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Error */
  	printf("F:tx_byte_pool_create Nx App memory pool\r\n");
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <tx_application_define+0x114>)
 800064e:	f015 f86b 	bl	8015728 <puts>
  	aar.fCount++;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <tx_application_define+0xf8>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <tx_application_define+0xf8>)
 800065a:	6053      	str	r3, [r2, #4]
    }
    /* USER CODE END MX_NetXDuo_Init_Success */

  }

}
 800065c:	e020      	b.n	80006a0 <tx_application_define+0xe0>
  	printf("S:tx_byte_pool_create Tx App memory pool\r\n");
 800065e:	4817      	ldr	r0, [pc, #92]	; (80006bc <tx_application_define+0xfc>)
 8000660:	f015 f862 	bl	8015728 <puts>
  	aar.sCount++;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <tx_application_define+0xf8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <tx_application_define+0xf8>)
 800066c:	6013      	str	r3, [r2, #0]
    memory_ptr = (VOID *)&nx_app_byte_pool;
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <tx_application_define+0x110>)
 8000670:	60fb      	str	r3, [r7, #12]
    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f014 fd9a 	bl	80151ac <MX_NetXDuo_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <tx_application_define+0xd0>
    	printf("F:MX_NetXDuo_Init\r\n");
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <tx_application_define+0x118>)
 8000680:	f015 f852 	bl	8015728 <puts>
    	aar.fCount++;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <tx_application_define+0xf8>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <tx_application_define+0xf8>)
 800068c:	6053      	str	r3, [r2, #4]
}
 800068e:	e007      	b.n	80006a0 <tx_application_define+0xe0>
    	printf("S:MX_NetXDuo_Init\r\n");
 8000690:	4812      	ldr	r0, [pc, #72]	; (80006dc <tx_application_define+0x11c>)
 8000692:	f015 f849 	bl	8015728 <puts>
    	aar.sCount++;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <tx_application_define+0xf8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <tx_application_define+0xf8>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000110 	.word	0x24000110
 80006ac:	080168e0 	.word	0x080168e0
 80006b0:	24002050 	.word	0x24002050
 80006b4:	080168f4 	.word	0x080168f4
 80006b8:	2400216c 	.word	0x2400216c
 80006bc:	08016920 	.word	0x08016920
 80006c0:	0801694c 	.word	0x0801694c
 80006c4:	08016960 	.word	0x08016960
 80006c8:	30000100 	.word	0x30000100
 80006cc:	08016974 	.word	0x08016974
 80006d0:	24002084 	.word	0x24002084
 80006d4:	08016988 	.word	0x08016988
 80006d8:	080169b4 	.word	0x080169b4
 80006dc:	080169c8 	.word	0x080169c8

080006e0 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	60bb      	str	r3, [r7, #8]
  //  ret = TX_THREAD_ERROR;
  //}
  //
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80006f0:	68fb      	ldr	r3, [r7, #12]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000702:	f011 fc81 	bl	8012008 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}

0800070a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000712:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000716:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d013      	beq.n	800074a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000722:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000726:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800072a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00b      	beq.n	800074a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000732:	e000      	b.n	8000736 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000734:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000736:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f9      	beq.n	8000734 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000740:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800074a:	687b      	ldr	r3, [r7, #4]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
#ifdef SDEF_ITM
 ITM_SendChar(ch);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ffd1 	bl	800070a <ITM_SendChar>
#endif
 return(ch);
 8000768:	687b      	ldr	r3, [r7, #4]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	asm("nop");
 800077a:	bf00      	nop
#ifdef SDEF_CACHE
  SCB_EnableICache();
  SCB_EnableDCache(); //cannot step through this line
#endif

  HAL_Init();
 800077c:	f000 fe82 	bl	8001484 <HAL_Init>

  SystemClock_Config();
 8000780:	f000 f89a 	bl	80008b8 <SystemClock_Config>

	//__HAL_RCC_D2SRAM1_CLK_ENABLE();
	__HAL_RCC_D2SRAM2_CLK_ENABLE(); //enable D2 RAM clock just in case https://stackoverflow.com/questions/64908765/why-does-d2-ram-work-correctly-even-when-clock-is-disabled
 8000784:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <main+0x130>)
 8000786:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800078a:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <main+0x130>)
 800078c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000790:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000794:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <main+0x130>)
 8000796:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800079a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
	//__HAL_RCC_D2SRAM3_CLK_ENABLE(); //enable if using

  MX_GPIO_Init();
 80007a2:	f000 f951 	bl	8000a48 <MX_GPIO_Init>

  setvbuf(stdout, NULL, _IONBF, 0); // Disable I/O buffering for STDOUT stream, so that chars are sent out as soon as they are printed.
 80007a6:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <main+0x134>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	6898      	ldr	r0, [r3, #8]
 80007ac:	2300      	movs	r3, #0
 80007ae:	2202      	movs	r2, #2
 80007b0:	2100      	movs	r1, #0
 80007b2:	f015 f801 	bl	80157b8 <setvbuf>

  printf("I:Starting ThreadX\r\n");
 80007b6:	483d      	ldr	r0, [pc, #244]	; (80008ac <main+0x138>)
 80007b8:	f014 ffb6 	bl	8015728 <puts>
  MX_ThreadX_Init();
 80007bc:	f7ff ff9f 	bl	80006fe <MX_ThreadX_Init>

  printf("E:***SHOULD NOT RUN***\r\n");
 80007c0:	483b      	ldr	r0, [pc, #236]	; (80008b0 <main+0x13c>)
 80007c2:	f014 ffb1 	bl	8015728 <puts>

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007c6:	f000 f9b9 	bl	8000b3c <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ca:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <main+0x140>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d11b      	bne.n	800080e <main+0x9a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007d6:	f3bf 8f4f 	dsb	sy
}
 80007da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007dc:	f3bf 8f6f 	isb	sy
}
 80007e0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <main+0x140>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007ea:	f3bf 8f4f 	dsb	sy
}
 80007ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f0:	f3bf 8f6f 	isb	sy
}
 80007f4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <main+0x140>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a2e      	ldr	r2, [pc, #184]	; (80008b4 <main+0x140>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000802:	f3bf 8f4f 	dsb	sy
}
 8000806:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000808:	f3bf 8f6f 	isb	sy
}
 800080c:	e000      	b.n	8000810 <main+0x9c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800080e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <main+0x140>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d138      	bne.n	800088e <main+0x11a>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <main+0x140>)
 800081e:	2200      	movs	r2, #0
 8000820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <main+0x140>)
 800082c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000830:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	0b5b      	lsrs	r3, r3, #13
 8000836:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800083a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000844:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	015a      	lsls	r2, r3, #5
 800084a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800084e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000854:	4917      	ldr	r1, [pc, #92]	; (80008b4 <main+0x140>)
 8000856:	4313      	orrs	r3, r2
 8000858:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1ef      	bne.n	8000846 <main+0xd2>
    } while(sets-- != 0U);
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	60ba      	str	r2, [r7, #8]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1e5      	bne.n	800083c <main+0xc8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000870:	f3bf 8f4f 	dsb	sy
}
 8000874:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <main+0x140>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <main+0x140>)
 800087c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000880:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000882:	f3bf 8f4f 	dsb	sy
}
 8000886:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000888:	f3bf 8f6f 	isb	sy
}
 800088c:	e000      	b.n	8000890 <main+0x11c>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800088e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fdf8 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f810 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f8d6 	bl	8000a48 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800089c:	f7ff ff2f 	bl	80006fe <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <main+0x12c>
 80008a2:	bf00      	nop
 80008a4:	58024400 	.word	0x58024400
 80008a8:	24000090 	.word	0x24000090
 80008ac:	080169dc 	.word	0x080169dc
 80008b0:	080169f0 	.word	0x080169f0
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	; 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	224c      	movs	r2, #76	; 0x4c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f014 fea0 	bl	801560c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2220      	movs	r2, #32
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f014 fe9a 	bl	801560c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008d8:	2002      	movs	r0, #2
 80008da:	f003 f80b 	bl	80038f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <SystemClock_Config+0xf0>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <SystemClock_Config+0xf0>)
 80008e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <SystemClock_Config+0xf0>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <SystemClock_Config+0xf4>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fc:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <SystemClock_Config+0xf4>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <SystemClock_Config+0xf4>)
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000910:	bf00      	nop
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <SystemClock_Config+0xf0>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800091a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800091e:	d1f8      	bne.n	8000912 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000924:	2301      	movs	r3, #1
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092c:	2302      	movs	r3, #2
 800092e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000930:	2300      	movs	r3, #0
 8000932:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000938:	233c      	movs	r3, #60	; 0x3c
 800093a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000948:	230c      	movs	r3, #12
 800094a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800094c:	2300      	movs	r3, #0
 800094e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4618      	mov	r0, r3
 800095a:	f003 f805 	bl	8003968 <HAL_RCC_OscConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000964:	f000 f936 	bl	8000bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000968:	233f      	movs	r3, #63	; 0x3f
 800096a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	2303      	movs	r3, #3
 800096e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000974:	2308      	movs	r3, #8
 8000976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f003 fbfa 	bl	8004188 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800099a:	f000 f91b 	bl	8000bd4 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3770      	adds	r7, #112	; 0x70
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	58024800 	.word	0x58024800
 80009ac:	58000400 	.word	0x58000400

080009b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
void MX_ETH_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_ETH_Init+0x80>)
 80009b6:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <MX_ETH_Init+0x84>)
 80009b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_ETH_Init+0x88>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_ETH_Init+0x88>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_ETH_Init+0x88>)
 80009c8:	22e1      	movs	r2, #225	; 0xe1
 80009ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_ETH_Init+0x88>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_ETH_Init+0x88>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x10;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_ETH_Init+0x88>)
 80009da:	2210      	movs	r2, #16
 80009dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_ETH_Init+0x80>)
 80009e0:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_ETH_Init+0x88>)
 80009e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_ETH_Init+0x80>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_ETH_Init+0x80>)
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_ETH_Init+0x80>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <MX_ETH_Init+0x90>)
 80009f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_ETH_Init+0x80>)
 80009f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80009fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_ETH_Init+0x80>)
 8000a00:	f000 ff18 	bl	8001834 <HAL_ETH_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a0a:	f000 f8e3 	bl	8000bd4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a0e:	2234      	movs	r2, #52	; 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_ETH_Init+0x94>)
 8000a14:	f014 fdfa 	bl	801560c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_ETH_Init+0x94>)
 8000a1a:	2221      	movs	r2, #33	; 0x21
 8000a1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_ETH_Init+0x94>)
 8000a20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_ETH_Init+0x94>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	24002174 	.word	0x24002174
 8000a34:	40028000 	.word	0x40028000
 8000a38:	240020b8 	.word	0x240020b8
 8000a3c:	30000060 	.word	0x30000060
 8000a40:	30000000 	.word	0x30000000
 8000a44:	240021fc 	.word	0x240021fc

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4a32      	ldr	r2, [pc, #200]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4a2b      	ldr	r2, [pc, #172]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPO_LED_GREEN_Pin|GPO_LED_RED_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000adc:	4815      	ldr	r0, [pc, #84]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000ade:	f002 feef 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPO_LED_YELLOW_GPIO_Port, GPO_LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <MX_GPIO_Init+0xf0>)
 8000ae8:	f002 feea 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPO_LED_GREEN_Pin GPO_LED_RED_Pin */
  GPIO_InitStruct.Pin = GPO_LED_GREEN_Pin|GPO_LED_RED_Pin;
 8000aec:	f244 0301 	movw	r3, #16385	; 0x4001
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000b06:	f002 fd2b 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPO_LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPO_LED_YELLOW_Pin;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPO_LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_GPIO_Init+0xf0>)
 8000b22:	f002 fd1d 	bl	8003560 <HAL_GPIO_Init>

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020400 	.word	0x58020400
 8000b38:	58021000 	.word	0x58021000

08000b3c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b4e:	f000 fdf5 	bl	800173c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000b5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000b5e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000b60:	230f      	movs	r3, #15
 8000b62:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b80:	463b      	mov	r3, r7
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fe12 	bl	80017ac <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fe06 	bl	80017ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ba0:	2004      	movs	r0, #4
 8000ba2:	f000 fde3 	bl	800176c <HAL_MPU_Enable>

}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d101      	bne.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc2:	f000 fc9b 	bl	80014fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40001000 	.word	0x40001000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x30>)
 8000be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x30>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x30>)
 8000bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	58024400 	.word	0x58024400

08000c14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	; 0x38
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a4d      	ldr	r2, [pc, #308]	; (8000d68 <HAL_ETH_MspInit+0x154>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	f040 8093 	bne.w	8000d5e <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c38:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c3e:	4a4b      	ldr	r2, [pc, #300]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c48:	4b48      	ldr	r3, [pc, #288]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c56:	4b45      	ldr	r3, [pc, #276]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5c:	4a43      	ldr	r2, [pc, #268]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c66:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c74:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7a:	4a3c      	ldr	r2, [pc, #240]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c84:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a34      	ldr	r2, [pc, #208]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_ETH_MspInit+0x158>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cec:	2332      	movs	r3, #50	; 0x32
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfc:	230b      	movs	r3, #11
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	481a      	ldr	r0, [pc, #104]	; (8000d70 <HAL_ETH_MspInit+0x15c>)
 8000d08:	f002 fc2a 	bl	8003560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d0c:	2386      	movs	r3, #134	; 0x86
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4813      	ldr	r0, [pc, #76]	; (8000d74 <HAL_ETH_MspInit+0x160>)
 8000d28:	f002 fc1a 	bl	8003560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000d2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_ETH_MspInit+0x164>)
 8000d4a:	f002 fc09 	bl	8003560 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	203d      	movs	r0, #61	; 0x3d
 8000d54:	f000 fcca 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000d58:	203d      	movs	r0, #61	; 0x3d
 8000d5a:	f000 fce1 	bl	8001720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3738      	adds	r7, #56	; 0x38
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40028000 	.word	0x40028000
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	58020800 	.word	0x58020800
 8000d74:	58020000 	.word	0x58020000
 8000d78:	58020400 	.word	0x58020400

08000d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b090      	sub	sp, #64	; 0x40
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d827      	bhi.n	8000dda <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	2036      	movs	r0, #54	; 0x36
 8000d90:	f000 fcac 	bl	80016ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d94:	2036      	movs	r0, #54	; 0x36
 8000d96:	f000 fcc3 	bl	8001720 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d9a:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <HAL_InitTick+0xc4>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <HAL_InitTick+0xc8>)
 8000da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000da6:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <HAL_InitTick+0xc8>)
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_InitTick+0xc8>)
 8000db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dbe:	f107 0210 	add.w	r2, r7, #16
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fd53 	bl	8004874 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d106      	bne.n	8000de6 <HAL_InitTick+0x6a>
 8000dd8:	e001      	b.n	8000dde <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e02b      	b.n	8000e36 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dde:	f003 fd33 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8000de2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000de4:	e004      	b.n	8000df0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000de6:	f003 fd2f 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8000dea:	4603      	mov	r3, r0
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <HAL_InitTick+0xcc>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c9b      	lsrs	r3, r3, #18
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_InitTick+0xd0>)
 8000e00:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <HAL_InitTick+0xd4>)
 8000e02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_InitTick+0xd0>)
 8000e06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e0c:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <HAL_InitTick+0xd0>)
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_InitTick+0xd0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_InitTick+0xd0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e1e:	480b      	ldr	r0, [pc, #44]	; (8000e4c <HAL_InitTick+0xd0>)
 8000e20:	f003 fd6a 	bl	80048f8 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d104      	bne.n	8000e34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <HAL_InitTick+0xd0>)
 8000e2c:	f003 fdc6 	bl	80049bc <HAL_TIM_Base_Start_IT>
 8000e30:	4603      	mov	r3, r0
 8000e32:	e000      	b.n	8000e36 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3740      	adds	r7, #64	; 0x40
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000008 	.word	0x24000008
 8000e44:	58024400 	.word	0x58024400
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	24002230 	.word	0x24002230
 8000e50:	40001000 	.word	0x40001000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>
	...

08000e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("E:Hardfault\r\n");
 8000e60:	4801      	ldr	r0, [pc, #4]	; (8000e68 <HardFault_Handler+0xc>)
 8000e62:	f014 fc61 	bl	8015728 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0xa>
 8000e68:	08016a08 	.word	0x08016a08

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//printf("I:TIM6_IRQ In %lu\r\n",it.tim6Count);
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <TIM6_DAC_IRQHandler+0x18>)
 8000e92:	f003 fe03 	bl	8004a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //printf("I:TIM6_IRQ Out %lu\r\n",it.tim6Count);
  it.tim6Count++;
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <TIM6_DAC_IRQHandler+0x1c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a02      	ldr	r2, [pc, #8]	; (8000ea8 <TIM6_DAC_IRQHandler+0x1c>)
 8000e9e:	6053      	str	r3, [r2, #4]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	24002230 	.word	0x24002230
 8000ea8:	2400227c 	.word	0x2400227c

08000eac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
	//printf("I:ETH_IRQ In %lu\r\n",it.ethCount);
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <ETH_IRQHandler+0x18>)
 8000eb2:	f001 f929 	bl	8002108 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */
  //printf("I:ETH_IRQ Out %lu\r\n",it.ethCount);
  it.ethCount++;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <ETH_IRQHandler+0x1c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a02      	ldr	r2, [pc, #8]	; (8000ec8 <ETH_IRQHandler+0x1c>)
 8000ebe:	6013      	str	r3, [r2, #0]
  /* USER CODE END ETH_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24002174 	.word	0x24002174
 8000ec8:	2400227c 	.word	0x2400227c

08000ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
	return 1;
 8000ed0:	2301      	movs	r3, #1
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_kill>:

int _kill(int pid, int sig)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ee6:	f014 fb3f 	bl	8015568 <__errno>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2216      	movs	r2, #22
 8000eee:	601a      	str	r2, [r3, #0]
	return -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_exit>:

void _exit (int status)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffe7 	bl	8000edc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f0e:	e7fe      	b.n	8000f0e <_exit+0x12>

08000f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e00a      	b.n	8000f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f22:	f3af 8000 	nop.w
 8000f26:	4601      	mov	r1, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf0      	blt.n	8000f22 <_read+0x12>
	}

return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e009      	b.n	8000f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fbf7 	bl	8000758 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf1      	blt.n	8000f5c <_write+0x12>
	}
	return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
	return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
	return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f014 faa4 	bl	8015568 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24080000 	.word	0x24080000
 800104c:	00000400 	.word	0x00000400
 8001050:	240020c0 	.word	0x240020c0
 8001054:	24005358 	.word	0x24005358

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <SystemInit+0xec>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <SystemInit+0xec>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <SystemInit+0xf0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	2b06      	cmp	r3, #6
 8001076:	d807      	bhi.n	8001088 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001078:	4b33      	ldr	r3, [pc, #204]	; (8001148 <SystemInit+0xf0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 030f 	bic.w	r3, r3, #15
 8001080:	4a31      	ldr	r2, [pc, #196]	; (8001148 <SystemInit+0xf0>)
 8001082:	f043 0307 	orr.w	r3, r3, #7
 8001086:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <SystemInit+0xf4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2f      	ldr	r2, [pc, #188]	; (800114c <SystemInit+0xf4>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <SystemInit+0xf4>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <SystemInit+0xf4>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	492b      	ldr	r1, [pc, #172]	; (800114c <SystemInit+0xf4>)
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <SystemInit+0xf8>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <SystemInit+0xf0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <SystemInit+0xf0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 030f 	bic.w	r3, r3, #15
 80010ba:	4a23      	ldr	r2, [pc, #140]	; (8001148 <SystemInit+0xf0>)
 80010bc:	f043 0307 	orr.w	r3, r3, #7
 80010c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <SystemInit+0xf4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <SystemInit+0xf4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <SystemInit+0xf4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <SystemInit+0xf4>)
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <SystemInit+0xfc>)
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <SystemInit+0xf4>)
 80010dc:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <SystemInit+0x100>)
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <SystemInit+0xf4>)
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <SystemInit+0x104>)
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <SystemInit+0xf4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <SystemInit+0xf4>)
 80010ee:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemInit+0x104>)
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <SystemInit+0xf4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <SystemInit+0xf4>)
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <SystemInit+0x104>)
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <SystemInit+0xf4>)
 8001100:	2200      	movs	r2, #0
 8001102:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <SystemInit+0xf4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <SystemInit+0xf4>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <SystemInit+0xf4>)
 8001112:	2200      	movs	r2, #0
 8001114:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <SystemInit+0x108>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <SystemInit+0x10c>)
 800111c:	4013      	ands	r3, r2
 800111e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001122:	d202      	bcs.n	800112a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <SystemInit+0x110>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <SystemInit+0x114>)
 800112c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001130:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SystemInit+0xec>)
 8001134:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001138:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	52002000 	.word	0x52002000
 800114c:	58024400 	.word	0x58024400
 8001150:	eaf6ed7f 	.word	0xeaf6ed7f
 8001154:	02020200 	.word	0x02020200
 8001158:	01ff0000 	.word	0x01ff0000
 800115c:	01010280 	.word	0x01010280
 8001160:	5c001000 	.word	0x5c001000
 8001164:	ffff0000 	.word	0xffff0000
 8001168:	51008108 	.word	0x51008108
 800116c:	52004000 	.word	0x52004000

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001174:	f7ff ff70 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f014 f9e9 	bl	8015574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fae7 	bl	8000774 <main>
  bx  lr
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011b0:	240000f4 	.word	0x240000f4
  ldr r2, =_sidata
 80011b4:	08016dcc 	.word	0x08016dcc
  ldr r2, =_sbss
 80011b8:	240000f4 	.word	0x240000f4
  ldr r4, =_ebss
 80011bc:	24005354 	.word	0x24005354

080011c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC3_IRQHandler>

080011c2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <LAN8742_RegisterBusIO+0x28>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <LAN8742_RegisterBusIO+0x28>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <LAN8742_RegisterBusIO+0x28>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e014      	b.n	800121a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d17c      	bne.n	8001340 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2220      	movs	r2, #32
 8001258:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e01c      	b.n	800129a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f107 0208 	add.w	r2, r7, #8
 8001268:	2112      	movs	r1, #18
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	4798      	blx	r3
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	da03      	bge.n	800127c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001274:	f06f 0304 	mvn.w	r3, #4
 8001278:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800127a:	e00b      	b.n	8001294 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	429a      	cmp	r2, r3
 8001286:	d105      	bne.n	8001294 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
         break;
 8001292:	e005      	b.n	80012a0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2b1f      	cmp	r3, #31
 800129e:	d9df      	bls.n	8001260 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b1f      	cmp	r3, #31
 80012a6:	d902      	bls.n	80012ae <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012a8:	f06f 0302 	mvn.w	r3, #2
 80012ac:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d145      	bne.n	8001340 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6810      	ldr	r0, [r2, #0]
 80012bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c0:	2100      	movs	r1, #0
 80012c2:	4798      	blx	r3
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db37      	blt.n	800133a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6810      	ldr	r0, [r2, #0]
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	2100      	movs	r1, #0
 80012d8:	4798      	blx	r3
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db28      	blt.n	8001332 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4798      	blx	r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012ea:	e01c      	b.n	8001326 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4798      	blx	r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012fe:	d80e      	bhi.n	800131e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6810      	ldr	r0, [r2, #0]
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	2100      	movs	r1, #0
 800130e:	4798      	blx	r3
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	da07      	bge.n	8001326 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001316:	f06f 0304 	mvn.w	r3, #4
 800131a:	613b      	str	r3, [r7, #16]
                 break;
 800131c:	e010      	b.n	8001340 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800131e:	f06f 0301 	mvn.w	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
               break;
 8001324:	e00c      	b.n	8001340 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1dd      	bne.n	80012ec <LAN8742_Init+0xc6>
 8001330:	e006      	b.n	8001340 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001332:	f06f 0304 	mvn.w	r3, #4
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	e002      	b.n	8001340 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800133a:	f06f 0303 	mvn.w	r3, #3
 800133e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d112      	bne.n	800136c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4798      	blx	r3
 800134c:	4603      	mov	r3, r0
 800134e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001350:	bf00      	nop
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4798      	blx	r3
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001364:	d9f5      	bls.n	8001352 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800136c:	693b      	ldr	r3, [r7, #16]
 }
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6810      	ldr	r0, [r2, #0]
 800138a:	f107 020c 	add.w	r2, r7, #12
 800138e:	2101      	movs	r1, #1
 8001390:	4798      	blx	r3
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	da02      	bge.n	800139e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001398:	f06f 0304 	mvn.w	r3, #4
 800139c:	e06e      	b.n	800147c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6810      	ldr	r0, [r2, #0]
 80013a6:	f107 020c 	add.w	r2, r7, #12
 80013aa:	2101      	movs	r1, #1
 80013ac:	4798      	blx	r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da02      	bge.n	80013ba <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013b4:	f06f 0304 	mvn.w	r3, #4
 80013b8:	e060      	b.n	800147c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80013c4:	2301      	movs	r3, #1
 80013c6:	e059      	b.n	800147c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6810      	ldr	r0, [r2, #0]
 80013d0:	f107 020c 	add.w	r2, r7, #12
 80013d4:	2100      	movs	r1, #0
 80013d6:	4798      	blx	r3
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da02      	bge.n	80013e4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013de:	f06f 0304 	mvn.w	r3, #4
 80013e2:	e04b      	b.n	800147c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d11b      	bne.n	8001426 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <LAN8742_GetLinkState+0x90>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001402:	2302      	movs	r3, #2
 8001404:	e03a      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001410:	2303      	movs	r3, #3
 8001412:	e033      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800141e:	2304      	movs	r3, #4
 8001420:	e02c      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001422:	2305      	movs	r3, #5
 8001424:	e02a      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6810      	ldr	r0, [r2, #0]
 800142e:	f107 020c 	add.w	r2, r7, #12
 8001432:	211f      	movs	r1, #31
 8001434:	4798      	blx	r3
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	da02      	bge.n	8001442 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800143c:	f06f 0304 	mvn.w	r3, #4
 8001440:	e01c      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800144c:	2306      	movs	r3, #6
 800144e:	e015      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 031c 	and.w	r3, r3, #28
 8001456:	2b18      	cmp	r3, #24
 8001458:	d101      	bne.n	800145e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800145a:	2302      	movs	r3, #2
 800145c:	e00e      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f003 031c 	and.w	r3, r3, #28
 8001464:	2b08      	cmp	r3, #8
 8001466:	d101      	bne.n	800146c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001468:	2303      	movs	r3, #3
 800146a:	e007      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 031c 	and.w	r3, r3, #28
 8001472:	2b14      	cmp	r3, #20
 8001474:	d101      	bne.n	800147a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001476:	2304      	movs	r3, #4
 8001478:	e000      	b.n	800147c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800147a:	2305      	movs	r3, #5
    }				
  }
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148a:	2003      	movs	r0, #3
 800148c:	f000 f923 	bl	80016d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001490:	f003 f830 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8001494:	4602      	mov	r2, r0
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_Init+0x68>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	4913      	ldr	r1, [pc, #76]	; (80014f0 <HAL_Init+0x6c>)
 80014a2:	5ccb      	ldrb	r3, [r1, r3]
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_Init+0x68>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_Init+0x6c>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_Init+0x70>)
 80014c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_Init+0x74>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff fc54 	bl	8000d7c <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e002      	b.n	80014e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fb7f 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	58024400 	.word	0x58024400
 80014f0:	08016c68 	.word	0x08016c68
 80014f4:	24000004 	.word	0x24000004
 80014f8:	24000000 	.word	0x24000000

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2400000c 	.word	0x2400000c
 8001520:	24002284 	.word	0x24002284

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	24002284 	.word	0x24002284

0800153c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetREVID+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0c1b      	lsrs	r3, r3, #16
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	5c001000 	.word	0x5c001000

08001554 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001564:	4904      	ldr	r1, [pc, #16]	; (8001578 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	58000400 	.word	0x58000400

0800157c <__NVIC_SetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <__NVIC_SetPriorityGrouping+0x40>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x40>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	05fa0000 	.word	0x05fa0000

080015c4 <__NVIC_GetPriorityGrouping>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff4c 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fa:	f7ff ff63 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 80016fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	6978      	ldr	r0, [r7, #20]
 8001706:	f7ff ffb3 	bl	8001670 <NVIC_EncodePriority>
 800170a:	4602      	mov	r2, r0
 800170c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff82 	bl	800161c <__NVIC_SetPriority>
}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff56 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001740:	f3bf 8f5f 	dmb	sy
}
 8001744:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <HAL_MPU_Disable+0x28>)
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_MPU_Disable+0x28>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_MPU_Disable+0x2c>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	e000ed90 	.word	0xe000ed90

0800176c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_MPU_Enable+0x38>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_MPU_Enable+0x3c>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_MPU_Enable+0x3c>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800178a:	f3bf 8f4f 	dsb	sy
}
 800178e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001790:	f3bf 8f6f 	isb	sy
}
 8001794:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed90 	.word	0xe000ed90
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	785a      	ldrb	r2, [r3, #1]
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_MPU_ConfigRegion+0x84>)
 80017ba:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d029      	beq.n	8001818 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80017c4:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <HAL_MPU_ConfigRegion+0x84>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7b1b      	ldrb	r3, [r3, #12]
 80017d0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7adb      	ldrb	r3, [r3, #11]
 80017d6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7a9b      	ldrb	r3, [r3, #10]
 80017de:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7b5b      	ldrb	r3, [r3, #13]
 80017e6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7b9b      	ldrb	r3, [r3, #14]
 80017ee:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7bdb      	ldrb	r3, [r3, #15]
 80017f6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7a5b      	ldrb	r3, [r3, #9]
 80017fe:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001800:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7a1b      	ldrb	r3, [r3, #8]
 8001806:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001808:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001812:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001814:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001816:	e005      	b.n	8001824 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_MPU_ConfigRegion+0x84>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_MPU_ConfigRegion+0x84>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed90 	.word	0xe000ed90

08001834 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0c6      	b.n	80019d4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff f9e0 	bl	8000c14 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2223      	movs	r2, #35	; 0x23
 8001858:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	4b60      	ldr	r3, [pc, #384]	; (80019dc <HAL_ETH_Init+0x1a8>)
 800185c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001860:	4a5e      	ldr	r2, [pc, #376]	; (80019dc <HAL_ETH_Init+0x1a8>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800186a:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <HAL_ETH_Init+0x1a8>)
 800186c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7a1b      	ldrb	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d103      	bne.n	8001888 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff fe67 	bl	8001554 <HAL_SYSCFG_ETHInterfaceSelect>
 8001886:	e003      	b.n	8001890 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001888:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800188c:	f7ff fe62 	bl	8001554 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a8:	f7ff fe3c 	bl	8001524 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018ae:	e00f      	b.n	80018d0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80018b0:	f7ff fe38 	bl	8001524 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018be:	d907      	bls.n	80018d0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2204      	movs	r2, #4
 80018c4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	22e0      	movs	r2, #224	; 0xe0
 80018ca:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e081      	b.n	80019d4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e6      	bne.n	80018b0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f001 fac2 	bl	8002e6c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018e8:	f002 ff7e 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <HAL_ETH_Init+0x1ac>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9a      	lsrs	r2, r3, #18
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3a01      	subs	r2, #1
 80018fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f001 fa15 	bl	8002d30 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800191c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001920:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	22e0      	movs	r2, #224	; 0xe0
 8001938:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e04a      	b.n	80019d4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	f241 1308 	movw	r3, #4360	; 0x1108
 8001946:	4413      	add	r3, r2
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_ETH_Init+0x1b0>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6952      	ldr	r2, [r2, #20]
 8001952:	0052      	lsls	r2, r2, #1
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	6809      	ldr	r1, [r1, #0]
 8001958:	431a      	orrs	r2, r3
 800195a:	f241 1308 	movw	r3, #4360	; 0x1108
 800195e:	440b      	add	r3, r1
 8001960:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f001 fada 	bl	8002f1c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f001 fb1e 	bl	8002faa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	3305      	adds	r3, #5
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	021a      	lsls	r2, r3, #8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	3303      	adds	r3, #3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	061a      	lsls	r2, r3, #24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	3302      	adds	r3, #2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	3301      	adds	r3, #1
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2210      	movs	r2, #16
 80019ca:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2210      	movs	r2, #16
 80019d0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	58024400 	.word	0x58024400
 80019e0:	431bde83 	.word	0x431bde83
 80019e4:	ffff8001 	.word	0xffff8001

080019e8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3310      	adds	r3, #16
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_ETH_DescAssignMemory+0x28>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d904      	bls.n	8001a1a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e021      	b.n	8001a5e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d174      	bne.n	8001b64 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2223      	movs	r2, #35	; 0x23
 8001a7e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e00f      	b.n	8001aa6 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d9ec      	bls.n	8001a86 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0202 	orr.w	r2, r2, #2
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f241 1304 	movw	r3, #4356	; 0x1104
 8001aee:	4413      	add	r3, r2
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6811      	ldr	r1, [r2, #0]
 8001af6:	f043 0201 	orr.w	r2, r3, #1
 8001afa:	f241 1304 	movw	r3, #4356	; 0x1104
 8001afe:	440b      	add	r3, r1
 8001b00:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b1a:	440b      	add	r3, r1
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001b30:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b34:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f241 1334 	movw	r3, #4404	; 0x1134
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6811      	ldr	r1, [r2, #0]
 8001b46:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001b50:	440b      	add	r3, r1
 8001b52:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2210      	movs	r2, #16
 8001b58:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2222      	movs	r2, #34	; 0x22
 8001b5e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
  }
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d040      	beq.n	8001c04 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2223      	movs	r2, #35	; 0x23
 8001b86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b90:	4413      	add	r3, r2
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6811      	ldr	r1, [r2, #0]
 8001b98:	f023 0201 	bic.w	r2, r3, #1
 8001b9c:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ba0:	440b      	add	r3, r1
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bac:	4413      	add	r3, r2
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6811      	ldr	r1, [r2, #0]
 8001bb4:	f023 0201 	bic.w	r2, r3, #1
 8001bb8:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bbc:	440b      	add	r3, r1
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0202 	bic.w	r2, r2, #2
 8001bf2:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  if(pTxConfig == NULL)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_ETH_Transmit_IT+0x20>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e02f      	b.n	8001c92 <HAL_ETH_Transmit_IT+0x80>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d12a      	bne.n	8001c90 <HAL_ETH_Transmit_IT+0x7e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f001 fa10 	bl	8003064 <ETH_Prepare_Tx_Descriptors>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_ETH_Transmit_IT+0x48>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e01b      	b.n	8001c92 <HAL_ETH_Transmit_IT+0x80>
    }

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d904      	bls.n	8001c76 <HAL_ETH_Transmit_IT+0x64>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	1f1a      	subs	r2, r3, #4
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	3106      	adds	r1, #6
 8001c82:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001c86:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001c8a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e000      	b.n	8001c92 <HAL_ETH_Transmit_IT+0x80>

  }
  else
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
  }
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b089      	sub	sp, #36	; 0x24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3344      	adds	r3, #68	; 0x44
 8001ca6:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d06b      	beq.n	8001da4 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e0ce      	b.n	8001e6e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d036      	beq.n	8001d50 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d902      	bls.n	8001d04 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b04      	subs	r3, #4
 8001d02:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db11      	blt.n	8001d3a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2201      	movs	r2, #1
 8001d26:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d902      	bls.n	8001d3a <HAL_ETH_IsRxDataAvailable+0xa0>
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3b04      	subs	r3, #4
 8001d38:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e08e      	b.n	8001e6e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3301      	adds	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d902      	bls.n	8001d76 <HAL_ETH_IsRxDataAvailable+0xdc>
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	3b04      	subs	r3, #4
 8001d74:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	e010      	b.n	8001da4 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	3301      	adds	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d902      	bls.n	8001d9a <HAL_ETH_IsRxDataAvailable+0x100>
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	3b04      	subs	r3, #4
 8001d98:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db02      	blt.n	8001db2 <HAL_ETH_IsRxDataAvailable+0x118>
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d98e      	bls.n	8001cd0 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d056      	beq.n	8001e66 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e03b      	b.n	8001e50 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001de6:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d20d      	bcs.n	8001e4a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d902      	bls.n	8001e40 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b04      	subs	r3, #4
 8001e3e:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e48:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d3bf      	bcc.n	8001dd8 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f241 1328 	movw	r3, #4392	; 0x1128
 8001e62:	440b      	add	r3, r1
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]

  return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b08a      	sub	sp, #40	; 0x28
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3344      	adds	r3, #68	; 0x44
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07d      	b.n	8001fae <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10f      	bne.n	8001eda <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff feed 	bl	8001c9a <HAL_ETH_IsRxDataAvailable>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e071      	b.n	8001fae <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
 8001ede:	e031      	b.n	8001f44 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	461a      	mov	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f1a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3301      	adds	r3, #1
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d902      	bls.n	8001f2e <HAL_ETH_GetRxDataBuffer+0xb4>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	3301      	adds	r3, #1
 8001f42:	623b      	str	r3, [r7, #32]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	6a3a      	ldr	r2, [r7, #32]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3c7      	bcc.n	8001ee0 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	461a      	mov	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d803      	bhi.n	8001f7a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	e018      	b.n	8001fac <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	461a      	mov	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	1ad2      	subs	r2, r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	e001      	b.n	8001fac <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3728      	adds	r7, #40	; 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3344      	adds	r3, #68	; 0x44
 8001fc4:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fe60 	bl	8001c9a <HAL_ETH_IsRxDataAvailable>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e017      	b.n	8002014 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4413      	add	r3, r2
 8001fec:	3b01      	subs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d902      	bls.n	8001ffc <HAL_ETH_GetRxDataLength+0x46>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3b04      	subs	r3, #4
 8001ffa:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002004:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3344      	adds	r3, #68	; 0x44
 8002028:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002038:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e057      	b.n	80020fc <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	e03b      	b.n	80020d8 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800206e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d20d      	bcs.n	80020d2 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d902      	bls.n	80020c8 <HAL_ETH_BuildRxDescriptors+0xac>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b04      	subs	r3, #4
 80020c6:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	3301      	adds	r3, #1
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d3bf      	bcc.n	8002060 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	f241 1328 	movw	r3, #4392	; 0x1128
 80020ea:	440b      	add	r3, r1
 80020ec:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3724      	adds	r7, #36	; 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d113      	bne.n	800214a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f241 1334 	movw	r3, #4404	; 0x1134
 800212a:	4413      	add	r3, r2
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002132:	2b40      	cmp	r3, #64	; 0x40
 8002134:	d109      	bne.n	800214a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f005 fe06 	bl	8007d48 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002144:	f248 0240 	movw	r2, #32832	; 0x8040
 8002148:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d113      	bne.n	8002184 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	f241 1334 	movw	r3, #4404	; 0x1134
 8002164:	4413      	add	r3, r2
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d109      	bne.n	8002184 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f005 fe05 	bl	8007d80 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800217e:	f248 0201 	movw	r2, #32769	; 0x8001
 8002182:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002196:	d149      	bne.n	800222c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f241 1334 	movw	r3, #4404	; 0x1134
 80021a0:	4413      	add	r3, r2
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ac:	d13e      	bne.n	800222c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b2:	f043 0208 	orr.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021cc:	d11b      	bne.n	8002206 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	f241 1302 	movw	r3, #4354	; 0x1102
 80021dc:	4013      	ands	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f241 1334 	movw	r3, #4404	; 0x1134
 80021ea:	4413      	add	r3, r2
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6811      	ldr	r1, [r2, #0]
 80021f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021f6:	f241 1334 	movw	r3, #4404	; 0x1134
 80021fa:	440b      	add	r3, r1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	22e0      	movs	r2, #224	; 0xe0
 8002202:	66da      	str	r2, [r3, #108]	; 0x6c
 8002204:	e00f      	b.n	8002226 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002220:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002224:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f85c 	bl	80022e4 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002234:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002238:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800223c:	d10e      	bne.n	800225c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	22e0      	movs	r2, #224	; 0xe0
 800224e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f851 	bl	80022f8 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b10      	cmp	r3, #16
 800226a:	d10f      	bne.n	800228c <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002274:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f844 	bl	800230c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b20      	cmp	r3, #32
 800229a:	d10f      	bne.n	80022bc <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022a4:	f003 020f 	and.w	r2, r3, #15
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f836 	bl	8002320 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_ETH_IRQHandler+0x1d8>)
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_ETH_IRQHandler+0x1d8>)
 80022ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f82f 	bl	8002334 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	58000080 	.word	0x58000080

080022e4 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e03e      	b.n	80023e8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002372:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	055b      	lsls	r3, r3, #21
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f043 030c 	orr.w	r3, r3, #12
 8002396:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80023aa:	f7ff f8bb 	bl	8001524 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80023b0:	e009      	b.n	80023c6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80023b2:	f7ff f8b7 	bl	8001524 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c0:	d901      	bls.n	80023c6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e010      	b.n	80023e8 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ed      	bne.n	80023b2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e03c      	b.n	800248c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800241a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	055b      	lsls	r3, r3, #21
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 030c 	bic.w	r3, r3, #12
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_ETH_WritePHYRegister+0xa4>)
 8002452:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002456:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <HAL_ETH_WritePHYRegister+0xa4>)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800245e:	f7ff f861 	bl	8001524 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002464:	e009      	b.n	800247a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002466:	f7ff f85d 	bl	8001524 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002474:	d901      	bls.n	800247a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e008      	b.n	800248c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ed      	bne.n	8002466 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40028000 	.word	0x40028000

08002498 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e1c3      	b.n	8002834 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0e5b      	lsrs	r3, r3, #25
 80026f6:	f003 021f 	and.w	r2, r3, #31
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	b29a      	uxth	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf14      	ite	ne
 800278c:	2301      	movne	r3, #1
 800278e:	2300      	moveq	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80027c0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80027d0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e00a      	b.n	800286a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	2b10      	cmp	r3, #16
 800285a:	d105      	bne.n	8002868 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8c4 	bl	80029ec <ETH_SetMACConfig>

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  if(dmaconf == NULL)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00a      	b.n	800289c <HAL_ETH_SetDMAConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	2b10      	cmp	r3, #16
 800288c:	d105      	bne.n	800289a <HAL_ETH_SetDMAConfig+0x28>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 800288e:	6839      	ldr	r1, [r7, #0]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f9c7 	bl	8002c24 <ETH_SetDMAConfig>

    return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_ETH_SetDMAConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028b4:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028bc:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80028be:	f001 ff93 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 80028c2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d908      	bls.n	80028de <HAL_ETH_SetMDIOClockRange+0x3a>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d804      	bhi.n	80028de <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e027      	b.n	800292e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d908      	bls.n	80028f8 <HAL_ETH_SetMDIOClockRange+0x54>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d204      	bcs.n	80028f8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e01a      	b.n	800292e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d303      	bcc.n	8002908 <HAL_ETH_SetMDIOClockRange+0x64>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d911      	bls.n	800292c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d908      	bls.n	8002922 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d804      	bhi.n	8002922 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e005      	b.n	800292e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e000      	b.n	800292e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800292c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	01312cff 	.word	0x01312cff
 8002944:	02160ebf 	.word	0x02160ebf
 8002948:	03938700 	.word	0x03938700
 800294c:	05f5e0ff 	.word	0x05f5e0ff
 8002950:	08f0d17f 	.word	0x08f0d17f

08002954 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if(pFilterConfig == NULL)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e039      	b.n	80029dc <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002974:	431a      	orrs	r2, r3
                    ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	791b      	ldrb	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 800297c:	431a      	orrs	r2, r3
                      ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	7a1b      	ldrb	r3, [r3, #8]
 8002982:	00db      	lsls	r3, r3, #3
                    ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8002984:	431a      	orrs	r2, r3
                        ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	795b      	ldrb	r3, [r3, #5]
 800298a:	011b      	lsls	r3, r3, #4
                      ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 800298c:	4313      	orrs	r3, r2
                          ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	7a52      	ldrb	r2, [r2, #9]
 8002992:	2a00      	cmp	r2, #0
 8002994:	d101      	bne.n	800299a <HAL_ETH_SetMACFilterConfig+0x46>
 8002996:	2220      	movs	r2, #32
 8002998:	e000      	b.n	800299c <HAL_ETH_SetMACFilterConfig+0x48>
 800299a:	2200      	movs	r2, #0
                        ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 800299c:	431a      	orrs	r2, r3
                            ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	79db      	ldrb	r3, [r3, #7]
 80029a2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80029a4:	431a      	orrs	r2, r3
                              ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	799b      	ldrb	r3, [r3, #6]
 80029aa:	025b      	lsls	r3, r3, #9
                            ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 80029ac:	431a      	orrs	r2, r3
                                ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	789b      	ldrb	r3, [r3, #2]
 80029b2:	029b      	lsls	r3, r3, #10
                              ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 80029b4:	431a      	orrs	r2, r3
                                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	07db      	lsls	r3, r3, #31
                                ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80029bc:	431a      	orrs	r2, r3
                                    pFilterConfig->ControlPacketsFilter);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_ETH_SetMACFilterConfig+0x94>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	430b      	orrs	r3, r1
 80029d8:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	7ffff800 	.word	0x7ffff800

080029ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80029fe:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	791b      	ldrb	r3, [r3, #4]
 8002a04:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002a06:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	7b1b      	ldrb	r3, [r3, #12]
 8002a0c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a0e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	7b5b      	ldrb	r3, [r3, #13]
 8002a14:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a16:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	7b9b      	ldrb	r3, [r3, #14]
 8002a1c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	7bdb      	ldrb	r3, [r3, #15]
 8002a24:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a26:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	7c12      	ldrb	r2, [r2, #16]
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	d102      	bne.n	8002a36 <ETH_SetMACConfig+0x4a>
 8002a30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a34:	e000      	b.n	8002a38 <ETH_SetMACConfig+0x4c>
 8002a36:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a38:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	7c52      	ldrb	r2, [r2, #17]
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	d102      	bne.n	8002a48 <ETH_SetMACConfig+0x5c>
 8002a42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a46:	e000      	b.n	8002a4a <ETH_SetMACConfig+0x5e>
 8002a48:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a4a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	7c9b      	ldrb	r3, [r3, #18]
 8002a50:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a52:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002a58:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002a5e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	7f1b      	ldrb	r3, [r3, #28]
 8002a64:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002a66:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7f5b      	ldrb	r3, [r3, #29]
 8002a6c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002a6e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	7f92      	ldrb	r2, [r2, #30]
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d102      	bne.n	8002a7e <ETH_SetMACConfig+0x92>
 8002a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a7c:	e000      	b.n	8002a80 <ETH_SetMACConfig+0x94>
 8002a7e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002a80:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	7fdb      	ldrb	r3, [r3, #31]
 8002a86:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002a88:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d102      	bne.n	8002a9a <ETH_SetMACConfig+0xae>
 8002a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a98:	e000      	b.n	8002a9c <ETH_SetMACConfig+0xb0>
 8002a9a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002a9c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002aa2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aaa:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002aac:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <ETH_SetMACConfig+0x22c>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ad6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002ad8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ae0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002ae2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002aea:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002aec:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	d102      	bne.n	8002afe <ETH_SetMACConfig+0x112>
 8002af8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002afc:	e000      	b.n	8002b00 <ETH_SetMACConfig+0x114>
 8002afe:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002b00:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <ETH_SetMACConfig+0x230>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b24:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <ETH_SetMACConfig+0x234>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b48:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b4e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d101      	bne.n	8002b5e <ETH_SetMACConfig+0x172>
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	e000      	b.n	8002b60 <ETH_SetMACConfig+0x174>
 8002b5e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002b60:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b72:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002b76:	4013      	ands	r3, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	68f9      	ldr	r1, [r7, #12]
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002b88:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b90:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f023 0103 	bic.w	r1, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002bb6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002bd2:	2a00      	cmp	r2, #0
 8002bd4:	d101      	bne.n	8002bda <ETH_SetMACConfig+0x1ee>
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	e000      	b.n	8002bdc <ETH_SetMACConfig+0x1f0>
 8002bda:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002bdc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002be4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002be6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002bee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bfc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	00048083 	.word	0x00048083
 8002c1c:	c0f88000 	.word	0xc0f88000
 8002c20:	fffffef0 	.word	0xfffffef0

08002c24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <ETH_SetDMAConfig+0xf8>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	6809      	ldr	r1, [r1, #0]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002c4a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	791b      	ldrb	r3, [r3, #4]
 8002c50:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c56:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	7b1b      	ldrb	r3, [r3, #12]
 8002c5c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f241 0304 	movw	r3, #4100	; 0x1004
 8002c6a:	4413      	add	r3, r2
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <ETH_SetDMAConfig+0xfc>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6811      	ldr	r1, [r2, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002c7e:	440b      	add	r3, r1
 8002c80:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	7b5b      	ldrb	r3, [r3, #13]
 8002c86:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <ETH_SetDMAConfig+0x100>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6811      	ldr	r1, [r2, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002caa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	7d1b      	ldrb	r3, [r3, #20]
 8002cb4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cb6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	7f5b      	ldrb	r3, [r3, #29]
 8002cbc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f241 1304 	movw	r3, #4356	; 0x1104
 8002cca:	4413      	add	r3, r2
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <ETH_SetDMAConfig+0x104>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6811      	ldr	r1, [r2, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	f241 1304 	movw	r3, #4356	; 0x1104
 8002cde:	440b      	add	r3, r1
 8002ce0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	7f1b      	ldrb	r3, [r3, #28]
 8002ce6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	f241 1308 	movw	r3, #4360	; 0x1108
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <ETH_SetDMAConfig+0x108>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6811      	ldr	r1, [r2, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d0c:	440b      	add	r3, r1
 8002d0e:	601a      	str	r2, [r3, #0]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	ffff87fd 	.word	0xffff87fd
 8002d20:	ffff2ffe 	.word	0xffff2ffe
 8002d24:	fffec000 	.word	0xfffec000
 8002d28:	ffc0efef 	.word	0xffc0efef
 8002d2c:	7fc0ffff 	.word	0x7fc0ffff

08002d30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0a4      	sub	sp, #144	; 0x90
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d70:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002d88:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002d8c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d94:	2300      	movs	r3, #0
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002daa:	2300      	movs	r3, #0
 8002dac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002db2:	2300      	movs	r3, #0
 8002db4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dda:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002de0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002de4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fde6 	bl	80029ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e24:	2301      	movs	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002e50:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fee1 	bl	8002c24 <ETH_SetDMAConfig>
}
 8002e62:	bf00      	nop
 8002e64:	3790      	adds	r7, #144	; 0x90
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e86:	f001 fcaf 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8002e8a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d908      	bls.n	8002ea6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d804      	bhi.n	8002ea6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e027      	b.n	8002ef6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d908      	bls.n	8002ec0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d204      	bcs.n	8002ec0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e01a      	b.n	8002ef6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d303      	bcc.n	8002ed0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d911      	bls.n	8002ef4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d908      	bls.n	8002eea <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d804      	bhi.n	8002eea <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e005      	b.n	8002ef6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	e000      	b.n	8002ef6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002ef4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	01312cff 	.word	0x01312cff
 8002f0c:	02160ebf 	.word	0x02160ebf
 8002f10:	03938700 	.word	0x03938700
 8002f14:	05f5e0ff 	.word	0x05f5e0ff
 8002f18:	08f0d17f 	.word	0x08f0d17f

08002f1c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e01d      	b.n	8002f66 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68d9      	ldr	r1, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2200      	movs	r2, #0
 8002f52:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	3206      	adds	r2, #6
 8002f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3301      	adds	r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d9de      	bls.n	8002f2a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f241 132c 	movw	r3, #4396	; 0x112c
 8002f7a:	4413      	add	r3, r2
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68d9      	ldr	r1, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	f241 1314 	movw	r3, #4372	; 0x1114
 8002f8c:	4413      	add	r3, r2
 8002f8e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e024      	b.n	8003002 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6919      	ldr	r1, [r3, #16]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3310      	adds	r3, #16
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d9d7      	bls.n	8002fb8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f241 1330 	movw	r3, #4400	; 0x1130
 800302e:	4413      	add	r3, r2
 8003030:	2203      	movs	r2, #3
 8003032:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6919      	ldr	r1, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	f241 131c 	movw	r3, #4380	; 0x111c
 8003040:	4413      	add	r3, r2
 8003042:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f241 1328 	movw	r3, #4392	; 0x1128
 8003054:	4413      	add	r3, r2
 8003056:	6019      	str	r1, [r3, #0]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003064:	b480      	push	{r7}
 8003066:	b08d      	sub	sp, #52	; 0x34
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3318      	adds	r3, #24
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003082:	2300      	movs	r3, #0
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a6:	d007      	beq.n	80030b8 <ETH_Prepare_Tx_Descriptors+0x54>
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	3304      	adds	r3, #4
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	e24a      	b.n	8003552 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d044      	beq.n	8003152 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b72      	ldr	r3, [pc, #456]	; (8003298 <ETH_Prepare_Tx_Descriptors+0x234>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d4:	431a      	orrs	r2, r3
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d027      	beq.n	8003152 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	b29a      	uxth	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	431a      	orrs	r2, r3
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003140:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003150:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00e      	beq.n	800317c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	4b4e      	ldr	r3, [pc, #312]	; (800329c <ETH_Prepare_Tx_Descriptors+0x238>)
 8003164:	4013      	ands	r3, r2
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	6992      	ldr	r2, [r2, #24]
 800316a:	431a      	orrs	r2, r3
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <ETH_Prepare_Tx_Descriptors+0x130>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d030      	beq.n	80031f6 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	3301      	adds	r3, #1
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d902      	bls.n	80031be <ETH_Prepare_Tx_Descriptors+0x15a>
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	3b04      	subs	r3, #4
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	3301      	adds	r3, #1
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031da:	d10c      	bne.n	80031f6 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	e1ad      	b.n	8003552 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	3301      	adds	r3, #1
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <ETH_Prepare_Tx_Descriptors+0x238>)
 800320c:	4013      	ands	r3, r2
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	6852      	ldr	r2, [r2, #4]
 8003212:	431a      	orrs	r2, r3
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d012      	beq.n	8003246 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003236:	4013      	ands	r3, r2
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	6852      	ldr	r2, [r2, #4]
 800323c:	0412      	lsls	r2, r2, #16
 800323e:	431a      	orrs	r2, r3
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e008      	b.n	8003258 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2200      	movs	r2, #0
 800324a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003252:	4013      	ands	r3, r2
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d021      	beq.n	80032a8 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	04db      	lsls	r3, r3, #19
 8003272:	431a      	orrs	r2, r3
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <ETH_Prepare_Tx_Descriptors+0x240>)
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	69d2      	ldr	r2, [r2, #28]
 8003284:	431a      	orrs	r2, r3
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	e02e      	b.n	80032f6 <ETH_Prepare_Tx_Descriptors+0x292>
 8003298:	ffff0000 	.word	0xffff0000
 800329c:	ffffc000 	.word	0xffffc000
 80032a0:	c000ffff 	.word	0xc000ffff
 80032a4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	4b93      	ldr	r3, [pc, #588]	; (80034fc <ETH_Prepare_Tx_Descriptors+0x498>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	6852      	ldr	r2, [r2, #4]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	431a      	orrs	r2, r3
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80cb 	beq.w	80034dc <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	431a      	orrs	r2, r3
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003358:	e0c0      	b.n	80034dc <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	3301      	adds	r3, #1
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b03      	cmp	r3, #3
 8003370:	d902      	bls.n	8003378 <ETH_Prepare_Tx_Descriptors+0x314>
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	3b04      	subs	r3, #4
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003380:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800339a:	d007      	beq.n	80033ac <ETH_Prepare_Tx_Descriptors+0x348>
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	3304      	adds	r3, #4
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d026      	beq.n	80033fa <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e016      	b.n	80033ee <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	3301      	adds	r3, #1
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d902      	bls.n	80033de <ETH_Prepare_Tx_Descriptors+0x37a>
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	3b04      	subs	r3, #4
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	3301      	adds	r3, #1
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d3e4      	bcc.n	80033c0 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0ab      	b.n	8003552 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	3301      	adds	r3, #1
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003416:	4013      	ands	r3, r2
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	6852      	ldr	r2, [r2, #4]
 800341c:	431a      	orrs	r2, r3
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003440:	4013      	ands	r3, r2
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	6852      	ldr	r2, [r2, #4]
 8003446:	0412      	lsls	r2, r2, #16
 8003448:	431a      	orrs	r2, r3
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	e008      	b.n	8003462 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800345c:	4013      	ands	r3, r2
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00f      	beq.n	800348e <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	4b25      	ldr	r3, [pc, #148]	; (8003508 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003474:	4013      	ands	r3, r2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	69d2      	ldr	r2, [r2, #28]
 800347a:	431a      	orrs	r2, r3
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	e017      	b.n	80034be <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <ETH_Prepare_Tx_Descriptors+0x498>)
 8003494:	4013      	ands	r3, r2
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	431a      	orrs	r2, r3
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3301      	adds	r3, #1
 80034c2:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f af3a 	bne.w	800335a <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00f      	beq.n	800350c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	e00e      	b.n	8003518 <ETH_Prepare_Tx_Descriptors+0x4b4>
 80034fa:	bf00      	nop
 80034fc:	ffff8000 	.word	0xffff8000
 8003500:	ffffc000 	.word	0xffffc000
 8003504:	c000ffff 	.word	0xc000ffff
 8003508:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003528:	6979      	ldr	r1, [r7, #20]
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	3304      	adds	r3, #4
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003538:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800353a:	b672      	cpsid	i
}
 800353c:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4413      	add	r3, r2
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800354c:	b662      	cpsie	i
}
 800354e:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3734      	adds	r7, #52	; 0x34
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_GPIO_Init+0x234>)
 8003570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003572:	e194      	b.n	800389e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8186 	beq.w	8003898 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d00b      	beq.n	80035ac <HAL_GPIO_Init+0x4c>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d007      	beq.n	80035ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035a0:	2b11      	cmp	r3, #17
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b12      	cmp	r3, #18
 80035aa:	d130      	bne.n	800360e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035e2:	2201      	movs	r2, #1
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 0201 	and.w	r2, r3, #1
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0xee>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b12      	cmp	r3, #18
 800364c:	d123      	bne.n	8003696 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	220f      	movs	r2, #15
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	08da      	lsrs	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	69b9      	ldr	r1, [r7, #24]
 8003692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0203 	and.w	r2, r3, #3
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80e0 	beq.w	8003898 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d8:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <HAL_GPIO_Init+0x238>)
 80036da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036de:	4a2e      	ldr	r2, [pc, #184]	; (8003798 <HAL_GPIO_Init+0x238>)
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_GPIO_Init+0x238>)
 80036ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036f6:	4a29      	ldr	r2, [pc, #164]	; (800379c <HAL_GPIO_Init+0x23c>)
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	220f      	movs	r2, #15
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <HAL_GPIO_Init+0x240>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d052      	beq.n	80037c8 <HAL_GPIO_Init+0x268>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <HAL_GPIO_Init+0x244>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_GPIO_Init+0x22e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <HAL_GPIO_Init+0x248>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02b      	beq.n	800378a <HAL_GPIO_Init+0x22a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <HAL_GPIO_Init+0x24c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d025      	beq.n	8003786 <HAL_GPIO_Init+0x226>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <HAL_GPIO_Init+0x250>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01f      	beq.n	8003782 <HAL_GPIO_Init+0x222>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_GPIO_Init+0x254>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d019      	beq.n	800377e <HAL_GPIO_Init+0x21e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1a      	ldr	r2, [pc, #104]	; (80037b8 <HAL_GPIO_Init+0x258>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_GPIO_Init+0x21a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_GPIO_Init+0x25c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00d      	beq.n	8003776 <HAL_GPIO_Init+0x216>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_GPIO_Init+0x260>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <HAL_GPIO_Init+0x212>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_GPIO_Init+0x264>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_GPIO_Init+0x20e>
 800376a:	2309      	movs	r3, #9
 800376c:	e02d      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 800376e:	230a      	movs	r3, #10
 8003770:	e02b      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 8003772:	2308      	movs	r3, #8
 8003774:	e029      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 8003776:	2307      	movs	r3, #7
 8003778:	e027      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 800377a:	2306      	movs	r3, #6
 800377c:	e025      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 800377e:	2305      	movs	r3, #5
 8003780:	e023      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 8003782:	2304      	movs	r3, #4
 8003784:	e021      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 8003786:	2303      	movs	r3, #3
 8003788:	e01f      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 800378a:	2302      	movs	r3, #2
 800378c:	e01d      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 800378e:	2301      	movs	r3, #1
 8003790:	e01b      	b.n	80037ca <HAL_GPIO_Init+0x26a>
 8003792:	bf00      	nop
 8003794:	58000080 	.word	0x58000080
 8003798:	58024400 	.word	0x58024400
 800379c:	58000400 	.word	0x58000400
 80037a0:	58020000 	.word	0x58020000
 80037a4:	58020400 	.word	0x58020400
 80037a8:	58020800 	.word	0x58020800
 80037ac:	58020c00 	.word	0x58020c00
 80037b0:	58021000 	.word	0x58021000
 80037b4:	58021400 	.word	0x58021400
 80037b8:	58021800 	.word	0x58021800
 80037bc:	58021c00 	.word	0x58021c00
 80037c0:	58022000 	.word	0x58022000
 80037c4:	58022400 	.word	0x58022400
 80037c8:	2300      	movs	r3, #0
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	f002 0203 	and.w	r2, r2, #3
 80037d0:	0092      	lsls	r2, r2, #2
 80037d2:	4093      	lsls	r3, r2
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037da:	4938      	ldr	r1, [pc, #224]	; (80038bc <HAL_GPIO_Init+0x35c>)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	3302      	adds	r3, #2
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800383c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3301      	adds	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f47f ae63 	bne.w	8003574 <HAL_GPIO_Init+0x14>
  }
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	3724      	adds	r7, #36	; 0x24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	58000400 	.word	0x58000400

080038c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
 80038cc:	4613      	mov	r3, r2
 80038ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038d0:	787b      	ldrb	r3, [r7, #1]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038dc:	e003      	b.n	80038e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	041a      	lsls	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	619a      	str	r2, [r3, #24]
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b04      	cmp	r3, #4
 8003906:	d00a      	beq.n	800391e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e01f      	b.n	800395a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e01d      	b.n	800395a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 0207 	bic.w	r2, r3, #7
 8003926:	490f      	ldr	r1, [pc, #60]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4313      	orrs	r3, r2
 800392c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800392e:	f7fd fdf9 	bl	8001524 <HAL_GetTick>
 8003932:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003934:	e009      	b.n	800394a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003936:	f7fd fdf5 	bl	8001524 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003944:	d901      	bls.n	800394a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e007      	b.n	800395a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003956:	d1ee      	bne.n	8003936 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	58024800 	.word	0x58024800

08003968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08c      	sub	sp, #48	; 0x30
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e3ff      	b.n	800417a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8087 	beq.w	8003a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003988:	4b99      	ldr	r3, [pc, #612]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003992:	4b97      	ldr	r3, [pc, #604]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	2b10      	cmp	r3, #16
 800399c:	d007      	beq.n	80039ae <HAL_RCC_OscConfig+0x46>
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	2b18      	cmp	r3, #24
 80039a2:	d110      	bne.n	80039c6 <HAL_RCC_OscConfig+0x5e>
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d10b      	bne.n	80039c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ae:	4b90      	ldr	r3, [pc, #576]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d06c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x12c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d168      	bne.n	8003a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e3d9      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x76>
 80039d0:	4b87      	ldr	r3, [pc, #540]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a86      	ldr	r2, [pc, #536]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	e02e      	b.n	8003a3c <HAL_RCC_OscConfig+0xd4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x98>
 80039e6:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a81      	ldr	r2, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b7f      	ldr	r3, [pc, #508]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7e      	ldr	r2, [pc, #504]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e01d      	b.n	8003a3c <HAL_RCC_OscConfig+0xd4>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0xbc>
 8003a0a:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a78      	ldr	r2, [pc, #480]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a75      	ldr	r2, [pc, #468]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0xd4>
 8003a24:	4b72      	ldr	r3, [pc, #456]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a71      	ldr	r2, [pc, #452]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6e      	ldr	r2, [pc, #440]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd fd6e 	bl	8001524 <HAL_GetTick>
 8003a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fd fd6a 	bl	8001524 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e38d      	b.n	800417a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a5e:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0xe4>
 8003a6a:	e014      	b.n	8003a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fd5a 	bl	8001524 <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fd fd56 	bl	8001524 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e379      	b.n	800417a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a86:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x10c>
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80ae 	beq.w	8003c00 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa4:	4b52      	ldr	r3, [pc, #328]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aae:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_RCC_OscConfig+0x162>
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2b18      	cmp	r3, #24
 8003abe:	d13a      	bne.n	8003b36 <HAL_RCC_OscConfig+0x1ce>
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d135      	bne.n	8003b36 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aca:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x17a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e34b      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	f7fd fd2b 	bl	800153c <HAL_GetREVID>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d817      	bhi.n	8003b20 <HAL_RCC_OscConfig+0x1b8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d108      	bne.n	8003b0a <HAL_RCC_OscConfig+0x1a2>
 8003af8:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b00:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b06:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b08:	e07a      	b.n	8003c00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	031b      	lsls	r3, r3, #12
 8003b18:	4935      	ldr	r1, [pc, #212]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b1e:	e06f      	b.n	8003c00 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b20:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	4930      	ldr	r1, [pc, #192]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b34:	e064      	b.n	8003c00 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d045      	beq.n	8003bca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 0219 	bic.w	r2, r3, #25
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	4929      	ldr	r1, [pc, #164]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fce8 	bl	8001524 <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fd fce4 	bl	8001524 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e307      	b.n	800417a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6a:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	f7fd fce1 	bl	800153c <HAL_GetREVID>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d817      	bhi.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b40      	cmp	r3, #64	; 0x40
 8003b8a:	d108      	bne.n	8003b9e <HAL_RCC_OscConfig+0x236>
 8003b8c:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b94:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9a:	6053      	str	r3, [r2, #4]
 8003b9c:	e030      	b.n	8003c00 <HAL_RCC_OscConfig+0x298>
 8003b9e:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	031b      	lsls	r3, r3, #12
 8003bac:	4910      	ldr	r1, [pc, #64]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
 8003bb2:	e025      	b.n	8003c00 <HAL_RCC_OscConfig+0x298>
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	490b      	ldr	r1, [pc, #44]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e01a      	b.n	8003c00 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fd fca5 	bl	8001524 <HAL_GetTick>
 8003bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bde:	f7fd fca1 	bl	8001524 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d903      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e2c4      	b.n	800417a <HAL_RCC_OscConfig+0x812>
 8003bf0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bf4:	4ba4      	ldr	r3, [pc, #656]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ee      	bne.n	8003bde <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80a9 	beq.w	8003d60 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0e:	4b9e      	ldr	r3, [pc, #632]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c18:	4b9b      	ldr	r3, [pc, #620]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d007      	beq.n	8003c34 <HAL_RCC_OscConfig+0x2cc>
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b18      	cmp	r3, #24
 8003c28:	d13a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x338>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d135      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c34:	4b94      	ldr	r3, [pc, #592]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_OscConfig+0x2e4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e296      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c4c:	f7fd fc76 	bl	800153c <HAL_GetREVID>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d817      	bhi.n	8003c8a <HAL_RCC_OscConfig+0x322>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d108      	bne.n	8003c74 <HAL_RCC_OscConfig+0x30c>
 8003c62:	4b89      	ldr	r3, [pc, #548]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c6a:	4a87      	ldr	r2, [pc, #540]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c72:	e075      	b.n	8003d60 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c74:	4b84      	ldr	r3, [pc, #528]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	069b      	lsls	r3, r3, #26
 8003c82:	4981      	ldr	r1, [pc, #516]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c88:	e06a      	b.n	8003d60 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c8a:	4b7f      	ldr	r3, [pc, #508]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	497b      	ldr	r1, [pc, #492]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c9e:	e05f      	b.n	8003d60 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d042      	beq.n	8003d2e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ca8:	4b77      	ldr	r3, [pc, #476]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a76      	ldr	r2, [pc, #472]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fc36 	bl	8001524 <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cbc:	f7fd fc32 	bl	8001524 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e255      	b.n	800417a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cce:	4b6e      	ldr	r3, [pc, #440]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cda:	f7fd fc2f 	bl	800153c <HAL_GetREVID>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d817      	bhi.n	8003d18 <HAL_RCC_OscConfig+0x3b0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d108      	bne.n	8003d02 <HAL_RCC_OscConfig+0x39a>
 8003cf0:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003cf8:	4a63      	ldr	r2, [pc, #396]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cfe:	6053      	str	r3, [r2, #4]
 8003d00:	e02e      	b.n	8003d60 <HAL_RCC_OscConfig+0x3f8>
 8003d02:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	069b      	lsls	r3, r3, #26
 8003d10:	495d      	ldr	r1, [pc, #372]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
 8003d16:	e023      	b.n	8003d60 <HAL_RCC_OscConfig+0x3f8>
 8003d18:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	4958      	ldr	r1, [pc, #352]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60cb      	str	r3, [r1, #12]
 8003d2c:	e018      	b.n	8003d60 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d2e:	4b56      	ldr	r3, [pc, #344]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a55      	ldr	r2, [pc, #340]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fbf3 	bl	8001524 <HAL_GetTick>
 8003d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d42:	f7fd fbef 	bl	8001524 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e212      	b.n	800417a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d036      	beq.n	8003dda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d019      	beq.n	8003da8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d74:	4b44      	ldr	r3, [pc, #272]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	4a43      	ldr	r2, [pc, #268]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd fbd0 	bl	8001524 <HAL_GetTick>
 8003d84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fd fbcc 	bl	8001524 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e1ef      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x420>
 8003da6:	e018      	b.n	8003dda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da8:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dac:	4a36      	ldr	r2, [pc, #216]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd fbb6 	bl	8001524 <HAL_GetTick>
 8003db8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fd fbb2 	bl	8001524 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1d5      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dce:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d036      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d019      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003df8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fb93 	bl	8001524 <HAL_GetTick>
 8003dfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e02:	f7fd fb8f 	bl	8001524 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1b2      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x49a>
 8003e20:	e018      	b.n	8003e54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e22:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e2e:	f7fd fb79 	bl	8001524 <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e36:	f7fd fb75 	bl	8001524 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e198      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_RCC_OscConfig+0x520>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8085 	beq.w	8003f6c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RCC_OscConfig+0x524>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <HAL_RCC_OscConfig+0x524>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e6e:	f7fd fb59 	bl	8001524 <HAL_GetTick>
 8003e72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e74:	e00c      	b.n	8003e90 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e76:	f7fd fb55 	bl	8001524 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b64      	cmp	r3, #100	; 0x64
 8003e82:	d905      	bls.n	8003e90 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e178      	b.n	800417a <HAL_RCC_OscConfig+0x812>
 8003e88:	58024400 	.word	0x58024400
 8003e8c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e90:	4b96      	ldr	r3, [pc, #600]	; (80040ec <HAL_RCC_OscConfig+0x784>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ec      	beq.n	8003e76 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x54a>
 8003ea4:	4b92      	ldr	r3, [pc, #584]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a91      	ldr	r2, [pc, #580]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	e02d      	b.n	8003f0e <HAL_RCC_OscConfig+0x5a6>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x56c>
 8003eba:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a8c      	ldr	r2, [pc, #560]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	4b8a      	ldr	r3, [pc, #552]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a89      	ldr	r2, [pc, #548]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCC_OscConfig+0x5a6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x58e>
 8003edc:	4b84      	ldr	r3, [pc, #528]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a83      	ldr	r2, [pc, #524]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a80      	ldr	r2, [pc, #512]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCC_OscConfig+0x5a6>
 8003ef6:	4b7e      	ldr	r3, [pc, #504]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a7d      	ldr	r2, [pc, #500]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	4b7b      	ldr	r3, [pc, #492]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a7a      	ldr	r2, [pc, #488]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd fb05 	bl	8001524 <HAL_GetTick>
 8003f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd fb01 	bl	8001524 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e122      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f34:	4b6e      	ldr	r3, [pc, #440]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCC_OscConfig+0x5b6>
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fd faef 	bl	8001524 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fd faeb 	bl	8001524 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e10c      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f60:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8101 	beq.w	8004178 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f76:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7e:	2b18      	cmp	r3, #24
 8003f80:	f000 80bc 	beq.w	80040fc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	f040 8095 	bne.w	80040b8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b58      	ldr	r3, [pc, #352]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a57      	ldr	r2, [pc, #348]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fd fac3 	bl	8001524 <HAL_GetTick>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fd fabf 	bl	8001524 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0e2      	b.n	800417a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fb4:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc0:	4b4b      	ldr	r3, [pc, #300]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <HAL_RCC_OscConfig+0x78c>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	4946      	ldr	r1, [pc, #280]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	628b      	str	r3, [r1, #40]	; 0x28
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	025b      	lsls	r3, r3, #9
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	3b01      	subs	r3, #1
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800400a:	4939      	ldr	r1, [pc, #228]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800400c:	4313      	orrs	r3, r2
 800400e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004010:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4a36      	ldr	r2, [pc, #216]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800401c:	4b34      	ldr	r3, [pc, #208]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800401e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCC_OscConfig+0x790>)
 8004022:	4013      	ands	r3, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004028:	00d2      	lsls	r2, r2, #3
 800402a:	4931      	ldr	r1, [pc, #196]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800402c:	4313      	orrs	r3, r2
 800402e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004030:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	f023 020c 	bic.w	r2, r3, #12
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	492c      	ldr	r1, [pc, #176]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800403e:	4313      	orrs	r3, r2
 8004040:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004042:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	f023 0202 	bic.w	r2, r3, #2
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	4928      	ldr	r1, [pc, #160]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004050:	4313      	orrs	r3, r2
 8004052:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004054:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004060:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800406c:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fa48 	bl	8001524 <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7fd fa44 	bl	8001524 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e067      	b.n	800417a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040aa:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x730>
 80040b6:	e05f      	b.n	8004178 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 80040be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fa2e 	bl	8001524 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fd fa2a 	bl	8001524 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e04d      	b.n	800417a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <HAL_RCC_OscConfig+0x788>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x764>
 80040ea:	e045      	b.n	8004178 <HAL_RCC_OscConfig+0x810>
 80040ec:	58024800 	.word	0x58024800
 80040f0:	58024400 	.word	0x58024400
 80040f4:	fffffc0c 	.word	0xfffffc0c
 80040f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040fc:	4b21      	ldr	r3, [pc, #132]	; (8004184 <HAL_RCC_OscConfig+0x81c>)
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_RCC_OscConfig+0x81c>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	2b01      	cmp	r3, #1
 800410e:	d031      	beq.n	8004174 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f003 0203 	and.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d12a      	bne.n	8004174 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d122      	bne.n	8004174 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d11a      	bne.n	8004174 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	0a5b      	lsrs	r3, r3, #9
 8004142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d111      	bne.n	8004174 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d108      	bne.n	8004174 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	0e1b      	lsrs	r3, r3, #24
 8004166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3730      	adds	r7, #48	; 0x30
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400

08004188 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e19c      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b8a      	ldr	r3, [pc, #552]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d910      	bls.n	80041cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b87      	ldr	r3, [pc, #540]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	4985      	ldr	r1, [pc, #532]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b83      	ldr	r3, [pc, #524]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e184      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d908      	bls.n	80041fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041e8:	4b78      	ldr	r3, [pc, #480]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	4975      	ldr	r1, [pc, #468]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	4b70      	ldr	r3, [pc, #448]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004212:	429a      	cmp	r2, r3
 8004214:	d908      	bls.n	8004228 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004216:	4b6d      	ldr	r3, [pc, #436]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	496a      	ldr	r1, [pc, #424]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004224:	4313      	orrs	r3, r2
 8004226:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	4b64      	ldr	r3, [pc, #400]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004240:	429a      	cmp	r2, r3
 8004242:	d908      	bls.n	8004256 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	495e      	ldr	r1, [pc, #376]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004252:	4313      	orrs	r3, r2
 8004254:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	4b59      	ldr	r3, [pc, #356]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800426e:	429a      	cmp	r2, r3
 8004270:	d908      	bls.n	8004284 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004272:	4b56      	ldr	r3, [pc, #344]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4953      	ldr	r1, [pc, #332]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004280:	4313      	orrs	r3, r2
 8004282:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	429a      	cmp	r2, r3
 800429e:	d908      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f023 020f 	bic.w	r2, r3, #15
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4947      	ldr	r1, [pc, #284]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d055      	beq.n	800436a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042be:	4b43      	ldr	r3, [pc, #268]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4940      	ldr	r1, [pc, #256]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042d8:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d121      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0f6      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042f0:	4b36      	ldr	r3, [pc, #216]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d115      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0ea      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004308:	4b30      	ldr	r3, [pc, #192]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0de      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004318:	4b2c      	ldr	r3, [pc, #176]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0d6      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004328:	4b28      	ldr	r3, [pc, #160]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f023 0207 	bic.w	r2, r3, #7
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4925      	ldr	r1, [pc, #148]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fd f8f3 	bl	8001524 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004340:	e00a      	b.n	8004358 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004342:	f7fd f8ef 	bl	8001524 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0be      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004358:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	429a      	cmp	r2, r3
 8004368:	d1eb      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	429a      	cmp	r2, r3
 8004384:	d208      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f023 020f 	bic.w	r2, r3, #15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	490e      	ldr	r1, [pc, #56]	; (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004394:	4313      	orrs	r3, r2
 8004396:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d214      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 020f 	bic.w	r2, r3, #15
 80043ae:	4906      	ldr	r1, [pc, #24]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e086      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
 80043c8:	52002000 	.word	0x52002000
 80043cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d208      	bcs.n	80043fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043ec:	4b3c      	ldr	r3, [pc, #240]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	4939      	ldr	r1, [pc, #228]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004416:	429a      	cmp	r2, r3
 8004418:	d208      	bcs.n	800442c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	492e      	ldr	r1, [pc, #184]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004428:	4313      	orrs	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004444:	429a      	cmp	r2, r3
 8004446:	d208      	bcs.n	800445a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	4922      	ldr	r1, [pc, #136]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004456:	4313      	orrs	r3, r2
 8004458:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004472:	429a      	cmp	r2, r3
 8004474:	d208      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004476:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	4917      	ldr	r1, [pc, #92]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004484:	4313      	orrs	r3, r2
 8004486:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004488:	f000 f834 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	4912      	ldr	r1, [pc, #72]	; (80044e4 <HAL_RCC_ClockConfig+0x35c>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
 80044a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044a6:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <HAL_RCC_ClockConfig+0x35c>)
 80044b0:	5cd3      	ldrb	r3, [r2, r3]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_RCC_ClockConfig+0x360>)
 80044be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <HAL_RCC_ClockConfig+0x364>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_RCC_ClockConfig+0x368>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fc fc56 	bl	8000d7c <HAL_InitTick>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	58024400 	.word	0x58024400
 80044e4:	08016c68 	.word	0x08016c68
 80044e8:	24000004 	.word	0x24000004
 80044ec:	24000000 	.word	0x24000000
 80044f0:	24000008 	.word	0x24000008

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fa:	4bb3      	ldr	r3, [pc, #716]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004502:	2b18      	cmp	r3, #24
 8004504:	f200 8155 	bhi.w	80047b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <HAL_RCC_GetSysClockFreq+0x1c>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004575 	.word	0x08004575
 8004514:	080047b3 	.word	0x080047b3
 8004518:	080047b3 	.word	0x080047b3
 800451c:	080047b3 	.word	0x080047b3
 8004520:	080047b3 	.word	0x080047b3
 8004524:	080047b3 	.word	0x080047b3
 8004528:	080047b3 	.word	0x080047b3
 800452c:	080047b3 	.word	0x080047b3
 8004530:	0800459b 	.word	0x0800459b
 8004534:	080047b3 	.word	0x080047b3
 8004538:	080047b3 	.word	0x080047b3
 800453c:	080047b3 	.word	0x080047b3
 8004540:	080047b3 	.word	0x080047b3
 8004544:	080047b3 	.word	0x080047b3
 8004548:	080047b3 	.word	0x080047b3
 800454c:	080047b3 	.word	0x080047b3
 8004550:	080045a1 	.word	0x080045a1
 8004554:	080047b3 	.word	0x080047b3
 8004558:	080047b3 	.word	0x080047b3
 800455c:	080047b3 	.word	0x080047b3
 8004560:	080047b3 	.word	0x080047b3
 8004564:	080047b3 	.word	0x080047b3
 8004568:	080047b3 	.word	0x080047b3
 800456c:	080047b3 	.word	0x080047b3
 8004570:	080045a7 	.word	0x080045a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004574:	4b94      	ldr	r3, [pc, #592]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004580:	4b91      	ldr	r3, [pc, #580]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	4a90      	ldr	r2, [pc, #576]	; (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004592:	e111      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004594:	4b8d      	ldr	r3, [pc, #564]	; (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004596:	61bb      	str	r3, [r7, #24]
    break;
 8004598:	e10e      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800459a:	4b8d      	ldr	r3, [pc, #564]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800459c:	61bb      	str	r3, [r7, #24]
    break;
 800459e:	e10b      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80045a0:	4b8c      	ldr	r3, [pc, #560]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045a2:	61bb      	str	r3, [r7, #24]
    break;
 80045a4:	e108      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045a6:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045b0:	4b85      	ldr	r3, [pc, #532]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045bc:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045c6:	4b80      	ldr	r3, [pc, #512]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80e1 	beq.w	80047ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f000 8083 	beq.w	80046f8 <HAL_RCC_GetSysClockFreq+0x204>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f200 80a1 	bhi.w	800473c <HAL_RCC_GetSysClockFreq+0x248>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x114>
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d056      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004606:	e099      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02d      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004614:	4b6c      	ldr	r3, [pc, #432]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	4a6b      	ldr	r2, [pc, #428]	; (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b62      	ldr	r3, [pc, #392]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004652:	eddf 5a61 	vldr	s11, [pc, #388]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800466e:	e087      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80047dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b51      	ldr	r3, [pc, #324]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a02 	vldr	s12, [r7, #8]
 8004696:	eddf 5a50 	vldr	s11, [pc, #320]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046b2:	e065      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b40      	ldr	r3, [pc, #256]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046f6:	e043      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a38 	vldr	s13, [pc, #224]	; 80047e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a02 	vldr	s12, [r7, #8]
 800471e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473a:	e021      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a26 	vldr	s13, [pc, #152]	; 80047e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004762:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800477e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	0a5b      	lsrs	r3, r3, #9
 8004786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478a:	3301      	adds	r3, #1
 800478c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004798:	edd7 6a07 	vldr	s13, [r7, #28]
 800479c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a4:	ee17 3a90 	vmov	r3, s15
 80047a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61bb      	str	r3, [r7, #24]
    break;
 80047b0:	e002      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047b4:	61bb      	str	r3, [r7, #24]
    break;
 80047b6:	bf00      	nop
  }

  return sysclockfreq;
 80047b8:	69bb      	ldr	r3, [r7, #24]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
 80047cc:	03d09000 	.word	0x03d09000
 80047d0:	003d0900 	.word	0x003d0900
 80047d4:	017d7840 	.word	0x017d7840
 80047d8:	46000000 	.word	0x46000000
 80047dc:	4c742400 	.word	0x4c742400
 80047e0:	4a742400 	.word	0x4a742400
 80047e4:	4bbebc20 	.word	0x4bbebc20

080047e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047ee:	f7ff fe81 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80047f2:	4602      	mov	r2, r0
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCC_GetHCLKFreq+0x50>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	490f      	ldr	r1, [pc, #60]	; (800483c <HAL_RCC_GetHCLKFreq+0x54>)
 8004800:	5ccb      	ldrb	r3, [r1, r3]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <HAL_RCC_GetHCLKFreq+0x50>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	4a09      	ldr	r2, [pc, #36]	; (800483c <HAL_RCC_GetHCLKFreq+0x54>)
 8004816:	5cd3      	ldrb	r3, [r2, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	4a07      	ldr	r2, [pc, #28]	; (8004840 <HAL_RCC_GetHCLKFreq+0x58>)
 8004824:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004826:	4a07      	ldr	r2, [pc, #28]	; (8004844 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <HAL_RCC_GetHCLKFreq+0x58>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	58024400 	.word	0x58024400
 800483c:	08016c68 	.word	0x08016c68
 8004840:	24000004 	.word	0x24000004
 8004844:	24000000 	.word	0x24000000

08004848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800484c:	f7ff ffcc 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4904      	ldr	r1, [pc, #16]	; (8004870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	58024400 	.word	0x58024400
 8004870:	08016c68 	.word	0x08016c68

08004874 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	223f      	movs	r2, #63	; 0x3f
 8004882:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004884:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <HAL_RCC_GetClockConfig+0x7c>)
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0207 	and.w	r2, r3, #7
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <HAL_RCC_GetClockConfig+0x7c>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800489c:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_RCC_GetClockConfig+0x7c>)
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80048a8:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <HAL_RCC_GetClockConfig+0x7c>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <HAL_RCC_GetClockConfig+0x7c>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_GetClockConfig+0x7c>)
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80048cc:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <HAL_RCC_GetClockConfig+0x7c>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_GetClockConfig+0x80>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 020f 	and.w	r2, r3, #15
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	58024400 	.word	0x58024400
 80048f4:	52002000 	.word	0x52002000

080048f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e049      	b.n	800499e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f841 	bl	80049a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f000 f9f8 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e04f      	b.n	8004a74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <HAL_TIM_Base_Start_IT+0xc4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01d      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d018      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00e      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d009      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x76>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d115      	bne.n	8004a5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b06      	cmp	r3, #6
 8004a42:	d015      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0xb4>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4a:	d011      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5c:	e008      	b.n	8004a70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e000      	b.n	8004a72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40010400 	.word	0x40010400
 8004a94:	40001800 	.word	0x40001800
 8004a98:	00010007 	.word	0x00010007

08004a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d122      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d11b      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0202 	mvn.w	r2, #2
 8004ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f905 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8f7 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f908 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d122      	bne.n	8004b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d11b      	bne.n	8004b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0204 	mvn.w	r2, #4
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8db 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8cd 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8de 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d122      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d11b      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0208 	mvn.w	r2, #8
 8004b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2204      	movs	r2, #4
 8004b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8b1 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8a3 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f8b4 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b10      	cmp	r3, #16
 8004bac:	d122      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d11b      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0210 	mvn.w	r2, #16
 8004bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2208      	movs	r2, #8
 8004bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f887 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f879 	bl	8004cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f88a 	bl	8004d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0201 	mvn.w	r2, #1
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fb ffc8 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c38:	2b80      	cmp	r3, #128	; 0x80
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f914 	bl	8004e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5a:	d10e      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d107      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f907 	bl	8004e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d10e      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d107      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f838 	bl	8004d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f06f 0220 	mvn.w	r2, #32
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f8c7 	bl	8004e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a40      	ldr	r2, [pc, #256]	; (8004e40 <TIM_Base_SetConfig+0x114>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d013      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4a:	d00f      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3d      	ldr	r2, [pc, #244]	; (8004e44 <TIM_Base_SetConfig+0x118>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <TIM_Base_SetConfig+0x11c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <TIM_Base_SetConfig+0x120>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a3a      	ldr	r2, [pc, #232]	; (8004e50 <TIM_Base_SetConfig+0x124>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2f      	ldr	r2, [pc, #188]	; (8004e40 <TIM_Base_SetConfig+0x114>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01f      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d01b      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2c      	ldr	r2, [pc, #176]	; (8004e44 <TIM_Base_SetConfig+0x118>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d017      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <TIM_Base_SetConfig+0x11c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2a      	ldr	r2, [pc, #168]	; (8004e4c <TIM_Base_SetConfig+0x120>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00f      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a29      	ldr	r2, [pc, #164]	; (8004e50 <TIM_Base_SetConfig+0x124>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a28      	ldr	r2, [pc, #160]	; (8004e54 <TIM_Base_SetConfig+0x128>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d007      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a27      	ldr	r2, [pc, #156]	; (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <TIM_Base_SetConfig+0x9a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a26      	ldr	r2, [pc, #152]	; (8004e5c <TIM_Base_SetConfig+0x130>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a10      	ldr	r2, [pc, #64]	; (8004e40 <TIM_Base_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00f      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <TIM_Base_SetConfig+0x124>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <TIM_Base_SetConfig+0x128>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <TIM_Base_SetConfig+0x12c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_Base_SetConfig+0xf8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <TIM_Base_SetConfig+0x130>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d103      	bne.n	8004e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	615a      	str	r2, [r3, #20]
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40010400 	.word	0x40010400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40014400 	.word	0x40014400
 8004e5c:	40014800 	.word	0x40014800

08004e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <_nxe_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (dhcp_ptr == NX_NULL))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <_nxe_dhcp_create+0x22>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <_nxe_dhcp_create+0x3c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d102      	bne.n	8004ebe <_nxe_dhcp_create+0x22>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <_nxe_dhcp_create+0x26>
    {
    
        return(NX_PTR_ERROR);
 8004ebe:	2307      	movs	r3, #7
 8004ec0:	e006      	b.n	8004ed0 <_nxe_dhcp_create+0x34>
    }

    /* Call actual DHCP create service.  */
    status =  _nx_dhcp_create(dhcp_ptr, ip_ptr, name_ptr);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f808 	bl	8004edc <_nx_dhcp_create>
 8004ecc:	6178      	str	r0, [r7, #20]

    /* Return status.  */
    return(status);
 8004ece:	697b      	ldr	r3, [r7, #20]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	49502020 	.word	0x49502020

08004edc <_nx_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	; 0x38
 8004ee0:	af08      	add	r7, sp, #32
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
            return (NX_DHCP_INVALID_NAME);
    }
#endif /* NX_DHCP_CLIENT_ENABLE_HOST_NAME_CHECK  */

    /* Initialize the DHCP control block to zero.  */
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 8004ee8:	f641 7248 	movw	r2, #8008	; 0x1f48
 8004eec:	2100      	movs	r1, #0
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f010 fb8c 	bl	801560c <memset>
    
    /* Save the IP pointer.  */
    dhcp_ptr -> nx_dhcp_ip_ptr =  ip_ptr;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	609a      	str	r2, [r3, #8]

    /* Save the DHCP name.  */
    dhcp_ptr -> nx_dhcp_name =  name_ptr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]
        /* Invalid payload, return error status.  */
        return(NX_DHCP_INVALID_PAYLOAD);
    }

    /* Create the pool and check the status */
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f103 000c 	add.w	r0, r3, #12
                                    dhcp_ptr -> nx_dhcp_pool_area, NX_DHCP_PACKET_POOL_SIZE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3348      	adds	r3, #72	; 0x48
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8004f0a:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 8004f0e:	9200      	str	r2, [sp, #0]
 8004f10:	f44f 7214 	mov.w	r2, #592	; 0x250
 8004f14:	497e      	ldr	r1, [pc, #504]	; (8005110 <_nx_dhcp_create+0x234>)
 8004f16:	f006 fe47 	bl	800bba8 <_nx_packet_pool_create>
 8004f1a:	6178      	str	r0, [r7, #20]

    /* Determine if it was successful.  */
    if (status != NX_SUCCESS)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <_nx_dhcp_create+0x4a>
    {

        /* No, return error status.  */
        return(status);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	e0f0      	b.n	8005108 <_nx_dhcp_create+0x22c>
    }

    /* Set an internal packet pool pointer to the newly created packet pool. */
    dhcp_ptr -> nx_dhcp_packet_pool_ptr = &dhcp_ptr -> nx_dhcp_pool;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f103 020c 	add.w	r2, r3, #12
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f8c3 2bd8 	str.w	r2, [r3, #3032]	; 0xbd8
#endif /* NX_DHCP_CLIENT_SEND_MAX_DHCP_MESSAGE_OPTION  */

#endif /* NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL  */

    /* Create the Socket and check the status */
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f603 31dc 	addw	r1, r3, #3036	; 0xbdc
 8004f38:	2304      	movs	r3, #4
 8004f3a:	9302      	str	r3, [sp, #8]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2300      	movs	r3, #0
 8004f48:	4a71      	ldr	r2, [pc, #452]	; (8005110 <_nx_dhcp_create+0x234>)
 8004f4a:	68b8      	ldr	r0, [r7, #8]
 8004f4c:	f00b f800 	bl	800ff50 <_nx_udp_socket_create>
 8004f50:	6178      	str	r0, [r7, #20]
                                  NX_DHCP_TYPE_OF_SERVICE, NX_DHCP_FRAGMENT_OPTION, NX_DHCP_TIME_TO_LIVE, NX_DHCP_QUEUE_DEPTH);

    /* Was the socket creation successful?  */
    if (status != NX_SUCCESS)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <_nx_dhcp_create+0x8c>
    {

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f006 fef2 	bl	800bd48 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	e0cf      	b.n	8005108 <_nx_dhcp_create+0x22c>
    }


    /* Set the UDP socket receive callback function.  */
    status = nx_udp_socket_receive_notify(&(dhcp_ptr -> nx_dhcp_socket), _nx_dhcp_udp_receive_notify);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8004f6e:	4969      	ldr	r1, [pc, #420]	; (8005114 <_nx_dhcp_create+0x238>)
 8004f70:	4618      	mov	r0, r3
 8004f72:	f00b fa4b 	bl	801040c <_nx_udp_socket_receive_notify>
 8004f76:	6178      	str	r0, [r7, #20]

    /* Check status.  */
    if (status != NX_SUCCESS) 
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <_nx_dhcp_create+0xba>
    {


#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8004f84:	4618      	mov	r0, r3
 8004f86:	f006 fedf 	bl	800bd48 <_nx_packet_pool_delete>
#endif

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8004f90:	4618      	mov	r0, r3
 8004f92:	f00b f86d 	bl	8010070 <_nx_udp_socket_delete>
    }

    /* Create the ThreadX activity timeout timer.  This will be used to periodically check to see if
       a client connection has gone silent and needs to be terminated.  */
    status =  tx_timer_create(&(dhcp_ptr -> nx_dhcp_timer), "DHCP Client Timer", _nx_dhcp_timeout_entry,
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f641 505c 	movw	r0, #7516	; 0x1d5c
 8004f9c:	4418      	add	r0, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	222c      	movs	r2, #44	; 0x2c
 8004fa2:	9203      	str	r2, [sp, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	9202      	str	r2, [sp, #8]
 8004fa8:	2264      	movs	r2, #100	; 0x64
 8004faa:	9201      	str	r2, [sp, #4]
 8004fac:	2264      	movs	r2, #100	; 0x64
 8004fae:	9200      	str	r2, [sp, #0]
 8004fb0:	4a59      	ldr	r2, [pc, #356]	; (8005118 <_nx_dhcp_create+0x23c>)
 8004fb2:	495a      	ldr	r1, [pc, #360]	; (800511c <_nx_dhcp_create+0x240>)
 8004fb4:	f010 f810 	bl	8014fd8 <_txe_timer_create>
 8004fb8:	6178      	str	r0, [r7, #20]
                              (NX_DHCP_TIME_INTERVAL), TX_NO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_timer), dhcp_ptr)

    /* Determine if the semaphore creation was successful.  */
    if (status != NX_SUCCESS)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <_nx_dhcp_create+0x100>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f00b f852 	bl	8010070 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f006 feb8 	bl	800bd48 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	e095      	b.n	8005108 <_nx_dhcp_create+0x22c>
    }

    /* Create the DHCP mutex.  */
    status =  tx_mutex_create(&(dhcp_ptr -> nx_dhcp_mutex), "NetX DHCP Client", TX_NO_INHERIT);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f641 5004 	movw	r0, #7428	; 0x1d04
 8004fe2:	4418      	add	r0, r3
 8004fe4:	2334      	movs	r3, #52	; 0x34
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	4949      	ldr	r1, [pc, #292]	; (8005110 <_nx_dhcp_create+0x234>)
 8004fea:	f00f fc19 	bl	8014820 <_txe_mutex_create>
 8004fee:	6178      	str	r0, [r7, #20]

    /* Determine if the semaphore creation was successful.  */
    if (status != NX_SUCCESS)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d014      	beq.n	8005020 <_nx_dhcp_create+0x144>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f00b f837 	bl	8010070 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8005008:	4618      	mov	r0, r3
 800500a:	f006 fe9d 	bl	800bd48 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005014:	4413      	add	r3, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f010 f88a 	bl	8015130 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	e073      	b.n	8005108 <_nx_dhcp_create+0x22c>
    }

    /* Create the DHCP processing thread.  */
    status =  tx_thread_create(&(dhcp_ptr -> nx_dhcp_thread), "NetX DHCP Client", _nx_dhcp_thread_entry, (ULONG)(ALIGN_TYPE)dhcp_ptr,
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f603 4054 	addw	r0, r3, #3156	; 0xc54
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f603 5304 	addw	r3, r3, #3332	; 0xd04
 800502e:	21b0      	movs	r1, #176	; 0xb0
 8005030:	9106      	str	r1, [sp, #24]
 8005032:	2100      	movs	r1, #0
 8005034:	9105      	str	r1, [sp, #20]
 8005036:	2101      	movs	r1, #1
 8005038:	9104      	str	r1, [sp, #16]
 800503a:	2103      	movs	r1, #3
 800503c:	9103      	str	r1, [sp, #12]
 800503e:	2103      	movs	r1, #3
 8005040:	9102      	str	r1, [sp, #8]
 8005042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005046:	9101      	str	r1, [sp, #4]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	4a34      	ldr	r2, [pc, #208]	; (8005120 <_nx_dhcp_create+0x244>)
 800504e:	4930      	ldr	r1, [pc, #192]	; (8005110 <_nx_dhcp_create+0x234>)
 8005050:	f00f fe4c 	bl	8014cec <_txe_thread_create>
 8005054:	6178      	str	r0, [r7, #20]
                                NX_DHCP_THREAD_PRIORITY, NX_DHCP_THREAD_PRIORITY, 1, TX_DONT_START);

    NX_THREAD_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_thread), dhcp_ptr)

    /* Determine if the thread creation was successful.  */
    if (status != NX_SUCCESS)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <_nx_dhcp_create+0x1b8>
    {

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005062:	4413      	add	r3, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f00f fc79 	bl	801495c <_txe_mutex_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005070:	4618      	mov	r0, r3
 8005072:	f00a fffd 	bl	8010070 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 800507c:	4618      	mov	r0, r3
 800507e:	f006 fe63 	bl	800bd48 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005088:	4413      	add	r3, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f010 f850 	bl	8015130 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	e039      	b.n	8005108 <_nx_dhcp_create+0x22c>
    }

    /* Create a DHCP event flag group. .  */
    status = tx_event_flags_create(&(dhcp_ptr -> nx_dhcp_events), (CHAR *)"DHCP Client Events");
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f641 5338 	movw	r3, #7480	; 0x1d38
 800509a:	4413      	add	r3, r2
 800509c:	2224      	movs	r2, #36	; 0x24
 800509e:	4921      	ldr	r1, [pc, #132]	; (8005124 <_nx_dhcp_create+0x248>)
 80050a0:	4618      	mov	r0, r3
 80050a2:	f00f faa7 	bl	80145f4 <_txe_event_flags_create>
 80050a6:	6178      	str	r0, [r7, #20]

    /* Check for error. */
    if (status != TX_SUCCESS)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d021      	beq.n	80050f2 <_nx_dhcp_create+0x216>
    {

        /* Delete the thread.  */
        tx_thread_delete(&(dhcp_ptr -> nx_dhcp_thread));
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 80050b4:	4618      	mov	r0, r3
 80050b6:	f00f ff0b 	bl	8014ed0 <_txe_thread_delete>

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f641 5304 	movw	r3, #7428	; 0x1d04
 80050c0:	4413      	add	r3, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f00f fc4a 	bl	801495c <_txe_mutex_delete>

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80050ce:	4413      	add	r3, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f010 f82d 	bl	8015130 <_txe_timer_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80050dc:	4618      	mov	r0, r3
 80050de:	f00a ffc7 	bl	8010070 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80050e8:	4618      	mov	r0, r3
 80050ea:	f006 fe2d 	bl	800bd48 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	e00a      	b.n	8005108 <_nx_dhcp_create+0x22c>
    }

    /* Update the dhcp structure ID.  */
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a0c      	ldr	r2, [pc, #48]	; (8005128 <_nx_dhcp_create+0x24c>)
 80050f6:	601a      	str	r2, [r3, #0]

    /* Save the DHCP instance.  */
    _nx_dhcp_created_ptr = dhcp_ptr;
 80050f8:	4a0c      	ldr	r2, [pc, #48]	; (800512c <_nx_dhcp_create+0x250>)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6013      	str	r3, [r2, #0]

    /* Default enable DHCP on the primary interface (0).  */
    _nx_dhcp_interface_enable(dhcp_ptr, 0);
 80050fe:	2100      	movs	r1, #0
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fa08 	bl	8005516 <_nx_dhcp_interface_enable>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	08016a18 	.word	0x08016a18
 8005114:	08005655 	.word	0x08005655
 8005118:	0800567d 	.word	0x0800567d
 800511c:	08016a2c 	.word	0x08016a2c
 8005120:	080056a3 	.word	0x080056a3
 8005124:	08016a40 	.word	0x08016a40
 8005128:	44484350 	.word	0x44484350
 800512c:	240020c4 	.word	0x240020c4

08005130 <_nx_dhcp_interface_reinitialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_dhcp_interface_reinitialize(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

UINT                      status;
ULONG                     ip_address;
ULONG                     network_mask;
ULONG                     gateway_address;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]

  
    /* Obtain DHCP Client protection mutex. */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005144:	4413      	add	r3, r2
 8005146:	f04f 31ff 	mov.w	r1, #4294967295
 800514a:	4618      	mov	r0, r3
 800514c:	f00f fc44 	bl	80149d8 <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8005150:	f107 030c 	add.w	r3, r7, #12
 8005154:	461a      	mov	r2, r3
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f001 fe70 	bl	8006e3e <_nx_dhcp_interface_record_find>
 800515e:	61f8      	str	r0, [r7, #28]

    /* Check status.  */
    if (status)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <_nx_dhcp_interface_reinitialize+0x48>
    {

        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	f641 5304 	movw	r3, #7428	; 0x1d04
 800516c:	4413      	add	r3, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f00f fc8c 	bl	8014a8c <_txe_mutex_put>
        return(status);
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	e063      	b.n	8005240 <_nx_dhcp_interface_reinitialize+0x110>
    }

    /* Check if have IP address.  */
    if (interface_record -> nx_dhcp_ip_address)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d018      	beq.n	80051b2 <_nx_dhcp_interface_reinitialize+0x82>
    {

        /* Get the IP address.  */
        status = nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, &ip_address, &network_mask);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6898      	ldr	r0, [r3, #8]
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	f107 0218 	add.w	r2, r7, #24
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	f004 fff5 	bl	800a17c <_nx_ip_interface_address_get>
 8005192:	61f8      	str	r0, [r7, #28]

        /* Check if the IP address is set by DHCP.  */
        if ((status == NX_SUCCESS) && (ip_address == interface_record -> nx_dhcp_ip_address))
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <_nx_dhcp_interface_reinitialize+0x82>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d106      	bne.n	80051b2 <_nx_dhcp_interface_reinitialize+0x82>
        {

            /* Clear the IP address.  */
            nx_ip_interface_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, 0, 0);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6898      	ldr	r0, [r3, #8]
 80051a8:	2300      	movs	r3, #0
 80051aa:	2200      	movs	r2, #0
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	f005 f825 	bl	800a1fc <_nx_ip_interface_address_set>
        }
    }

    /* Check if have gateway address.  */
    if (interface_record -> nx_dhcp_gateway_address)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d015      	beq.n	80051e6 <_nx_dhcp_interface_reinitialize+0xb6>
    {

        /* Get the gateway address.  */
        status = nx_ip_gateway_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, &gateway_address);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f107 0210 	add.w	r2, r7, #16
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f004 fe64 	bl	8009e92 <_nx_ip_gateway_address_get>
 80051ca:	61f8      	str	r0, [r7, #28]

        /* Check status.  */
        if ((status == NX_SUCCESS) && (gateway_address == interface_record -> nx_dhcp_gateway_address))
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <_nx_dhcp_interface_reinitialize+0xb6>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d104      	bne.n	80051e6 <_nx_dhcp_interface_reinitialize+0xb6>
        {

            /* Clear the Gateway/Router IP address.  */
            nx_ip_gateway_address_clear(dhcp_ptr -> nx_dhcp_ip_ptr);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f004 fe2b 	bl	8009e3c <_nx_ip_gateway_address_clear>
        }
    }

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS; 
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	615a      	str	r2, [r3, #20]

    /* Clear these DHCP Client network values too.*/
    interface_record -> nx_dhcp_gateway_address = NX_BOOTP_NO_ADDRESS; 
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	611a      	str	r2, [r3, #16]
    interface_record -> nx_dhcp_network_mask = NX_BOOTP_NO_ADDRESS;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	619a      	str	r2, [r3, #24]

    /* Clear the flag to skip the discovery step. The host application must
       call the nx_dhcp_request_ip_address to reset the flag and the requested IP address. */
    interface_record -> nx_dhcp_skip_discovery = NX_FALSE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	645a      	str	r2, [r3, #68]	; 0x44
                                                             
    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset the seconds field for starting the DHCP request process. */
    interface_record -> nx_dhcp_seconds = 0;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	609a      	str	r2, [r3, #8]

    /* Reset the timeout and retransmission interval.  */
    interface_record -> nx_dhcp_timeout = 0;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DHCP state to the initial state.  */
    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_NOT_STARTED;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	705a      	strb	r2, [r3, #1]

    /* Release the mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005236:	4413      	add	r3, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f00f fc27 	bl	8014a8c <_txe_mutex_put>
    return NX_SUCCESS;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <_nxe_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_start(NX_DHCP *dhcp_ptr)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for invalid input pointer.  */
    if ((dhcp_ptr == NX_NULL) || (dhcp_ptr -> nx_dhcp_id != NX_DHCP_ID))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <_nxe_dhcp_start+0x18>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a11      	ldr	r2, [pc, #68]	; (80052a0 <_nxe_dhcp_start+0x58>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d001      	beq.n	8005264 <_nxe_dhcp_start+0x1c>
        return(NX_PTR_ERROR);
 8005260:	2307      	movs	r3, #7
 8005262:	e018      	b.n	8005296 <_nxe_dhcp_start+0x4e>
#elif defined(__GNUC__) /* GCC and ARM Compiler 6 */

__attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
{
unsigned int  ipsr_value;
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005264:	f3ef 8305 	mrs	r3, IPSR
 8005268:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800526a:	68ba      	ldr	r2, [r7, #8]
    
    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <_nxe_dhcp_start+0x5c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4313      	orrs	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d108      	bne.n	8005288 <_nxe_dhcp_start+0x40>
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <_nxe_dhcp_start+0x60>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <_nxe_dhcp_start+0x40>
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <_nxe_dhcp_start+0x60>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <_nxe_dhcp_start+0x64>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d101      	bne.n	800528c <_nxe_dhcp_start+0x44>
 8005288:	2311      	movs	r3, #17
 800528a:	e004      	b.n	8005296 <_nxe_dhcp_start+0x4e>

    /* Call actual DHCP start service.  */
    status =  _nx_dhcp_start(dhcp_ptr);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f80f 	bl	80052b0 <_nx_dhcp_start>
 8005292:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 8005294:	68fb      	ldr	r3, [r7, #12]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	44484350 	.word	0x44484350
 80052a4:	2400008c 	.word	0x2400008c
 80052a8:	240023d0 	.word	0x240023d0
 80052ac:	24002470 	.word	0x24002470

080052b0 <_nx_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_start(NX_DHCP *dhcp_ptr)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

UINT    status;
UINT    interfaces_started = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
UINT    i;


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	f641 5304 	movw	r3, #7428	; 0x1d04
 80052c2:	4413      	add	r3, r2
 80052c4:	f04f 31ff 	mov.w	r1, #4294967295
 80052c8:	4618      	mov	r0, r3
 80052ca:	f00f fb85 	bl	80149d8 <_txe_mutex_get>

    /* Check all interfaces to find out which need to start the DHCP protocol.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e028      	b.n	8005326 <_nx_dhcp_start+0x76>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	441a      	add	r2, r3
 80052e2:	f641 5388 	movw	r3, #7560	; 0x1d88
 80052e6:	4413      	add	r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d118      	bne.n	8005320 <_nx_dhcp_start+0x70>
        {

            /* Start DHCP on this interface.   */
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	441a      	add	r2, r3
 80052fc:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8005300:	4413      	add	r3, r2
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f828 	bl	800535c <_nx_dhcp_interface_start>
 800530c:	60f8      	str	r0, [r7, #12]
             /* Note, not all interfaces are enabled to run, so
                status may not be successful. Skip to the next
                interface. */

             /* Check status.  */
             if ((status == NX_SUCCESS) || (status == NX_DHCP_ALREADY_STARTED))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <_nx_dhcp_start+0x6a>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b93      	cmp	r3, #147	; 0x93
 8005318:	d102      	bne.n	8005320 <_nx_dhcp_start+0x70>
             {
                 interfaces_started++;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	3301      	adds	r3, #1
 800531e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3301      	adds	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0d3      	beq.n	80052d4 <_nx_dhcp_start+0x24>
             }
        }
    }

    /* Check if any interfaces started DHCP. */
    if (interfaces_started == 0) 
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d108      	bne.n	8005344 <_nx_dhcp_start+0x94>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005338:	4413      	add	r3, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f00f fba6 	bl	8014a8c <_txe_mutex_put>

        /* Unable to start any interfaces. */
        return NX_DHCP_NO_INTERFACES_STARTED;
 8005340:	23a6      	movs	r3, #166	; 0xa6
 8005342:	e007      	b.n	8005354 <_nx_dhcp_start+0xa4>
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	f641 5304 	movw	r3, #7428	; 0x1d04
 800534a:	4413      	add	r3, r2
 800534c:	4618      	mov	r0, r3
 800534e:	f00f fb9d 	bl	8014a8c <_txe_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);  
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <_nx_dhcp_interface_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_start(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]

UINT    i;
UINT    status;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]

    
    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005370:	4413      	add	r3, r2
 8005372:	f04f 31ff 	mov.w	r1, #4294967295
 8005376:	4618      	mov	r0, r3
 8005378:	f00f fb2e 	bl	80149d8 <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 800537c:	f107 030c 	add.w	r3, r7, #12
 8005380:	461a      	mov	r2, r3
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fd5a 	bl	8006e3e <_nx_dhcp_interface_record_find>
 800538a:	6138      	str	r0, [r7, #16]

    /* Check status.  */
    if (status)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <_nx_dhcp_interface_start+0x48>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005398:	4413      	add	r3, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f00f fb76 	bl	8014a8c <_txe_mutex_put>

        return(status);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	e0b4      	b.n	800550e <_nx_dhcp_interface_start+0x1b2>
    }

    /* Check if DHCP is already started.  */
    if (interface_record -> nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <_nx_dhcp_interface_start+0x62>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	f641 5304 	movw	r3, #7428	; 0x1d04
 80053b2:	4413      	add	r3, r2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f00f fb69 	bl	8014a8c <_txe_mutex_put>
        return(NX_DHCP_ALREADY_STARTED); 
 80053ba:	2393      	movs	r3, #147	; 0x93
 80053bc:	e0a7      	b.n	800550e <_nx_dhcp_interface_start+0x1b2>
    }
                                   
    /* Check if other interface are working.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e01c      	b.n	80053fe <_nx_dhcp_interface_start+0xa2>
    {

        /* Check which interface record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	441a      	add	r2, r3
 80053d2:	f641 5388 	movw	r3, #7560	; 0x1d88
 80053d6:	4413      	add	r3, r2
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <_nx_dhcp_interface_start+0x9c>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	441a      	add	r2, r3
 80053ec:	f641 5389 	movw	r3, #7561	; 0x1d89
 80053f0:	4413      	add	r3, r2
 80053f2:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <_nx_dhcp_interface_start+0xaa>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	3301      	adds	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0df      	beq.n	80053c4 <_nx_dhcp_interface_start+0x68>
 8005404:	e000      	b.n	8005408 <_nx_dhcp_interface_start+0xac>
        {

            /* Yes, other interface have started DHCP.  */
            break;
 8005406:	bf00      	nop
        }
    }

    /* Check if any interfaces have started DHCP.  */
    if (i == NX_DHCP_CLIENT_MAX_RECORDS) 
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d14b      	bne.n	80054a6 <_nx_dhcp_interface_start+0x14a>
    {

        /* Bind the UDP socket to the DHCP Client port.  */
        status =  nx_udp_socket_bind(&(dhcp_ptr -> nx_dhcp_socket), NX_DHCP_CLIENT_UDP_PORT, NX_WAIT_FOREVER);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	2144      	movs	r1, #68	; 0x44
 800541a:	4618      	mov	r0, r3
 800541c:	f00a fc6e 	bl	800fcfc <_nx_udp_socket_bind>
 8005420:	6138      	str	r0, [r7, #16]

        /* Check for error */
        if (status != NX_SUCCESS)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <_nx_dhcp_interface_start+0xde>
        {

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	f641 5304 	movw	r3, #7428	; 0x1d04
 800542e:	4413      	add	r3, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f00f fb2b 	bl	8014a8c <_txe_mutex_put>
            return(status);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	e069      	b.n	800550e <_nx_dhcp_interface_start+0x1b2>
        }

        /* Resume the DHCP processing thread.  */
        status = tx_thread_resume(&(dhcp_ptr -> nx_dhcp_thread));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8005440:	4618      	mov	r0, r3
 8005442:	f00f fd8d 	bl	8014f60 <_txe_thread_resume>
 8005446:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if ((status != TX_SUCCESS) && (status != TX_SUSPEND_LIFTED))
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d011      	beq.n	8005472 <_nx_dhcp_interface_start+0x116>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b19      	cmp	r3, #25
 8005452:	d00e      	beq.n	8005472 <_nx_dhcp_interface_start+0x116>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800545a:	4618      	mov	r0, r3
 800545c:	f00b f82e 	bl	80104bc <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005466:	4413      	add	r3, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f00f fb0f 	bl	8014a8c <_txe_mutex_put>
            return(status);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	e04d      	b.n	800550e <_nx_dhcp_interface_start+0x1b2>
        }

        /* Activate DHCP Timer.  */
        status = tx_timer_activate(&(dhcp_ptr -> nx_dhcp_timer));
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005478:	4413      	add	r3, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f00f fd8e 	bl	8014f9c <_txe_timer_activate>
 8005480:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if (status != NX_SUCCESS)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00e      	beq.n	80054a6 <_nx_dhcp_interface_start+0x14a>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800548e:	4618      	mov	r0, r3
 8005490:	f00b f814 	bl	80104bc <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	f641 5304 	movw	r3, #7428	; 0x1d04
 800549a:	4413      	add	r3, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f00f faf5 	bl	8014a8c <_txe_mutex_put>
            return(status);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	e033      	b.n	800550e <_nx_dhcp_interface_start+0x1b2>
        }
    }

    /* Start DHCP service for this interface record.  */
    /* Start the DHCP protocol again by setting the state back to INIT. */
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2202      	movs	r2, #2
 80054aa:	705a      	strb	r2, [r3, #1]
    /* The client begins in INIT state and forms a DHCPDISCOVER message.
       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
       RFC2131, Section4.4.1, Page36.  */

    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2264      	movs	r2, #100	; 0x64
 80054b0:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the application has specified a routine for DHCP state change notification.  */
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	f641 7338 	movw	r3, #7992	; 0x1f38
 80054be:	4413      	add	r3, r2
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <_nx_dhcp_interface_start+0x17e>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	f641 7338 	movw	r3, #7992	; 0x1f38
 80054cc:	4413      	add	r3, r2
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	7852      	ldrb	r2, [r2, #1]
 80054d4:	4611      	mov	r1, r2
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
    }

    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	f641 733c 	movw	r3, #7996	; 0x1f3c
 80054e0:	4413      	add	r3, r2
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <_nx_dhcp_interface_start+0x1a2>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	f641 733c 	movw	r3, #7996	; 0x1f3c
 80054ee:	4413      	add	r3, r2
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	69d1      	ldr	r1, [r2, #28]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	7852      	ldrb	r2, [r2, #1]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005504:	4413      	add	r3, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f00f fac0 	bl	8014a8c <_txe_mutex_put>

    return NX_SUCCESS;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <_nx_dhcp_interface_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_enable(NX_DHCP *dhcp_ptr, UINT iface_index)   
{
 8005516:	b590      	push	{r4, r7, lr}
 8005518:	b087      	sub	sp, #28
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
UINT                      i;
ULONG                     client_physical_lsw, client_physical_msw;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	f641 5304 	movw	r3, #7428	; 0x1d04
 800552a:	4413      	add	r3, r2
 800552c:	f04f 31ff 	mov.w	r1, #4294967295
 8005530:	4618      	mov	r0, r3
 8005532:	f00f fa51 	bl	80149d8 <_txe_mutex_get>

    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e034      	b.n	80055a6 <_nx_dhcp_interface_enable+0x90>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	441a      	add	r2, r3
 800554a:	f641 5388 	movw	r3, #7560	; 0x1d88
 800554e:	4413      	add	r3, r2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d116      	bne.n	8005584 <_nx_dhcp_interface_enable+0x6e>
        {

            /* Check if the interface is already enabled. */
            if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	441a      	add	r2, r3
 8005564:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8005568:	4413      	add	r3, r2
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d116      	bne.n	80055a0 <_nx_dhcp_interface_enable+0x8a>
            {

                /* Release the DHCP mutex.  */
                 tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005578:	4413      	add	r3, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f00f fa86 	bl	8014a8c <_txe_mutex_put>
                 return(NX_DHCP_INTERFACE_ALREADY_ENABLED);
 8005580:	23a3      	movs	r3, #163	; 0xa3
 8005582:	e063      	b.n	800564c <_nx_dhcp_interface_enable+0x136>
        }
        else
        {

            /* Yes, we found an available record.  */
            if (interface_record == NX_NULL)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <_nx_dhcp_interface_enable+0x8a>
                interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8005590:	fb02 f203 	mul.w	r2, r2, r3
 8005594:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005598:	4413      	add	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	3301      	adds	r3, #1
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0c7      	beq.n	800553c <_nx_dhcp_interface_enable+0x26>
        }
    }

    /* Check if we found an valid DHCP interface record.  */
    if (interface_record == NX_NULL)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <_nx_dhcp_interface_enable+0xae>
    {

        /* No, release the mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	f641 5304 	movw	r3, #7428	; 0x1d04
 80055b8:	4413      	add	r3, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f00f fa66 	bl	8014a8c <_txe_mutex_put>
        return(NX_DHCP_NO_RECORDS_AVAILABLE);
 80055c0:	23a7      	movs	r3, #167	; 0xa7
 80055c2:	e043      	b.n	800564c <_nx_dhcp_interface_enable+0x136>
    }

    /* Set this record as valid.  */
    interface_record -> nx_dhcp_record_valid = NX_TRUE;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]

    /* Set interface index. */  
    interface_record -> nx_dhcp_interface_index = iface_index;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	61da      	str	r2, [r3, #28]

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2200      	movs	r2, #0
 80055d4:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2200      	movs	r2, #0
 80055da:	615a      	str	r2, [r3, #20]

    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2200      	movs	r2, #0
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Get the client MAC address from the device interface. */
    client_physical_msw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6899      	ldr	r1, [r3, #8]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	440b      	add	r3, r1
 8005600:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]
    client_physical_lsw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6899      	ldr	r1, [r3, #8]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	440b      	add	r3, r1
 8005618:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60bb      	str	r3, [r7, #8]

    /* Generate a 'unique' client transaction ID from the MAC address for each message to the server. */
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	ea82 0403 	eor.w	r4, r2, r3
 8005628:	f010 f886 	bl	8015738 <rand>
 800562c:	4603      	mov	r3, r0
 800562e:	ea84 0203 	eor.w	r2, r4, r3
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	605a      	str	r2, [r3, #4]

    /* Clear the timeout.  */
    interface_record -> nx_dhcp_timeout = 0;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2200      	movs	r2, #0
 800563a:	621a      	str	r2, [r3, #32]

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005642:	4413      	add	r3, r2
 8005644:	4618      	mov	r0, r3
 8005646:	f00f fa21 	bl	8014a8c <_txe_mutex_put>
    return(NX_SUCCESS); 
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	bd90      	pop	{r4, r7, pc}

08005654 <_nx_dhcp_udp_receive_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_udp_receive_notify(NX_UDP_SOCKET *socket_ptr)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

    NX_PARAMETER_NOT_USED(socket_ptr);

    /* Set the data received event flag.  */
    tx_event_flags_set(&(_nx_dhcp_created_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_RECEIVE_EVENT, TX_OR);
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <_nx_dhcp_udp_receive_notify+0x24>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	f641 5338 	movw	r3, #7480	; 0x1d38
 8005664:	4413      	add	r3, r2
 8005666:	2200      	movs	r2, #0
 8005668:	2101      	movs	r1, #1
 800566a:	4618      	mov	r0, r3
 800566c:	f00f f8aa 	bl	80147c4 <_txe_event_flags_set>
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	240020c4 	.word	0x240020c4

0800567c <_nx_dhcp_timeout_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_entry(ULONG dhcp)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

NX_DHCP     *dhcp_ptr;


    /* Setup DHCP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60fb      	str	r3, [r7, #12]

    /* Set the data event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_TIMER_EVENT, TX_OR);
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	f641 5338 	movw	r3, #7480	; 0x1d38
 800568e:	4413      	add	r3, r2
 8005690:	2200      	movs	r2, #0
 8005692:	2102      	movs	r1, #2
 8005694:	4618      	mov	r0, r3
 8005696:	f00f f895 	bl	80147c4 <_txe_event_flags_set>
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <_nx_dhcp_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_thread_entry(ULONG dhcp_instance)
{
 80056a2:	b590      	push	{r4, r7, lr}
 80056a4:	b08f      	sub	sp, #60	; 0x3c
 80056a6:	af02      	add	r7, sp, #8
 80056a8:	6078      	str	r0, [r7, #4]
UINT                      status;
UINT                      iface_index;
UINT                      source_port;
ULONG                     source_ip_address;
UINT                      protocol;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]

    /* Setup the DHCP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp_instance)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Obtain the DHCP mutex before processing an.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80056b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b4:	f641 5304 	movw	r3, #7428	; 0x1d04
 80056b8:	4413      	add	r3, r2
 80056ba:	f04f 31ff 	mov.w	r1, #4294967295
 80056be:	4618      	mov	r0, r3
 80056c0:	f00f f98a 	bl	80149d8 <_txe_mutex_get>
    /* Enter the DHCP Client task loop.  */
    do
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80056c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c6:	f641 5304 	movw	r3, #7428	; 0x1d04
 80056ca:	4413      	add	r3, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f00f f9dd 	bl	8014a8c <_txe_mutex_put>

        /* Wait for a DHCP client activity.  */
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	f641 5038 	movw	r0, #7480	; 0x1d38
 80056d8:	4418      	add	r0, r3
 80056da:	f107 0320 	add.w	r3, r7, #32
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	9200      	str	r2, [sp, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f04f 31ff 	mov.w	r1, #4294967295
 80056ea:	f00f f815 	bl	8014718 <_txe_event_flags_get>
                           TX_OR_CLEAR, &events, TX_WAIT_FOREVER);

        /* Obtain the DHCP mutex before processing an.  */
        tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80056ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f0:	f641 5304 	movw	r3, #7428	; 0x1d04
 80056f4:	4413      	add	r3, r2
 80056f6:	f04f 31ff 	mov.w	r1, #4294967295
 80056fa:	4618      	mov	r0, r3
 80056fc:	f00f f96c 	bl	80149d8 <_txe_mutex_get>

        /* Check for DHCP data received event.  */
        if  (events & NX_DHCP_CLIENT_RECEIVE_EVENT)
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d03a      	beq.n	8005780 <_nx_dhcp_thread_entry+0xde>
            /* Loop to receive DHCP message.  */
            while(1)
            {

                /* Check for an incoming DHCP packet with non blocking option. */
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005710:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005714:	2200      	movs	r2, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f00a fd0a 	bl	8010130 <_nx_udp_socket_receive>
 800571c:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check for packet receive errors. */
                if (status != NX_SUCCESS)
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d12c      	bne.n	800577e <_nx_dhcp_thread_entry+0xdc>
                {
                    break;
                }

                /* Find the source IP address, port, interface this packet is on. */
                status = nx_udp_packet_info_extract(packet_ptr, &source_ip_address, &protocol, &source_port, &iface_index);
 8005724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005726:	f107 0418 	add.w	r4, r7, #24
 800572a:	f107 0210 	add.w	r2, r7, #16
 800572e:	f107 0114 	add.w	r1, r7, #20
 8005732:	f107 031c 	add.w	r3, r7, #28
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	4623      	mov	r3, r4
 800573a:	f00a f860 	bl	800f7fe <_nx_udp_packet_info_extract>
 800573e:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS) 
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <_nx_dhcp_thread_entry+0xae>
                {

                    nx_packet_release(packet_ptr); 
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	4618      	mov	r0, r3
 800574a:	f006 fb87 	bl	800be5c <_nx_packet_release>
                    continue;
 800574e:	e015      	b.n	800577c <_nx_dhcp_thread_entry+0xda>
                }

                /* Find the interface record.  */
                status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f107 020c 	add.w	r2, r7, #12
 8005756:	4619      	mov	r1, r3
 8005758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800575a:	f001 fb70 	bl	8006e3e <_nx_dhcp_interface_record_find>
 800575e:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS)
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <_nx_dhcp_thread_entry+0xce>
                {

                    /* Release the original packet . */
                    nx_packet_release(packet_ptr);
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	4618      	mov	r0, r3
 800576a:	f006 fb77 	bl	800be5c <_nx_packet_release>
                    continue;
 800576e:	e005      	b.n	800577c <_nx_dhcp_thread_entry+0xda>
                }
                
                /* Process DHCP packet.  */
                _nx_dhcp_packet_process(dhcp_ptr, interface_record, packet_ptr);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005774:	4619      	mov	r1, r3
 8005776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005778:	f000 f80c 	bl	8005794 <_nx_dhcp_packet_process>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 800577c:	e7c5      	b.n	800570a <_nx_dhcp_thread_entry+0x68>
                    break;
 800577e:	bf00      	nop
            }
        }

        /* Timer event.  */
        if (events & NX_DHCP_CLIENT_TIMER_EVENT)
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d09c      	beq.n	80056c4 <_nx_dhcp_thread_entry+0x22>
        {
            _nx_dhcp_timeout_process(dhcp_ptr);
 800578a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800578c:	f000 fa66 	bl	8005c5c <_nx_dhcp_timeout_process>
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005790:	e798      	b.n	80056c4 <_nx_dhcp_thread_entry+0x22>
	...

08005794 <_nx_dhcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_dhcp_packet_process(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, NX_PACKET *packet_ptr)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b094      	sub	sp, #80	; 0x50
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
#ifdef NX_DHCP_CLIENT_SEND_ARP_PROBE
ULONG       probing_delay;
#endif

    /* Set the IP pointer and interface index.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	647b      	str	r3, [r7, #68]	; 0x44
    iface_index = interface_record -> nx_dhcp_interface_index;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	643b      	str	r3, [r7, #64]	; 0x40

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length <= NX_BOOTP_OFFSET_OPTIONS)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2bf0      	cmp	r3, #240	; 0xf0
 80057b2:	d803      	bhi.n	80057bc <_nx_dhcp_packet_process+0x28>
    {

        /* Release the packet. */
        nx_packet_release(packet_ptr);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f006 fb51 	bl	800be5c <_nx_packet_release>

        /* Return.  */
        return;
 80057ba:	e24c      	b.n	8005c56 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Copy the received packet (datagram) over to a packet from the DHCP Client pool and release
       the packet back to receive packet pool as soon as possible. */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 80057c2:	f107 0118 	add.w	r1, r7, #24
 80057c6:	2300      	movs	r3, #0
 80057c8:	222c      	movs	r2, #44	; 0x2c
 80057ca:	f005 feef 	bl	800b5ac <_nx_packet_allocate>
 80057ce:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if (status != NX_SUCCESS)
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <_nx_dhcp_packet_process+0x4a>
    {

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f006 fb40 	bl	800be5c <_nx_packet_release>

        /* Error allocating packet, return error status.  */
        return;
 80057dc:	e23b      	b.n	8005c56 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Verify the incoming packet does not exceed our DHCP Client packet payload. */
    if ((ULONG)(new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_prepend_ptr) < ((packet_ptr) -> nx_packet_length))
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	695a      	ldr	r2, [r3, #20]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d207      	bcs.n	8005802 <_nx_dhcp_packet_process+0x6e>
    {

        /* Release the newly allocated packet . */
        nx_packet_release(new_packet_ptr);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f006 fb31 	bl	800be5c <_nx_packet_release>
        
        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f006 fb2e 	bl	800be5c <_nx_packet_release>

        return;
 8005800:	e229      	b.n	8005c56 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Initialize the offset to the beginning of the packet buffer. */
    offset = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
    status = nx_packet_data_extract_offset(packet_ptr, offset, (VOID *)new_packet_ptr -> nx_packet_prepend_ptr, (packet_ptr) -> nx_packet_length, &bytes_copied);
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800580e:	f107 0310 	add.w	r3, r7, #16
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f006 f8e2 	bl	800b9e2 <_nx_packet_data_extract_offset>
 800581e:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if ((status != NX_SUCCESS) || (bytes_copied == 0))
 8005820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <_nx_dhcp_packet_process+0x98>
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <_nx_dhcp_packet_process+0xa8>
    {

        /* Release the allocated packet we'll never send. */
        nx_packet_release(new_packet_ptr);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	4618      	mov	r0, r3
 8005830:	f006 fb14 	bl	800be5c <_nx_packet_release>

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f006 fb11 	bl	800be5c <_nx_packet_release>

        /* Error extracting packet buffer, return error status.  */
        return;
 800583a:	e20c      	b.n	8005c56 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Update the new packet with the bytes copied.  For chained packets, this will reflect the total
       'datagram' length. */
    new_packet_ptr -> nx_packet_length = bytes_copied; 
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	625a      	str	r2, [r3, #36]	; 0x24


    /* Now we can release the original packet. */
    nx_packet_release(packet_ptr);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f006 fb0a 	bl	800be5c <_nx_packet_release>

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8005848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800584a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	440b      	add	r3, r1
 8005856:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
    dhcp_client_mac_lsw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 800585e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	440b      	add	r3, r1
 800586c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	633b      	str	r3, [r7, #48]	; 0x30

    /* Set work_ptr.  */
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	331c      	adds	r3, #28
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the target MAC address in the DHCP message.  */
    packet_client_mac_msw = (((ULONG)work_ptr[0]) << 8) | ((ULONG)work_ptr[1]);
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005884:	3201      	adds	r2, #1
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	4313      	orrs	r3, r2
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	3302      	adds	r3, #2
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	061a      	lsls	r2, r3, #24
                            (((ULONG)work_ptr[3]) << 16) |
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	3303      	adds	r3, #3
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	041b      	lsls	r3, r3, #16
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 800589c:	431a      	orrs	r2, r3
                            (((ULONG)work_ptr[4]) << 8) |
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	3304      	adds	r3, #4
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
                            (((ULONG)work_ptr[3]) << 16) |
 80058a6:	4313      	orrs	r3, r2
                            ((ULONG)work_ptr[5]);
 80058a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058aa:	3205      	adds	r2, #5
 80058ac:	7812      	ldrb	r2, [r2, #0]
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 80058ae:	4313      	orrs	r3, r2
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Determine if the  MAC address matches ours.  */
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 80058b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d103      	bne.n	80058c2 <_nx_dhcp_packet_process+0x12e>
 80058ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	429a      	cmp	r2, r3
 80058c0:	d004      	beq.n	80058cc <_nx_dhcp_packet_process+0x138>
    {

        /* Release the allocated packet. */
        nx_packet_release(new_packet_ptr);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f006 fac9 	bl	800be5c <_nx_packet_release>
        return;
 80058ca:	e1c4      	b.n	8005c56 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Check if XIDs match.  */
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	3304      	adds	r3, #4
 80058d2:	2104      	movs	r1, #4
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 fa43 	bl	8006d60 <_nx_dhcp_get_data>
 80058da:	4602      	mov	r2, r0
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d004      	beq.n	80058ee <_nx_dhcp_packet_process+0x15a>
    {

        /* Release the original packet . */
        nx_packet_release(new_packet_ptr);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f006 fab8 	bl	800be5c <_nx_packet_release>

        /* Error with XID data, return error status.  */
        return;
 80058ec:	e1b3      	b.n	8005c56 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Save the original state for the state change callback; after this point we will likely change it. */                          
    original_state  = interface_record -> nx_dhcp_state;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	623b      	str	r3, [r7, #32]

    /* The action depends on the current state of the dhcp client. */
    switch (interface_record -> nx_dhcp_state)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	3b03      	subs	r3, #3
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	f200 816c 	bhi.w	8005bd8 <_nx_dhcp_packet_process+0x444>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <_nx_dhcp_packet_process+0x174>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	0800591d 	.word	0x0800591d
 800590c:	080059a9 	.word	0x080059a9
 8005910:	08005bd9 	.word	0x08005bd9
 8005914:	08005a71 	.word	0x08005a71
 8005918:	08005b27 	.word	0x08005b27

        case NX_DHCP_STATE_SELECTING:
        {
    
            /* Set up a buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	61fb      	str	r3, [r7, #28]

            /* Get what type of DHCP message it is. */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr -> nx_packet_length);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	f107 0214 	add.w	r2, r7, #20
 800592a:	2135      	movs	r1, #53	; 0x35
 800592c:	69f8      	ldr	r0, [r7, #28]
 800592e:	f001 f8c2 	bl	8006ab6 <_nx_dhcp_get_option_value>
 8005932:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Determine if it is an Offer.  */        
            if ((status == NX_SUCCESS) && (dhcp_type == NX_DHCP_TYPE_DHCPOFFER))
 8005934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 8150 	bne.w	8005bdc <_nx_dhcp_packet_process+0x448>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b02      	cmp	r3, #2
 8005940:	f040 814c 	bne.w	8005bdc <_nx_dhcp_packet_process+0x448>
            {

                /* Yes, a valid Offer is received!  */

                /* Increment the number of offers received.  */
                interface_record -> nx_dhcp_offers_received++;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

                /* Update the DHCP Client interface parameters (IP address, server IP, lease, renewal and rebind times */
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 ff8b 	bl	8006876 <_nx_dhcp_extract_information>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 813c 	bne.w	8005be0 <_nx_dhcp_packet_process+0x44c>
                    break;

                /* Send the DHCP Request to accept the offer.  */
                _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005968:	2203      	movs	r2, #3
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fb29 	bl	8005fc4 <_nx_dhcp_send_request_internal>

                /* Reset the initial timeout to NX_DHCP_MIN_RETRANS_TIMEOUT seconds  */
                interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005978:	625a      	str	r2, [r3, #36]	; 0x24
                interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	621a      	str	r2, [r3, #32]

                /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	4618      	mov	r0, r3
 8005988:	f001 f93e 	bl	8006c08 <_nx_dhcp_add_randomize>
 800598c:	4602      	mov	r2, r0
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	621a      	str	r2, [r3, #32]

                /* Check if the timeout is zero.  */
                if (interface_record -> nx_dhcp_timeout == 0)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <_nx_dhcp_packet_process+0x20c>
                    interface_record -> nx_dhcp_timeout = 1;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2201      	movs	r2, #1
 800599e:	621a      	str	r2, [r3, #32]

                /* Update the state to Requesting state.  */
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2204      	movs	r2, #4
 80059a4:	705a      	strb	r2, [r3, #1]
           }

           /* Let the timeout processing handle retransmissions. We're done here */
           break;
 80059a6:	e119      	b.n	8005bdc <_nx_dhcp_packet_process+0x448>
            /* Also initialize status to success since we won't make the get option call. */               
            status = NX_SUCCESS;
#endif

            /* Setup buffer pointer.  */
            buffer = new_packet_ptr -> nx_packet_prepend_ptr;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	61fb      	str	r3, [r7, #28]

#ifndef NX_DHCP_ENABLE_BOOTP
            /* There is a valid DHCP response, see if it is an ACK.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	f107 0214 	add.w	r2, r7, #20
 80059b6:	2135      	movs	r1, #53	; 0x35
 80059b8:	69f8      	ldr	r0, [r7, #28]
 80059ba:	f001 f87c 	bl	8006ab6 <_nx_dhcp_get_option_value>
 80059be:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
            /* Proceed to processing the server response?   */
            if (status == NX_SUCCESS)
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 810e 	bne.w	8005be4 <_nx_dhcp_packet_process+0x450>
            {

                /* Yes, check and see if it is an ACK back to our previous request.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d12d      	bne.n	8005a2a <_nx_dhcp_packet_process+0x296>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Either we got an ACK or we are using BOOTP.  */

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 ff46 	bl	8006876 <_nx_dhcp_extract_information>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 80fb 	bne.w	8005be8 <_nx_dhcp_packet_process+0x454>
                    /* Setup the handler to indicate the we want collision notification.  */
                    ip_ptr -> nx_ip_interface[iface_index].nx_interface_ip_conflict_notify_handler = _nx_dhcp_ip_conflict;

#else    /* NX_DHCP_CLIENT_SEND_ARP_PROBE not defined: */

                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80059fe:	f004 fbfd 	bl	800a1fc <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <_nx_dhcp_packet_process+0x286>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f004 fa60 	bl	8009eda <_nx_ip_gateway_address_set>
                    }

                    /* No ARP probe performed. OK to change to the Bound state.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2205      	movs	r2, #5
 8005a1e:	705a      	strb	r2, [r3, #1]
#ifdef NX_DHCP_ENABLE_BOOTP
                    /* BOOTP does not use timeouts.  For the life of this DHCP Client application, keep the same IP address. */
                    interface_record -> nx_dhcp_timeout = NX_WAIT_FOREVER; 
#else
                    /* Set the renewal time received from the server.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	621a      	str	r2, [r3, #32]
#endif /* NX_DHCP_ENABLE_BOOTP  */

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE*/

                    break;
 8005a28:	e0e7      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
                }
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b06      	cmp	r3, #6
 8005a2e:	f040 80d9 	bne.w	8005be4 <_nx_dhcp_packet_process+0x450>
                {
                                                 
                    /* Increment the number of NACKs received.  */
                    interface_record -> nx_dhcp_nacks_received++;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

                    /* Reinitialize DHCP.  */
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4619      	mov	r1, r3
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff fb72 	bl	8005130 <_nx_dhcp_interface_reinitialize>

                    /* Restart DHCP service for this interface record.  */

                    /* Start the DHCP protocol again by setting the state back to INIT. */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	705a      	strb	r2, [r3, #1]
                    /* The client begins in INIT state and forms a DHCPDISCOVER message.
                       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                       RFC2131, Section4.4.1, Page36.  */

                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2264      	movs	r2, #100	; 0x64
 8005a56:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Check if the timeout is less than 1 second.  */
                    if (interface_record -> nx_dhcp_timeout < NX_IP_PERIODIC_RATE)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	2b63      	cmp	r3, #99	; 0x63
 8005a64:	f200 80be 	bhi.w	8005be4 <_nx_dhcp_packet_process+0x450>
                        interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2264      	movs	r2, #100	; 0x64
 8005a6c:	621a      	str	r2, [r3, #32]
                }
            }
            break;
 8005a6e:	e0b9      	b.n	8005be4 <_nx_dhcp_packet_process+0x450>

        case NX_DHCP_STATE_RENEWING:
        {

            /* Setup the buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	61fb      	str	r3, [r7, #28]

            /* Check the server response if it accepts are renewal.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	f107 0214 	add.w	r2, r7, #20
 8005a7e:	2135      	movs	r1, #53	; 0x35
 8005a80:	69f8      	ldr	r0, [r7, #28]
 8005a82:	f001 f818 	bl	8006ab6 <_nx_dhcp_get_option_value>
 8005a86:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Was the option retrieved?  */
            if (status == NX_SUCCESS)
 8005a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f040 80ae 	bne.w	8005bec <_nx_dhcp_packet_process+0x458>
            {

                /* Yes, Check for an ACK.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	d12d      	bne.n	8005af2 <_nx_dhcp_packet_process+0x35e>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fee2 	bl	8006876 <_nx_dhcp_extract_information>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 809b 	bne.w	8005bf0 <_nx_dhcp_packet_process+0x45c>
                        break;
                    
                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005ac6:	f004 fb99 	bl	800a1fc <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <_nx_dhcp_packet_process+0x34e>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f004 f9fc 	bl	8009eda <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state*/
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	621a      	str	r2, [r3, #32]

                    /* Change the state back to bound.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2205      	movs	r2, #5
 8005aee:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 8005af0:	e07c      	b.n	8005bec <_nx_dhcp_packet_process+0x458>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d179      	bne.n	8005bec <_nx_dhcp_packet_process+0x458>
                    interface_record -> nx_dhcp_nacks_received++;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff fb0f 	bl	8005130 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2202      	movs	r2, #2
 8005b16:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2264      	movs	r2, #100	; 0x64
 8005b1c:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2200      	movs	r2, #0
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8005b24:	e062      	b.n	8005bec <_nx_dhcp_packet_process+0x458>

        case NX_DHCP_STATE_REBINDING:
        {

            /* Setup buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	61fb      	str	r3, [r7, #28]

            /* There is a valid DHCP response, pickup the type of response.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	f107 0214 	add.w	r2, r7, #20
 8005b34:	2135      	movs	r1, #53	; 0x35
 8005b36:	69f8      	ldr	r0, [r7, #28]
 8005b38:	f000 ffbd 	bl	8006ab6 <_nx_dhcp_get_option_value>
 8005b3c:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Valid response?  */
            if (status == NX_SUCCESS)
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d157      	bne.n	8005bf4 <_nx_dhcp_packet_process+0x460>
            {

                /* Is it an ACK response?  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b05      	cmp	r3, #5
 8005b48:	d12c      	bne.n	8005ba4 <_nx_dhcp_packet_process+0x410>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fe88 	bl	8006876 <_nx_dhcp_extract_information>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d145      	bne.n	8005bf8 <_nx_dhcp_packet_process+0x464>
                        break;

                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b76:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005b78:	f004 fb40 	bl	800a1fc <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <_nx_dhcp_packet_process+0x400>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f004 f9a3 	bl	8009eda <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	621a      	str	r2, [r3, #32]

                    /* Change to bound state.  */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2205      	movs	r2, #5
 8005ba0:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 8005ba2:	e027      	b.n	8005bf4 <_nx_dhcp_packet_process+0x460>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2b06      	cmp	r3, #6
 8005ba8:	d124      	bne.n	8005bf4 <_nx_dhcp_packet_process+0x460>
                    interface_record -> nx_dhcp_nacks_received++;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fab6 	bl	8005130 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2264      	movs	r2, #100	; 0x64
 8005bce:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8005bd6:	e00d      	b.n	8005bf4 <_nx_dhcp_packet_process+0x460>
        }

        default:
            break;
 8005bd8:	bf00      	nop
 8005bda:	e00e      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
           break;
 8005bdc:	bf00      	nop
 8005bde:	e00c      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
                    break;
 8005be0:	bf00      	nop
 8005be2:	e00a      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
            break;
 8005be4:	bf00      	nop
 8005be6:	e008      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
                        break;
 8005be8:	bf00      	nop
 8005bea:	e006      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
            break;
 8005bec:	bf00      	nop
 8005bee:	e004      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
                        break;
 8005bf0:	bf00      	nop
 8005bf2:	e002      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
            break;
 8005bf4:	bf00      	nop
 8005bf6:	e000      	b.n	8005bfa <_nx_dhcp_packet_process+0x466>
                        break;
 8005bf8:	bf00      	nop

    } /* End of switch case */

    /* Release the packet.  */
    nx_packet_release(new_packet_ptr);
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f006 f92d 	bl	800be5c <_nx_packet_release>

    /* Check if the state is changed.  */
    if (original_state != interface_record -> nx_dhcp_state)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d022      	beq.n	8005c54 <_nx_dhcp_packet_process+0x4c0>
    {

        /* Determine if the application has specified a routine for DHCP state change notification.  */
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005c14:	4413      	add	r3, r2
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d009      	beq.n	8005c30 <_nx_dhcp_packet_process+0x49c>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005c22:	4413      	add	r3, r2
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	7852      	ldrb	r2, [r2, #1]
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	4798      	blx	r3
        }

        /* Determine if the application has specified a routine for DHCP interface state change notification.  */
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8005c36:	4413      	add	r3, r2
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <_nx_dhcp_packet_process+0x4c0>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8005c44:	4413      	add	r3, r2
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	69d1      	ldr	r1, [r2, #28]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	7852      	ldrb	r2, [r2, #1]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	4798      	blx	r3
        }
    }

    return;
 8005c54:	bf00      	nop
}
 8005c56:	3748      	adds	r7, #72	; 0x48
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <_nx_dhcp_timeout_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_process(NX_DHCP *dhcp_ptr)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

UINT            i;
UINT            original_state;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE  */

    /* Update the timeout on both interfaces. Check what needs to be done
       if a timeout expires, based on Client state. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e1a0      	b.n	8005fb0 <_nx_dhcp_timeout_process+0x354>
    {

         /* Check if the DHCP Client is active on this interface. */      
         if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE)
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	441a      	add	r2, r3
 8005c7c:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005c80:	4413      	add	r3, r2
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 818f 	beq.w	8005fa8 <_nx_dhcp_timeout_process+0x34c>
             continue;

         /* Set the interface reocrd pointer.  */
         interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8005c90:	fb02 f203 	mul.w	r2, r2, r3
 8005c94:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005c98:	4413      	add	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]

         /* Update the count.  */
         interface_record -> nx_dhcp_seconds ++;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	609a      	str	r2, [r3, #8]

        /* Check the timer.  */
        if (interface_record -> nx_dhcp_timeout != 0)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 817b 	beq.w	8005faa <_nx_dhcp_timeout_process+0x34e>
        {

            /* Apply the timer interval to the current DHCP Client timeout.  */
            if (interface_record -> nx_dhcp_timeout > NX_DHCP_TIME_INTERVAL)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	2b64      	cmp	r3, #100	; 0x64
 8005cba:	d906      	bls.n	8005cca <_nx_dhcp_timeout_process+0x6e>
            {

                /* Update the timeout.  */
                interface_record -> nx_dhcp_timeout -= (ULONG)NX_DHCP_TIME_INTERVAL;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	621a      	str	r2, [r3, #32]
 8005cc8:	e16f      	b.n	8005faa <_nx_dhcp_timeout_process+0x34e>
            }
            else
            {

                /* The DHCP Client timeout has expired. */
                interface_record -> nx_dhcp_timeout = 0; 
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	621a      	str	r2, [r3, #32]

                /* Save the current state for state change callback. */
                original_state = interface_record -> nx_dhcp_state;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	60fb      	str	r3, [r7, #12]

                /* Process according to what state the Client is in. */
                switch (interface_record -> nx_dhcp_state)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	3b02      	subs	r3, #2
 8005cdc:	2b07      	cmp	r3, #7
 8005cde:	f200 8132 	bhi.w	8005f46 <_nx_dhcp_timeout_process+0x2ea>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <_nx_dhcp_timeout_process+0x8c>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d09 	.word	0x08005d09
 8005cec:	08005d8d 	.word	0x08005d8d
 8005cf0:	08005dd1 	.word	0x08005dd1
 8005cf4:	08005e15 	.word	0x08005e15
 8005cf8:	08005e53 	.word	0x08005e53
 8005cfc:	08005ed9 	.word	0x08005ed9
 8005d00:	08005f47 	.word	0x08005f47
 8005d04:	08005f47 	.word	0x08005f47

                    case NX_DHCP_STATE_INIT:
                    {

                        /* Reset the seconds field for starting the DHCP address acquistiion. */
                        interface_record -> nx_dhcp_seconds = 0;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
                        /* Initial state when there is no address.  Send a DHCPDISCOVER message
                           to find a DHCP server and switch to the SELECTING state.
                           Initial timeout is NX_DHCP_MIN_RETRANS_TIMEOUT seconds. */
#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Only if the DHCP Client is requesting an IP address and is configured to skip the Discovery message. */
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00c      	beq.n	8005d30 <_nx_dhcp_timeout_process+0xd4>
                            (interface_record -> nx_dhcp_skip_discovery))
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d008      	beq.n	8005d30 <_nx_dhcp_timeout_process+0xd4>
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005d1e:	2203      	movs	r2, #3
 8005d20:	6939      	ldr	r1, [r7, #16]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f94e 	bl	8005fc4 <_nx_dhcp_send_request_internal>

                            /* And change to the Requesting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	705a      	strb	r2, [r3, #1]
 8005d2e:	e007      	b.n	8005d40 <_nx_dhcp_timeout_process+0xe4>
                        }
                        else
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8005d30:	2201      	movs	r2, #1
 8005d32:	6939      	ldr	r1, [r7, #16]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f945 	bl	8005fc4 <_nx_dhcp_send_request_internal>

                            /* And change to the Selecting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_SELECTING;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	705a      	strb	r2, [r3, #1]
                        /* And change to the Requesting state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
#endif

                        /* Check if the retransmission interval is zero.  */
                        if (interface_record -> nx_dhcp_rtr_interval == 0)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <_nx_dhcp_timeout_process+0xf6>
                        {

                            /* Set the interval to min retransmission timeout.  */
                            interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d4e:	625a      	str	r2, [r3, #36]	; 0x24
 8005d50:	e007      	b.n	8005d62 <_nx_dhcp_timeout_process+0x106>
                        }
                        else
                        {

                            /* Record the retransmission interval for next retransmission.  */
                            interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 ff84 	bl	8006c64 <_nx_dhcp_update_timeout>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	625a      	str	r2, [r3, #36]	; 0x24
                        }

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 ff4a 	bl	8006c08 <_nx_dhcp_add_randomize>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 80e3 	bne.w	8005f4a <_nx_dhcp_timeout_process+0x2ee>
                            interface_record -> nx_dhcp_timeout = 1;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2201      	movs	r2, #1
 8005d88:	621a      	str	r2, [r3, #32]

                        break;
 8005d8a:	e0de      	b.n	8005f4a <_nx_dhcp_timeout_process+0x2ee>
                    case NX_DHCP_STATE_SELECTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Retransmit the Discover message.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	6939      	ldr	r1, [r7, #16]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f917 	bl	8005fc4 <_nx_dhcp_send_request_internal>
                        /* Retransmit the BOOTP Request message.  */ 
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif

                        /* Update the retransmision interval.   */
                        interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 ff62 	bl	8006c64 <_nx_dhcp_update_timeout>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 ff28 	bl	8006c08 <_nx_dhcp_add_randomize>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f040 80c3 	bne.w	8005f4e <_nx_dhcp_timeout_process+0x2f2>
                            interface_record -> nx_dhcp_timeout = 1;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	621a      	str	r2, [r3, #32]

                        break;
 8005dce:	e0be      	b.n	8005f4e <_nx_dhcp_timeout_process+0x2f2>
                    case NX_DHCP_STATE_REQUESTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Send a DHCP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	6939      	ldr	r1, [r7, #16]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f8f5 	bl	8005fc4 <_nx_dhcp_send_request_internal>
                        /* Send a BOOTP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif
                                                
                        /* Update the retransmision interval.   */
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 ff40 	bl	8006c64 <_nx_dhcp_update_timeout>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Reset the timeout for next retransmision. */
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 ff06 	bl	8006c08 <_nx_dhcp_add_randomize>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 80a3 	bne.w	8005f52 <_nx_dhcp_timeout_process+0x2f6>
                            interface_record -> nx_dhcp_timeout = 1;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	621a      	str	r2, [r3, #32]

                        break;
 8005e12:	e09e      	b.n	8005f52 <_nx_dhcp_timeout_process+0x2f6>

                    case NX_DHCP_STATE_BOUND:
                    {

                        /* Reset the seconds field for starting the DHCP request process. */
                        interface_record -> nx_dhcp_seconds = 0;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2200      	movs	r2, #0
 8005e18:	609a      	str	r2, [r3, #8]

                        /* The lease has timed out. Time to renew.  */

                        /* And change to the Renewing state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2206      	movs	r2, #6
 8005e1e:	705a      	strb	r2, [r3, #1]

                        /* Send the renewal request.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005e20:	2203      	movs	r2, #3
 8005e22:	6939      	ldr	r1, [r7, #16]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8cd 	bl	8005fc4 <_nx_dhcp_send_request_internal>

                        /* Set the time remaining based on RFC 2131 when T1 expires. */
                        interface_record -> nx_dhcp_renewal_remain_time = interface_record -> nx_dhcp_rebind_time - interface_record -> nx_dhcp_renewal_time;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	1ad2      	subs	r2, r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 ff28 	bl	8006c92 <_nx_dhcp_update_renewal_timeout>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	621a      	str	r2, [r3, #32]

                        /* Record the retransmission interval.  */
                        interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	625a      	str	r2, [r3, #36]	; 0x24

                        break;
 8005e50:	e080      	b.n	8005f54 <_nx_dhcp_timeout_process+0x2f8>

                    case NX_DHCP_STATE_RENEWING:
                    {

                        /* Check if we have reached the end of the renewal time.  */
                        if (interface_record -> nx_dhcp_renewal_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d307      	bcc.n	8005e6e <_nx_dhcp_timeout_process+0x212>
                        {
                            interface_record -> nx_dhcp_renewal_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	1ad2      	subs	r2, r2, r3
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e6c:	e002      	b.n	8005e74 <_nx_dhcp_timeout_process+0x218>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_renewal_remain_time = 0;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2200      	movs	r2, #0
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 ff0a 	bl	8006c92 <_nx_dhcp_update_renewal_timeout>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d11b      	bne.n	8005ec4 <_nx_dhcp_timeout_process+0x268>
                        {

                            /* And change to the Rebinding state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2207      	movs	r2, #7
 8005e90:	705a      	strb	r2, [r3, #1]

                            /* Send the rebind request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005e92:	2203      	movs	r2, #3
 8005e94:	6939      	ldr	r1, [r7, #16]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f894 	bl	8005fc4 <_nx_dhcp_send_request_internal>

                            /* Calculate the rebind time based on the RFC 2131. */
                            interface_record -> nx_dhcp_rebind_remain_time = interface_record -> nx_dhcp_lease_time - interface_record -> nx_dhcp_rebind_time;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea4:	1ad2      	subs	r2, r2, r3
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	63da      	str	r2, [r3, #60]	; 0x3c
                                                                                        
                            /* Calculate the timeout for the response.  */
                            interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 feef 	bl	8006c92 <_nx_dhcp_update_renewal_timeout>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }

                        break;
 8005ec2:	e047      	b.n	8005f54 <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	6939      	ldr	r1, [r7, #16]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f87b 	bl	8005fc4 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 8005ed6:	e03d      	b.n	8005f54 <_nx_dhcp_timeout_process+0x2f8>
                    {

                        /* No response yet, the response must have timed out, 
                            update the timeout and check if we have reached the 
                            end of the rebinding time.  */
                        if (interface_record -> nx_dhcp_rebind_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d307      	bcc.n	8005ef4 <_nx_dhcp_timeout_process+0x298>
                        {
                            interface_record -> nx_dhcp_rebind_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	1ad2      	subs	r2, r2, r3
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ef2:	e002      	b.n	8005efa <_nx_dhcp_timeout_process+0x29e>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_rebind_remain_time = 0;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	63da      	str	r2, [r3, #60]	; 0x3c
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fec7 	bl	8006c92 <_nx_dhcp_update_renewal_timeout>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10f      	bne.n	8005f32 <_nx_dhcp_timeout_process+0x2d6>
                        {

                            /* Timeout. Restart DHCP service for this interface record.  */

                            /* Reinitialize DHCP.  */
                            _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff f909 	bl	8005130 <_nx_dhcp_interface_reinitialize>

                            /* Start the DHCP protocol again by setting the state back to INIT. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2202      	movs	r2, #2
 8005f22:	705a      	strb	r2, [r3, #1]
                            /* The client begins in INIT state and forms a DHCPDISCOVER message.
                               The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                               RFC2131, Section4.4.1, Page36.  */

                            /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2264      	movs	r2, #100	; 0x64
 8005f28:	621a      	str	r2, [r3, #32]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }
                        break;
 8005f30:	e010      	b.n	8005f54 <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005f32:	2203      	movs	r2, #3
 8005f34:	6939      	ldr	r1, [r7, #16]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f844 	bl	8005fc4 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6a1a      	ldr	r2, [r3, #32]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 8005f44:	e006      	b.n	8005f54 <_nx_dhcp_timeout_process+0x2f8>
                    }

                    default:
                    {

                        break;
 8005f46:	bf00      	nop
 8005f48:	e004      	b.n	8005f54 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8005f4a:	bf00      	nop
 8005f4c:	e002      	b.n	8005f54 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8005f4e:	bf00      	nop
 8005f50:	e000      	b.n	8005f54 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8005f52:	bf00      	nop
                    }
                }

                /* Check if the state is changed.  */
                if (original_state != interface_record -> nx_dhcp_state)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d024      	beq.n	8005faa <_nx_dhcp_timeout_process+0x34e>
                {

                    /* Determine if the application has specified a routine for DHCP state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005f66:	4413      	add	r3, r2
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <_nx_dhcp_timeout_process+0x326>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005f74:	4413      	add	r3, r2
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	7852      	ldrb	r2, [r2, #1]
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	4798      	blx	r3
                    }

                    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8005f88:	4413      	add	r3, r2
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00c      	beq.n	8005faa <_nx_dhcp_timeout_process+0x34e>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8005f96:	4413      	add	r3, r2
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	69d1      	ldr	r1, [r2, #28]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	7852      	ldrb	r2, [r2, #1]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
 8005fa6:	e000      	b.n	8005faa <_nx_dhcp_timeout_process+0x34e>
             continue;
 8005fa8:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	3301      	adds	r3, #1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f43f ae5b 	beq.w	8005c6e <_nx_dhcp_timeout_process+0x12>

            } /* End of switch statement. */ 
        }

    } /* Try the next interface record.  */ 
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop

08005fc4 <_nx_dhcp_send_request_internal>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_send_request_internal(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UINT dhcp_message_type)
{
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b093      	sub	sp, #76	; 0x4c
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
ULONG           targetIP;
UINT            status;
ULONG           dhcp_client_mac_msw;
ULONG           dhcp_client_mac_lsw;
UINT            iface_index;
UINT            index = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
UINT            user_option_length;
UINT            name_length;


    /* Set the interface idnex.  */
    iface_index = interface_record -> nx_dhcp_interface_index;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Allocate a DHCP packet.  */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 8005fe0:	f107 0120 	add.w	r1, r7, #32
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	222c      	movs	r2, #44	; 0x2c
 8005fe8:	f005 fae0 	bl	800b5ac <_nx_packet_allocate>
 8005fec:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Was the packet allocation successful?  */
    if (status != NX_SUCCESS)
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <_nx_dhcp_send_request_internal+0x42>
    {

        /* Increment the DHCP internal error counter.  */
        interface_record -> nx_dhcp_internal_errors++;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

        /* Return status.  */
        return(status);
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	e2a4      	b.n	8006550 <_nx_dhcp_send_request_internal+0x58c>
    }

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6899      	ldr	r1, [r3, #8]
 800600a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	440b      	add	r3, r1
 8006016:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	633b      	str	r3, [r7, #48]	; 0x30
    dhcp_client_mac_lsw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6899      	ldr	r1, [r3, #8]
 8006022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	440b      	add	r3, r1
 800602e:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Setup the buffer pointer.  */
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Clear the buffer out... just in case.  */
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 800603c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006040:	2100      	movs	r1, #0
 8006042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006044:	f00f fae2 	bl	801560c <memset>
    
    /* Setup the standard BootP fields.  */
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	2201      	movs	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HTYPE] =     NX_BOOTP_TYPE_ETHERNET;     
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	3301      	adds	r3, #1
 8006052:	2201      	movs	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HLEN] =      NX_BOOTP_HLEN_ETHERNET;
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	3302      	adds	r3, #2
 800605a:	2206      	movs	r2, #6
 800605c:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HOPS] =      0;
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	3303      	adds	r3, #3
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_SERVER_NM] = 0;  
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	332c      	adds	r3, #44	; 0x2c
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_BOOT_FILE] = 0;  
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	336c      	adds	r3, #108	; 0x6c
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]

    /* Setup the 'Xid' field.  */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_XID, 4, interface_record -> nx_dhcp_xid);
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	1d18      	adds	r0, r3, #4
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	461a      	mov	r2, r3
 8006080:	2104      	movs	r1, #4
 8006082:	f000 fe89 	bl	8006d98 <_nx_dhcp_store_data>

    /* Set the 'secs' field according to RFC2131, Secion4.4.1, Page37, Table5. */ 
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b04      	cmp	r3, #4
 800608a:	d002      	beq.n	8006092 <_nx_dhcp_send_request_internal+0xce>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b07      	cmp	r3, #7
 8006090:	d107      	bne.n	80060a2 <_nx_dhcp_send_request_internal+0xde>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, 0);
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	3308      	adds	r3, #8
 8006096:	2200      	movs	r2, #0
 8006098:	2102      	movs	r1, #2
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fe7c 	bl	8006d98 <_nx_dhcp_store_data>
 80060a0:	e008      	b.n	80060b4 <_nx_dhcp_send_request_internal+0xf0>
    }
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, interface_record -> nx_dhcp_seconds);
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	f103 0008 	add.w	r0, r3, #8
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	461a      	mov	r2, r3
 80060ae:	2102      	movs	r1, #2
 80060b0:	f000 fe72 	bl	8006d98 <_nx_dhcp_store_data>
    }

    /* Set the broadcast flag according to RFC2131, Secion4.4.1, Page38, Table5.  */

    /* Set the broadcast flag to 0 for DHCP Decline and DHCP Release.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d002      	beq.n	80060c0 <_nx_dhcp_send_request_internal+0xfc>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b07      	cmp	r3, #7
 80060be:	d107      	bne.n	80060d0 <_nx_dhcp_send_request_internal+0x10c>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	330a      	adds	r3, #10
 80060c4:	2200      	movs	r2, #0
 80060c6:	2101      	movs	r1, #1
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fe65 	bl	8006d98 <_nx_dhcp_store_data>
 80060ce:	e012      	b.n	80060f6 <_nx_dhcp_send_request_internal+0x132>
    }

    /* Set the 'broadcast' flag according to user requirement for DHCP Discover, DHCP Request and DHCP Inform.  */
    else if (interface_record -> nx_dhcp_clear_broadcast == NX_TRUE)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d107      	bne.n	80060e8 <_nx_dhcp_send_request_internal+0x124>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	330a      	adds	r3, #10
 80060dc:	2200      	movs	r2, #0
 80060de:	2101      	movs	r1, #1
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fe59 	bl	8006d98 <_nx_dhcp_store_data>
 80060e6:	e006      	b.n	80060f6 <_nx_dhcp_send_request_internal+0x132>
    }
    else
    {

        /* Request the response be sent broadcast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_BROADCAST);
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	330a      	adds	r3, #10
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	2101      	movs	r1, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fe51 	bl	8006d98 <_nx_dhcp_store_data>
    }

    /* RFC 2131 4.4.1: Do not set the Client IP ("ciaddr" field) address...*/
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d007      	beq.n	800610c <_nx_dhcp_send_request_internal+0x148>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, NX_BOOTP_NO_ADDRESS);
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	330c      	adds	r3, #12
 8006100:	2200      	movs	r2, #0
 8006102:	2104      	movs	r1, #4
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fe47 	bl	8006d98 <_nx_dhcp_store_data>
 800610a:	e008      	b.n	800611e <_nx_dhcp_send_request_internal+0x15a>
    }
    /* ...unless this is an INFORM REQUEST message. */
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	f103 000c 	add.w	r0, r3, #12
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	2104      	movs	r1, #4
 800611a:	f000 fe3d 	bl	8006d98 <_nx_dhcp_store_data>
    }

    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_YOUR_IP, 4, NX_BOOTP_NO_ADDRESS);   
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	3310      	adds	r3, #16
 8006122:	2200      	movs	r2, #0
 8006124:	2104      	movs	r1, #4
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fe36 	bl	8006d98 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SERVER_IP, 4, NX_BOOTP_NO_ADDRESS); 
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	3314      	adds	r3, #20
 8006130:	2200      	movs	r2, #0
 8006132:	2104      	movs	r1, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fe2f 	bl	8006d98 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_GATEWAY_IP, 4, NX_BOOTP_NO_ADDRESS);
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	3318      	adds	r3, #24
 800613e:	2200      	movs	r2, #0
 8006140:	2104      	movs	r1, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fe28 	bl	8006d98 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW, 2, dhcp_client_mac_msw);
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	331c      	adds	r3, #28
 800614c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614e:	2102      	movs	r1, #2
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fe21 	bl	8006d98 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW + 2, 4, dhcp_client_mac_lsw);
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	331e      	adds	r3, #30
 800615a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615c:	2104      	movs	r1, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fe1a 	bl	8006d98 <_nx_dhcp_store_data>

#ifndef NX_DHCP_ENABLE_BOOTP        
    /* Update the index.  */
    index = NX_BOOTP_OFFSET_OPTIONS; 
 8006164:	23f0      	movs	r3, #240	; 0xf0
 8006166:	61fb      	str	r3, [r7, #28]

    /*  A BOOTP Client should not request DHCP option data. */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_VENDOR, 4, NX_BOOTP_MAGIC_COOKIE);
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	33ec      	adds	r3, #236	; 0xec
 800616c:	4aa7      	ldr	r2, [pc, #668]	; (800640c <_nx_dhcp_send_request_internal+0x448>)
 800616e:	2104      	movs	r1, #4
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fe11 	bl	8006d98 <_nx_dhcp_store_data>

    /* Add the actual DHCP request.  */
    _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, NX_DHCP_OPTION_DHCP_TYPE_SIZE, dhcp_message_type, &index);
 8006176:	f107 031c 	add.w	r3, r7, #28
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	2135      	movs	r1, #53	; 0x35
 8006182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006184:	f000 fcd9 	bl	8006b3a <_nx_dhcp_add_option_value>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3b01      	subs	r3, #1
 800618c:	2b07      	cmp	r3, #7
 800618e:	f200 815f 	bhi.w	8006450 <_nx_dhcp_send_request_internal+0x48c>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <_nx_dhcp_send_request_internal+0x1d4>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061b9 	.word	0x080061b9
 800619c:	08006451 	.word	0x08006451
 80061a0:	08006257 	.word	0x08006257
 80061a4:	08006369 	.word	0x08006369
 80061a8:	08006451 	.word	0x08006451
 80061ac:	08006451 	.word	0x08006451
 80061b0:	080063a9 	.word	0x080063a9
 80061b4:	080063e1 	.word	0x080063e1

        case NX_DHCP_TYPE_DHCPDISCOVER:


            /* Determine if we have a valid IP address.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00f      	beq.n	80061e0 <_nx_dhcp_send_request_internal+0x21c>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d00a      	beq.n	80061e0 <_nx_dhcp_send_request_internal+0x21c>
            {

                /* Add a IP request option if we have a valid IP address */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	f107 031c 	add.w	r3, r7, #28
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	2204      	movs	r2, #4
 80061d8:	2132      	movs	r1, #50	; 0x32
 80061da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061dc:	f000 fcad 	bl	8006b3a <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add an option request for an infinite lease.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 80061e0:	f107 031c 	add.w	r3, r7, #28
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	2204      	movs	r2, #4
 80061ec:	2133      	movs	r1, #51	; 0x33
 80061ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f0:	f000 fca3 	bl	8006b3a <_nx_dhcp_add_option_value>

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <_nx_dhcp_send_request_internal+0x270>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f107 0114 	add.w	r1, r7, #20
 8006204:	22ff      	movs	r2, #255	; 0xff
 8006206:	4618      	mov	r0, r3
 8006208:	f00a fac2 	bl	8010790 <_nx_utility_string_length_check>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <_nx_dhcp_send_request_internal+0x25a>
                {
                    nx_packet_release(packet_ptr);
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	4618      	mov	r0, r3
 8006216:	f005 fe21 	bl	800be5c <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 800621a:	23a8      	movs	r3, #168	; 0xa8
 800621c:	e198      	b.n	8006550 <_nx_dhcp_send_request_internal+0x58c>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 800621e:	697a      	ldr	r2, [r7, #20]
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6859      	ldr	r1, [r3, #4]
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8006224:	f107 031c 	add.w	r3, r7, #28
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	460b      	mov	r3, r1
 800622c:	210c      	movs	r1, #12
 800622e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006230:	f000 fcb6 	bl	8006ba0 <_nx_dhcp_add_option_string>
            }

            /* Add an option request for DHCP parameters (gateway, subnet mask, etc.).  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, NX_DHCP_REQUEST_PARAMETER_SIZE, _nx_dhcp_request_parameters, &index);
 8006234:	f107 031c 	add.w	r3, r7, #28
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4b75      	ldr	r3, [pc, #468]	; (8006410 <_nx_dhcp_send_request_internal+0x44c>)
 800623c:	2203      	movs	r2, #3
 800623e:	2137      	movs	r1, #55	; 0x37
 8006240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006242:	f000 fcad 	bl	8006ba0 <_nx_dhcp_add_option_string>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Discovery messages sent.  */
            interface_record -> nx_dhcp_discoveries_sent++;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8006254:	e0fd      	b.n	8006452 <_nx_dhcp_send_request_internal+0x48e>
      
        case NX_DHCP_TYPE_DHCPREQUEST:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01b      	beq.n	8006296 <_nx_dhcp_send_request_internal+0x2d2>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f107 0114 	add.w	r1, r7, #20
 8006266:	22ff      	movs	r2, #255	; 0xff
 8006268:	4618      	mov	r0, r3
 800626a:	f00a fa91 	bl	8010790 <_nx_utility_string_length_check>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <_nx_dhcp_send_request_internal+0x2bc>
                {
                    nx_packet_release(packet_ptr);
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	4618      	mov	r0, r3
 8006278:	f005 fdf0 	bl	800be5c <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 800627c:	23a8      	movs	r3, #168	; 0xa8
 800627e:	e167      	b.n	8006550 <_nx_dhcp_send_request_internal+0x58c>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	f107 031c 	add.w	r3, r7, #28
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	460b      	mov	r3, r1
 800628e:	210c      	movs	r1, #12
 8006290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006292:	f000 fc85 	bl	8006ba0 <_nx_dhcp_add_option_string>
            }

            /* Determine if we have a valid IP address. Must not include if Renewing or Rebinding RCV 2131 4.3.2.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d017      	beq.n	80062ce <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d012      	beq.n	80062ce <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	d00e      	beq.n	80062ce <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 80062b4:	2b07      	cmp	r3, #7
 80062b6:	d00a      	beq.n	80062ce <_nx_dhcp_send_request_internal+0x30a>
            {

                /* Add an IP request option if we have a valid IP address.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	f107 031c 	add.w	r3, r7, #28
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	2204      	movs	r2, #4
 80062c6:	2132      	movs	r1, #50	; 0x32
 80062c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ca:	f000 fc36 	bl	8006b3a <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add a request for an infinite lease if we haven't already set the timers.  */
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <_nx_dhcp_send_request_internal+0x31a>
                (interface_record -> nx_dhcp_renewal_time == 0))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <_nx_dhcp_send_request_internal+0x32e>
            {

                /* Add the infinite lease option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 80062de:	f107 031c 	add.w	r3, r7, #28
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295
 80062e8:	2204      	movs	r2, #4
 80062ea:	2133      	movs	r1, #51	; 0x33
 80062ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ee:	f000 fc24 	bl	8006b3a <_nx_dhcp_add_option_value>
            }

            /* Should add server ID if not renewing.  */
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b06      	cmp	r3, #6
 80062f8:	d014      	beq.n	8006324 <_nx_dhcp_send_request_internal+0x360>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	785b      	ldrb	r3, [r3, #1]
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 80062fe:	2b07      	cmp	r3, #7
 8006300:	d010      	beq.n	8006324 <_nx_dhcp_send_request_internal+0x360>
                (interface_record -> nx_dhcp_server_ip != NX_BOOTP_BC_ADDRESS)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	695b      	ldr	r3, [r3, #20]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d00b      	beq.n	8006324 <_nx_dhcp_send_request_internal+0x360>
               )
            {

                /* Add Server identifier option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	695a      	ldr	r2, [r3, #20]
 8006310:	f107 031c 	add.w	r3, r7, #28
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	2204      	movs	r2, #4
 800631a:	2136      	movs	r1, #54	; 0x36
 800631c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631e:	f000 fc0c 	bl	8006b3a <_nx_dhcp_add_option_value>
 8006322:	e010      	b.n	8006346 <_nx_dhcp_send_request_internal+0x382>
                                          interface_record -> nx_dhcp_server_ip, &index);
            }
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b06      	cmp	r3, #6
 800632a:	d003      	beq.n	8006334 <_nx_dhcp_send_request_internal+0x370>
                     (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	785b      	ldrb	r3, [r3, #1]
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 8006330:	2b07      	cmp	r3, #7
 8006332:	d108      	bne.n	8006346 <_nx_dhcp_send_request_internal+0x382>

            {

                /* Ensure the renewal message fields are correct.  */
                _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	f103 000c 	add.w	r0, r3, #12
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	461a      	mov	r2, r3
 8006340:	2104      	movs	r1, #4
 8006342:	f000 fd29 	bl	8006d98 <_nx_dhcp_store_data>
            }

            /* Add the request for the DHCP parameters (gateway, subnet mask, etc.) if not renewing.  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, NX_DHCP_REQUEST_PARAMETER_SIZE, _nx_dhcp_request_parameters, &index);
 8006346:	f107 031c 	add.w	r3, r7, #28
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	4b30      	ldr	r3, [pc, #192]	; (8006410 <_nx_dhcp_send_request_internal+0x44c>)
 800634e:	2203      	movs	r2, #3
 8006350:	2137      	movs	r1, #55	; 0x37
 8006352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006354:	f000 fc24 	bl	8006ba0 <_nx_dhcp_add_option_string>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Request messages sent.  */
            interface_record -> nx_dhcp_requests_sent++;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            break;
 8006366:	e074      	b.n	8006452 <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPDECLINE:      

            /* Does the Client have a nonzero requested address it is declining? */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00f      	beq.n	8006390 <_nx_dhcp_send_request_internal+0x3cc>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d00a      	beq.n	8006390 <_nx_dhcp_send_request_internal+0x3cc>
            {

                /* Yes; add Request IP address option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	f107 031c 	add.w	r3, r7, #28
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	2204      	movs	r2, #4
 8006388:	2132      	movs	r1, #50	; 0x32
 800638a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638c:	f000 fbd5 	bl	8006b3a <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }     

            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	f107 031c 	add.w	r3, r7, #28
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	4613      	mov	r3, r2
 800639c:	2204      	movs	r2, #4
 800639e:	2136      	movs	r1, #54	; 0x36
 80063a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a2:	f000 fbca 	bl	8006b3a <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            break;
 80063a6:	e054      	b.n	8006452 <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPRELEASE:       

            /* Added the 'ciaddr', Indicate the IP address being released.  */
            _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	f103 000c 	add.w	r0, r3, #12
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	461a      	mov	r2, r3
 80063b4:	2104      	movs	r1, #4
 80063b6:	f000 fcef 	bl	8006d98 <_nx_dhcp_store_data>
                                       
            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	f107 031c 	add.w	r3, r7, #28
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	2204      	movs	r2, #4
 80063c8:	2136      	movs	r1, #54	; 0x36
 80063ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063cc:	f000 fbb5 	bl	8006b3a <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            /* Increment the number of Release messages sent.  */
            interface_record -> nx_dhcp_releases_sent++;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            break;
 80063de:	e038      	b.n	8006452 <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPINFORM:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d020      	beq.n	800642a <_nx_dhcp_send_request_internal+0x466>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f107 0114 	add.w	r1, r7, #20
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	4618      	mov	r0, r3
 80063f4:	f00a f9cc 	bl	8010790 <_nx_utility_string_length_check>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <_nx_dhcp_send_request_internal+0x450>
                {
                    nx_packet_release(packet_ptr);
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	4618      	mov	r0, r3
 8006402:	f005 fd2b 	bl	800be5c <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8006406:	23a8      	movs	r3, #168	; 0xa8
 8006408:	e0a2      	b.n	8006550 <_nx_dhcp_send_request_internal+0x58c>
 800640a:	bf00      	nop
 800640c:	63825363 	.word	0x63825363
 8006410:	24000010 	.word	0x24000010
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	f107 031c 	add.w	r3, r7, #28
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	460b      	mov	r3, r1
 8006422:	210c      	movs	r1, #12
 8006424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006426:	f000 fbbb 	bl	8006ba0 <_nx_dhcp_add_option_string>
            }

            /* Add an option request for DHCP parameters (gateway, subnet mask, etc.).  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, 1, &(interface_record -> nx_dhcp_user_option), &index);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	1c9a      	adds	r2, r3, #2
 800642e:	f107 031c 	add.w	r3, r7, #28
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	2201      	movs	r2, #1
 8006438:	2137      	movs	r1, #55	; 0x37
 800643a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800643c:	f000 fbb0 	bl	8006ba0 <_nx_dhcp_add_option_string>

            /* Increment the number of Inform messages sent.  */
            interface_record -> nx_dhcp_informs_sent++;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

            break;
 800644e:	e000      	b.n	8006452 <_nx_dhcp_send_request_internal+0x48e>

        default:
            break;
 8006450:	bf00      	nop
    }

    /* Add any user supplied options to the buffer.  */
    if (dhcp_ptr -> nx_dhcp_user_option_add)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d023      	beq.n	80064a6 <_nx_dhcp_send_request_internal+0x4e2>
    {

        /* Set the pointer for adding user option.  */
        user_option_ptr = buffer + index;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006462:	4413      	add	r3, r2
 8006464:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the available length for user options. Minus 1 to add the END option.  */
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	61bb      	str	r3, [r7, #24]

        /* Add the specific DHCP option user wanted.  */
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8006478:	681c      	ldr	r4, [r3, #0]
 800647a:	f107 0318 	add.w	r3, r7, #24
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	47a0      	blx	r4
 800648a:	4603      	mov	r3, r0
 800648c:	2b01      	cmp	r3, #1
 800648e:	d104      	bne.n	800649a <_nx_dhcp_send_request_internal+0x4d6>
        {

            /* Update the index to include the user options.  */
            index += user_option_length;
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	4413      	add	r3, r2
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	e005      	b.n	80064a6 <_nx_dhcp_send_request_internal+0x4e2>
        }
        else
        {

            /* Invalid user options. Release the packet.  */
            nx_packet_release(packet_ptr);
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	4618      	mov	r0, r3
 800649e:	f005 fcdd 	bl	800be5c <_nx_packet_release>
            return(NX_DHCP_UNKNOWN_OPTION);
 80064a2:	239f      	movs	r3, #159	; 0x9f
 80064a4:	e054      	b.n	8006550 <_nx_dhcp_send_request_internal+0x58c>
        }
    }

    /* Setup the packet pointers.  */
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80064b8:	60da      	str	r2, [r3, #12]

#ifndef NX_DHCP_ENABLE_BOOTP

    /* Added the END option.  */
    *(buffer + index) = NX_DHCP_OPTION_END;
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064be:	4413      	add	r3, r2
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	701a      	strb	r2, [r3, #0]
    index ++;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	3301      	adds	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]

    /* Check the option length.  */
    if (index > NX_BOOTP_OFFSET_END)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80064d0:	d908      	bls.n	80064e4 <_nx_dhcp_send_request_internal+0x520>
    {
        packet_ptr -> nx_packet_length = index;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	6899      	ldr	r1, [r3, #8]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	440a      	add	r2, r1
 80064e2:	60da      	str	r2, [r3, #12]
    }
#endif

    /* Set the target address according to RFC2131, Section4.3.6, Page33, Table4 and Section4.4.4, Page40.  
       DHCP Request for renewing and DHCP Release message must be unicast.  */
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d103      	bne.n	80064f2 <_nx_dhcp_send_request_internal+0x52e>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b06      	cmp	r3, #6
 80064f0:	d002      	beq.n	80064f8 <_nx_dhcp_send_request_internal+0x534>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b07      	cmp	r3, #7
 80064f6:	d103      	bne.n	8006500 <_nx_dhcp_send_request_internal+0x53c>
        (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
    {

        /* Use the current server's IP address.  */
        targetIP = interface_record -> nx_dhcp_server_ip;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064fe:	e002      	b.n	8006506 <_nx_dhcp_send_request_internal+0x542>
    }
    else
    {

        /* Set the server target IP address to broadcast.  */
        targetIP = NX_BOOTP_BC_ADDRESS;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* DHCP messages broadcast by a client prior to that client obtaining
       its IP address must have the source address field in the IP header
       set to 0. RFC2131, Section4.1, Page23.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDISCOVER) ||
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d006      	beq.n	800651a <_nx_dhcp_send_request_internal+0x556>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d10b      	bne.n	800652a <_nx_dhcp_send_request_internal+0x566>
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b04      	cmp	r3, #4
 8006518:	d807      	bhi.n	800652a <_nx_dhcp_send_request_internal+0x566>
    {

        /* Call function to send the special packet with zero source address.*/
        status = _nx_dhcp_client_send_with_zero_source_address(dhcp_ptr, iface_index, packet_ptr);
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	461a      	mov	r2, r3
 800651e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f819 	bl	8006558 <_nx_dhcp_client_send_with_zero_source_address>
 8006526:	63b8      	str	r0, [r7, #56]	; 0x38
 8006528:	e00a      	b.n	8006540 <_nx_dhcp_send_request_internal+0x57c>
    }
    else
    {

        /* Send the packet.  */
        status = nx_udp_socket_interface_send(&(dhcp_ptr -> nx_dhcp_socket), packet_ptr, targetIP, NX_DHCP_SERVER_UDP_PORT, iface_index);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f603 30dc 	addw	r0, r3, #3036	; 0xbdc
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	2343      	movs	r3, #67	; 0x43
 8006538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800653a:	f009 ff9c 	bl	8010476 <_nx_udp_socket_source_send>
 800653e:	63b8      	str	r0, [r7, #56]	; 0x38
    }

    /* If an error is detected, release the packet. */
    if (status != NX_SUCCESS)
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <_nx_dhcp_send_request_internal+0x58a>
    {

        /* Release the packet.  */
        nx_packet_release(packet_ptr);
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	4618      	mov	r0, r3
 800654a:	f005 fc87 	bl	800be5c <_nx_packet_release>
    }

    /* Return completion status.  */
    return(status);
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006550:	4618      	mov	r0, r3
 8006552:	3744      	adds	r7, #68	; 0x44
 8006554:	46bd      	mov	sp, r7
 8006556:	bd90      	pop	{r4, r7, pc}

08006558 <_nx_dhcp_client_send_with_zero_source_address>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_client_send_with_zero_source_address(NX_DHCP *dhcp_ptr, UINT iface_index, NX_PACKET *packet_ptr)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b098      	sub	sp, #96	; 0x60
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
ULONG           checksum;
ULONG           val;
NX_IP_DRIVER    driver_request;
      
    /* Set up the pointer to the associated IP instance.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Set up the pointer to the associated socket.  */
    socket_ptr = &dhcp_ptr -> nx_dhcp_socket;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8006570:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Set up the pointer to the interface.  */
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8006580:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr -> nx_packet_ip_interface = interface_ptr;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800658c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set up the address.  */
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 800658e:	2300      	movs	r3, #0
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
 8006596:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the interface.  */
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8006598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800659a:	791b      	ldrb	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <_nx_dhcp_client_send_with_zero_source_address+0x50>
 80065a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a2:	799b      	ldrb	r3, [r3, #6]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <_nx_dhcp_client_send_with_zero_source_address+0x54>
    {

        /* None found; return the error status. */
        return(NX_INVALID_INTERFACE);
 80065a8:	234c      	movs	r3, #76	; 0x4c
 80065aa:	e160      	b.n	800686e <_nx_dhcp_client_send_with_zero_source_address+0x316>
    }

    /* Build UDP header.  */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f1a3 0208 	sub.w	r2, r3, #8
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2204      	movs	r2, #4
 80065bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    
#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 80065c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 80065ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	441a      	add	r2, r3
 80065da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 80065e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e8:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 80065ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	441a      	add	r2, r3
 80065f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f6:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	f103 0208 	add.w	r2, r3, #8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    udp_header_ptr =  (NX_UDP_HEADER *) packet_ptr -> nx_packet_prepend_ptr;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	643b      	str	r3, [r7, #64]	; 0x40

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 800660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	f043 0243 	orr.w	r2, r3, #67	; 0x43
 8006614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006616:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	041a      	lsls	r2, r3, #16
 800661e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006620:	605a      	str	r2, [r3, #4]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8006622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	ba1a      	rev	r2, r3
 8006628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	ba1a      	rev	r2, r3
 8006632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006634:	605a      	str	r2, [r3, #4]

#ifdef NX_DISABLE_UDP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_UDP_TX_CHECKSUM */
    compute_checksum = 1;
 8006636:	2301      	movs	r3, #1
 8006638:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800663a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <_nx_dhcp_client_send_with_zero_source_address+0xf4>
        compute_checksum = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	657b      	str	r3, [r7, #84]	; 0x54
 800664a:	e001      	b.n	8006650 <_nx_dhcp_client_send_with_zero_source_address+0xf8>
    else
        compute_checksum = 1;
 800664c:	2301      	movs	r3, #1
 800664e:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8006650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006652:	2b00      	cmp	r3, #0
 8006654:	d028      	beq.n	80066a8 <_nx_dhcp_client_send_with_zero_source_address+0x150>
    {
        /* Yes, we need to compute the UDP checksum.  */
        checksum = _nx_ip_checksum_compute(packet_ptr,
                                           NX_PROTOCOL_UDP,
                                           (UINT)packet_ptr -> nx_packet_length,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr,
 800665a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800665e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	460b      	mov	r3, r1
 8006666:	2111      	movs	r1, #17
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f002 fe3d 	bl	80092e8 <_nx_ip_checksum_compute>
 800666e:	4603      	mov	r3, r0
 8006670:	653b      	str	r3, [r7, #80]	; 0x50
                                           &ip_src_addr,
                                           &ip_dest_addr);

        checksum = ~checksum & NX_LOWER_16_MASK;
 8006672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006674:	43db      	mvns	r3, r3
 8006676:	b29b      	uxth	r3, r3
 8006678:	653b      	str	r3, [r7, #80]	; 0x50

        /* If the computed checksum is zero, it will be transmitted as all ones. */
        /* RFC 768, page 2. */
        if (checksum == 0)
 800667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <_nx_dhcp_client_send_with_zero_source_address+0x12e>
            checksum = 0xFFFF;
 8006680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006684:	653b      	str	r3, [r7, #80]	; 0x50

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	ba1a      	rev	r2, r3
 800668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668e:	605a      	str	r2, [r3, #4]

        udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8006690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006696:	431a      	orrs	r2, r3
 8006698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669a:	605a      	str	r2, [r3, #4]

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800669c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	ba1a      	rev	r2, r3
 80066a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	e005      	b.n	80066b4 <_nx_dhcp_client_send_with_zero_source_address+0x15c>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
        /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	f043 0210 	orr.w	r2, r3, #16
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80066b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80066ba:	f04f 31ff 	mov.w	r1, #4294967295
 80066be:	4618      	mov	r0, r3
 80066c0:	f00e f98a 	bl	80149d8 <_txe_mutex_get>

    /* Build the IP header.  */

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f1a3 0214 	sub.w	r2, r3, #20
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	f103 0214 	add.w	r2, r3, #20
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the IP header pointer.  */
    ip_header_ptr =  (NX_IPV4_HEADER *) packet_ptr -> nx_packet_prepend_ptr; 
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Build the first 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 80066e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 80066f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f4:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 80066f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006700:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 8006704:	041a      	lsls	r2, r3, #16
 8006706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670a:	431a      	orrs	r2, r3
 800670c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670e:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 8006710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	061b      	lsls	r3, r3, #24
 8006716:	f443 1288 	orr.w	r2, r3, #1114112	; 0x110000
 800671a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671c:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  ip_src_addr;
 800671e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006722:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  ip_dest_addr;
 8006724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006728:	611a      	str	r2, [r3, #16]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	ba1a      	rev	r2, r3
 8006730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006732:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	ba1a      	rev	r2, r3
 800673a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673c:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800673e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	ba1a      	rev	r2, r3
 8006744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006746:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	ba1a      	rev	r2, r3
 800674e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006750:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	ba1a      	rev	r2, r3
 8006758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675a:	611a      	str	r2, [r3, #16]
     
#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_IP_TX_CHECKSUM */
    compute_checksum = 1;
 800675c:	2301      	movs	r3, #1
 800675e:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_DISABLE_IP_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <_nx_dhcp_client_send_with_zero_source_address+0x21c>
        compute_checksum = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	657b      	str	r3, [r7, #84]	; 0x54
 8006772:	e001      	b.n	8006778 <_nx_dhcp_client_send_with_zero_source_address+0x220>
    else
        compute_checksum = 1;
 8006774:	2301      	movs	r3, #1
 8006776:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8006778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800677a:	2b00      	cmp	r3, #0
 800677c:	d019      	beq.n	80067b2 <_nx_dhcp_client_send_with_zero_source_address+0x25a>
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4, 20, NULL, NULL);
 800677e:	2300      	movs	r3, #0
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	2300      	movs	r3, #0
 8006784:	2214      	movs	r2, #20
 8006786:	2104      	movs	r1, #4
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f002 fdad 	bl	80092e8 <_nx_ip_checksum_compute>
 800678e:	4603      	mov	r3, r0
 8006790:	653b      	str	r3, [r7, #80]	; 0x50

        val = (ULONG)(~checksum);
 8006792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006794:	43db      	mvns	r3, r3
 8006796:	63bb      	str	r3, [r7, #56]	; 0x38
        val = val & NX_LOWER_16_MASK;
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	b29b      	uxth	r3, r3
 800679c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	ba1b      	rev	r3, r3
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	431a      	orrs	r2, r3
 80067ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	e005      	b.n	80067be <_nx_dhcp_client_send_with_zero_source_address+0x266>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	f043 0201 	orr.w	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }
#endif /* NX_ENABLE_IP_PACKET_FILTER */

    /* Build the driver request.  */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 80067be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_packet =                packet_ptr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_ip_interface;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80067cc:	2304      	movs	r3, #4
 80067ce:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80067d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067d4:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80067d6:	f04f 33ff 	mov.w	r3, #4294967295
 80067da:	61fb      	str	r3, [r7, #28]

    /* Determine if fragmentation is needed.  */
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d925      	bls.n	8006836 <_nx_dhcp_client_send_with_zero_source_address+0x2de>
    {

#ifndef NX_DISABLE_FRAGMENTATION
        /* Check the DF bit flag.  */
        if ((ip_ptr -> nx_ip_fragment_processing) && (socket_ptr -> nx_udp_socket_fragment_enable != NX_DONT_FRAGMENT))
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d013      	beq.n	800681c <_nx_dhcp_client_send_with_zero_source_address+0x2c4>
 80067f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067fc:	d00e      	beq.n	800681c <_nx_dhcp_client_send_with_zero_source_address+0x2c4>
        {

            /* Fragmentation is needed, call the IP fragment processing routine.  */
            (ip_ptr -> nx_ip_fragment_processing) (&driver_request);
 80067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006800:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006804:	f107 0210 	add.w	r2, r7, #16
 8006808:	4610      	mov	r0, r2
 800680a:	4798      	blx	r3

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800680c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006812:	4618      	mov	r0, r3
 8006814:	f00e f93a 	bl	8014a8c <_txe_mutex_put>

            /* Return a successful status.  */
            return(NX_SUCCESS);
 8006818:	2300      	movs	r3, #0
 800681a:	e028      	b.n	800686e <_nx_dhcp_client_send_with_zero_source_address+0x316>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800681c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006824:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006828:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800682c:	4618      	mov	r0, r3
 800682e:	f00e f92d 	bl	8014a8c <_txe_mutex_put>

            /* Return a not successful status.  */
            return(NX_NOT_SUCCESSFUL);
 8006832:	2343      	movs	r3, #67	; 0x43
 8006834:	e01b      	b.n	800686e <_nx_dhcp_client_send_with_zero_source_address+0x316>
    }

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP packet sent count.  */
    ip_ptr -> nx_ip_total_packets_sent++;
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683e:	615a      	str	r2, [r3, #20]

    /* Increment the IP bytes sent count.  */
    ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - 20;
 8006840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	4413      	add	r3, r2
 800684a:	f1a3 0214 	sub.w	r2, r3, #20
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	619a      	str	r2, [r3, #24]
#endif

    /* Broadcast packet.  */
    (packet_ptr -> nx_packet_ip_interface -> nx_interface_link_driver_entry) (&driver_request);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	f107 0210 	add.w	r2, r7, #16
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006862:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006866:	4618      	mov	r0, r3
 8006868:	f00e f910 	bl	8014a8c <_txe_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3758      	adds	r7, #88	; 0x58
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <_nx_dhcp_extract_information>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b086      	sub	sp, #24
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]

ULONG       value;


    /* Extract the IP address.  */
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3310      	adds	r3, #16
 8006888:	2104      	movs	r1, #4
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fa68 	bl	8006d60 <_nx_dhcp_get_data>
 8006890:	4603      	mov	r3, r0
 8006892:	617b      	str	r3, [r7, #20]

    /* Determine if it is valid.  */
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01c      	beq.n	80068d4 <_nx_dhcp_extract_information+0x5e>
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 800689a:	697b      	ldr	r3, [r7, #20]
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 800689c:	2b00      	cmp	r3, #0
 800689e:	da0b      	bge.n	80068b8 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80068a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068aa:	d005      	beq.n	80068b8 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80068b2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80068b6:	d10d      	bne.n	80068d4 <_nx_dhcp_extract_information+0x5e>
    {

        /* Store the IP address.  */
        interface_record -> nx_dhcp_ip_address =  value;
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	60da      	str	r2, [r3, #12]
        return(NX_DHCP_BAD_IP_ADDRESS);
    }
                       
    /* Determine if there is a subnet mask. Note a DHCP Server receiving a BOOTP request
       may send DHCP option data for subnet masks as per RFC 1534 Section 2.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_SUBNET_MASK, &value, length) == NX_SUCCESS)
 80068be:	f107 0214 	add.w	r2, r7, #20
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2101      	movs	r1, #1
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f8f5 	bl	8006ab6 <_nx_dhcp_get_option_value>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <_nx_dhcp_extract_information+0x62>
 80068d2:	e012      	b.n	80068fa <_nx_dhcp_extract_information+0x84>
        return(NX_DHCP_BAD_IP_ADDRESS);
 80068d4:	2392      	movs	r3, #146	; 0x92
 80068d6:	e0ea      	b.n	8006aae <_nx_dhcp_extract_information+0x238>
    {

        /* Make sure there is a valid IP address too.  */
        if (value != NX_BOOTP_NO_ADDRESS)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <_nx_dhcp_extract_information+0x70>
        {

            interface_record -> nx_dhcp_network_mask =  value;
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	619a      	str	r2, [r3, #24]
 80068e4:	e009      	b.n	80068fa <_nx_dhcp_extract_information+0x84>
        {
            ULONG ip_address;

            /* No valid network mask info supplied; use the current network mask if any. Don't
               care about current IP address for now. */
            nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, 
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6898      	ldr	r0, [r3, #8]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	69d9      	ldr	r1, [r3, #28]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	3318      	adds	r3, #24
 80068f2:	f107 0210 	add.w	r2, r7, #16
 80068f6:	f003 fc41 	bl	800a17c <_nx_ip_interface_address_get>
#else  

    /* NX_DHCP_ENABLE_BOOTP  not defined */

    /* Overwrite the server ID if there is a DHCP option for Server ID */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_SERVER, &value, length) == NX_SUCCESS)
 80068fa:	f107 0214 	add.w	r2, r7, #20
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2136      	movs	r1, #54	; 0x36
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8d7 	bl	8006ab6 <_nx_dhcp_get_option_value>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d117      	bne.n	800693e <_nx_dhcp_extract_information+0xc8>
    {

        /* Determine if it is valid.  */
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d012      	beq.n	800693a <_nx_dhcp_extract_information+0xc4>
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006914:	697b      	ldr	r3, [r7, #20]
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006916:	2b00      	cmp	r3, #0
 8006918:	da0b      	bge.n	8006932 <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006924:	d005      	beq.n	8006932 <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 800692c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006930:	d103      	bne.n	800693a <_nx_dhcp_extract_information+0xc4>
        {

            /* Store the server IP address.  */
            interface_record -> nx_dhcp_server_ip = value;
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	615a      	str	r2, [r3, #20]
 8006938:	e001      	b.n	800693e <_nx_dhcp_extract_information+0xc8>
        }
        else
        {
            return(NX_DHCP_BAD_IP_ADDRESS);
 800693a:	2392      	movs	r3, #146	; 0x92
 800693c:	e0b7      	b.n	8006aae <_nx_dhcp_extract_information+0x238>
        }
    }

    /* Get the lease time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_LEASE, &value, length) == NX_SUCCESS)
 800693e:	f107 0214 	add.w	r2, r7, #20
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2133      	movs	r1, #51	; 0x33
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f8b5 	bl	8006ab6 <_nx_dhcp_get_option_value>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d120      	bne.n	8006994 <_nx_dhcp_extract_information+0x11e>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d109      	bne.n	800696e <_nx_dhcp_extract_information+0xf8>
        {
            /* Store the 'infinite' lease time . */
            interface_record -> nx_dhcp_lease_time = value;
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c
            interface_record -> nx_dhcp_renewal_time = value;
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time = value;
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	635a      	str	r2, [r3, #52]	; 0x34
 800696c:	e012      	b.n	8006994 <_nx_dhcp_extract_information+0x11e>
        }
        else
        {            

            /* Store the lease time in timer ticks.  */
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2264      	movs	r2, #100	; 0x64
 8006972:	fb02 f203 	mul.w	r2, r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	62da      	str	r2, [r3, #44]	; 0x2c
    
            /* Set the renew and rebind times.  */
            interface_record -> nx_dhcp_renewal_time = interface_record -> nx_dhcp_lease_time / 2;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	085a      	lsrs	r2, r3, #1
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time =  interface_record -> nx_dhcp_lease_time - (interface_record -> nx_dhcp_lease_time / 8);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }
 
    /* Overwrite the renew and rebind times with the specified values if the options are present.  */
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8006994:	f107 0214 	add.w	r2, r7, #20
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	213a      	movs	r1, #58	; 0x3a
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f88a 	bl	8006ab6 <_nx_dhcp_get_option_value>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d112      	bne.n	80069ce <_nx_dhcp_extract_information+0x158>
        (value <= interface_record -> nx_dhcp_lease_time))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ac:	697b      	ldr	r3, [r7, #20]
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d30d      	bcc.n	80069ce <_nx_dhcp_extract_information+0x158>
    {       

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d103      	bne.n	80069c2 <_nx_dhcp_extract_information+0x14c>
        {
            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_renewal_time = value;
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	631a      	str	r2, [r3, #48]	; 0x30
 80069c0:	e005      	b.n	80069ce <_nx_dhcp_extract_information+0x158>
        }
        else
        {

            /* Store the renewal time in timer ticks  */
            interface_record -> nx_dhcp_renewal_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2264      	movs	r2, #100	; 0x64
 80069c6:	fb02 f203 	mul.w	r2, r2, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
  
    /* Determine if there is a rebind time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_REBIND, &value, length) == NX_SUCCESS)
 80069ce:	f107 0214 	add.w	r2, r7, #20
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	213b      	movs	r1, #59	; 0x3b
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f86d 	bl	8006ab6 <_nx_dhcp_get_option_value>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d119      	bne.n	8006a16 <_nx_dhcp_extract_information+0x1a0>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d103      	bne.n	80069f2 <_nx_dhcp_extract_information+0x17c>
        {

            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_rebind_time = value;
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	635a      	str	r2, [r3, #52]	; 0x34
 80069f0:	e011      	b.n	8006a16 <_nx_dhcp_extract_information+0x1a0>
        }
        else
        {

            /* Convert to timer ticks. */
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2264      	movs	r2, #100	; 0x64
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	617b      	str	r3, [r7, #20]

            /* Sanity check*/
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d307      	bcc.n	8006a16 <_nx_dhcp_extract_information+0x1a0>
                (value >= interface_record -> nx_dhcp_renewal_time))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0a:	697b      	ldr	r3, [r7, #20]
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d802      	bhi.n	8006a16 <_nx_dhcp_extract_information+0x1a0>
            {
        
                /* Store the rebind time.  */
                interface_record -> nx_dhcp_rebind_time =  value;
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	635a      	str	r2, [r3, #52]	; 0x34
            }
        }
    }

    /* Determine if this is an ACK from a server response, which can only happen from a handful of states.  */
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d007      	beq.n	8006a2e <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	785b      	ldrb	r3, [r3, #1]
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8006a22:	2b06      	cmp	r3, #6
 8006a24:	d003      	beq.n	8006a2e <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	785b      	ldrb	r3, [r3, #1]
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8006a2a:	2b07      	cmp	r3, #7
 8006a2c:	d121      	bne.n	8006a72 <_nx_dhcp_extract_information+0x1fc>
    {

        /* Determine if the IP gateway/router IP address is present.  */
        if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_GATEWAYS, &value, length) == NX_SUCCESS)
 8006a2e:	f107 0214 	add.w	r2, r7, #20
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2103      	movs	r1, #3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f83d 	bl	8006ab6 <_nx_dhcp_get_option_value>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d117      	bne.n	8006a72 <_nx_dhcp_extract_information+0x1fc>
        {

            /* Determine if it is valid.  */
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d012      	beq.n	8006a6e <_nx_dhcp_extract_information+0x1f8>
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006a48:	697b      	ldr	r3, [r7, #20]
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da0b      	bge.n	8006a66 <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a58:	d005      	beq.n	8006a66 <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006a60:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006a64:	d103      	bne.n	8006a6e <_nx_dhcp_extract_information+0x1f8>
            {

                /* Store the gateway/Router IP address to the Client record.  */
                interface_record -> nx_dhcp_gateway_address = value;
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	611a      	str	r2, [r3, #16]
 8006a6c:	e001      	b.n	8006a72 <_nx_dhcp_extract_information+0x1fc>
            }
            else
            {
                return(NX_DHCP_BAD_IP_ADDRESS);
 8006a6e:	2392      	movs	r3, #146	; 0x92
 8006a70:	e01d      	b.n	8006aae <_nx_dhcp_extract_information+0x238>
            }
        }
    }

     /* Check the DHCP options size.  */
     if ((length - NX_BOOTP_OFFSET_OPTIONS) > NX_DHCP_OPTIONS_BUFFER_SIZE)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	3bf0      	subs	r3, #240	; 0xf0
 8006a76:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8006a7a:	d905      	bls.n	8006a88 <_nx_dhcp_extract_information+0x212>
         interface_record -> nx_dhcp_options_size = NX_DHCP_OPTIONS_BUFFER_SIZE;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006a82:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8006a86:	e005      	b.n	8006a94 <_nx_dhcp_extract_information+0x21e>
     else
         interface_record -> nx_dhcp_options_size = length - NX_BOOTP_OFFSET_OPTIONS;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f1a3 02f0 	sub.w	r2, r3, #240	; 0xf0
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

     /* Copy the DHCP options into DHCP Client options buffer.  */
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f103 0048 	add.w	r0, r3, #72	; 0x48
            &dhcp_message[NX_BOOTP_OFFSET_OPTIONS], interface_record -> nx_dhcp_options_size);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f00e fd88 	bl	80155bc <memcpy>

#endif  /* NX_DHCP_ENABLE_BOOTP */

    return (NX_SUCCESS);
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <_nx_dhcp_get_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_get_option_value(UCHAR *bootp_message, UINT option, ULONG *value, UINT length)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b088      	sub	sp, #32
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	603b      	str	r3, [r7, #0]
UCHAR *option_message;
UINT   option_length;


    /* Setup buffer pointer.  */
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	33f0      	adds	r3, #240	; 0xf0
 8006ac8:	61fb      	str	r3, [r7, #28]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	3bf0      	subs	r3, #240	; 0xf0
 8006ace:	61bb      	str	r3, [r7, #24]

    /* Find the option.  */
    if ((option != NX_DHCP_OPTION_PAD) && (option != NX_DHCP_OPTION_END))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d02c      	beq.n	8006b30 <_nx_dhcp_get_option_value+0x7a>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2bff      	cmp	r3, #255	; 0xff
 8006ada:	d029      	beq.n	8006b30 <_nx_dhcp_get_option_value+0x7a>
    {

        /* Search the buffer for the option.  */
        data =  _nx_dhcp_search_buffer(option_message, option, option_length);
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	69f8      	ldr	r0, [r7, #28]
 8006ae2:	f000 f8f5 	bl	8006cd0 <_nx_dhcp_search_buffer>
 8006ae6:	6178      	str	r0, [r7, #20]

        /* Check to see if the option was found.  */
        if (data != NX_NULL)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d020      	beq.n	8006b30 <_nx_dhcp_get_option_value+0x7a>
        {

            /* Check for the proper size.  */
            if (*data > 4)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d90f      	bls.n	8006b16 <_nx_dhcp_get_option_value+0x60>
            {

                /* Check for the gateway option.  */
                if (option == NX_DHCP_OPTION_GATEWAYS)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d10a      	bne.n	8006b12 <_nx_dhcp_get_option_value+0x5c>
                {

                    /* Pickup the first gateway address.  */
                    *value =  _nx_dhcp_get_data(data + 1, 4);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3301      	adds	r3, #1
 8006b00:	2104      	movs	r1, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 f92c 	bl	8006d60 <_nx_dhcp_get_data>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]

                    /* For now, just disregard any additional gateway addresses.  */
                    return(NX_SUCCESS);
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e00f      	b.n	8006b32 <_nx_dhcp_get_option_value+0x7c>
                }
                else
                {

                    /* Invalid size, return error.  */
                    return(NX_SIZE_ERROR);
 8006b12:	2309      	movs	r3, #9
 8006b14:	e00d      	b.n	8006b32 <_nx_dhcp_get_option_value+0x7c>
            }
            else
            {

                /* Get the actual value.  */
                *value = _nx_dhcp_get_data(data + 1, *data);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f000 f91d 	bl	8006d60 <_nx_dhcp_get_data>
 8006b26:	4602      	mov	r2, r0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
                return(NX_SUCCESS);  
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e000      	b.n	8006b32 <_nx_dhcp_get_option_value+0x7c>
            }
        }
    }

    /* Return an error if not found.  */
    return(NX_OPTION_ERROR);
 8006b30:	230a      	movs	r3, #10
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3720      	adds	r7, #32
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <_nx_dhcp_add_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_add_option_value(UCHAR *bootp_message, UINT option, UINT size, ULONG value, UINT *index)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	603b      	str	r3, [r7, #0]


    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_store_data(bootp_message + (*index), size, value);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f907 	bl	8006d98 <_nx_dhcp_store_data>
    (*index) += size;    
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	441a      	add	r2, r3
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <_nx_dhcp_add_option_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_string(UCHAR *bootp_message, UINT option, UINT size, UCHAR *value, UINT *index)
{                                              
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 f90c 	bl	8006e08 <_nx_dhcp_move_string>
    (*index) += size;    
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	441a      	add	r2, r3
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <_nx_dhcp_add_randomize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_add_randomize(ULONG timeout)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
ULONG adjustment;

    /* Uniform random number chosen from the range -1 to +1 second as recommended by RFC2131, Section4.1, Page24. */

    /* Calculate random time adjustment in timer ticks from the range 0 to NX_IP_PERIODIC_RATE * 2.  */
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8006c10:	f00e fd92 	bl	8015738 <rand>
 8006c14:	4603      	mov	r3, r0
 8006c16:	4a12      	ldr	r2, [pc, #72]	; (8006c60 <_nx_dhcp_add_randomize+0x58>)
 8006c18:	fba2 1203 	umull	r1, r2, r2, r3
 8006c1c:	0852      	lsrs	r2, r2, #1
 8006c1e:	21c9      	movs	r1, #201	; 0xc9
 8006c20:	fb01 f202 	mul.w	r2, r1, r2
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

    /* Check for adjustment.  */
    if (adjustment < NX_IP_PERIODIC_RATE)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b63      	cmp	r3, #99	; 0x63
 8006c2c:	d80e      	bhi.n	8006c4c <_nx_dhcp_add_randomize+0x44>
    {

        /* Updated timeout, minus NX_IP_PERIODIC_RATE - adjustment.  */

        /* Check for timeout.  */
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d905      	bls.n	8006c46 <_nx_dhcp_add_randomize+0x3e>
            timeout -= (ULONG)(NX_IP_PERIODIC_RATE - adjustment);
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4413      	add	r3, r2
 8006c40:	3b64      	subs	r3, #100	; 0x64
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e007      	b.n	8006c56 <_nx_dhcp_add_randomize+0x4e>
        else
            timeout = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	e004      	b.n	8006c56 <_nx_dhcp_add_randomize+0x4e>
    }
    else
    {

        /* Updated timeout, add adjustment- NX_IP_PERIODIC_RATE.  */
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	3b64      	subs	r3, #100	; 0x64
 8006c54:	607b      	str	r3, [r7, #4]
    }

    return timeout;
 8006c56:	687b      	ldr	r3, [r7, #4]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	028c1979 	.word	0x028c1979

08006c64 <_nx_dhcp_update_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_timeout(ULONG timeout)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

    /* Timed out, double the timeout, limited to NX_DHCP_MAX_RETRANS_TIMEOUT */
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8006c74:	d303      	bcc.n	8006c7e <_nx_dhcp_update_timeout+0x1a>
    {

        /* Set the timeout as NX_DHCP_MAX_RETRANS_TIMEOUT.  */
        timeout = NX_DHCP_MAX_RETRANS_TIMEOUT;  
 8006c76:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006c7a:	607b      	str	r3, [r7, #4]
 8006c7c:	e002      	b.n	8006c84 <_nx_dhcp_update_timeout+0x20>
    }
    else
    {

        /* Double timeout value.  */
        timeout = timeout * 2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	607b      	str	r3, [r7, #4]
    }

    /* Return the sequence timeout.  */
    return(timeout);
 8006c84:	687b      	ldr	r3, [r7, #4]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <_nx_dhcp_update_renewal_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_renewal_timeout(ULONG timeout)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]

    /* check if the timeout is non zero */
    if (timeout != 0)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d010      	beq.n	8006cc2 <_nx_dhcp_update_renewal_timeout+0x30>
    {

        /* Timed out, halve the timeout, limited to NX_DHCP_MIN_RENEW_TIMEOUT or
          the remaining timeout if it is less than NX_DHCP_MIN_RENEW_TIMEOUT */
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f241 7270 	movw	r2, #6000	; 0x1770
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d90b      	bls.n	8006cc2 <_nx_dhcp_update_renewal_timeout+0x30>
        {

            /* Timeout can still decrease, either
               force it to the minimum or halve it */
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d903      	bls.n	8006cbc <_nx_dhcp_update_renewal_timeout+0x2a>
            {

                /* Halve timeout.  */
                timeout = timeout / 2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	e002      	b.n	8006cc2 <_nx_dhcp_update_renewal_timeout+0x30>
            }
            else
            {

                /* set timeout to minimum.  */
                timeout =  NX_DHCP_MIN_RENEW_TIMEOUT ;
 8006cbc:	f241 7370 	movw	r3, #6000	; 0x1770
 8006cc0:	607b      	str	r3, [r7, #4]
            }
        }
    }

    /* Return the sequence timeout.  */
    return(timeout);
 8006cc2:	687b      	ldr	r3, [r7, #4]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <_nx_dhcp_search_buffer>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UCHAR  *_nx_dhcp_search_buffer(UCHAR *option_message, UINT option, UINT length)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b089      	sub	sp, #36	; 0x24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
UCHAR   *data;
UINT    i;
UINT    size;

    /* Setup buffer pointer.  */
    data = option_message;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	61fb      	str	r3, [r7, #28]
    i = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61bb      	str	r3, [r7, #24]

    /* Search as long as there are valid options.   */
    while (i < length - 1)
 8006ce4:	e030      	b.n	8006d48 <_nx_dhcp_search_buffer+0x78>
    {

        /* Simply skip any padding */
        if (*data == NX_DHCP_OPTION_PAD)
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <_nx_dhcp_search_buffer+0x2c>
        {

            data++;
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	61fb      	str	r3, [r7, #28]
            i++;
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	e025      	b.n	8006d48 <_nx_dhcp_search_buffer+0x78>
        }

        /* On a match, return a pointer to the size.  */
        else if (*data == option)
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10f      	bne.n	8006d28 <_nx_dhcp_search_buffer+0x58>
        {

            size = *(data + 1);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	617b      	str	r3, [r7, #20]

            /* Check if the option data is in the packet.  */
            if ((i + size + 1) > length)
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	4413      	add	r3, r2
 8006d16:	3301      	adds	r3, #1
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d201      	bcs.n	8006d22 <_nx_dhcp_search_buffer+0x52>
                return(NX_NULL);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e018      	b.n	8006d54 <_nx_dhcp_search_buffer+0x84>

            /* Return a pointer to the option size byte.  */
            return(data + 1);
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	3301      	adds	r3, #1
 8006d26:	e015      	b.n	8006d54 <_nx_dhcp_search_buffer+0x84>

        /* Otherwise skip the option by adding the size to the pointer.  */
        else
        {

            size = *(++data);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	617b      	str	r3, [r7, #20]

            /* skip the data plus the size byte */
            data += size + 1;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	3301      	adds	r3, #1
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	61fb      	str	r3, [r7, #28]
            i += size + 1;
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	4413      	add	r3, r2
 8006d44:	3301      	adds	r3, #1
 8006d46:	61bb      	str	r3, [r7, #24]
    while (i < length - 1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d3c9      	bcc.n	8006ce6 <_nx_dhcp_search_buffer+0x16>
        }
    }

    /* Return NULL to indicate the option was not found.  */
    return(NX_NULL);
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3724      	adds	r7, #36	; 0x24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <_nx_dhcp_get_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG  _nx_dhcp_get_data(UCHAR *data, UINT size)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]

ULONG   value = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]

   
    /* Process the data retrieval request.  */
    while (size-- > 0)
 8006d6e:	e007      	b.n	8006d80 <_nx_dhcp_get_data+0x20>
    {

        /* Build return value.  */
        value = (value << 8) | *data++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	021a      	lsls	r2, r3, #8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	1c59      	adds	r1, r3, #1
 8006d78:	6079      	str	r1, [r7, #4]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
    while (size-- > 0)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	1e5a      	subs	r2, r3, #1
 8006d84:	603a      	str	r2, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f2      	bne.n	8006d70 <_nx_dhcp_get_data+0x10>
    }

    /* Return value.  */
    return(value);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <_nx_dhcp_store_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_store_data(UCHAR *data, UINT size, ULONG value)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]

    /* Make sure that data is left justified.  */
    switch (size)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d011      	beq.n	8006dce <_nx_dhcp_store_data+0x36>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d812      	bhi.n	8006dd6 <_nx_dhcp_store_data+0x3e>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d003      	beq.n	8006dbe <_nx_dhcp_store_data+0x26>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d004      	beq.n	8006dc6 <_nx_dhcp_store_data+0x2e>
      
            value <<= 8;
            break;

        default:
            break;
 8006dbc:	e00b      	b.n	8006dd6 <_nx_dhcp_store_data+0x3e>
            value <<= 24;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	061b      	lsls	r3, r3, #24
 8006dc2:	607b      	str	r3, [r7, #4]
            break;
 8006dc4:	e008      	b.n	8006dd8 <_nx_dhcp_store_data+0x40>
            value <<= 16;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	607b      	str	r3, [r7, #4]
            break;
 8006dcc:	e004      	b.n	8006dd8 <_nx_dhcp_store_data+0x40>
            value <<= 8;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	607b      	str	r3, [r7, #4]
            break;
 8006dd4:	e000      	b.n	8006dd8 <_nx_dhcp_store_data+0x40>
            break;
 8006dd6:	bf00      	nop
    }

    /* Store the value.  */
    while (size-- > 0)
 8006dd8:	e00a      	b.n	8006df0 <_nx_dhcp_store_data+0x58>
    {

        *data = (UCHAR) ((value >> 24) & 0xff);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	0e1b      	lsrs	r3, r3, #24
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	701a      	strb	r2, [r3, #0]
        data++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
        value <<= 8;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	607b      	str	r3, [r7, #4]
    while (size-- > 0)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	1e5a      	subs	r2, r3, #1
 8006df4:	60ba      	str	r2, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1ef      	bne.n	8006dda <_nx_dhcp_store_data+0x42>
    }
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <_nx_dhcp_move_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_move_string(UCHAR *dest, UCHAR *source, UINT size)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]

    /* Loop to copy all bytes.  */
    while (size-- > 0)
 8006e14:	e007      	b.n	8006e26 <_nx_dhcp_move_string+0x1e>
    {
        
        /* Copy a byte.  */
        *dest++ = *source++;
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	1c53      	adds	r3, r2, #1
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	60f9      	str	r1, [r7, #12]
 8006e22:	7812      	ldrb	r2, [r2, #0]
 8006e24:	701a      	strb	r2, [r3, #0]
    while (size-- > 0)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f2      	bne.n	8006e16 <_nx_dhcp_move_string+0xe>
    }
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <_nx_dhcp_interface_record_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_dhcp_interface_record_find(NX_DHCP *dhcp_ptr, UINT iface_index, NX_DHCP_INTERFACE_RECORD **interface_record)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b087      	sub	sp, #28
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]

UINT i;

    /* Find which DHCP Client interface record is assigned the input interface. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e02c      	b.n	8006eaa <_nx_dhcp_interface_record_find+0x6c>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	441a      	add	r2, r3
 8006e5e:	f641 5388 	movw	r3, #7560	; 0x1d88
 8006e62:	4413      	add	r3, r2
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01b      	beq.n	8006ea2 <_nx_dhcp_interface_record_find+0x64>
            continue;

        /* Check if the interface index matches.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006e72:	fb01 f303 	mul.w	r3, r1, r3
 8006e76:	441a      	add	r2, r3
 8006e78:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8006e7c:	4413      	add	r3, r2
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d10e      	bne.n	8006ea4 <_nx_dhcp_interface_record_find+0x66>
        {

            /* Yes, we found the record.  */
            *interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8006e8c:	fb02 f203 	mul.w	r2, r2, r3
 8006e90:	f641 5388 	movw	r3, #7560	; 0x1d88
 8006e94:	4413      	add	r3, r2
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	441a      	add	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]

            /* Return.  */
            return (NX_SUCCESS);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e007      	b.n	8006eb2 <_nx_dhcp_interface_record_find+0x74>
            continue;
 8006ea2:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0cf      	beq.n	8006e50 <_nx_dhcp_interface_record_find+0x12>
        }
    }

    /* No matching record found.  */
    return (NX_DHCP_INTERFACE_NOT_ENABLED);
 8006eb0:	23a4      	movs	r3, #164	; 0xa4
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eca:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006ecc:	4908      	ldr	r1, [pc, #32]	; (8006ef0 <nx_eth_phy_init+0x30>)
 8006ece:	4809      	ldr	r0, [pc, #36]	; (8006ef4 <nx_eth_phy_init+0x34>)
 8006ed0:	f7fa f977 	bl	80011c2 <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8006ed4:	4807      	ldr	r0, [pc, #28]	; (8006ef4 <nx_eth_phy_init+0x34>)
 8006ed6:	f7fa f9a6 	bl	8001226 <LAN8742_Init>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	607b      	str	r3, [r7, #4]
    {
      LAN8742_StartAutoNego(&LAN8742);
    }
#endif

    return ret;
 8006ee4:	687b      	ldr	r3, [r7, #4]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	24000014 	.word	0x24000014
 8006ef4:	240020c8 	.word	0x240020c8

08006ef8 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8006efe:	4804      	ldr	r0, [pc, #16]	; (8006f10 <nx_eth_phy_get_link_state+0x18>)
 8006f00:	f7fa fa39 	bl	8001376 <LAN8742_GetLinkState>
 8006f04:	6078      	str	r0, [r7, #4]

    return linkstate;
 8006f06:	687b      	ldr	r3, [r7, #4]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	240020c8 	.word	0x240020c8

08006f14 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8006f18:	4802      	ldr	r0, [pc, #8]	; (8006f24 <lan8742_io_init+0x10>)
 8006f1a:	f7fb fcc3 	bl	80028a4 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	24002174 	.word	0x24002174

08006f28 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	68f9      	ldr	r1, [r7, #12]
 8006f4a:	4807      	ldr	r0, [pc, #28]	; (8006f68 <lan8742_io_read_reg+0x30>)
 8006f4c:	f7fb f9fc 	bl	8002348 <HAL_ETH_ReadPHYRegister>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8006f56:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5a:	e000      	b.n	8006f5e <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	24002174 	.word	0x24002174

08006f6c <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	68f9      	ldr	r1, [r7, #12]
 8006f7e:	4807      	ldr	r0, [pc, #28]	; (8006f9c <lan8742_io_write_reg+0x30>)
 8006f80:	f7fb fa36 	bl	80023f0 <HAL_ETH_WritePHYRegister>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8006f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8e:	e000      	b.n	8006f92 <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	24002174 	.word	0x24002174

08006fa0 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006fa4:	f7fa fabe 	bl	8001524 <HAL_GetTick>
 8006fa8:	4603      	mov	r3, r0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b16      	cmp	r3, #22
 8006fc4:	d85c      	bhi.n	8007080 <nx_stm32_eth_driver+0xd0>
 8006fc6:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <nx_stm32_eth_driver+0x1c>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08007049 	.word	0x08007049
 8006fd0:	08007031 	.word	0x08007031
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08007049 	.word	0x08007049
 8006fe0:	08007049 	.word	0x08007049
 8006fe4:	08007049 	.word	0x08007049
 8006fe8:	08007049 	.word	0x08007049
 8006fec:	08007051 	.word	0x08007051
 8006ff0:	08007059 	.word	0x08007059
 8006ff4:	08007061 	.word	0x08007061
 8006ff8:	08007081 	.word	0x08007081
 8006ffc:	08007081 	.word	0x08007081
 8007000:	08007081 	.word	0x08007081
 8007004:	08007081 	.word	0x08007081
 8007008:	08007081 	.word	0x08007081
 800700c:	08007081 	.word	0x08007081
 8007010:	08007081 	.word	0x08007081
 8007014:	08007069 	.word	0x08007069
 8007018:	08007029 	.word	0x08007029
 800701c:	08007081 	.word	0x08007081
 8007020:	08007071 	.word	0x08007071
 8007024:	08007079 	.word	0x08007079
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f835 	bl	8007098 <_nx_driver_interface_attach>
    break;
 800702e:	e02e      	b.n	800708e <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f849 	bl	80070c8 <_nx_driver_initialize>
      break;
 8007036:	e02a      	b.n	800708e <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f8a7 	bl	800718c <_nx_driver_enable>
      break;
 800703e:	e026      	b.n	800708e <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f8d5 	bl	80071f0 <_nx_driver_disable>
      break;
 8007046:	e022      	b.n	800708e <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f8fb 	bl	8007244 <_nx_driver_packet_send>
      break;
 800704e:	e01e      	b.n	800708e <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f9b9 	bl	80073c8 <_nx_driver_multicast_join>
      break;
 8007056:	e01a      	b.n	800708e <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f9cb 	bl	80073f4 <_nx_driver_multicast_leave>
      break;
 800705e:	e016      	b.n	800708e <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f9dd 	bl	8007420 <_nx_driver_get_status>
      break;
 8007066:	e012      	b.n	800708e <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa17 	bl	800749c <_nx_driver_deferred_processing>

      break;
 800706e:	e00e      	b.n	800708e <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f9eb 	bl	800744c <_nx_driver_capability_get>
      break;
 8007076:	e00a      	b.n	800708e <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f9f9 	bl	8007470 <_nx_driver_capability_set>
      break;
 800707e:	e006      	b.n	800708e <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2244      	movs	r2, #68	; 0x44
 8007084:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	225a      	movs	r2, #90	; 0x5a
 800708a:	605a      	str	r2, [r3, #4]
  }
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop

08007098 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4a07      	ldr	r2, [pc, #28]	; (80070c4 <_nx_driver_interface_attach+0x2c>)
 80070a6:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	605a      	str	r2, [r3, #4]
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	240020e8 	.word	0x240020e8

080070c8 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  NX_INTERFACE    *interface_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	617b      	str	r3, [r7, #20]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	613b      	str	r3, [r7, #16]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 80070dc:	4b29      	ldr	r3, [pc, #164]	; (8007184 <_nx_driver_initialize+0xbc>)
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 80070e2:	4b28      	ldr	r3, [pc, #160]	; (8007184 <_nx_driver_initialize+0xbc>)
 80070e4:	2201      	movs	r2, #1
 80070e6:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80070ee:	4a25      	ldr	r2, [pc, #148]	; (8007184 <_nx_driver_initialize+0xbc>)
 80070f0:	6093      	str	r3, [r2, #8]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 80070f2:	4b24      	ldr	r3, [pc, #144]	; (8007184 <_nx_driver_initialize+0xbc>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	611a      	str	r2, [r3, #16]
  nx_driver_information.nx_driver_transmit_queue_head =      NX_NULL;
  nx_driver_information.nx_driver_transmit_queue_tail =      NX_NULL;
#endif /* NX_DRIVER_INTERNAL_TRANSMIT_QUEUE */

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fa65 	bl	80075c8 <_nx_driver_hardware_initialize>
 80070fe:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d136      	bne.n	8007174 <_nx_driver_initialize+0xac>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	4a1e      	ldr	r2, [pc, #120]	; (8007184 <_nx_driver_initialize+0xbc>)
 800710c:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 8007116:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <_nx_driver_initialize+0xc0>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	4a1a      	ldr	r2, [pc, #104]	; (8007188 <_nx_driver_initialize+0xc0>)
 8007120:	6852      	ldr	r2, [r2, #4]
 8007122:	3201      	adds	r2, #1
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	4313      	orrs	r3, r2
 8007128:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 800712e:	4b16      	ldr	r3, [pc, #88]	; (8007188 <_nx_driver_initialize+0xc0>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	3302      	adds	r3, #2
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	061a      	lsls	r2, r3, #24
 8007138:	4b13      	ldr	r3, [pc, #76]	; (8007188 <_nx_driver_initialize+0xc0>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	3303      	adds	r3, #3
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8007144:	4b10      	ldr	r3, [pc, #64]	; (8007188 <_nx_driver_initialize+0xc0>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	3304      	adds	r3, #4
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 800714e:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8007150:	4a0d      	ldr	r2, [pc, #52]	; (8007188 <_nx_driver_initialize+0xc0>)
 8007152:	6852      	ldr	r2, [r2, #4]
 8007154:	3205      	adds	r2, #5
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 800715a:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2201      	movs	r2, #1
 8007164:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 8007166:	4b07      	ldr	r3, [pc, #28]	; (8007184 <_nx_driver_initialize+0xbc>)
 8007168:	2203      	movs	r2, #3
 800716a:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 8007172:	e002      	b.n	800717a <_nx_driver_initialize+0xb2>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	225a      	movs	r2, #90	; 0x5a
 8007178:	605a      	str	r2, [r3, #4]
}
 800717a:	bf00      	nop
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	240020e8 	.word	0x240020e8
 8007188:	24002174 	.word	0x24002174

0800718c <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	60fb      	str	r3, [r7, #12]

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 800719a:	4b14      	ldr	r3, [pc, #80]	; (80071ec <_nx_driver_enable+0x60>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d803      	bhi.n	80071aa <_nx_driver_enable+0x1e>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	225a      	movs	r2, #90	; 0x5a
 80071a6:	605a      	str	r2, [r3, #4]
    return;
 80071a8:	e01c      	b.n	80071e4 <_nx_driver_enable+0x58>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 80071aa:	4b10      	ldr	r3, [pc, #64]	; (80071ec <_nx_driver_enable+0x60>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d903      	bls.n	80071ba <_nx_driver_enable+0x2e>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2215      	movs	r2, #21
 80071b6:	605a      	str	r2, [r3, #4]
    return;
 80071b8:	e014      	b.n	80071e4 <_nx_driver_enable+0x58>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fb7e 	bl	80078bc <_nx_driver_hardware_enable>
 80071c0:	60b8      	str	r0, [r7, #8]

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <_nx_driver_enable+0x52>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 80071c8:	4b08      	ldr	r3, [pc, #32]	; (80071ec <_nx_driver_enable+0x60>)
 80071ca:	2204      	movs	r2, #4
 80071cc:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 80071dc:	e002      	b.n	80071e4 <_nx_driver_enable+0x58>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	225a      	movs	r2, #90	; 0x5a
 80071e2:	605a      	str	r2, [r3, #4]
  }
}
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	240020e8 	.word	0x240020e8

080071f0 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <_nx_driver_disable+0x50>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b04      	cmp	r3, #4
 8007204:	d003      	beq.n	800720e <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	225a      	movs	r2, #90	; 0x5a
 800720a:	605a      	str	r2, [r3, #4]
    return;
 800720c:	e014      	b.n	8007238 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fb62 	bl	80078d8 <_nx_driver_hardware_disable>
 8007214:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 8007224:	4b06      	ldr	r3, [pc, #24]	; (8007240 <_nx_driver_disable+0x50>)
 8007226:	2203      	movs	r2, #3
 8007228:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	605a      	str	r2, [r3, #4]
 8007230:	e002      	b.n	8007238 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	225a      	movs	r2, #90	; 0x5a
 8007236:	605a      	str	r2, [r3, #4]
  }
}
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	240020e8 	.word	0x240020e8

08007244 <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 8007252:	4b5c      	ldr	r3, [pc, #368]	; (80073c4 <_nx_driver_packet_send+0x180>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2b04      	cmp	r3, #4
 8007258:	d008      	beq.n	800726c <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	225a      	movs	r2, #90	; 0x5a
 800725e:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3310      	adds	r3, #16
 8007264:	4618      	mov	r0, r3
 8007266:	f009 ff35 	bl	80110d4 <_nxe_packet_transmit_release>
    return;
 800726a:	e0a7      	b.n	80073bc <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 8007276:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007278:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 800727a:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	320e      	adds	r2, #14
 8007284:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	3b02      	subs	r3, #2
 800728c:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	3304      	adds	r3, #4
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	68d2      	ldr	r2, [r2, #12]
 800729e:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 80072a6:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80072ae:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	3308      	adds	r3, #8
 80072b4:	430a      	orrs	r2, r1
 80072b6:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f8d3 272c 	ldr.w	r2, [r3, #1836]	; 0x72c
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	330c      	adds	r3, #12
 80072c2:	0412      	lsls	r2, r2, #16
 80072c4:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b05      	cmp	r3, #5
 80072cc:	d003      	beq.n	80072d6 <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	d10a      	bne.n	80072ec <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	330c      	adds	r3, #12
 80072da:	6819      	ldr	r1, [r3, #0]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f103 020c 	add.w	r2, r3, #12
 80072e2:	f640 0306 	movw	r3, #2054	; 0x806
 80072e6:	430b      	orrs	r3, r1
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	e016      	b.n	800731a <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b07      	cmp	r3, #7
 80072f2:	d10a      	bne.n	800730a <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	330c      	adds	r3, #12
 80072f8:	6819      	ldr	r1, [r3, #0]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f103 020c 	add.w	r2, r3, #12
 8007300:	f248 0335 	movw	r3, #32821	; 0x8035
 8007304:	430b      	orrs	r3, r1
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	e007      	b.n	800731a <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	330c      	adds	r3, #12
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	330c      	adds	r3, #12
 8007314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007318:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	ba1a      	rev	r2, r3
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3304      	adds	r3, #4
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3304      	adds	r3, #4
 800732e:	ba12      	rev	r2, r2
 8007330:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	3308      	adds	r3, #8
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3308      	adds	r3, #8
 800733c:	ba12      	rev	r2, r2
 800733e:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	330c      	adds	r3, #12
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	330c      	adds	r3, #12
 800734a:	ba12      	rev	r2, r2
 800734c:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8007356:	4293      	cmp	r3, r2
 8007358:	d912      	bls.n	8007380 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	320e      	adds	r2, #14
 8007362:	609a      	str	r2, [r3, #8]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	3a0e      	subs	r2, #14
 800736c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	225a      	movs	r2, #90	; 0x5a
 8007372:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8007374:	f107 0308 	add.w	r3, r7, #8
 8007378:	4618      	mov	r0, r3
 800737a:	f009 feab 	bl	80110d4 <_nxe_packet_transmit_release>
    return;
 800737e:	e01d      	b.n	80073bc <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fab6 	bl	80078f4 <_nx_driver_hardware_packet_send>
 8007388:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d012      	beq.n	80073b6 <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	320e      	adds	r2, #14
 8007398:	609a      	str	r2, [r3, #8]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	3a0e      	subs	r2, #14
 80073a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	225a      	movs	r2, #90	; 0x5a
 80073a8:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 80073aa:	f107 0308 	add.w	r3, r7, #8
 80073ae:	4618      	mov	r0, r3
 80073b0:	f009 fe90 	bl	80110d4 <_nxe_packet_transmit_release>
 80073b4:	e002      	b.n	80073bc <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	605a      	str	r2, [r3, #4]
  }
}
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	240020e8 	.word	0x240020e8

080073c8 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fb59 	bl	8007a88 <_nx_driver_hardware_multicast_join>
 80073d6:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	225a      	movs	r2, #90	; 0x5a
 80073e2:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80073e4:	e002      	b.n	80073ec <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	605a      	str	r2, [r3, #4]
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fb5f 	bl	8007ac0 <_nx_driver_hardware_multicast_leave>
 8007402:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	225a      	movs	r2, #90	; 0x5a
 800740e:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8007410:	e002      	b.n	8007418 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]
}
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fb69 	bl	8007b00 <_nx_driver_hardware_get_status>
 800742e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	225a      	movs	r2, #90	; 0x5a
 800743a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 800743c:	e002      	b.n	8007444 <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	605a      	str	r2, [r3, #4]
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800745c:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	605a      	str	r2, [r3, #4]
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fc59 	bl	8007d30 <_nx_driver_hardware_capability_set>
 800747e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	225a      	movs	r2, #90	; 0x5a
 800748a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 800748c:	e002      	b.n	8007494 <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	605a      	str	r2, [r3, #4]
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074a4:	f3ef 8310 	mrs	r3, PRIMASK
 80074a8:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 80074aa:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80074ac:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80074ae:	b672      	cpsid	i
#endif
    return(int_posture);
 80074b0:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 80074b2:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 80074b4:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <_nx_driver_deferred_processing+0x5c>)
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 80074ba:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <_nx_driver_deferred_processing+0x5c>)
 80074bc:	2200      	movs	r2, #0
 80074be:	611a      	str	r2, [r3, #16]
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f383 8810 	msr	PRIMASK, r3
}
 80074ca:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      _nx_driver_hardware_packet_transmitted(&eth_handle);
 80074d6:	4809      	ldr	r0, [pc, #36]	; (80074fc <_nx_driver_deferred_processing+0x60>)
 80074d8:	f000 fb1e 	bl	8007b18 <_nx_driver_hardware_packet_transmitted>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 80074e6:	f000 fb75 	bl	8007bd4 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	605a      	str	r2, [r3, #4]
}
 80074f0:	bf00      	nop
 80074f2:	3720      	adds	r7, #32
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	240020e8 	.word	0x240020e8
 80074fc:	24002174 	.word	0x24002174

08007500 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	4a2d      	ldr	r2, [pc, #180]	; (80075c4 <_nx_driver_transfer_to_netx+0xc4>)
 800750e:	68d2      	ldr	r2, [r2, #12]
 8007510:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	330c      	adds	r3, #12
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	330d      	adds	r3, #13
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 800752a:	4313      	orrs	r3, r2
 800752c:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 800752e:	89fb      	ldrh	r3, [r7, #14]
 8007530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007534:	d004      	beq.n	8007540 <_nx_driver_transfer_to_netx+0x40>
 8007536:	89fb      	ldrh	r3, [r7, #14]
 8007538:	f248 62dd 	movw	r2, #34525	; 0x86dd
 800753c:	4293      	cmp	r3, r2
 800753e:	d10f      	bne.n	8007560 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	320e      	adds	r2, #14
 8007548:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	3a0e      	subs	r2, #14
 8007552:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f003 f867 	bl	800a62c <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 800755e:	e02d      	b.n	80075bc <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 8007560:	89fb      	ldrh	r3, [r7, #14]
 8007562:	f640 0206 	movw	r2, #2054	; 0x806
 8007566:	4293      	cmp	r3, r2
 8007568:	d10f      	bne.n	800758a <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	320e      	adds	r2, #14
 8007572:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	3a0e      	subs	r2, #14
 800757c:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fdb3 	bl	80080ee <_nx_arp_packet_deferred_receive>
}
 8007588:	e018      	b.n	80075bc <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 800758a:	89fb      	ldrh	r3, [r7, #14]
 800758c:	f248 0235 	movw	r2, #32821	; 0x8035
 8007590:	4293      	cmp	r3, r2
 8007592:	d10f      	bne.n	80075b4 <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	320e      	adds	r2, #14
 800759c:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	3a0e      	subs	r2, #14
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f004 fd53 	bl	800c058 <_nx_rarp_packet_deferred_receive>
}
 80075b2:	e003      	b.n	80075bc <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 80075b4:	463b      	mov	r3, r7
 80075b6:	4618      	mov	r0, r3
 80075b8:	f009 fd54 	bl	8011064 <_nxe_packet_release>
}
 80075bc:	bf00      	nop
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	240020e8 	.word	0x240020e8

080075c8 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b0aa      	sub	sp, #168	; 0xa8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef  *DMARxDesc;
#else
  ETH_MACConfigTypeDef MACConf;
#endif
  INT PHYLinkState;
  UINT duplex, speed = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 80075dc:	4bb1      	ldr	r3, [pc, #708]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 80075de:	2200      	movs	r2, #0
 80075e0:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 80075e2:	4bb0      	ldr	r3, [pc, #704]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 80075e8:	4bae      	ldr	r3, [pc, #696]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 80075ee:	4bad      	ldr	r3, [pc, #692]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 80075f4:	4bab      	ldr	r3, [pc, #684]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <_nx_driver_hardware_initialize+0x38>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 80075fc:	235a      	movs	r3, #90	; 0x5a
 80075fe:	e14d      	b.n	800789c <_nx_driver_hardware_initialize+0x2d4>
  }

  nx_eth_init();
 8007600:	f7f9 f9d6 	bl	80009b0 <MX_ETH_Init>

#ifndef STM32_ETH_HAL_LEGACY
  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007604:	2301      	movs	r3, #1
 8007606:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007608:	2301      	movs	r3, #1
 800760a:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007610:	2300      	movs	r3, #0
 8007612:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007616:	2300      	movs	r3, #0
 8007618:	767b      	strb	r3, [r7, #25]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800761a:	2300      	movs	r3, #0
 800761c:	763b      	strb	r3, [r7, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800761e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800762a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800762e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007630:	2300      	movs	r3, #0
 8007632:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 8007636:	f44f 7306 	mov.w	r3, #536	; 0x218
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 800763c:	f107 030c 	add.w	r3, r7, #12
 8007640:	4619      	mov	r1, r3
 8007642:	4899      	ldr	r0, [pc, #612]	; (80078a8 <_nx_driver_hardware_initialize+0x2e0>)
 8007644:	f7fb f915 	bl	8002872 <HAL_ETH_SetDMAConfig>

  FilterConfig.PromiscuousMode = DISABLE;
 8007648:	4b98      	ldr	r3, [pc, #608]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
  FilterConfig.HashUnicast = DISABLE;
 800764e:	4b97      	ldr	r3, [pc, #604]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 8007650:	2200      	movs	r2, #0
 8007652:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 8007654:	4b95      	ldr	r3, [pc, #596]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 8007656:	2200      	movs	r2, #0
 8007658:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 800765a:	4b94      	ldr	r3, [pc, #592]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 800765c:	2200      	movs	r2, #0
 800765e:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 8007660:	4b92      	ldr	r3, [pc, #584]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 8007662:	2200      	movs	r2, #0
 8007664:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 8007666:	4b91      	ldr	r3, [pc, #580]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 8007668:	2201      	movs	r2, #1
 800766a:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 800766c:	4b8f      	ldr	r3, [pc, #572]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 800766e:	2200      	movs	r2, #0
 8007670:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 8007672:	4b8e      	ldr	r3, [pc, #568]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 8007674:	2200      	movs	r2, #0
 8007676:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 8007678:	4b8c      	ldr	r3, [pc, #560]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 800767a:	2200      	movs	r2, #0
 800767c:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 800767e:	4b8b      	ldr	r3, [pc, #556]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 8007680:	2200      	movs	r2, #0
 8007682:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 8007684:	4b89      	ldr	r3, [pc, #548]	; (80078ac <_nx_driver_hardware_initialize+0x2e4>)
 8007686:	2200      	movs	r2, #0
 8007688:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 800768a:	2234      	movs	r2, #52	; 0x34
 800768c:	2100      	movs	r1, #0
 800768e:	4888      	ldr	r0, [pc, #544]	; (80078b0 <_nx_driver_hardware_initialize+0x2e8>)
 8007690:	f00d ffbc 	bl	801560c <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 8007694:	4b86      	ldr	r3, [pc, #536]	; (80078b0 <_nx_driver_hardware_initialize+0x2e8>)
 8007696:	2201      	movs	r2, #1
 8007698:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 800769a:	4b85      	ldr	r3, [pc, #532]	; (80078b0 <_nx_driver_hardware_initialize+0x2e8>)
 800769c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80076a0:	611a      	str	r2, [r3, #16]
#endif

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 80076a2:	f7ff fc0d 	bl	8006ec0 <nx_eth_phy_init>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <_nx_driver_hardware_initialize+0xe8>
  {
    return(NX_DRIVER_ERROR);
 80076ac:	235a      	movs	r3, #90	; 0x5a
 80076ae:	e0f5      	b.n	800789c <_nx_driver_hardware_initialize+0x2d4>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 80076b0:	f7ff fc22 	bl	8006ef8 <nx_eth_phy_get_link_state>
 80076b4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 80076b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076bc:	2b01      	cmp	r3, #1
 80076be:	dc09      	bgt.n	80076d4 <_nx_driver_hardware_initialize+0x10c>
  {

    while((PHYLinkState = nx_eth_phy_get_link_state())<= ETH_PHY_STATUS_LINK_DOWN);
 80076c0:	bf00      	nop
 80076c2:	f7ff fc19 	bl	8006ef8 <nx_eth_phy_get_link_state>
 80076c6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 80076ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	ddf7      	ble.n	80076c2 <_nx_driver_hardware_initialize+0xfa>
 80076d2:	e04a      	b.n	800776a <_nx_driver_hardware_initialize+0x1a2>
 80076d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076d8:	3b02      	subs	r3, #2
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d82a      	bhi.n	8007734 <_nx_driver_hardware_initialize+0x16c>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <_nx_driver_hardware_initialize+0x11c>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	08007707 	.word	0x08007707
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007727 	.word	0x08007727
  else
  {
    switch (PHYLinkState)
    {
    case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80076f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 80076fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 8007704:	e01f      	b.n	8007746 <_nx_driver_hardware_initialize+0x17e>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007706:	2300      	movs	r3, #0
 8007708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 800770c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 8007714:	e017      	b.n	8007746 <_nx_driver_hardware_initialize+0x17e>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800771a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_10M;
 800771e:	2300      	movs	r3, #0
 8007720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 8007724:	e00f      	b.n	8007746 <_nx_driver_hardware_initialize+0x17e>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007726:	2300      	movs	r3, #0
 8007728:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_10M;
 800772c:	2300      	movs	r3, #0
 800772e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 8007732:	e008      	b.n	8007746 <_nx_driver_hardware_initialize+0x17e>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8007734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007738:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 800773c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 8007744:	bf00      	nop
    eth_handle.Init.Speed = speed;
    eth_handle.Init.DuplexMode = duplex;
    HAL_ETH_ConfigMAC(&eth_handle, NULL);
#else
    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 8007746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800774a:	4619      	mov	r1, r3
 800774c:	4856      	ldr	r0, [pc, #344]	; (80078a8 <_nx_driver_hardware_initialize+0x2e0>)
 800774e:	f7fa fea3 	bl	8002498 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007756:	64bb      	str	r3, [r7, #72]	; 0x48
    MACConf.Speed = speed;
 8007758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800775c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 800775e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007762:	4619      	mov	r1, r3
 8007764:	4850      	ldr	r0, [pc, #320]	; (80078a8 <_nx_driver_hardware_initialize+0x2e0>)
 8007766:	f7fb f86b 	bl	8002840 <HAL_ETH_SetMACConfig>
#endif
  }

  for(i = 0; i < NX_DRIVER_TX_DESCRIPTORS; i++)
 800776a:	2300      	movs	r3, #0
 800776c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007770:	e030      	b.n	80077d4 <_nx_driver_hardware_initialize+0x20c>
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            DMATxDesc -> Buffer2NextDescAddr = (ULONG) nx_driver_information.nx_driver_information_dma_tx_descriptors;
        }
        nx_driver_information.nx_driver_information_transmit_packets[i] = NX_NULL;
#else
    DMARxDscrTab[i].DESC0 = 0;
 8007772:	4950      	ldr	r1, [pc, #320]	; (80078b4 <_nx_driver_hardware_initialize+0x2ec>)
 8007774:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007778:	4613      	mov	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4413      	add	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	440b      	add	r3, r1
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
    DMARxDscrTab[i].DESC1 = 0;
 8007786:	494b      	ldr	r1, [pc, #300]	; (80078b4 <_nx_driver_hardware_initialize+0x2ec>)
 8007788:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800778c:	4613      	mov	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	440b      	add	r3, r1
 8007796:	3304      	adds	r3, #4
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
    DMATxDscrTab[i].DESC2 = (uint32_t)1<<31;
 800779c:	4946      	ldr	r1, [pc, #280]	; (80078b8 <_nx_driver_hardware_initialize+0x2f0>)
 800779e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80077a2:	4613      	mov	r3, r2
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	4413      	add	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	440b      	add	r3, r1
 80077ac:	3308      	adds	r3, #8
 80077ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077b2:	601a      	str	r2, [r3, #0]
    DMATxDscrTab[i].DESC3 = 0;
 80077b4:	4940      	ldr	r1, [pc, #256]	; (80078b8 <_nx_driver_hardware_initialize+0x2f0>)
 80077b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80077ba:	4613      	mov	r3, r2
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	4413      	add	r3, r2
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	440b      	add	r3, r1
 80077c4:	330c      	adds	r3, #12
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
  for(i = 0; i < NX_DRIVER_TX_DESCRIPTORS; i++)
 80077ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077ce:	3301      	adds	r3, #1
 80077d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d9ca      	bls.n	8007772 <_nx_driver_hardware_initialize+0x1aa>

    /* Initialize RX Descriptors list: Ring Mode  */
    DMARxDesc = nx_driver_information.nx_driver_information_dma_rx_descriptors;
#endif

  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS; i++)
 80077dc:	2300      	movs	r3, #0
 80077de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077e2:	e049      	b.n	8007878 <_nx_driver_hardware_initialize+0x2b0>
  {

    /* Allocate a packet for the receive buffers.  */
    if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 80077e4:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 80077e6:	6898      	ldr	r0, [r3, #8]
 80077e8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80077ec:	2300      	movs	r3, #0
 80077ee:	2200      	movs	r2, #0
 80077f0:	f009 fb28 	bl	8010e44 <_nxe_packet_allocate>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d137      	bne.n	800786a <_nx_driver_hardware_initialize+0x2a2>
                           NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
    {

      /* Adjust the packet.  */
      packet_ptr -> nx_packet_prepend_ptr += 2;
 80077fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007804:	3202      	adds	r2, #2
 8007806:	609a      	str	r2, [r3, #8]
#ifdef STM32_ETH_HAL_LEGACY
      DMARxDesc[i].Buffer1Addr = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
      DMARxDesc[i].ControlBufferSize = ETH_DMARXDESC_RCH | (packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#else
      DMARxDscrTab[i].DESC0 = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
 8007808:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	4618      	mov	r0, r3
 8007810:	4928      	ldr	r1, [pc, #160]	; (80078b4 <_nx_driver_hardware_initialize+0x2ec>)
 8007812:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	440b      	add	r3, r1
 8007820:	6018      	str	r0, [r3, #0]
      DMARxDscrTab[i].BackupAddr0 = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
 8007822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4618      	mov	r0, r3
 800782a:	4922      	ldr	r1, [pc, #136]	; (80078b4 <_nx_driver_hardware_initialize+0x2ec>)
 800782c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007830:	4613      	mov	r3, r2
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	4413      	add	r3, r2
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	440b      	add	r3, r1
 800783a:	3310      	adds	r3, #16
 800783c:	6018      	str	r0, [r3, #0]
#endif

      /* Remember the receive packet pointer.  */
      nx_driver_information.nx_driver_information_receive_packets[i] =  packet_ptr;
 800783e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007842:	4918      	ldr	r1, [pc, #96]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 8007844:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007848:	330c      	adds	r3, #12
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	440b      	add	r3, r1
 800784e:	605a      	str	r2, [r3, #4]

#ifdef STM32_ETH_HAL_LEGACY
      DMARxDesc[i].Status = ETH_DMARXDESC_OWN;
#else
      DMARxDscrTab[i].DESC3 = ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V|ETH_DMARXNDESCRF_IOC;
 8007850:	4918      	ldr	r1, [pc, #96]	; (80078b4 <_nx_driver_hardware_initialize+0x2ec>)
 8007852:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007856:	4613      	mov	r3, r2
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	4413      	add	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	440b      	add	r3, r1
 8007860:	330c      	adds	r3, #12
 8007862:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e001      	b.n	800786e <_nx_driver_hardware_initialize+0x2a6>

    }
    else
    {
      /* Cannot allocate packets from the packet pool. */
      return(NX_DRIVER_ERROR);
 800786a:	235a      	movs	r3, #90	; 0x5a
 800786c:	e016      	b.n	800789c <_nx_driver_hardware_initialize+0x2d4>
  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS; i++)
 800786e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007872:	3301      	adds	r3, #1
 8007874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007878:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800787c:	2b03      	cmp	r3, #3
 800787e:	d9b1      	bls.n	80077e4 <_nx_driver_hardware_initialize+0x21c>
#endif

  }

  /* Save the size of one rx buffer.  */
  nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start;
 8007880:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	461a      	mov	r2, r3
 8007890:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 8007892:	645a      	str	r2, [r3, #68]	; 0x44

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 8007894:	4b03      	ldr	r3, [pc, #12]	; (80078a4 <_nx_driver_hardware_initialize+0x2dc>)
 8007896:	2200      	movs	r2, #0
 8007898:	649a      	str	r2, [r3, #72]	; 0x48
  /* Set Receive Descriptor List Address Register */
  ETH -> DMARDLAR = (ULONG) nx_driver_information.nx_driver_information_dma_rx_descriptors;
#endif

  /* Return success!  */
  return(NX_SUCCESS);
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	37a8      	adds	r7, #168	; 0xa8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	240020e8 	.word	0x240020e8
 80078a8:	24002174 	.word	0x24002174
 80078ac:	240022bc 	.word	0x240022bc
 80078b0:	24002288 	.word	0x24002288
 80078b4:	30000000 	.word	0x30000000
 80078b8:	30000060 	.word	0x30000060

080078bc <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Call STM32 library to start Ethernet operation.  */
#ifdef STM32_ETH_HAL_LEGACY
  HAL_ETH_Start(&eth_handle);
  __HAL_ETH_DMA_ENABLE_IT((&eth_handle), ETH_DMA_IT_NIS | ETH_DMA_IT_R | ETH_DMA_IT_T);
#else
  HAL_ETH_Start_IT(&eth_handle);
 80078c4:	4803      	ldr	r0, [pc, #12]	; (80078d4 <_nx_driver_hardware_enable+0x18>)
 80078c6:	f7fa f8d0 	bl	8001a6a <HAL_ETH_Start_IT>
#endif

  /* Return success!  */
  return(NX_SUCCESS);
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	24002174 	.word	0x24002174

080078d8 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 80078e0:	4803      	ldr	r0, [pc, #12]	; (80078f0 <_nx_driver_hardware_disable+0x18>)
 80078e2:	f7fa f946 	bl	8001b72 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	24002174 	.word	0x24002174

080078f4 <_nx_driver_hardware_packet_send>:
}

#else

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b096      	sub	sp, #88	; 0x58
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	653b      	str	r3, [r7, #80]	; 0x50

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007900:	f107 030c 	add.w	r3, r7, #12
 8007904:	2230      	movs	r2, #48	; 0x30
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f00d fe7f 	bl	801560c <memset>


  int i = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	64fb      	str	r3, [r7, #76]	; 0x4c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	657b      	str	r3, [r7, #84]	; 0x54
 8007916:	e07f      	b.n	8007a18 <_nx_driver_hardware_packet_send+0x124>
  {
    if (i >= ETH_TX_DESC_CNT)
 8007918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791a:	2b03      	cmp	r3, #3
 800791c:	dd01      	ble.n	8007922 <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 800791e:	235a      	movs	r3, #90	; 0x5a
 8007920:	e0a7      	b.n	8007a72 <_nx_driver_hardware_packet_send+0x17e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 8007922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007924:	6899      	ldr	r1, [r3, #8]
 8007926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007928:	4613      	mov	r3, r2
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007934:	4413      	add	r3, r2
 8007936:	3b4c      	subs	r3, #76	; 0x4c
 8007938:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 800793a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	4619      	mov	r1, r3
 8007946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007948:	4613      	mov	r3, r2
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	4413      	add	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007954:	4413      	add	r3, r2
 8007956:	3b48      	subs	r3, #72	; 0x48
 8007958:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 800795a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	461a      	mov	r2, r3
 8007966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007968:	4413      	add	r3, r2
 800796a:	653b      	str	r3, [r7, #80]	; 0x50

    if(i>0)
 800796c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796e:	2b00      	cmp	r3, #0
 8007970:	dd12      	ble.n	8007998 <_nx_driver_hardware_packet_send+0xa4>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007974:	1e5a      	subs	r2, r3, #1
 8007976:	f107 000c 	add.w	r0, r7, #12
 800797a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800797c:	460b      	mov	r3, r1
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	440b      	add	r3, r1
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	18c1      	adds	r1, r0, r3
 8007986:	4613      	mov	r3, r2
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007992:	4413      	add	r3, r2
 8007994:	3b44      	subs	r3, #68	; 0x44
 8007996:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 8007998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <_nx_driver_hardware_packet_send+0xc2>
    {
      Txbuffer[i].next = NULL;
 80079a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079a2:	4613      	mov	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80079ae:	4413      	add	r3, r2
 80079b0:	3b44      	subs	r3, #68	; 0x44
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80079b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b8:	3301      	adds	r3, #1
 80079ba:	64fb      	str	r3, [r7, #76]	; 0x4c
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
 80079bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c2:	6959      	ldr	r1, [r3, #20]
 80079c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	1acb      	subs	r3, r1, r3
 80079ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80079cc:	647b      	str	r3, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 80079ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dd1d      	ble.n	8007a10 <_nx_driver_hardware_packet_send+0x11c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80079d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d6:	f003 021f 	and.w	r2, r3, #31
 80079da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079dc:	4413      	add	r3, r2
 80079de:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80079e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 80079e4:	f3bf 8f4f 	dsb	sy
}
 80079e8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80079ea:	4a24      	ldr	r2, [pc, #144]	; (8007a7c <_nx_driver_hardware_packet_send+0x188>)
 80079ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ee:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80079f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f4:	3320      	adds	r3, #32
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80079f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fa:	3b20      	subs	r3, #32
 80079fc:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 80079fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	dcf2      	bgt.n	80079ea <_nx_driver_hardware_packet_send+0xf6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007a04:	f3bf 8f4f 	dsb	sy
}
 8007a08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a0a:	f3bf 8f6f 	isb	sy
}
 8007a0e:	bf00      	nop
}
 8007a10:	bf00      	nop
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8007a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	657b      	str	r3, [r7, #84]	; 0x54
 8007a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f47f af7c 	bne.w	8007918 <_nx_driver_hardware_packet_send+0x24>
#endif
  }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	f403 7315 	and.w	r3, r3, #596	; 0x254
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <_nx_driver_hardware_packet_send+0x142>
                                                           NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                               NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
  {
    TxPacketCfg.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007a2c:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <_nx_driver_hardware_packet_send+0x18c>)
 8007a2e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007a32:	615a      	str	r2, [r3, #20]
 8007a34:	e009      	b.n	8007a4a <_nx_driver_hardware_packet_send+0x156>
  }
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <_nx_driver_hardware_packet_send+0x156>
  {

    TxPacketCfg.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_INSERT;
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <_nx_driver_hardware_packet_send+0x18c>)
 8007a44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007a48:	615a      	str	r2, [r3, #20]
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_DISABLE;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 8007a4a:	4a0d      	ldr	r2, [pc, #52]	; (8007a80 <_nx_driver_hardware_packet_send+0x18c>)
 8007a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4e:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 8007a50:	4a0b      	ldr	r2, [pc, #44]	; (8007a80 <_nx_driver_hardware_packet_send+0x18c>)
 8007a52:	f107 030c 	add.w	r3, r7, #12
 8007a56:	6093      	str	r3, [r2, #8]

  /* Save the packet pointer to release.  */
  eth_handle.TxDescList.CurrentPacketAddress = (uint32_t *)packet_ptr;
 8007a58:	4a0a      	ldr	r2, [pc, #40]	; (8007a84 <_nx_driver_hardware_packet_send+0x190>)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	63d3      	str	r3, [r2, #60]	; 0x3c

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 8007a5e:	4908      	ldr	r1, [pc, #32]	; (8007a80 <_nx_driver_hardware_packet_send+0x18c>)
 8007a60:	4808      	ldr	r0, [pc, #32]	; (8007a84 <_nx_driver_hardware_packet_send+0x190>)
 8007a62:	f7fa f8d6 	bl	8001c12 <HAL_ETH_Transmit_IT>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <_nx_driver_hardware_packet_send+0x17c>
  {
    return(NX_DRIVER_ERROR);
 8007a6c:	235a      	movs	r3, #90	; 0x5a
 8007a6e:	e000      	b.n	8007a72 <_nx_driver_hardware_packet_send+0x17e>
  }

  return(NX_SUCCESS);
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3758      	adds	r7, #88	; 0x58
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	e000ed00 	.word	0xe000ed00
 8007a80:	24002288 	.word	0x24002288
 8007a84:	24002174 	.word	0x24002174

08007a88 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 8007a90:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <_nx_driver_hardware_multicast_join+0x2c>)
 8007a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a94:	3301      	adds	r3, #1
 8007a96:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <_nx_driver_hardware_multicast_join+0x2c>)
 8007a98:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
#ifdef STM32_ETH_HAL_LEGACY
  ETH->MACFFR |= ETH_MACFFR_PAM;
#else
  FilterConfig.PassAllMulticast = ENABLE;
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <_nx_driver_hardware_multicast_join+0x30>)
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8007aa0:	4905      	ldr	r1, [pc, #20]	; (8007ab8 <_nx_driver_hardware_multicast_join+0x30>)
 8007aa2:	4806      	ldr	r0, [pc, #24]	; (8007abc <_nx_driver_hardware_multicast_join+0x34>)
 8007aa4:	f7fa ff56 	bl	8002954 <HAL_ETH_SetMACFilterConfig>
#endif

  /* Return success.  */
  return(NX_SUCCESS);
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	240020e8 	.word	0x240020e8
 8007ab8:	240022bc 	.word	0x240022bc
 8007abc:	24002174 	.word	0x24002174

08007ac0 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <_nx_driver_hardware_multicast_leave+0x34>)
 8007aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007acc:	3b01      	subs	r3, #1
 8007ace:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <_nx_driver_hardware_multicast_leave+0x34>)
 8007ad0:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 8007ad2:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <_nx_driver_hardware_multicast_leave+0x34>)
 8007ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d106      	bne.n	8007ae8 <_nx_driver_hardware_multicast_leave+0x28>

    /* Disable multicast frame reception.  */
#ifdef STM32_ETH_HAL_LEGACY
    ETH->MACFFR &= ~ETH_MACFFR_PAM;
#else
    FilterConfig.PassAllMulticast = DISABLE;
 8007ada:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <_nx_driver_hardware_multicast_leave+0x38>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8007ae0:	4905      	ldr	r1, [pc, #20]	; (8007af8 <_nx_driver_hardware_multicast_leave+0x38>)
 8007ae2:	4806      	ldr	r0, [pc, #24]	; (8007afc <_nx_driver_hardware_multicast_leave+0x3c>)
 8007ae4:	f7fa ff36 	bl	8002954 <HAL_ETH_SetMACFilterConfig>
#endif
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	240020e8 	.word	0x240020e8
 8007af8:	240022bc 	.word	0x240022bc
 8007afc:	24002174 	.word	0x24002174

08007b00 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

  /* Return success.  */
  return(NX_SUCCESS);
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <_nx_driver_hardware_packet_transmitted>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_hardware_packet_transmitted(ETH_HandleTypeDef *heth)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
#ifdef STM32_ETH_HAL_LEGACY
  ETH_DMADescTypeDef *dmatxdescs = nx_driver_information.nx_driver_information_dma_tx_descriptors;
  ULONG numOfBuf =  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use;
  NX_PACKET **nx_packets = nx_driver_information.nx_driver_information_transmit_packets;
#else
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3318      	adds	r3, #24
 8007b24:	60fb      	str	r3, [r7, #12]
  ULONG numOfBuf =  dmatxdesclist->BuffersInUse;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	617b      	str	r3, [r7, #20]
#endif
  ULONG idx =       nx_driver_information.nx_driver_information_transmit_release_index;
 8007b2c:	4b27      	ldr	r3, [pc, #156]	; (8007bcc <_nx_driver_hardware_packet_transmitted+0xb4>)
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	613b      	str	r3, [r7, #16]
  /* Loop through buffers in use.  */
  while (numOfBuf--)
 8007b32:	e040      	b.n	8007bb6 <_nx_driver_hardware_packet_transmitted+0x9e>
  {
    /* If no packet, just examine the next packet.  */
#ifdef STM32_ETH_HAL_LEGACY
    if (nx_packets[idx] == NX_NULL)
#else
    if (dmatxdesclist->PacketAddress[idx] == NX_NULL)
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <_nx_driver_hardware_packet_transmitted+0x38>
#endif
    {

      /* No packet in use, skip to next.  */
      idx = (idx + 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	3301      	adds	r3, #1
 8007b48:	f003 0303 	and.w	r3, r3, #3
 8007b4c:	613b      	str	r3, [r7, #16]
      continue;
 8007b4e:	e032      	b.n	8007bb6 <_nx_driver_hardware_packet_transmitted+0x9e>

    /* Determine if the packet has been transmitted.  */
#ifdef STM32_ETH_HAL_LEGACY
    if ((dmatxdescs[idx].Status & ETH_DMATXDESC_OWN) == 0)
#else
    if ((DMATxDscrTab[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0)
 8007b50:	491f      	ldr	r1, [pc, #124]	; (8007bd0 <_nx_driver_hardware_packet_transmitted+0xb8>)
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	440b      	add	r3, r1
 8007b5e:	330c      	adds	r3, #12
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	db2d      	blt.n	8007bc2 <_nx_driver_hardware_packet_transmitted+0xaa>

      /* Yes, packet has been transmitted.  */
#ifdef STM32_ETH_HAL_LEGACY
      release_packet = nx_packets[idx];
#else
      release_packet = (NX_PACKET *)dmatxdesclist->PacketAddress[idx];
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	60bb      	str	r3, [r7, #8]
#endif

      /* Remove the Ethernet header and release the packet.  */
      NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	320e      	adds	r2, #14
 8007b7c:	609a      	str	r2, [r3, #8]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3a0e      	subs	r2, #14
 8007b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Release the packet.  */
      nx_packet_transmit_release(release_packet);
 8007b88:	f107 0308 	add.w	r3, r7, #8
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f009 faa1 	bl	80110d4 <_nxe_packet_transmit_release>

      /* Clear the entry in the in-use array.  */
#ifdef STM32_ETH_HAL_LEGACY
      nx_packets[idx] = NX_NULL;
#else
      dmatxdesclist->PacketAddress[idx] = NX_NULL;
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	3304      	adds	r3, #4
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	605a      	str	r2, [r3, #4]
#endif

      /* Update the transmit relesae index and number of buffers in use.  */
      idx = (idx + 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	613b      	str	r3, [r7, #16]
#ifdef STM32_ETH_HAL_LEGACY
      nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = numOfBuf;
#else
      dmatxdesclist->BuffersInUse = numOfBuf;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28
#endif
      nx_driver_information.nx_driver_information_transmit_release_index = idx;
 8007bb0:	4a06      	ldr	r2, [pc, #24]	; (8007bcc <_nx_driver_hardware_packet_transmitted+0xb4>)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	61d3      	str	r3, [r2, #28]
  while (numOfBuf--)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	1e5a      	subs	r2, r3, #1
 8007bba:	617a      	str	r2, [r7, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1b9      	bne.n	8007b34 <_nx_driver_hardware_packet_transmitted+0x1c>
    {
      /* Get out of the loop!  */
      break;
    }
  }
}
 8007bc0:	e000      	b.n	8007bc4 <_nx_driver_hardware_packet_transmitted+0xac>
      break;
 8007bc2:	bf00      	nop
}
 8007bc4:	bf00      	nop
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	240020e8 	.word	0x240020e8
 8007bd0:	30000060 	.word	0x30000060

08007bd4 <_nx_driver_hardware_packet_received>:
}

#else

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08a      	sub	sp, #40	; 0x28
 8007bd8:	af00      	add	r7, sp, #0

  NX_PACKET     *packet_ptr;
  NX_PACKET  *received_packet_ptr;
  INT            i;
  uint32_t framelength = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	603b      	str	r3, [r7, #0]
  static ETH_BufferTypeDef RxBuff[NX_DRIVER_RX_DESCRIPTORS];
  memset(RxBuff, 0 , NX_DRIVER_RX_DESCRIPTORS*sizeof(ETH_BufferTypeDef));
 8007bde:	2230      	movs	r2, #48	; 0x30
 8007be0:	2100      	movs	r1, #0
 8007be2:	484e      	ldr	r0, [pc, #312]	; (8007d1c <_nx_driver_hardware_packet_received+0x148>)
 8007be4:	f00d fd12 	bl	801560c <memset>
  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS -1; i++)
 8007be8:	2300      	movs	r3, #0
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
 8007bec:	e013      	b.n	8007c16 <_nx_driver_hardware_packet_received+0x42>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4a48      	ldr	r2, [pc, #288]	; (8007d1c <_nx_driver_hardware_packet_received+0x148>)
 8007bfc:	1899      	adds	r1, r3, r2
 8007bfe:	4847      	ldr	r0, [pc, #284]	; (8007d1c <_nx_driver_hardware_packet_received+0x148>)
 8007c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c02:	4613      	mov	r3, r2
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	4413      	add	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4403      	add	r3, r0
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	6019      	str	r1, [r3, #0]
  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS -1; i++)
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	3301      	adds	r3, #1
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	dde8      	ble.n	8007bee <_nx_driver_hardware_packet_received+0x1a>
  }

  while (HAL_ETH_GetRxDataBuffer(&eth_handle, RxBuff) == HAL_OK)
 8007c1c:	e071      	b.n	8007d02 <_nx_driver_hardware_packet_received+0x12e>
  {
    HAL_ETH_GetRxDataLength(&eth_handle, &framelength);
 8007c1e:	463b      	mov	r3, r7
 8007c20:	4619      	mov	r1, r3
 8007c22:	483f      	ldr	r0, [pc, #252]	; (8007d20 <_nx_driver_hardware_packet_received+0x14c>)
 8007c24:	f7fa f9c7 	bl	8001fb6 <HAL_ETH_GetRxDataLength>
    ETH_RxDescListTypeDef *dmarxdesclist = &eth_handle.RxDescList;
 8007c28:	4b3e      	ldr	r3, [pc, #248]	; (8007d24 <_nx_driver_hardware_packet_received+0x150>)
 8007c2a:	623b      	str	r3, [r7, #32]
    uint32_t FirstAppDesc = dmarxdesclist->FirstAppDesc;
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	61fb      	str	r3, [r7, #28]

    /* This driver assumes the received packet size is 1536 bytes */
    received_packet_ptr = nx_driver_information.nx_driver_information_receive_packets[FirstAppDesc];
 8007c32:	4a3d      	ldr	r2, [pc, #244]	; (8007d28 <_nx_driver_hardware_packet_received+0x154>)
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	330c      	adds	r3, #12
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	61bb      	str	r3, [r7, #24]
    received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + framelength;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	441a      	add	r2, r3
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	60da      	str	r2, [r3, #12]
    received_packet_ptr->nx_packet_length = framelength;
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	625a      	str	r2, [r3, #36]	; 0x24
    received_packet_ptr->nx_packet_next = NULL;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	2200      	movs	r2, #0
 8007c56:	605a      	str	r2, [r3, #4]
    if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8007c58:	4b33      	ldr	r3, [pc, #204]	; (8007d28 <_nx_driver_hardware_packet_received+0x154>)
 8007c5a:	6898      	ldr	r0, [r3, #8]
 8007c5c:	1d39      	adds	r1, r7, #4
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2200      	movs	r2, #0
 8007c62:	f009 f8ef 	bl	8010e44 <_nxe_packet_allocate>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d147      	bne.n	8007cfc <_nx_driver_hardware_packet_received+0x128>
                           NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
    {
      /* Adjust the packet.  */
      packet_ptr -> nx_packet_prepend_ptr += 2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3202      	adds	r2, #2
 8007c74:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
      SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691a      	ldr	r2, [r3, #16]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6959      	ldr	r1, [r3, #20]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	1acb      	subs	r3, r1, r3
 8007c84:	617a      	str	r2, [r7, #20]
 8007c86:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	dd1d      	ble.n	8007cca <_nx_driver_hardware_packet_received+0xf6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f003 021f 	and.w	r2, r3, #31
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4413      	add	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c9e:	f3bf 8f4f 	dsb	sy
}
 8007ca2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007ca4:	4a21      	ldr	r2, [pc, #132]	; (8007d2c <_nx_driver_hardware_packet_received+0x158>)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3320      	adds	r3, #32
 8007cb0:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3b20      	subs	r3, #32
 8007cb6:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dcf2      	bgt.n	8007ca4 <_nx_driver_hardware_packet_received+0xd0>
  __ASM volatile ("dsb 0xF":::"memory");
 8007cbe:	f3bf 8f4f 	dsb	sy
}
 8007cc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007cc4:	f3bf 8f6f 	isb	sy
}
 8007cc8:	bf00      	nop
}
 8007cca:	bf00      	nop
#endif
      HAL_ETH_DescAssignMemory(&eth_handle, FirstAppDesc, packet_ptr -> nx_packet_prepend_ptr, NULL);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	69f9      	ldr	r1, [r7, #28]
 8007cd4:	4812      	ldr	r0, [pc, #72]	; (8007d20 <_nx_driver_hardware_packet_received+0x14c>)
 8007cd6:	f7f9 fe87 	bl	80019e8 <HAL_ETH_DescAssignMemory>
      nx_driver_information.nx_driver_information_receive_packets[FirstAppDesc] = packet_ptr;
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	4912      	ldr	r1, [pc, #72]	; (8007d28 <_nx_driver_hardware_packet_received+0x154>)
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	605a      	str	r2, [r3, #4]

      /* Build Rx descriptor to be ready for next data reception */
      HAL_ETH_BuildRxDescriptors(&eth_handle);
 8007ce8:	480d      	ldr	r0, [pc, #52]	; (8007d20 <_nx_driver_hardware_packet_received+0x14c>)
 8007cea:	f7fa f997 	bl	800201c <HAL_ETH_BuildRxDescriptors>

      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 8007cee:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <_nx_driver_hardware_packet_received+0x154>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69b9      	ldr	r1, [r7, #24]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff fc03 	bl	8007500 <_nx_driver_transfer_to_netx>
 8007cfa:	e002      	b.n	8007d02 <_nx_driver_hardware_packet_received+0x12e>
    }
    else
    {
      HAL_ETH_BuildRxDescriptors(&eth_handle);
 8007cfc:	4808      	ldr	r0, [pc, #32]	; (8007d20 <_nx_driver_hardware_packet_received+0x14c>)
 8007cfe:	f7fa f98d 	bl	800201c <HAL_ETH_BuildRxDescriptors>
  while (HAL_ETH_GetRxDataBuffer(&eth_handle, RxBuff) == HAL_OK)
 8007d02:	4906      	ldr	r1, [pc, #24]	; (8007d1c <_nx_driver_hardware_packet_received+0x148>)
 8007d04:	4806      	ldr	r0, [pc, #24]	; (8007d20 <_nx_driver_hardware_packet_received+0x14c>)
 8007d06:	f7fa f8b8 	bl	8001e7a <HAL_ETH_GetRxDataBuffer>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d086      	beq.n	8007c1e <_nx_driver_hardware_packet_received+0x4a>
    }
  }
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	3728      	adds	r7, #40	; 0x28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	24002134 	.word	0x24002134
 8007d20:	24002174 	.word	0x24002174
 8007d24:	240021b8 	.word	0x240021b8
 8007d28:	240020e8 	.word	0x240020e8
 8007d2c:	e000ed00 	.word	0xe000ed00

08007d30 <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
	...

08007d48 <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8007d50:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <HAL_ETH_RxCpltCallback+0x34>)
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <HAL_ETH_RxCpltCallback+0x34>)
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f043 0301 	orr.w	r3, r3, #1
 8007d5e:	4a07      	ldr	r2, [pc, #28]	; (8007d7c <HAL_ETH_RxCpltCallback+0x34>)
 8007d60:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d104      	bne.n	8007d72 <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <HAL_ETH_RxCpltCallback+0x34>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 fdf5 	bl	800995c <_nx_ip_driver_deferred_processing>
  }
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	240020e8 	.word	0x240020e8

08007d80 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <HAL_ETH_TxCpltCallback+0x34>)
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 8007d8e:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <HAL_ETH_TxCpltCallback+0x34>)
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f043 0304 	orr.w	r3, r3, #4
 8007d96:	4a07      	ldr	r2, [pc, #28]	; (8007db4 <HAL_ETH_TxCpltCallback+0x34>)
 8007d98:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <HAL_ETH_TxCpltCallback+0x34>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 fdd9 	bl	800995c <_nx_ip_driver_deferred_processing>
  }
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	240020e8 	.word	0x240020e8

08007db8 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d050      	beq.n	8007e6c <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007dca:	f3ef 8310 	mrs	r3, PRIMASK
 8007dce:	613b      	str	r3, [r7, #16]
    return(posture);
 8007dd0:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007dd2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007dd4:	b672      	cpsid	i
    return(int_posture);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8007dd8:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d104      	bne.n	8007dee <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	e014      	b.n	8007e18 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d104      	bne.n	8007e04 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	6952      	ldr	r2, [r2, #20]
 8007e02:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	6992      	ldr	r2, [r2, #24]
 8007e0c:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	6952      	ldr	r2, [r2, #20]
 8007e16:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8007e24:	1e5a      	subs	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e30:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2200      	movs	r2, #0
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f383 8810 	msr	PRIMASK, r3
}
 8007e42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 8007e44:	e00f      	b.n	8007e66 <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2200      	movs	r2, #0
 8007e54:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 8007e60:	6978      	ldr	r0, [r7, #20]
 8007e62:	f004 f8b3 	bl	800bfcc <_nx_packet_transmit_release>
        while (next_packet_ptr)
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1ec      	bne.n	8007e46 <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3720      	adds	r7, #32
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	2100      	movs	r1, #0
 8007e88:	68b8      	ldr	r0, [r7, #8]
 8007e8a:	f00d fbbf 	bl	801560c <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2d      	ldr	r2, [pc, #180]	; (8007f4c <_nx_arp_enable+0xd4>)
 8007e96:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
 8007ea2:	e00a      	b.n	8007eba <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	3334      	adds	r3, #52	; 0x34
 8007eb2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d3ef      	bcc.n	8007ea4 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	e00a      	b.n	8007ee6 <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	3b34      	subs	r3, #52	; 0x34
 8007ede:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d3ef      	bcc.n	8007ed0 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2234      	movs	r2, #52	; 0x34
 8007ef4:	fb02 f303 	mul.w	r3, r2, r3
 8007ef8:	3b34      	subs	r3, #52	; 0x34
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	441a      	add	r2, r3
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <_nx_arp_enable+0xd8>)
 8007f26:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <_nx_arp_enable+0xdc>)
 8007f2e:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4a08      	ldr	r2, [pc, #32]	; (8007f58 <_nx_arp_enable+0xe0>)
 8007f36:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4a07      	ldr	r2, [pc, #28]	; (8007f5c <_nx_arp_enable+0xe4>)
 8007f3e:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8007f42:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3720      	adds	r7, #32
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	4ec4ec4f 	.word	0x4ec4ec4f
 8007f50:	08008739 	.word	0x08008739
 8007f54:	0800893b 	.word	0x0800893b
 8007f58:	080085f5 	.word	0x080085f5
 8007f5c:	08007f61 	.word	0x08007f61

08007f60 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08a      	sub	sp, #40	; 0x28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80b4 	beq.w	80080e0 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 8007f82:	6a39      	ldr	r1, [r7, #32]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff ff17 	bl	8007db8 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007f90:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007f92:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007f94:	b672      	cpsid	i
    return(int_posture);
 8007f96:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 8007f98:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d014      	beq.n	8007fcc <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	6a3a      	ldr	r2, [r7, #32]
 8007fc0:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6a3a      	ldr	r2, [r7, #32]
 8007fc8:	619a      	str	r2, [r3, #24]
 8007fca:	e00b      	b.n	8007fe4 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	6a3a      	ldr	r2, [r7, #32]
 8007fd6:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	6a3a      	ldr	r2, [r7, #32]
 8007fdc:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	6a3a      	ldr	r2, [r7, #32]
 8007fe2:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d141      	bne.n	800806e <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	6a3a      	ldr	r2, [r7, #32]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d104      	bne.n	8007ffe <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 8007ffc:	e009      	b.n	8008012 <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	6a3a      	ldr	r2, [r7, #32]
 8008004:	6912      	ldr	r2, [r2, #16]
 8008006:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	6a3a      	ldr	r2, [r7, #32]
 800800e:	68d2      	ldr	r2, [r2, #12]
 8008010:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10a      	bne.n	8008032 <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	6a3a      	ldr	r2, [r7, #32]
 8008020:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	6a3a      	ldr	r2, [r7, #32]
 8008026:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a3a      	ldr	r2, [r7, #32]
 800802c:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
 8008030:	e015      	b.n	800805e <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8d3 26cc 	ldr.w	r2, [r3, #1740]	; 0x6cc
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	6a3a      	ldr	r2, [r7, #32]
 8008052:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 800805a:	6a3a      	ldr	r2, [r7, #32]
 800805c:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800806c:	e02c      	b.n	80080c8 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008074:	6a3a      	ldr	r2, [r7, #32]
 8008076:	429a      	cmp	r2, r3
 8008078:	d01f      	beq.n	80080ba <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	6a3a      	ldr	r2, [r7, #32]
 8008080:	6912      	ldr	r2, [r2, #16]
 8008082:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	6a3a      	ldr	r2, [r7, #32]
 800808a:	68d2      	ldr	r2, [r2, #12]
 800808c:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	691a      	ldr	r2, [r3, #16]
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	6a3a      	ldr	r2, [r7, #32]
 80080a8:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a3a      	ldr	r2, [r7, #32]
 80080b6:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f383 8810 	msr	PRIMASK, r3
}
 80080d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 80080da:	2300      	movs	r3, #0
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
 80080de:	e001      	b.n	80080e4 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 80080e0:	2317      	movs	r3, #23
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3728      	adds	r7, #40	; 0x28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b088      	sub	sp, #32
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80080f8:	f3ef 8310 	mrs	r3, PRIMASK
 80080fc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80080fe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008100:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008102:	b672      	cpsid	i
    return(int_posture);
 8008104:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8008106:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d110      	bne.n	8008134 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f383 8810 	msr	PRIMASK, r3
}
 800812a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800812c:	6838      	ldr	r0, [r7, #0]
 800812e:	f003 fe95 	bl	800be5c <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008132:	e02f      	b.n	8008194 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d011      	beq.n	8008162 <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f383 8810 	msr	PRIMASK, r3
}
 8008160:	e018      	b.n	8008194 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2200      	movs	r2, #0
 8008176:	61da      	str	r2, [r3, #28]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f383 8810 	msr	PRIMASK, r3
}
 8008182:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800818a:	2200      	movs	r2, #0
 800818c:	2110      	movs	r1, #16
 800818e:	4618      	mov	r0, r3
 8008190:	f009 fce4 	bl	8011b5c <_tx_event_flags_set>
    }
}
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <_nx_arp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800819c:	b590      	push	{r4, r7, lr}
 800819e:	b097      	sub	sp, #92	; 0x5c
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 80081a6:	2300      	movs	r3, #0
 80081a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b1b      	cmp	r3, #27
 80081b2:	d80a      	bhi.n	80081ca <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 80081c2:	6838      	ldr	r0, [r7, #0]
 80081c4:	f003 fe4a 	bl	800be5c <_nx_packet_release>

        /* Return to caller.  */
        return;
 80081c8:	e20f      	b.n	80085ea <_nx_arp_packet_receive+0x44e>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80081d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d2:	3304      	adds	r3, #4
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d8:	3304      	adds	r3, #4
 80081da:	ba12      	rev	r2, r2
 80081dc:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80081de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e0:	3308      	adds	r3, #8
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e6:	3308      	adds	r3, #8
 80081e8:	ba12      	rev	r2, r2
 80081ea:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80081ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ee:	330c      	adds	r3, #12
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f4:	330c      	adds	r3, #12
 80081f6:	ba12      	rev	r2, r2
 80081f8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80081fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fc:	3310      	adds	r3, #16
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008202:	3310      	adds	r3, #16
 8008204:	ba12      	rev	r2, r2
 8008206:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8008208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820a:	3314      	adds	r3, #20
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008210:	3314      	adds	r3, #20
 8008212:	ba12      	rev	r2, r2
 8008214:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8008216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008218:	3318      	adds	r3, #24
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821e:	3318      	adds	r3, #24
 8008220:	ba12      	rev	r2, r2
 8008222:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 8008224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008226:	3304      	adds	r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 800822e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d00d      	beq.n	8008250 <_nx_arp_packet_receive+0xb4>
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	2b02      	cmp	r3, #2
 8008238:	d00a      	beq.n	8008250 <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8008248:	6838      	ldr	r0, [r7, #0]
 800824a:	f003 fe07 	bl	800be5c <_nx_packet_release>

        /* Return to caller.  */
        return;
 800824e:	e1cc      	b.n	80085ea <_nx_arp_packet_receive+0x44e>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 8008250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008252:	3308      	adds	r3, #8
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	0c1b      	lsrs	r3, r3, #16
 8008258:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 800825a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825c:	3308      	adds	r3, #8
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	041a      	lsls	r2, r3, #16
 8008262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008264:	330c      	adds	r3, #12
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	0c1b      	lsrs	r3, r3, #16
 800826a:	4313      	orrs	r3, r2
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 800826e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008270:	330c      	adds	r3, #12
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	041a      	lsls	r2, r3, #16
 8008276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008278:	3310      	adds	r3, #16
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	4313      	orrs	r3, r2
 8008280:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 8008282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828c:	2b00      	cmp	r3, #0
 800828e:	d104      	bne.n	800829a <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f203 721c 	addw	r2, r3, #1820	; 0x71c
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d12e      	bne.n	8008306 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d02a      	beq.n	8008306 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 80082b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d007      	beq.n	80082ca <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d122      	bne.n	8008306 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d11d      	bne.n	8008306 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d104      	bne.n	80082de <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 80082d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082da:	429a      	cmp	r2, r3
 80082dc:	d00f      	beq.n	80082fe <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	79db      	ldrb	r3, [r3, #7]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 80082fe:	6838      	ldr	r0, [r7, #0]
 8008300:	f003 fdac 	bl	800be5c <_nx_packet_release>

        return;
 8008304:	e171      	b.n	80085ea <_nx_arp_packet_receive+0x44e>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	2b00      	cmp	r3, #0
 800830a:	d040      	beq.n	800838e <_nx_arp_packet_receive+0x1f2>
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008312:	429a      	cmp	r2, r3
 8008314:	d13b      	bne.n	800838e <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800831e:	429a      	cmp	r2, r3
 8008320:	d105      	bne.n	800832e <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8008328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800832a:	429a      	cmp	r2, r3
 800832c:	d02b      	beq.n	8008386 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	220a      	movs	r2, #10
 800833e:	645a      	str	r2, [r3, #68]	; 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	461a      	mov	r2, r3
 8008346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f953 	bl	80085f4 <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	79db      	ldrb	r3, [r3, #7]
 800835e:	4619      	mov	r1, r3
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d006      	beq.n	8008386 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3

                return;
 8008384:	e131      	b.n	80085ea <_nx_arp_packet_receive+0x44e>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8008386:	6838      	ldr	r0, [r7, #0]
 8008388:	f003 fd68 	bl	800be5c <_nx_packet_release>

        return;
 800838c:	e12d      	b.n	80085ea <_nx_arp_packet_receive+0x44e>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 800838e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008390:	2b01      	cmp	r3, #1
 8008392:	f040 808f 	bne.w	80084b4 <_nx_arp_packet_receive+0x318>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839e:	429a      	cmp	r2, r3
 80083a0:	f040 8088 	bne.w	80084b4 <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 80083b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ba:	3304      	adds	r3, #4
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b8c      	ldr	r3, [pc, #560]	; (80085f0 <_nx_arp_packet_receive+0x454>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083c4:	3204      	adds	r2, #4
 80083c6:	f043 0302 	orr.w	r3, r3, #2
 80083ca:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 80083dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083de:	3308      	adds	r3, #8
 80083e0:	430a      	orrs	r2, r1
 80083e2:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 80083f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f6:	330c      	adds	r3, #12
 80083f8:	430a      	orrs	r2, r1
 80083fa:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	0419      	lsls	r1, r3, #16
 8008404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008406:	3310      	adds	r3, #16
 8008408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800840a:	430a      	orrs	r2, r1
 800840c:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 800840e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008410:	3314      	adds	r3, #20
 8008412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008414:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8008416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008418:	3318      	adds	r3, #24
 800841a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800841c:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800841e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008420:	3304      	adds	r3, #4
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008426:	3304      	adds	r3, #4
 8008428:	ba12      	rev	r2, r2
 800842a:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800842c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842e:	3308      	adds	r3, #8
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008434:	3308      	adds	r3, #8
 8008436:	ba12      	rev	r2, r2
 8008438:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800843a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843c:	330c      	adds	r3, #12
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008442:	330c      	adds	r3, #12
 8008444:	ba12      	rev	r2, r2
 8008446:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8008448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844a:	3310      	adds	r3, #16
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008450:	3310      	adds	r3, #16
 8008452:	ba12      	rev	r2, r2
 8008454:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8008456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008458:	3314      	adds	r3, #20
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845e:	3314      	adds	r3, #20
 8008460:	ba12      	rev	r2, r2
 8008462:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8008464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008466:	3318      	adds	r3, #24
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800846c:	3318      	adds	r3, #24
 800846e:	ba12      	rev	r2, r2
 8008470:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	221c      	movs	r2, #28
 8008476:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f103 021c 	add.w	r2, r3, #28
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8008488:	2306      	movs	r3, #6
 800848a:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8008494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008496:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849c:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a4:	f107 0208 	add.w	r2, r7, #8
 80084a8:	4610      	mov	r0, r2
 80084aa:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80084b2:	e00d      	b.n	80084d0 <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 80084b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d105      	bne.n	80084c6 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	671a      	str	r2, [r3, #112]	; 0x70
 80084c4:	e004      	b.n	80084d0 <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	0a1a      	lsrs	r2, r3, #8
 80084d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d6:	4413      	add	r3, r2
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d03c      	beq.n	8008562 <_nx_arp_packet_receive+0x3c6>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	0a1a      	lsrs	r2, r3, #8
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	4413      	add	r3, r2
 80084f0:	f003 031f 	and.w	r3, r3, #31
 80084f4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084fa:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8008506:	e02c      	b.n	8008562 <_nx_arp_packet_receive+0x3c6>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8008508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850e:	429a      	cmp	r2, r3
 8008510:	d117      	bne.n	8008542 <_nx_arp_packet_receive+0x3a6>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8008512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d127      	bne.n	800856a <_nx_arp_packet_receive+0x3ce>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 800851a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800851e:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8008520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008524:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8008526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008528:	2200      	movs	r2, #0
 800852a:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 800852c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852e:	2200      	movs	r2, #0
 8008530:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8008532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008536:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8008538:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa30 	bl	80089a0 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8008540:	e014      	b.n	800856c <_nx_arp_packet_receive+0x3d0>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8008542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800854c:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008558:	429a      	cmp	r2, r3
 800855a:	d102      	bne.n	8008562 <_nx_arp_packet_receive+0x3c6>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 800855c:	2300      	movs	r3, #0
 800855e:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8008560:	e004      	b.n	800856c <_nx_arp_packet_receive+0x3d0>
    while (arp_ptr)
 8008562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1cf      	bne.n	8008508 <_nx_arp_packet_receive+0x36c>
 8008568:	e000      	b.n	800856c <_nx_arp_packet_receive+0x3d0>
                break;
 800856a:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 800856c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <_nx_arp_packet_receive+0x3de>
    {
        _nx_packet_release(packet_ptr);
 8008574:	6838      	ldr	r0, [r7, #0]
 8008576:	f003 fc71 	bl	800be5c <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 800857a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857c:	2b00      	cmp	r3, #0
 800857e:	d134      	bne.n	80085ea <_nx_arp_packet_receive+0x44e>
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	2b00      	cmp	r3, #0
 8008584:	d031      	beq.n	80085ea <_nx_arp_packet_receive+0x44e>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	0a1a      	lsrs	r2, r3, #8
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	4413      	add	r3, r2
 800858e:	f003 031f 	and.w	r3, r3, #31
 8008592:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 800859a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800859c:	f502 72c9 	add.w	r2, r2, #402	; 0x192
 80085a0:	0092      	lsls	r2, r2, #2
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	440a      	add	r2, r1
 80085a6:	1d11      	adds	r1, r2, #4
 80085a8:	2200      	movs	r2, #0
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11a      	bne.n	80085ea <_nx_arp_packet_receive+0x44e>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b8:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 80085c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ca:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 80085cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 80085d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d6:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 80085d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085da:	2200      	movs	r2, #0
 80085dc:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 80085de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e0:	2200      	movs	r2, #0
 80085e2:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 80085e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085e8:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 80085ea:	3754      	adds	r7, #84	; 0x54
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd90      	pop	{r4, r7, pc}
 80085f0:	ffff0000 	.word	0xffff0000

080085f4 <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08e      	sub	sp, #56	; 0x38
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d104      	bne.n	8008610 <_nx_arp_packet_send+0x1c>
 8008606:	f04f 30ff 	mov.w	r0, #4294967295
 800860a:	f00b f871 	bl	80136f0 <_tx_thread_sleep>
 800860e:	e7fa      	b.n	8008606 <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8008616:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800861a:	2300      	movs	r3, #0
 800861c:	222c      	movs	r2, #44	; 0x2c
 800861e:	f002 ffc5 	bl	800b5ac <_nx_packet_allocate>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 8081 	bne.w	800872c <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	221c      	movs	r2, #28
 800863e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	3a1c      	subs	r2, #28
 8008648:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8008650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008652:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 8008656:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8008658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865a:	3304      	adds	r3, #4
 800865c:	4a35      	ldr	r2, [pc, #212]	; (8008734 <_nx_arp_packet_send+0x140>)
 800865e:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 800866c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866e:	3308      	adds	r3, #8
 8008670:	430a      	orrs	r2, r1
 8008672:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8008680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008682:	330c      	adds	r3, #12
 8008684:	430a      	orrs	r2, r1
 8008686:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	695a      	ldr	r2, [r3, #20]
 800868c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868e:	3310      	adds	r3, #16
 8008690:	0412      	lsls	r2, r2, #16
 8008692:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8008694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008696:	3314      	adds	r3, #20
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	3318      	adds	r3, #24
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 80086a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	ba1a      	rev	r2, r3
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80086ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b0:	3304      	adds	r3, #4
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b6:	3304      	adds	r3, #4
 80086b8:	ba12      	rev	r2, r2
 80086ba:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	3308      	adds	r3, #8
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	3308      	adds	r3, #8
 80086c6:	ba12      	rev	r2, r2
 80086c8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80086ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086cc:	330c      	adds	r3, #12
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d2:	330c      	adds	r3, #12
 80086d4:	ba12      	rev	r2, r2
 80086d6:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086da:	3310      	adds	r3, #16
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e0:	3310      	adds	r3, #16
 80086e2:	ba12      	rev	r2, r2
 80086e4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	3314      	adds	r3, #20
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ee:	3314      	adds	r3, #20
 80086f0:	ba12      	rev	r2, r2
 80086f2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80086f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f6:	3318      	adds	r3, #24
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fc:	3318      	adds	r3, #24
 80086fe:	ba12      	rev	r2, r2
 8008700:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8008706:	2305      	movs	r3, #5
 8008708:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800870e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008712:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8008714:	f04f 33ff 	mov.w	r3, #4294967295
 8008718:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008722:	f107 0210 	add.w	r2, r7, #16
 8008726:	4610      	mov	r0, r2
 8008728:	4798      	blx	r3
 800872a:	e000      	b.n	800872e <_nx_arp_packet_send+0x13a>
                return;
 800872c:	bf00      	nop
}
 800872e:	3738      	adds	r7, #56	; 0x38
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	06040001 	.word	0x06040001

08008738 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08a      	sub	sp, #40	; 0x28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008746:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8008748:	2300      	movs	r3, #0
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
 800874c:	e0af      	b.n	80088ae <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 80a5 	beq.w	80088a2 <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	1e5a      	subs	r2, r3, #1
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	f040 809b 	bne.w	80088a2 <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2b12      	cmp	r3, #18
 8008772:	f040 8086 	bne.w	8008882 <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008776:	f3ef 8310 	mrs	r3, PRIMASK
 800877a:	613b      	str	r3, [r7, #16]
    return(posture);
 800877c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800877e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008780:	b672      	cpsid	i
    return(int_posture);
 8008782:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 8008784:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d028      	beq.n	80087e0 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	6a3a      	ldr	r2, [r7, #32]
 8008794:	429a      	cmp	r2, r3
 8008796:	d104      	bne.n	80087a2 <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	e014      	b.n	80087cc <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6a3a      	ldr	r2, [r7, #32]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d104      	bne.n	80087b8 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	6a3a      	ldr	r2, [r7, #32]
 80087b4:	6952      	ldr	r2, [r2, #20]
 80087b6:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 80087bc:	6a3a      	ldr	r2, [r7, #32]
 80087be:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 80087c0:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 80087c6:	6a3a      	ldr	r2, [r7, #32]
 80087c8:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 80087ca:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80087d2:	1e5a      	subs	r2, r3, #1
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	2200      	movs	r2, #0
 80087de:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	6a3a      	ldr	r2, [r7, #32]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d02a      	beq.n	8008840 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 80087ee:	6a3a      	ldr	r2, [r7, #32]
 80087f0:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 80087f2:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 80087f8:	6a3a      	ldr	r2, [r7, #32]
 80087fa:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 80087fc:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008804:	6a3a      	ldr	r2, [r7, #32]
 8008806:	429a      	cmp	r2, r3
 8008808:	d104      	bne.n	8008814 <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
                        arp_entry -> nx_arp_pool_next =
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008824:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800883c:	6a3a      	ldr	r2, [r7, #32]
 800883e:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008844:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	2200      	movs	r2, #0
 800884a:	631a      	str	r2, [r3, #48]	; 0x30
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f383 8810 	msr	PRIMASK, r3
}
 8008856:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 8008858:	e00f      	b.n	800887a <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2200      	movs	r2, #0
 8008868:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 8008874:	6978      	ldr	r0, [r7, #20]
 8008876:	f003 fba9 	bl	800bfcc <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1ec      	bne.n	800885a <_nx_arp_periodic_update+0x122>
 8008880:	e00f      	b.n	80088a2 <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	220a      	movs	r2, #10
 8008890:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	6a19      	ldr	r1, [r3, #32]
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	461a      	mov	r2, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff fea9 	bl	80085f4 <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	3301      	adds	r3, #1
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	429a      	cmp	r2, r3
 80088b8:	f4ff af49 	bcc.w	800874e <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80088bc:	2300      	movs	r3, #0
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
 80088c0:	e033      	b.n	800892a <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	440b      	add	r3, r1
 80088d0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d021      	beq.n	800891e <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	440b      	add	r3, r1
 80088e8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d017      	beq.n	8008922 <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	440b      	add	r3, r1
 8008900:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	1e59      	subs	r1, r3, #1
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	4403      	add	r3, r0
 8008916:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800891a:	6019      	str	r1, [r3, #0]
 800891c:	e002      	b.n	8008924 <_nx_arp_periodic_update+0x1ec>
            continue;
 800891e:	bf00      	nop
 8008920:	e000      	b.n	8008924 <_nx_arp_periodic_update+0x1ec>
            continue;
 8008922:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	3301      	adds	r3, #1
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0c8      	beq.n	80088c2 <_nx_arp_periodic_update+0x18a>
    }
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	3728      	adds	r7, #40	; 0x28
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b088      	sub	sp, #32
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8008942:	e023      	b.n	800898c <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008944:	f3ef 8310 	mrs	r3, PRIMASK
 8008948:	617b      	str	r3, [r7, #20]
    return(posture);
 800894a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800894c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800894e:	b672      	cpsid	i
    return(int_posture);
 8008950:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 8008952:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800895a:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800896c:	2b00      	cmp	r3, #0
 800896e:	d103      	bne.n	8008978 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f383 8810 	msr	PRIMASK, r3
}
 8008982:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 8008984:	69b9      	ldr	r1, [r7, #24]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff fc08 	bl	800819c <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1d6      	bne.n	8008944 <_nx_arp_queue_process+0xa>
    }
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	3720      	adds	r7, #32
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b090      	sub	sp, #64	; 0x40
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089ae:	f3ef 8310 	mrs	r3, PRIMASK
 80089b2:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80089b8:	b672      	cpsid	i
    return(int_posture);
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 80089bc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2200      	movs	r2, #0
 80089d0:	631a      	str	r2, [r3, #48]	; 0x30
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	f383 8810 	msr	PRIMASK, r3
}
 80089dc:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 80089de:	e04c      	b.n	8008a7a <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 80089e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 80089e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	2200      	movs	r2, #0
 80089ee:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0e:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d915      	bls.n	8008a50 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d007      	beq.n	8008a3e <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a34:	f107 0208 	add.w	r2, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	e01d      	b.n	8008a7a <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 8008a48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a4a:	f003 fabf 	bl	800bfcc <_nx_packet_transmit_release>
 8008a4e:	e014      	b.n	8008a7a <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	4413      	add	r3, r2
 8008a64:	f1a3 0214 	sub.w	r2, r3, #20
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a72:	f107 0208 	add.w	r2, r7, #8
 8008a76:	4610      	mov	r0, r2
 8008a78:	4798      	blx	r3
    while (queued_list_head)
 8008a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1af      	bne.n	80089e0 <_nx_arp_queue_send+0x40>
        }
    }
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	3740      	adds	r7, #64	; 0x40
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a09      	ldr	r2, [pc, #36]	; (8008abc <_nx_icmp_enable+0x30>)
 8008a98:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <_nx_icmp_enable+0x34>)
 8008aa0:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a07      	ldr	r2, [pc, #28]	; (8008ac4 <_nx_icmp_enable+0x38>)
 8008aa8:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8008aac:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	08008bc5 	.word	0x08008bc5
 8008ac0:	08008b05 	.word	0x08008b05
 8008ac4:	08008c23 	.word	0x08008c23

08008ac8 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d006      	beq.n	8008aea <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	4798      	blx	r3
        return;
 8008ae8:	e009      	b.n	8008afe <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 8008af8:	6838      	ldr	r0, [r7, #0]
 8008afa:	f003 f9af 	bl	800be5c <_nx_packet_release>
}
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2b07      	cmp	r3, #7
 8008b22:	d80a      	bhi.n	8008b3a <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8008b32:	6838      	ldr	r0, [r7, #0]
 8008b34:	f003 f992 	bl	800be5c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8008b38:	e03c      	b.n	8008bb4 <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008b3a:	f3ef 8305 	mrs	r3, IPSR
 8008b3e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008b40:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 8008b42:	4b1e      	ldr	r3, [pc, #120]	; (8008bbc <_nx_icmp_packet_receive+0xb8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d106      	bne.n	8008b5a <_nx_icmp_packet_receive+0x56>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8008b52:	4b1b      	ldr	r3, [pc, #108]	; (8008bc0 <_nx_icmp_packet_receive+0xbc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d028      	beq.n	8008bac <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b5e:	617b      	str	r3, [r7, #20]
    return(posture);
 8008b60:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008b62:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b64:	b672      	cpsid	i
    return(int_posture);
 8008b66:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8008b68:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	61da      	str	r2, [r3, #28]
 8008b7e:	e002      	b.n	8008b86 <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2200      	movs	r2, #0
 8008b84:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f383 8810 	msr	PRIMASK, r3
}
 8008b98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2104      	movs	r1, #4
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f008 ffd9 	bl	8011b5c <_tx_event_flags_set>
 8008baa:	e003      	b.n	8008bb4 <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff ff8a 	bl	8008ac8 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 8008bb4:	3720      	adds	r7, #32
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2400008c 	.word	0x2400008c
 8008bc0:	240023d0 	.word	0x240023d0

08008bc4 <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd0:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008bd4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008bd6:	b672      	cpsid	i
    return(int_posture);
 8008bd8:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 8008bda:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8008be2:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f383 8810 	msr	PRIMASK, r3
}
 8008bf6:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8008bf8:	e00b      	b.n	8008c12 <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2200      	movs	r2, #0
 8008c08:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8008c0a:	6979      	ldr	r1, [r7, #20]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff ff5b 	bl	8008ac8 <_nx_icmp_packet_process>
    while (queue_head)
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f0      	bne.n	8008bfa <_nx_icmp_queue_process+0x36>
    }
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b088      	sub	sp, #32
 8008c26:	af02      	add	r7, sp, #8
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
USHORT            checksum;
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	617b      	str	r3, [r7, #20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	613b      	str	r3, [r7, #16]
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <_nx_icmpv4_packet_process+0x26>
    {
        compute_checksum = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]
    {
        compute_checksum = 1;
    }
#endif
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d023      	beq.n	8008c96 <_nx_icmpv4_packet_process+0x74>
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8008c52:	2300      	movs	r3, #0
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008c5c:	6838      	ldr	r0, [r7, #0]
 8008c5e:	f000 fb43 	bl	80092e8 <_nx_ip_checksum_compute>
 8008c62:	4603      	mov	r3, r0
 8008c64:	81fb      	strh	r3, [r7, #14]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 8008c66:	89fb      	ldrh	r3, [r7, #14]
 8008c68:	43db      	mvns	r3, r3
 8008c6a:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 8008c6c:	89fb      	ldrh	r3, [r7, #14]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d011      	beq.n	8008c96 <_nx_icmpv4_packet_process+0x74>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 8008c8e:	6838      	ldr	r0, [r7, #0]
 8008c90:	f003 f8e4 	bl	800be5c <_nx_packet_release>
            return;
 8008c94:	e01b      	b.n	8008cce <_nx_icmpv4_packet_process+0xac>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d104      	bne.n	8008ca8 <_nx_icmpv4_packet_process+0x86>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f817 	bl	8008cd4 <_nx_icmpv4_process_echo_reply>
 8008ca6:	e012      	b.n	8008cce <_nx_icmpv4_packet_process+0xac>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d104      	bne.n	8008cba <_nx_icmpv4_packet_process+0x98>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f8cc 	bl	8008e50 <_nx_icmpv4_process_echo_request>
 8008cb8:	e009      	b.n	8008cce <_nx_icmpv4_packet_process+0xac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 8008cc8:	6838      	ldr	r0, [r7, #0]
 8008cca:	f003 f8c7 	bl	800be5c <_nx_packet_release>
    }
}
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b090      	sub	sp, #64	; 0x40
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	88db      	ldrh	r3, [r3, #6]
 8008cf6:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8008cf8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008cfa:	ba5b      	rev16	r3, r3
 8008cfc:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8008d02:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8008d06:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d08:	b672      	cpsid	i
    return(int_posture);
 8008d0a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 8008d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d1c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008d1e:	4b4b      	ldr	r3, [pc, #300]	; (8008e4c <_nx_icmpv4_process_echo_reply+0x178>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3301      	adds	r3, #1
 8008d24:	4a49      	ldr	r2, [pc, #292]	; (8008e4c <_nx_icmpv4_process_echo_reply+0x178>)
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	f383 8810 	msr	PRIMASK, r3
}
 8008d32:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 8008d34:	e05e      	b.n	8008df4 <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 8008d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d155      	bne.n	8008dee <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d42:	f3ef 8310 	mrs	r3, PRIMASK
 8008d46:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008d48:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008d4a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d4c:	b672      	cpsid	i
    return(int_posture);
 8008d4e:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 8008d50:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8008d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d104      	bne.n	8008d66 <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8008d64:	e014      	b.n	8008d90 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d104      	bne.n	8008d7c <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8008d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8008d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d82:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008d84:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8008d8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d8c:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008d8e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d96:	1e5a      	subs	r2, r3, #1
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da0:	2200      	movs	r2, #0
 8008da2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008da4:	4b29      	ldr	r3, [pc, #164]	; (8008e4c <_nx_icmpv4_process_echo_reply+0x178>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3301      	adds	r3, #1
 8008daa:	4a28      	ldr	r2, [pc, #160]	; (8008e4c <_nx_icmpv4_process_echo_reply+0x178>)
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f383 8810 	msr	PRIMASK, r3
}
 8008db8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	f1a3 0208 	sub.w	r2, r3, #8
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f103 0208 	add.w	r2, r3, #8
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8008dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8008de6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008de8:	f00a fd3c 	bl	8013864 <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 8008dec:	e007      	b.n	8008dfe <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8008dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	1e5a      	subs	r2, r3, #1
 8008df8:	63ba      	str	r2, [r7, #56]	; 0x38
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d19b      	bne.n	8008d36 <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d009      	beq.n	8008e18 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8008e12:	6838      	ldr	r0, [r7, #0]
 8008e14:	f003 f822 	bl	800be5c <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e18:	f3ef 8310 	mrs	r3, PRIMASK
 8008e1c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008e20:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e22:	b672      	cpsid	i
    return(int_posture);
 8008e24:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8008e28:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <_nx_icmpv4_process_echo_reply+0x178>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	4a07      	ldr	r2, [pc, #28]	; (8008e4c <_nx_icmpv4_process_echo_reply+0x178>)
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f383 8810 	msr	PRIMASK, r3
}
 8008e3c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8008e3e:	f00a fcd7 	bl	80137f0 <_tx_thread_system_preempt_check>
}
 8008e42:	bf00      	nop
 8008e44:	3740      	adds	r7, #64	; 0x40
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	240023cc 	.word	0x240023cc

08008e50 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08c      	sub	sp, #48	; 0x30
 8008e54:	af04      	add	r7, sp, #16
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
ULONG             checksum;
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60bb      	str	r3, [r7, #8]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	61bb      	str	r3, [r7, #24]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6c:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	701a      	strb	r2, [r3, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <_nx_icmpv4_process_echo_request+0x44>
    {
        compute_checksum = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61fb      	str	r3, [r7, #28]
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d02c      	beq.n	8008ef4 <_nx_icmpv4_process_echo_request+0xa4>
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	885b      	ldrh	r3, [r3, #2]
 8008e9e:	ba5b      	rev16	r3, r3
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	885b      	ldrh	r3, [r3, #2]
 8008eaa:	613b      	str	r3, [r7, #16]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 8008eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eb0:	60fb      	str	r3, [r7, #12]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	43db      	mvns	r3, r3
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	613b      	str	r3, [r7, #16]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	0c1a      	lsrs	r2, r3, #16
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	4413      	add	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	0c1a      	lsrs	r2, r3, #16
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	43db      	mvns	r3, r3
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	885b      	ldrh	r3, [r3, #2]
 8008eea:	ba5b      	rev16	r3, r3
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	805a      	strh	r2, [r3, #2]
 8008ef2:	e008      	b.n	8008f06 <_nx_icmpv4_process_echo_request+0xb6>
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    else
    {

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	805a      	strh	r2, [r3, #2]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8008f10:	f107 0308 	add.w	r3, r7, #8
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 fc7f 	bl	800a818 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	9303      	str	r3, [sp, #12]
 8008f30:	2300      	movs	r3, #0
 8008f32:	9302      	str	r3, [sp, #8]
 8008f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	2380      	movs	r3, #128	; 0x80
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 fbf6 	bl	800a734 <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 8008f48:	bf00      	nop
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b096      	sub	sp, #88	; 0x58
 8008f54:	af04      	add	r7, sp, #16
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	647b      	str	r3, [r7, #68]	; 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8113 	beq.w	8009198 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f76:	633b      	str	r3, [r7, #48]	; 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8c:	f000 8106 	beq.w	800919c <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008f98:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8008f9c:	f000 80fe 	beq.w	800919c <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d10b      	bne.n	8008fca <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	691a      	ldr	r2, [r3, #16]
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	43db      	mvns	r3, r3
 8008fbc:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	f000 80eb 	beq.w	80091a0 <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f040 80e6 	bne.w	80091a4 <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80e3 	beq.w	80091a8 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8008fe6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008fea:	d304      	bcc.n	8008ff6 <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fee:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f280 80d9 	bge.w	80091a8 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	f000 80d3 	beq.w	80091a8 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800900a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800900e:	f000 80cb 	beq.w	80091a8 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8009018:	f107 0118 	add.w	r1, r7, #24
 800901c:	2300      	movs	r3, #0
 800901e:	2224      	movs	r2, #36	; 0x24
 8009020:	f002 fac4 	bl	800b5ac <_nx_packet_allocate>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	f040 80c0 	bne.w	80091ac <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	2204      	movs	r2, #4
 8009030:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	0e1b      	lsrs	r3, r3, #24
 800903e:	b2da      	uxtb	r2, r3
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	0c1b      	lsrs	r3, r3, #16
 8009048:	b2da      	uxtb	r2, r3
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	2200      	movs	r2, #0
 8009052:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	061a      	lsls	r2, r3, #24
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	ba1a      	rev	r2, r3
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	0e1b      	lsrs	r3, r3, #24
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	3302      	adds	r3, #2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800907e:	3208      	adds	r2, #8
 8009080:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	6899      	ldr	r1, [r3, #8]
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	440a      	add	r2, r1
 800908e:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	63bb      	str	r3, [r7, #56]	; 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	3308      	adds	r3, #8
 800909a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800909c:	2300      	movs	r3, #0
 800909e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a0:	e00a      	b.n	80090b8 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	ba1a      	rev	r2, r3
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	601a      	str	r2, [r3, #0]
        src_packet++;
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	3304      	adds	r3, #4
 80090b0:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80090b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b4:	3301      	adds	r3, #1
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d9f1      	bls.n	80090a2 <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c2:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 80090c4:	e00a      	b.n	80090dc <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 80090c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090c8:	1d13      	adds	r3, r2, #4
 80090ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80090cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ce:	1d19      	adds	r1, r3, #4
 80090d0:	6379      	str	r1, [r7, #52]	; 0x34
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 80090d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d8:	3b04      	subs	r3, #4
 80090da:	643b      	str	r3, [r7, #64]	; 0x40
 80090dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1f1      	bne.n	80090c6 <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80090e8:	2300      	movs	r3, #0
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ec:	e00a      	b.n	8009104 <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	ba1a      	rev	r2, r3
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	601a      	str	r2, [r3, #0]
        src_packet++;
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	3304      	adds	r3, #4
 80090fc:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80090fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009100:	3301      	adds	r3, #1
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009106:	2b04      	cmp	r3, #4
 8009108:	d9f1      	bls.n	80090ee <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009110:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 8009118:	f107 0314 	add.w	r3, r7, #20
 800911c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f001 fb7a 	bl	800a818 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	647b      	str	r3, [r7, #68]	; 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8009136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009138:	2b00      	cmp	r3, #0
 800913a:	d017      	beq.n	800916c <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 800913c:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8009142:	2300      	movs	r3, #0
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	2300      	movs	r3, #0
 8009148:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800914c:	f000 f8cc 	bl	80092e8 <_nx_ip_checksum_compute>
 8009150:	4603      	mov	r3, r0
 8009152:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 8009154:	8bfb      	ldrh	r3, [r7, #30]
 8009156:	43db      	mvns	r3, r3
 8009158:	b29a      	uxth	r2, r3
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	885b      	ldrh	r3, [r3, #2]
 8009162:	ba5b      	rev16	r3, r3
 8009164:	b29a      	uxth	r2, r3
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	805a      	strh	r2, [r3, #2]
 800916a:	e005      	b.n	8009178 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009176:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8009178:	69b9      	ldr	r1, [r7, #24]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	9303      	str	r3, [sp, #12]
 800917e:	2300      	movs	r3, #0
 8009180:	9302      	str	r3, [sp, #8]
 8009182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	23ff      	movs	r3, #255	; 0xff
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	2300      	movs	r3, #0
 800918e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f001 facf 	bl	800a734 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 8009196:	e00a      	b.n	80091ae <_nx_icmpv4_send_error_message+0x25e>
        return;
 8009198:	bf00      	nop
 800919a:	e008      	b.n	80091ae <_nx_icmpv4_send_error_message+0x25e>
        return;
 800919c:	bf00      	nop
 800919e:	e006      	b.n	80091ae <_nx_icmpv4_send_error_message+0x25e>
        return;
 80091a0:	bf00      	nop
 80091a2:	e004      	b.n	80091ae <_nx_icmpv4_send_error_message+0x25e>
        return;
 80091a4:	bf00      	nop
 80091a6:	e002      	b.n	80091ae <_nx_icmpv4_send_error_message+0x25e>
        return;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <_nx_icmpv4_send_error_message+0x25e>
        return;
 80091ac:	bf00      	nop
}
 80091ae:	3748      	adds	r7, #72	; 0x48
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4a18      	ldr	r2, [pc, #96]	; (8009224 <_nx_igmp_multicast_check+0x70>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d101      	bne.n	80091cc <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 80091c8:	2301      	movs	r3, #1
 80091ca:	e025      	b.n	8009218 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e01e      	b.n	8009210 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 80091d2:	68f9      	ldr	r1, [r7, #12]
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d10e      	bne.n	800920a <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 80091ec:	68f9      	ldr	r1, [r7, #12]
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80091fe:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	429a      	cmp	r2, r3
 8009204:	d101      	bne.n	800920a <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 8009206:	2301      	movs	r3, #1
 8009208:	e006      	b.n	8009218 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	3301      	adds	r3, #1
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b06      	cmp	r3, #6
 8009214:	d9dd      	bls.n	80091d2 <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	371c      	adds	r7, #28
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	e0000001 	.word	0xe0000001

08009228 <_nx_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_CHANGE_NOTIFY, ip_ptr, ip_address_change_notify, additional_info, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800923a:	f04f 31ff 	mov.w	r1, #4294967295
 800923e:	4618      	mov	r0, r3
 8009240:	f009 f8d0 	bl	80123e4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009244:	f3ef 8310 	mrs	r3, PRIMASK
 8009248:	617b      	str	r3, [r7, #20]
    return(posture);
 800924a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800924c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800924e:	b672      	cpsid	i
    return(int_posture);
 8009250:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009252:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address change callback function and the additional information pointers. */
    ip_ptr -> nx_ip_address_change_notify =                  ip_address_change_notify;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    ip_ptr -> nx_ip_address_change_notify_additional_info =  additional_info;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	f383 8810 	msr	PRIMASK, r3
}
 800926e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009276:	4618      	mov	r0, r3
 8009278:	f009 fb2c 	bl	80128d4 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800927c:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800927e:	4618      	mov	r0, r3
 8009280:	3720      	adds	r7, #32
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b088      	sub	sp, #32
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	60b9      	str	r1, [r7, #8]
 8009290:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009298:	f04f 31ff 	mov.w	r1, #4294967295
 800929c:	4618      	mov	r0, r3
 800929e:	f009 f8a1 	bl	80123e4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80092a2:	f3ef 8310 	mrs	r3, PRIMASK
 80092a6:	617b      	str	r3, [r7, #20]
    return(posture);
 80092a8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80092aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80092ac:	b672      	cpsid	i
    return(int_posture);
 80092ae:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80092b0:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	f383 8810 	msr	PRIMASK, r3
}
 80092d0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80092d8:	4618      	mov	r0, r3
 80092da:	f009 fafb 	bl	80128d4 <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 80092de:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08e      	sub	sp, #56	; 0x38
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b11      	cmp	r3, #17
 80092fe:	d002      	beq.n	8009306 <_nx_ip_checksum_compute+0x1e>
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b06      	cmp	r3, #6
 8009304:	d141      	bne.n	800938a <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <_nx_ip_checksum_compute+0x2e>
 8009310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d104      	bne.n	8009320 <_nx_ip_checksum_compute+0x38>
 8009316:	f04f 30ff 	mov.w	r0, #4294967295
 800931a:	f00a f9e9 	bl	80136f0 <_tx_thread_sleep>
 800931e:	e7fa      	b.n	8009316 <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8009324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009326:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009330:	4413      	add	r3, r2
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	3302      	adds	r3, #2
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933e:	4413      	add	r3, r2
 8009340:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	4413      	add	r3, r2
 800934c:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	3302      	adds	r3, #2
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	461a      	mov	r2, r3
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	4413      	add	r3, r2
 800935a:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 800935c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4413      	add	r3, r2
 8009362:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009366:	0c1a      	lsrs	r2, r3, #16
 8009368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936a:	b29b      	uxth	r3, r3
 800936c:	4413      	add	r3, r2
 800936e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009372:	0c1a      	lsrs	r2, r3, #16
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	b29b      	uxth	r3, r3
 8009378:	4413      	add	r3, r2
 800937a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8009380:	8b7b      	ldrh	r3, [r7, #26]
 8009382:	ba5b      	rev16	r3, r3
 8009384:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 8009386:	8b7b      	ldrh	r3, [r7, #26]
 8009388:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 8009394:	e058      	b.n	8009448 <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	68da      	ldr	r2, [r3, #12]
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d905      	bls.n	80093b6 <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f023 0303 	bic.w	r3, r3, #3
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
 80093b4:	e006      	b.n	80093c4 <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	461a      	mov	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4413      	add	r3, r2
 80093c0:	3b03      	subs	r3, #3
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d91c      	bls.n	800940c <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 80093d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	3303      	adds	r3, #3
 80093d8:	f023 0303 	bic.w	r3, r3, #3
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	4413      	add	r3, r2
 80093e2:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 80093e4:	e00e      	b.n	8009404 <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ee:	4413      	add	r3, r2
 80093f0:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	0c1b      	lsrs	r3, r3, #16
 80093f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093fa:	4413      	add	r3, r2
 80093fc:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	3304      	adds	r3, #4
 8009402:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8009404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009408:	429a      	cmp	r2, r3
 800940a:	d8ec      	bhi.n	80093e6 <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d018      	beq.n	8009444 <_nx_ip_checksum_compute+0x15c>
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d014      	beq.n	8009444 <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	2b02      	cmp	r3, #2
 8009424:	d10a      	bne.n	800943c <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009432:	4413      	add	r3, r2
 8009434:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3b02      	subs	r3, #2
 800943a:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	62bb      	str	r3, [r7, #40]	; 0x28
 8009442:	e001      	b.n	8009448 <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8009444:	2300      	movs	r3, #0
 8009446:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1a3      	bne.n	8009396 <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01f      	beq.n	8009494 <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d104      	bne.n	8009468 <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	3301      	adds	r3, #1
 8009462:	2200      	movs	r2, #0
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	e00f      	b.n	8009488 <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b03      	cmp	r3, #3
 800946c:	d10c      	bne.n	8009488 <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009476:	4413      	add	r3, r2
 8009478:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	3302      	adds	r3, #2
 800947e:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	3301      	adds	r3, #1
 8009484:	2200      	movs	r2, #0
 8009486:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	4413      	add	r3, r2
 8009492:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009496:	0c1a      	lsrs	r2, r3, #16
 8009498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949a:	b29b      	uxth	r3, r3
 800949c:	4413      	add	r3, r2
 800949e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 80094a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a2:	0c1a      	lsrs	r2, r3, #16
 80094a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	4413      	add	r3, r2
 80094aa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 80094ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ae:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 80094b0:	8b7b      	ldrh	r3, [r7, #26]
 80094b2:	ba5b      	rev16	r3, r3
 80094b4:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 80094b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3738      	adds	r7, #56	; 0x38
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b092      	sub	sp, #72	; 0x48
 80094c4:	af06      	add	r7, sp, #24
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 80094d2:	4b8a      	ldr	r3, [pc, #552]	; (80096fc <_nx_ip_create+0x23c>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b8a      	ldr	r3, [pc, #552]	; (8009700 <_nx_ip_create+0x240>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	431a      	orrs	r2, r3
 80094dc:	4b89      	ldr	r3, [pc, #548]	; (8009704 <_nx_ip_create+0x244>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 80094e2:	4b89      	ldr	r3, [pc, #548]	; (8009708 <_nx_ip_create+0x248>)
 80094e4:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 80094e6:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 80094e8:	4b88      	ldr	r3, [pc, #544]	; (800970c <_nx_ip_create+0x24c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	4a88      	ldr	r2, [pc, #544]	; (8009710 <_nx_ip_create+0x250>)
 80094f0:	7812      	ldrb	r2, [r2, #0]
 80094f2:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 80094f8:	234a      	movs	r3, #74	; 0x4a
 80094fa:	e0fb      	b.n	80096f4 <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 80094fc:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009500:	2100      	movs	r1, #0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f00c f882 	bl	801560c <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	f8c3 2730 	str.w	r2, [r3, #1840]	; 0x730

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	401a      	ands	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009538:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4a75      	ldr	r2, [pc, #468]	; (8009714 <_nx_ip_create+0x254>)
 8009540:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8009544:	2300      	movs	r3, #0
 8009546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009548:	e00f      	b.n	800956a <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	b2d8      	uxtb	r0, r3
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	440b      	add	r3, r1
 800955c:	f203 7323 	addw	r3, r3, #1827	; 0x723
 8009560:	4602      	mov	r2, r0
 8009562:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	3301      	adds	r3, #1
 8009568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	2b01      	cmp	r3, #1
 800956e:	d9ec      	bls.n	800954a <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a69      	ldr	r2, [pc, #420]	; (8009718 <_nx_ip_create+0x258>)
 8009574:	f8c3 276c 	str.w	r2, [r3, #1900]	; 0x76c


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a66      	ldr	r2, [pc, #408]	; (800971c <_nx_ip_create+0x25c>)
 8009584:	f8c3 2780 	str.w	r2, [r3, #1920]	; 0x780
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800958e:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8009598:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c3 27a8 	str.w	r2, [r3, #1960]	; 0x7a8

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095b2:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80095c4:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095da:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80095e4:	2200      	movs	r2, #0
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f008 fdf7 	bl	80121dc <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f008 f980 	bl	80118fc <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 80095fc:	f009 fe98 	bl	8013330 <_tx_thread_identify>
 8009600:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	2b00      	cmp	r3, #0
 8009606:	d006      	beq.n	8009616 <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8009608:	f107 0310 	add.w	r3, r7, #16
 800960c:	461a      	mov	r2, r3
 800960e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009612:	f009 fee7 	bl	80133e4 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	2301      	movs	r3, #1
 8009620:	9305      	str	r3, [sp, #20]
 8009622:	2301      	movs	r3, #1
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009628:	9303      	str	r3, [sp, #12]
 800962a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	4613      	mov	r3, r2
 8009638:	4a39      	ldr	r2, [pc, #228]	; (8009720 <_nx_ip_create+0x260>)
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	f009 fd28 	bl	8013090 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2201      	movs	r2, #1
 800964a:	9202      	str	r2, [sp, #8]
 800964c:	2264      	movs	r2, #100	; 0x64
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	2264      	movs	r2, #100	; 0x64
 8009652:	9200      	str	r2, [sp, #0]
 8009654:	4a33      	ldr	r2, [pc, #204]	; (8009724 <_nx_ip_create+0x264>)
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	f00a fbd6 	bl	8013e08 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4a32      	ldr	r2, [pc, #200]	; (8009728 <_nx_ip_create+0x268>)
 8009660:	f8c3 27bc 	str.w	r2, [r3, #1980]	; 0x7bc
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009664:	f3ef 8310 	mrs	r3, PRIMASK
 8009668:	61fb      	str	r3, [r7, #28]
    return(posture);
 800966a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800966c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800966e:	b672      	cpsid	i
    return(int_posture);
 8009670:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 8009672:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4a2d      	ldr	r2, [pc, #180]	; (800972c <_nx_ip_create+0x26c>)
 8009678:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 800967a:	4b2d      	ldr	r3, [pc, #180]	; (8009730 <_nx_ip_create+0x270>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d017      	beq.n	80096b2 <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 8009682:	4b2b      	ldr	r3, [pc, #172]	; (8009730 <_nx_ip_create+0x270>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 800968a:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 800968c:	4b28      	ldr	r3, [pc, #160]	; (8009730 <_nx_ip_create+0x270>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a3a      	ldr	r2, [r7, #32]
 80096a2:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 80096a6:	4b22      	ldr	r3, [pc, #136]	; (8009730 <_nx_ip_create+0x270>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 80096b0:	e00a      	b.n	80096c8 <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 80096b2:	4a1f      	ldr	r2, [pc, #124]	; (8009730 <_nx_ip_create+0x270>)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 80096c8:	4b1a      	ldr	r3, [pc, #104]	; (8009734 <_nx_ip_create+0x274>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3301      	adds	r3, #1
 80096ce:	4a19      	ldr	r2, [pc, #100]	; (8009734 <_nx_ip_create+0x274>)
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f383 8810 	msr	PRIMASK, r3
}
 80096dc:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f107 0210 	add.w	r2, r7, #16
 80096ea:	4619      	mov	r1, r3
 80096ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ee:	f009 fe79 	bl	80133e4 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3730      	adds	r7, #48	; 0x30
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	240022dc 	.word	0x240022dc
 8009700:	240022ec 	.word	0x240022ec
 8009704:	240022e4 	.word	0x240022e4
 8009708:	240022e0 	.word	0x240022e0
 800970c:	240022e8 	.word	0x240022e8
 8009710:	24000028 	.word	0x24000028
 8009714:	08016a54 	.word	0x08016a54
 8009718:	08016a58 	.word	0x08016a58
 800971c:	7f000001 	.word	0x7f000001
 8009720:	0800ab21 	.word	0x0800ab21
 8009724:	0800a7f5 	.word	0x0800a7f5
 8009728:	0800b0e9 	.word	0x0800b0e9
 800972c:	49502020 	.word	0x49502020
 8009730:	240022d0 	.word	0x240022d0
 8009734:	240022cc 	.word	0x240022cc

08009738 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08c      	sub	sp, #48	; 0x30
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d053      	beq.n	80097f2 <_nx_ip_deferred_link_status_process+0xba>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800974a:	2300      	movs	r3, #0
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800974e:	e04c      	b.n	80097ea <_nx_ip_deferred_link_status_process+0xb2>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	440b      	add	r3, r1
 800975e:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d03d      	beq.n	80097e4 <_nx_ip_deferred_link_status_process+0xac>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	440b      	add	r3, r1
 8009776:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800977a:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800977c:	2b00      	cmp	r3, #0
 800977e:	d031      	beq.n	80097e4 <_nx_ip_deferred_link_status_process+0xac>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009784:	4613      	mov	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	440b      	add	r3, r1
 800978e:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 800979a:	230a      	movs	r3, #10
 800979c:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 800979e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097a0:	4613      	mov	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	4413      	add	r3, r2
 80097b0:	3304      	adds	r3, #4
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 80097b4:	f107 0308 	add.w	r3, r7, #8
 80097b8:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	440b      	add	r3, r1
 80097c8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f107 020c 	add.w	r2, r7, #12
 80097d2:	4610      	mov	r0, r2
 80097d4:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	3301      	adds	r3, #1
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0af      	beq.n	8009750 <_nx_ip_deferred_link_status_process+0x18>
 80097f0:	e000      	b.n	80097f4 <_nx_ip_deferred_link_status_process+0xbc>
        return;
 80097f2:	bf00      	nop
        }
    }
}
 80097f4:	3730      	adds	r7, #48	; 0x30
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <_nx_ip_dispatch_process>:
/*                                            destination header check,   */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 800980c:	e09a      	b.n	8009944 <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b32      	cmp	r3, #50	; 0x32
 8009812:	d005      	beq.n	8009820 <_nx_ip_dispatch_process+0x24>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b33      	cmp	r3, #51	; 0x33
 8009818:	d104      	bne.n	8009824 <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 800981a:	2301      	movs	r3, #1
 800981c:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 800981e:	e07d      	b.n	800991c <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 8009820:	2301      	movs	r3, #1
 8009822:	e094      	b.n	800994e <_nx_ip_dispatch_process+0x152>
                    return(NX_INVALID_PACKET);
                }
            }
#endif /* NX_IPSEC_ENABLE */

            if (protocol == NX_PROTOCOL_TCP)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b06      	cmp	r3, #6
 8009828:	d10f      	bne.n	800984a <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009830:	2b00      	cmp	r3, #0
 8009832:	d007      	beq.n	8009844 <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 8009840:	2300      	movs	r3, #0
 8009842:	e084      	b.n	800994e <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 8009848:	e067      	b.n	800991a <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009850:	2b04      	cmp	r3, #4
 8009852:	d112      	bne.n	800987a <_nx_ip_dispatch_process+0x7e>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d10f      	bne.n	800987a <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8009860:	2b00      	cmp	r3, #0
 8009862:	d007      	beq.n	8009874 <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	4798      	blx	r3
                    return(0);
 8009870:	2300      	movs	r3, #0
 8009872:	e06c      	b.n	800994e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	e04f      	b.n	800991a <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009880:	2b04      	cmp	r3, #4
 8009882:	d112      	bne.n	80098aa <_nx_ip_dispatch_process+0xae>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d10f      	bne.n	80098aa <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8009890:	2b00      	cmp	r3, #0
 8009892:	d007      	beq.n	80098a4 <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	4798      	blx	r3
                    return(0);
 80098a0:	2300      	movs	r3, #0
 80098a2:	e054      	b.n	800994e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80098a4:	2301      	movs	r3, #1
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	e037      	b.n	800991a <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b11      	cmp	r3, #17
 80098ae:	d10f      	bne.n	80098d0 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d007      	beq.n	80098ca <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	4798      	blx	r3
                        return(0);
 80098c6:	2300      	movs	r3, #0
 80098c8:	e041      	b.n	800994e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80098ca:	2301      	movs	r3, #1
 80098cc:	617b      	str	r3, [r7, #20]
            break;
 80098ce:	e024      	b.n	800991a <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00c      	beq.n	80098f4 <_nx_ip_dispatch_process+0xf8>
                    if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	0411      	lsls	r1, r2, #16
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	4798      	blx	r3
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <_nx_ip_dispatch_process+0xf8>
                        return(0);
 80098f0:	2300      	movs	r3, #0
 80098f2:	e02c      	b.n	800994e <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d105      	bne.n	800990a <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 80098fe:	2300      	movs	r3, #0
 8009900:	4a15      	ldr	r2, [pc, #84]	; (8009958 <_nx_ip_dispatch_process+0x15c>)
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff fb23 	bl	8008f50 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 8009914:	2301      	movs	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
            break;
 8009918:	e7ff      	b.n	800991a <_nx_ip_dispatch_process+0x11e>
 800991a:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d010      	beq.n	8009944 <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	1e5a      	subs	r2, r3, #1
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	1ad2      	subs	r2, r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f43f af61 	beq.w	800980e <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 800994c:	697b      	ldr	r3, [r7, #20]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	03020000 	.word	0x03020000

0800995c <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800996a:	2200      	movs	r2, #0
 800996c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009970:	4618      	mov	r0, r3
 8009972:	f008 f8f3 	bl	8011b5c <_tx_event_flags_set>
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b09e      	sub	sp, #120	; 0x78
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 800998c:	2300      	movs	r3, #0
 800998e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999e:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a8:	795b      	ldrb	r3, [r3, #5]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 8179 	beq.w	8009ca2 <_nx_ip_driver_packet_send+0x324>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c6:	d00d      	beq.n	80099e4 <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099cc:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80099ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d110      	bne.n	80099f6 <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 80099d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099d6:	43da      	mvns	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	401a      	ands	r2, r3
 80099dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099de:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d108      	bne.n	80099f6 <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80099e4:	2304      	movs	r3, #4
 80099e6:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80099e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099ec:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80099ee:	f04f 33ff 	mov.w	r3, #4294967295
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
 80099f4:	e167      	b.n	8009cc6 <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d105      	bne.n	8009a0e <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a0c:	e15b      	b.n	8009cc6 <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a14:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009a18:	d133      	bne.n	8009a82 <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8009a1e:	e00f      	b.n	8009a40 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 8009a20:	68f9      	ldr	r1, [r7, #12]
 8009a22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009a24:	4613      	mov	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d006      	beq.n	8009a48 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 8009a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8009a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a42:	2b06      	cmp	r3, #6
 8009a44:	d9ec      	bls.n	8009a20 <_nx_ip_driver_packet_send+0xa2>
 8009a46:	e000      	b.n	8009a4a <_nx_ip_driver_packet_send+0xcc>
                    break;
 8009a48:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 8009a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a4c:	2b06      	cmp	r3, #6
 8009a4e:	d80e      	bhi.n	8009a6e <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 8009a50:	68f9      	ldr	r1, [r7, #12]
 8009a52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009a54:	4613      	mov	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	440b      	add	r3, r1
 8009a5e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8009a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a72:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a7a:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a80:	e121      	b.n	8009cc6 <_nx_ip_driver_packet_send+0x348>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 8009a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a86:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	0a1a      	lsrs	r2, r3, #8
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f003 031f 	and.w	r3, r3, #31
 8009a94:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a9a:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 8009aa6:	e014      	b.n	8009ad2 <_nx_ip_driver_packet_send+0x154>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8009aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d013      	beq.n	8009ada <_nx_ip_driver_packet_send+0x15c>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 8009ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009abc:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d102      	bne.n	8009ad2 <_nx_ip_driver_packet_send+0x154>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 8009acc:	2300      	movs	r3, #0
 8009ace:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 8009ad0:	e004      	b.n	8009adc <_nx_ip_driver_packet_send+0x15e>
            while (arp_ptr)
 8009ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e7      	bne.n	8009aa8 <_nx_ip_driver_packet_send+0x12a>
 8009ad8:	e000      	b.n	8009adc <_nx_ip_driver_packet_send+0x15e>
                    break;
 8009ada:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 8009adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d023      	beq.n	8009b2a <_nx_ip_driver_packet_send+0x1ac>
 8009ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aea:	4313      	orrs	r3, r2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01c      	beq.n	8009b2a <_nx_ip_driver_packet_send+0x1ac>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009af0:	f3ef 8310 	mrs	r3, PRIMASK
 8009af4:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8009af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8009af8:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009afa:	b672      	cpsid	i
    return(int_posture);
 8009afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 8009afe:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8009b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8009b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b10:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b1a:	605a      	str	r2, [r3, #4]
 8009b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b1e:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b22:	f383 8810 	msr	PRIMASK, r3
}
 8009b26:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 8009b28:	e0cd      	b.n	8009cc6 <_nx_ip_driver_packet_send+0x348>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d910      	bls.n	8009b5a <_nx_ip_driver_packet_send+0x1dc>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <_nx_ip_driver_packet_send+0x1ca>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d008      	beq.n	8009b5a <_nx_ip_driver_packet_send+0x1dc>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 8009b52:	68b8      	ldr	r0, [r7, #8]
 8009b54:	f002 fa3a 	bl	800bfcc <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 8009b58:	e134      	b.n	8009dc4 <_nx_ip_driver_packet_send+0x446>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 8009b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d052      	beq.n	8009c06 <_nx_ip_driver_packet_send+0x288>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b60:	f3ef 8310 	mrs	r3, PRIMASK
 8009b64:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8009b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 8009b68:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b6a:	b672      	cpsid	i
    return(int_posture);
 8009b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 8009b6e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2200      	movs	r2, #0
 8009b74:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 8009b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d109      	bne.n	8009b92 <_nx_ip_driver_packet_send+0x214>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8009b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	631a      	str	r2, [r3, #48]	; 0x30
 8009b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8a:	f383 8810 	msr	PRIMASK, r3
}
 8009b8e:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 8009b90:	e117      	b.n	8009dc2 <_nx_ip_driver_packet_send+0x444>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 8009b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 8009b9c:	e005      	b.n	8009baa <_nx_ip_driver_packet_send+0x22c>
                            queued_count++;
 8009b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 8009ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 8009baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1f5      	bne.n	8009b9e <_nx_ip_driver_packet_send+0x220>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 8009bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8009bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d913      	bls.n	8009bea <_nx_ip_driver_packet_send+0x26c>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 8009bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc6:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 8009bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 8009bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	655a      	str	r2, [r3, #84]	; 0x54
 8009bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bec:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf0:	f383 8810 	msr	PRIMASK, r3
}
 8009bf4:	bf00      	nop
                        if (remove_packet)
 8009bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 80e2 	beq.w	8009dc2 <_nx_ip_driver_packet_send+0x444>
                            _nx_packet_transmit_release(remove_packet);
 8009bfe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009c00:	f002 f9e4 	bl	800bfcc <_nx_packet_transmit_release>
                return;
 8009c04:	e0dd      	b.n	8009dc2 <_nx_ip_driver_packet_send+0x444>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00f      	beq.n	8009c30 <_nx_ip_driver_packet_send+0x2b2>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8009c16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c18:	f502 72c9 	add.w	r2, r2, #402	; 0x192
 8009c1c:	0092      	lsls	r2, r2, #2
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	440a      	add	r2, r1
 8009c22:	1d11      	adds	r1, r2, #4
 8009c24:	2200      	movs	r2, #0
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	4798      	blx	r3
 8009c2a:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00d      	beq.n	8009c4c <_nx_ip_driver_packet_send+0x2ce>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 8009c44:	68b8      	ldr	r0, [r7, #8]
 8009c46:	f002 f9c1 	bl	800bfcc <_nx_packet_transmit_release>
                        return;
 8009c4a:	e0bb      	b.n	8009dc4 <_nx_ip_driver_packet_send+0x446>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c50:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 8009c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 8009c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c66:	2200      	movs	r2, #0
 8009c68:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 8009c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 8009c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c72:	220a      	movs	r2, #10
 8009c74:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 8009c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c78:	2200      	movs	r2, #0
 8009c7a:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c82:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2200      	movs	r2, #0
 8009c88:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8009c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	4798      	blx	r3
                return;
 8009ca0:	e08f      	b.n	8009dc2 <_nx_ip_driver_packet_send+0x444>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009ca8:	d302      	bcc.n	8009cb0 <_nx_ip_driver_packet_send+0x332>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8009caa:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	da05      	bge.n	8009cbc <_nx_ip_driver_packet_send+0x33e>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb4:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d104      	bne.n	8009cc6 <_nx_ip_driver_packet_send+0x348>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 8009cc6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d131      	bne.n	8009d32 <_nx_ip_driver_packet_send+0x3b4>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8009cd4:	f107 0114 	add.w	r1, r7, #20
 8009cd8:	2300      	movs	r3, #0
 8009cda:	68b8      	ldr	r0, [r7, #8]
 8009cdc:	f001 fd30 	bl	800b740 <_nx_packet_copy>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d11b      	bne.n	8009d1e <_nx_ip_driver_packet_send+0x3a0>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <_nx_ip_driver_packet_send+0x378>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 fb0f 	bl	800a314 <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	699a      	ldr	r2, [r3, #24]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	4413      	add	r3, r2
 8009d0a:	f1a3 0214 	sub.w	r2, r3, #20
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	4619      	mov	r1, r3
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 fc88 	bl	800a62c <_nx_ip_packet_deferred_receive>
 8009d1c:	e009      	b.n	8009d32 <_nx_ip_driver_packet_send+0x3b4>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 8009d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d040      	beq.n	8009dba <_nx_ip_driver_packet_send+0x43c>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d919      	bls.n	8009d7a <_nx_ip_driver_packet_send+0x3fc>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00b      	beq.n	8009d68 <_nx_ip_driver_packet_send+0x3ea>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d56:	d007      	beq.n	8009d68 <_nx_ip_driver_packet_send+0x3ea>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009d5e:	f107 0218 	add.w	r2, r7, #24
 8009d62:	4610      	mov	r0, r2
 8009d64:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 8009d66:	e02d      	b.n	8009dc4 <_nx_ip_driver_packet_send+0x446>
                ip_ptr -> nx_ip_send_packets_dropped++;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 8009d72:	68b8      	ldr	r0, [r7, #8]
 8009d74:	f002 f92a 	bl	800bfcc <_nx_packet_transmit_release>
            return;
 8009d78:	e024      	b.n	8009dc4 <_nx_ip_driver_packet_send+0x446>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	699a      	ldr	r2, [r3, #24]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f1a3 0214 	sub.w	r2, r3, #20
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d104      	bne.n	8009daa <_nx_ip_driver_packet_send+0x42c>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	f009 fca4 	bl	80136f0 <_tx_thread_sleep>
 8009da8:	e7fa      	b.n	8009da0 <_nx_ip_driver_packet_send+0x422>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db0:	f107 0218 	add.w	r2, r7, #24
 8009db4:	4610      	mov	r0, r2
 8009db6:	4798      	blx	r3
 8009db8:	e004      	b.n	8009dc4 <_nx_ip_driver_packet_send+0x446>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 8009dba:	68b8      	ldr	r0, [r7, #8]
 8009dbc:	f002 f906 	bl	800bfcc <_nx_packet_transmit_release>
 8009dc0:	e000      	b.n	8009dc4 <_nx_ip_driver_packet_send+0x446>
                return;
 8009dc2:	bf00      	nop
    }
}
 8009dc4:	3778      	adds	r7, #120	; 0x78
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <_nx_ip_fast_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_ip_fast_periodic_timer_entry(ULONG ip_address)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_FAST_EVENT, TX_OR);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009de2:	4618      	mov	r0, r3
 8009de4:	f007 feba 	bl	8011b5c <_tx_event_flags_set>
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <_nx_ip_fast_periodic_timer_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_fast_periodic_timer_create(NX_IP *ip_ptr)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b088      	sub	sp, #32
 8009df4:	af04      	add	r7, sp, #16
 8009df6:	6078      	str	r0, [r7, #4]

ULONG _nx_ip_fast_timer_rate;

    if (ip_ptr -> nx_ip_fast_periodic_timer_created)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d116      	bne.n	8009e30 <_nx_ip_fast_periodic_timer_create+0x40>
    {
        return;
    }

    _nx_ip_fast_timer_rate =  (NX_IP_PERIODIC_RATE + (NX_IP_FAST_TIMER_RATE - 1)) / NX_IP_FAST_TIMER_RATE;
 8009e02:	230a      	movs	r3, #10
 8009e04:	60fb      	str	r3, [r7, #12]

    /* Create the fast TCP timer.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f503 60c4 	add.w	r0, r3, #1568	; 0x620
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6859      	ldr	r1, [r3, #4]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	2301      	movs	r3, #1
 8009e14:	9302      	str	r3, [sp, #8]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	4a05      	ldr	r2, [pc, #20]	; (8009e38 <_nx_ip_fast_periodic_timer_create+0x48>)
 8009e22:	f009 fff1 	bl	8013e08 <_tx_timer_create>
                    _nx_ip_fast_timer_rate, _nx_ip_fast_timer_rate, TX_AUTO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr)

    /* Set the flag to indicate that the fast timer has been created. */
    ip_ptr -> nx_ip_fast_periodic_timer_created = 1;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 8009e2e:	e000      	b.n	8009e32 <_nx_ip_fast_periodic_timer_create+0x42>
        return;
 8009e30:	bf00      	nop
}
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	08009dcb 	.word	0x08009dcb

08009e3c <_nx_ip_gateway_address_clear>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_clear(NX_IP *ip_ptr)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be cleared.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f008 fac8 	bl	80123e4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e54:	f3ef 8310 	mrs	r3, PRIMASK
 8009e58:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009e5c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e5e:	b672      	cpsid	i
    return(int_posture);
 8009e60:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts.  */
    TX_DISABLE
 8009e62:	617b      	str	r3, [r7, #20]

    /* Clear the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  0;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = NX_NULL;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	60da      	str	r2, [r3, #12]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f383 8810 	msr	PRIMASK, r3
}
 8009e7a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e82:	4618      	mov	r0, r3
 8009e84:	f008 fd26 	bl	80128d4 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009e88:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <_nx_ip_gateway_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_get(NX_IP *ip_ptr, ULONG *ip_address)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
UINT status;


    /* Initialize the return value to be NX_NOT_FOUND.  If the gateway address
       is set, the return value changes to NX_SUCCESS. */
    status = NX_NOT_FOUND;
 8009e9c:	234e      	movs	r3, #78	; 0x4e
 8009e9e:	60fb      	str	r3, [r7, #12]

    /* Obtain the IP internal mutex to get the Gateway IP address.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009ea6:	f04f 31ff 	mov.w	r1, #4294967295
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f008 fa9a 	bl	80123e4 <_tx_mutex_get>

    if (ip_ptr -> nx_ip_gateway_address)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d005      	beq.n	8009ec4 <_nx_ip_gateway_address_get+0x32>
    {

        /* Setup the Gateway IP address.  */
        *ip_address = ip_ptr -> nx_ip_gateway_address;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689a      	ldr	r2, [r3, #8]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	601a      	str	r2, [r3, #0]

        status = NX_SUCCESS;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f008 fd02 	bl	80128d4 <_tx_mutex_put>

    /* Return completion status.  */
    return(status);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <_nx_ip_gateway_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_set(NX_IP *ip_ptr, ULONG ip_address)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b088      	sub	sp, #32
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]

#ifndef NX_DISABLE_IPV4
INT           i;
TX_INTERRUPT_SAVE_AREA

NX_INTERFACE *ip_interface_ptr = NX_NULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	61bb      	str	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, ip_address, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be setup.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009eee:	f04f 31ff 	mov.w	r1, #4294967295
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f008 fa76 	bl	80123e4 <_tx_mutex_get>

    /* Loop through all the interfaces to find the one for the input gateway address. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	61fb      	str	r3, [r7, #28]
 8009efc:	e033      	b.n	8009f66 <_nx_ip_gateway_address_set+0x8c>
    {

        /* Must be a valid interface. Match the network subnet of the interface and input address. */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	440b      	add	r3, r1
 8009f0c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d024      	beq.n	8009f60 <_nx_ip_gateway_address_set+0x86>
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	69fa      	ldr	r2, [r7, #28]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	440b      	add	r3, r1
 8009f24:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	ea02 0103 	and.w	r1, r2, r3
             ip_ptr -> nx_ip_interface[i].nx_interface_ip_network))
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	69fa      	ldr	r2, [r7, #28]
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	4403      	add	r3, r0
 8009f3e:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8009f42:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009f44:	4299      	cmp	r1, r3
 8009f46:	d10b      	bne.n	8009f60 <_nx_ip_gateway_address_set+0x86>
        {

            /* This is the interface for the gateway.  */
            ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8009f48:	69fa      	ldr	r2, [r7, #28]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	4413      	add	r3, r2
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	61bb      	str	r3, [r7, #24]

            /* Break out of the search. */
            break;
 8009f5e:	e005      	b.n	8009f6c <_nx_ip_gateway_address_set+0x92>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	3301      	adds	r3, #1
 8009f64:	61fb      	str	r3, [r7, #28]
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	ddc8      	ble.n	8009efe <_nx_ip_gateway_address_set+0x24>
        }
    }

    /* Check if we found an interface. */
    if (ip_interface_ptr == NX_NULL)
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d107      	bne.n	8009f82 <_nx_ip_gateway_address_set+0xa8>
    {

        /* None found. Unlock the mutex, and return the error status. */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f008 fcab 	bl	80128d4 <_tx_mutex_put>

        return(NX_IP_ADDRESS_ERROR);
 8009f7e:	2321      	movs	r3, #33	; 0x21
 8009f80:	e01a      	b.n	8009fb8 <_nx_ip_gateway_address_set+0xde>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f82:	f3ef 8310 	mrs	r3, PRIMASK
 8009f86:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009f88:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009f8a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f8c:	b672      	cpsid	i
    return(int_posture);
 8009f8e:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009f90:	617b      	str	r3, [r7, #20]

    /* Setup the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  ip_address;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = ip_interface_ptr;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	60da      	str	r2, [r3, #12]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f383 8810 	msr	PRIMASK, r3
}
 8009fa8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f008 fc8f 	bl	80128d4 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009fb6:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3720      	adds	r7, #32
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <_nx_ip_header_add>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08c      	sub	sp, #48	; 0x30
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fdc:	d106      	bne.n	8009fec <_nx_ip_header_add+0x2c>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d101      	bne.n	8009fec <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 8009fe8:	2304      	movs	r3, #4
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ff2:	f06f 0313 	mvn.w	r3, #19
 8009ff6:	1a5b      	subs	r3, r3, r1
 8009ff8:	441a      	add	r2, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	4413      	add	r3, r2
 800a006:	f103 0214 	add.w	r2, r3, #20
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	d204      	bcs.n	800a024 <_nx_ip_header_add+0x64>
 800a01a:	f04f 30ff 	mov.w	r0, #4294967295
 800a01e:	f009 fb67 	bl	80136f0 <_tx_thread_sleep>
 800a022:	e7fa      	b.n	800a01a <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	4413      	add	r3, r2
 800a03e:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800a040:	3314      	adds	r3, #20
 800a042:	b2da      	uxtb	r2, r3
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 800a054:	2300      	movs	r3, #0
 800a056:	e08b      	b.n	800a170 <_nx_ip_header_add+0x1b0>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	4313      	orrs	r3, r2
 800a068:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	e008      	b.n	800a084 <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	b29a      	uxth	r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a08a:	1c59      	adds	r1, r3, #1
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 800a092:	041a      	lsls	r2, r3, #16
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	431a      	orrs	r2, r3
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	061a      	lsls	r2, r3, #24
 800a0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ac:	695a      	ldr	r2, [r3, #20]
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d004      	beq.n	800a0c8 <_nx_ip_header_add+0x108>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	3314      	adds	r3, #20
 800a0c4:	4a2c      	ldr	r2, [pc, #176]	; (800a178 <_nx_ip_header_add+0x1b8>)
 800a0c6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	ba1a      	rev	r2, r3
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	ba1a      	rev	r2, r3
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	ba1a      	rev	r2, r3
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	ba1a      	rev	r2, r3
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	ba1a      	rev	r2, r3
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d008      	beq.n	800a112 <_nx_ip_header_add+0x152>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	3314      	adds	r3, #20
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	3314      	adds	r3, #20
 800a10e:	ba12      	rev	r2, r2
 800a110:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <_nx_ip_header_add+0x164>
    {
        compute_checksum = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d01b      	beq.n	800a162 <_nx_ip_header_add+0x1a2>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800a130:	2300      	movs	r3, #0
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	2104      	movs	r1, #4
 800a138:	68b8      	ldr	r0, [r7, #8]
 800a13a:	f7ff f8d5 	bl	80092e8 <_nx_ip_checksum_compute>
 800a13e:	4603      	mov	r3, r0
 800a140:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	43db      	mvns	r3, r3
 800a146:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	ba1b      	rev	r3, r3
 800a152:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	431a      	orrs	r2, r3
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	609a      	str	r2, [r3, #8]
 800a160:	e005      	b.n	800a16e <_nx_ip_header_add+0x1ae>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	f043 0201 	orr.w	r2, r3, #1
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3728      	adds	r7, #40	; 0x28
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	94040000 	.word	0x94040000

0800a17c <_nx_ip_interface_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_get(NX_IP *ip_ptr, UINT interface_index, ULONG *ip_address, ULONG *network_mask)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
                            ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);



    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a190:	f04f 31ff 	mov.w	r1, #4294967295
 800a194:	4618      	mov	r0, r3
 800a196:	f008 f925 	bl	80123e4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a19a:	f3ef 8310 	mrs	r3, PRIMASK
 800a19e:	617b      	str	r3, [r7, #20]
    return(posture);
 800a1a0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a1a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1a4:	b672      	cpsid	i
    return(int_posture);
 800a1a6:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a1a8:	61fb      	str	r3, [r7, #28]


    /* Pickup the IP address and the network mask. */
    *ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 800a1aa:	68f9      	ldr	r1, [r7, #12]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	440b      	add	r3, r1
 800a1b8:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	011b      	lsls	r3, r3, #4
 800a1ce:	440b      	add	r3, r1
 800a1d0:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	f383 8810 	msr	PRIMASK, r3
}
 800a1e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f008 fb71 	bl	80128d4 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a1f2:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3720      	adds	r7, #32
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <_nx_ip_interface_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_set(NX_IP *ip_ptr, UINT interface_index, ULONG ip_address, ULONG network_mask)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08c      	sub	sp, #48	; 0x30
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_SET, ip_ptr, ip_address, network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a210:	f04f 31ff 	mov.w	r1, #4294967295
 800a214:	4618      	mov	r0, r3
 800a216:	f008 f8e5 	bl	80123e4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a21a:	f3ef 8310 	mrs	r3, PRIMASK
 800a21e:	617b      	str	r3, [r7, #20]
    return(posture);
 800a220:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a222:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a224:	b672      	cpsid	i
    return(int_posture);
 800a226:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a228:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save previous IP address and network mask.  */
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 800a22a:	68f9      	ldr	r1, [r7, #12]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	440b      	add	r3, r1
 800a238:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	62bb      	str	r3, [r7, #40]	; 0x28
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 800a240:	68f9      	ldr	r1, [r7, #12]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	440b      	add	r3, r1
 800a24e:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the current notification callback and additional information pointers.  */
    address_change_notify =  ip_ptr -> nx_ip_address_change_notify;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a25c:	623b      	str	r3, [r7, #32]
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a264:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address and the network mask. */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
 800a266:	68f9      	ldr	r1, [r7, #12]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	440b      	add	r3, r1
 800a274:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
 800a27c:	68f9      	ldr	r1, [r7, #12]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	440b      	add	r3, r1
 800a28a:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	ea02 0103 	and.w	r1, r2, r3
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	4403      	add	r3, r0
 800a2a8:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 800a2ac:	6019      	str	r1, [r3, #0]

    /* Ensure the RARP function is disabled.  */
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
    ip_ptr -> nx_ip_rarp_queue_process =    NX_NULL;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	f383 8810 	msr	PRIMASK, r3
}
 800a2c8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f008 faff 	bl	80128d4 <_tx_mutex_put>

    /* Determine if the application should be notified of the IP address and/or
       network mask change.  */
    if ((address_change_notify) &&
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00b      	beq.n	800a2f4 <_nx_ip_interface_address_set+0xf8>
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d103      	bne.n	800a2ec <_nx_ip_interface_address_set+0xf0>
        ((ip_address != previous_ip_address) || (network_mask != previous_network_mask)))
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d003      	beq.n	800a2f4 <_nx_ip_interface_address_set+0xf8>
    {

        /* Yes, call the application's IP address change notify function.  */
        (address_change_notify)(ip_ptr, additional_info);
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	69f9      	ldr	r1, [r7, #28]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	4798      	blx	r3
    }

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 800a2f4:	68f9      	ldr	r1, [r7, #12]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	440b      	add	r3, r1
 800a302:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a30a:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3730      	adds	r7, #48	; 0x30
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b098      	sub	sp, #96	; 0x60
 800a318:	af02      	add	r7, sp, #8
 800a31a:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 800a31c:	2300      	movs	r3, #0
 800a31e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 800a326:	2304      	movs	r3, #4
 800a328:	657b      	str	r3, [r7, #84]	; 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop to process headers. */
    while (!is_done)
 800a330:	e170      	b.n	800a614 <_nx_ip_packet_checksum_compute+0x300>
 800a332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a334:	3b01      	subs	r3, #1
 800a336:	2b10      	cmp	r3, #16
 800a338:	f200 8168 	bhi.w	800a60c <_nx_ip_packet_checksum_compute+0x2f8>
 800a33c:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <_nx_ip_packet_checksum_compute+0x30>)
 800a33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a342:	bf00      	nop
 800a344:	0800a507 	.word	0x0800a507
 800a348:	0800a567 	.word	0x0800a567
 800a34c:	0800a60d 	.word	0x0800a60d
 800a350:	0800a389 	.word	0x0800a389
 800a354:	0800a60d 	.word	0x0800a60d
 800a358:	0800a439 	.word	0x0800a439
 800a35c:	0800a60d 	.word	0x0800a60d
 800a360:	0800a60d 	.word	0x0800a60d
 800a364:	0800a60d 	.word	0x0800a60d
 800a368:	0800a60d 	.word	0x0800a60d
 800a36c:	0800a60d 	.word	0x0800a60d
 800a370:	0800a60d 	.word	0x0800a60d
 800a374:	0800a60d 	.word	0x0800a60d
 800a378:	0800a60d 	.word	0x0800a60d
 800a37c:	0800a60d 	.word	0x0800a60d
 800a380:	0800a60d 	.word	0x0800a60d
 800a384:	0800a4a3 	.word	0x0800a4a3
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 800a38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	637b      	str	r3, [r7, #52]	; 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 800a394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a396:	ba1b      	rev	r3, r3
 800a398:	637b      	str	r3, [r7, #52]	; 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800a39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39c:	0e1b      	lsrs	r3, r3, #24
 800a39e:	f003 030f 	and.w	r3, r3, #15
 800a3a2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01f      	beq.n	800a3f0 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	2104      	movs	r1, #4
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fe ff93 	bl	80092e8 <_nx_ip_checksum_compute>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	647b      	str	r3, [r7, #68]	; 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 800a3c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	637b      	str	r3, [r7, #52]	; 0x34
                val = val & NX_LOWER_16_MASK;
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d4:	ba1b      	rev	r3, r3
 800a3d6:	637b      	str	r3, [r7, #52]	; 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	689a      	ldr	r2, [r3, #8]
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e8:	f023 0201 	bic.w	r2, r3, #1
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	639a      	str	r2, [r3, #56]	; 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	ba1b      	rev	r3, r3
 800a400:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	ba1b      	rev	r3, r3
 800a406:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	637b      	str	r3, [r7, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 800a40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a410:	ba1b      	rev	r3, r3
 800a412:	637b      	str	r3, [r7, #52]	; 0x34
            next_protocol = (val >> 16) & 0xFF;
 800a414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a416:	0c1b      	lsrs	r3, r3, #16
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	441a      	add	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	64fb      	str	r3, [r7, #76]	; 0x4c
            break;
 800a436:	e0ed      	b.n	800a614 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	d02a      	beq.n	800a49a <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800a444:	f107 0218 	add.w	r2, r7, #24
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	4613      	mov	r3, r2
 800a450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a452:	2106      	movs	r1, #6
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7fe ff47 	bl	80092e8 <_nx_ip_checksum_compute>
 800a45a:	4603      	mov	r3, r0
 800a45c:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 800a464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a466:	43db      	mvns	r3, r3
 800a468:	b29b      	uxth	r3, r3
 800a46a:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800a46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	ba1a      	rev	r2, r3
 800a472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a474:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 800a476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a478:	691a      	ldr	r2, [r3, #16]
 800a47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a47c:	041b      	lsls	r3, r3, #16
 800a47e:	431a      	orrs	r2, r3
 800a480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a482:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800a484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	ba1a      	rev	r2, r3
 800a48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48c:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	f023 0204 	bic.w	r2, r3, #4
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a4a0:	e0b8      	b.n	800a614 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a6:	f003 0310 	and.w	r3, r3, #16
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d027      	beq.n	800a4fe <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 800a4ae:	f107 0218 	add.w	r2, r7, #24
 800a4b2:	f107 0308 	add.w	r3, r7, #8
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4bc:	2111      	movs	r1, #17
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fe ff12 	bl	80092e8 <_nx_ip_checksum_compute>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	643b      	str	r3, [r7, #64]	; 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	ba1a      	rev	r2, r3
 800a4d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d6:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 800a4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4de:	43db      	mvns	r3, r3
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e6:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	ba1a      	rev	r2, r3
 800a4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4f0:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f6:	f023 0210 	bic.w	r2, r3, #16
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a504:	e086      	b.n	800a614 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d025      	beq.n	800a55e <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 800a512:	2300      	movs	r3, #0
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2300      	movs	r3, #0
 800a518:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a51a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7fe fee2 	bl	80092e8 <_nx_ip_checksum_compute>
 800a524:	4603      	mov	r3, r0
 800a526:	647b      	str	r3, [r7, #68]	; 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	ba1a      	rev	r2, r3
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a53e:	43db      	mvns	r3, r3
 800a540:	b29b      	uxth	r3, r3
 800a542:	431a      	orrs	r2, r3
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	ba1a      	rev	r2, r3
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a556:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a564:	e056      	b.n	800a614 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d048      	beq.n	800a604 <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	ba1a      	rev	r2, r3
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	ba1a      	rev	r2, r3
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	637b      	str	r3, [r7, #52]	; 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 800a592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a594:	0c1b      	lsrs	r3, r3, #16
 800a596:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 800a598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a59e:	4413      	add	r3, r2
 800a5a0:	647b      	str	r3, [r7, #68]	; 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5aa:	0c1b      	lsrs	r3, r3, #16
 800a5ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5ae:	4413      	add	r3, r2
 800a5b0:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5b8:	4413      	add	r3, r2
 800a5ba:	647b      	str	r3, [r7, #68]	; 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 800a5bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5be:	0c1a      	lsrs	r2, r3, #16
 800a5c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	4413      	add	r3, r2
 800a5c6:	647b      	str	r3, [r7, #68]	; 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 800a5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ca:	0c1a      	lsrs	r2, r3, #16
 800a5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	647b      	str	r3, [r7, #68]	; 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 800a5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5da:	43db      	mvns	r3, r3
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e2:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	ba1a      	rev	r2, r3
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ec:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	ba1a      	rev	r2, r3
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800a604:	2301      	movs	r3, #1
 800a606:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a60a:	e003      	b.n	800a614 <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 800a60c:	2301      	movs	r3, #1
 800a60e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800a612:	bf00      	nop
    while (!is_done)
 800a614:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f43f ae8a 	beq.w	800a332 <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a622:	609a      	str	r2, [r3, #8]
    return;
 800a624:	bf00      	nop
}
 800a626:	3758      	adds	r7, #88	; 0x58
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a636:	f3ef 8310 	mrs	r3, PRIMASK
 800a63a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a63c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a63e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a640:	b672      	cpsid	i
    return(int_posture);
 800a642:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800a644:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d011      	beq.n	800a674 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2200      	movs	r2, #0
 800a65e:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f383 8810 	msr	PRIMASK, r3
}
 800a672:	e019      	b.n	800a6a8 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2200      	movs	r2, #0
 800a688:	61da      	str	r2, [r3, #28]
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f383 8810 	msr	PRIMASK, r3
}
 800a694:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a69c:	2200      	movs	r2, #0
 800a69e:	2108      	movs	r1, #8
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f007 fa5b 	bl	8011b5c <_tx_event_flags_set>
    }
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	3720      	adds	r7, #32
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <_nx_ip_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d104      	bne.n	800a6d6 <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f203 721c 	addw	r2, r3, #1820	; 0x71c
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	091b      	lsrs	r3, r3, #4
 800a6e2:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	7bba      	ldrb	r2, [r7, #14]
 800a6e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d10b      	bne.n	800a712 <_nx_ip_packet_receive+0x62>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 800a700:	2b00      	cmp	r3, #0
 800a702:	d006      	beq.n	800a712 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	4798      	blx	r3
        return;
 800a710:	e00d      	b.n	800a72e <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 800a726:	6838      	ldr	r0, [r7, #0]
 800a728:	f001 fb98 	bl	800be5c <_nx_packet_release>

    return;
 800a72c:	bf00      	nop
}
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af04      	add	r7, sp, #16
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a750:	2b00      	cmp	r3, #0
 800a752:	d114      	bne.n	800a77e <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	f1a3 0214 	sub.w	r2, r3, #20
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	f103 0214 	add.w	r2, r3, #20
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800a776:	68b8      	ldr	r0, [r7, #8]
 800a778:	f001 fc28 	bl	800bfcc <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 800a77c:	e037      	b.n	800a7ee <_nx_ip_packet_send+0xba>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, destination_ip, type_of_service, time_to_live, protocol, fragment);
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	9302      	str	r3, [sp, #8]
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	9301      	str	r3, [sp, #4]
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	68b9      	ldr	r1, [r7, #8]
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7ff fc15 	bl	8009fc0 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d120      	bne.n	800a7de <_nx_ip_packet_send+0xaa>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00b      	beq.n	800a7be <_nx_ip_packet_send+0x8a>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 f82d 	bl	800a818 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <_nx_ip_packet_send+0x98>
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d108      	bne.n	800a7de <_nx_ip_packet_send+0xaa>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 800a7d6:	68b8      	ldr	r0, [r7, #8]
 800a7d8:	f001 fbf8 	bl	800bfcc <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 800a7dc:	e007      	b.n	800a7ee <_nx_ip_packet_send+0xba>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7ff f8c8 	bl	800997e <_nx_ip_driver_packet_send>
}
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a806:	2200      	movs	r2, #0
 800a808:	2101      	movs	r1, #1
 800a80a:	4618      	mov	r0, r3
 800a80c:	f007 f9a6 	bl	8011b5c <_tx_event_flags_set>
}
 800a810:	bf00      	nop
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 800a818:	b480      	push	{r7}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a832:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800a836:	d003      	beq.n	800a840 <_nx_ip_route_find+0x28>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83e:	d133      	bne.n	800a8a8 <_nx_ip_route_find+0x90>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d123      	bne.n	800a896 <_nx_ip_route_find+0x7e>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a84e:	2300      	movs	r3, #0
 800a850:	617b      	str	r3, [r7, #20]
 800a852:	e01c      	b.n	800a88e <_nx_ip_route_find+0x76>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 800a854:	68f9      	ldr	r1, [r7, #12]
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	440b      	add	r3, r1
 800a862:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00d      	beq.n	800a888 <_nx_ip_route_find+0x70>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	011b      	lsls	r3, r3, #4
 800a876:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4413      	add	r3, r2
 800a87e:	1d1a      	adds	r2, r3, #4
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 800a884:	2300      	movs	r3, #0
 800a886:	e141      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	3301      	adds	r3, #1
 800a88c:	617b      	str	r3, [r7, #20]
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d0df      	beq.n	800a854 <_nx_ip_route_find+0x3c>
 800a894:	e006      	b.n	800a8a4 <_nx_ip_route_find+0x8c>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	799b      	ldrb	r3, [r3, #6]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <_nx_ip_route_find+0x8c>
        {
            return(NX_SUCCESS);
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	e133      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 800a8a4:	2321      	movs	r3, #33	; 0x21
 800a8a6:	e131      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	e02b      	b.n	800a906 <_nx_ip_route_find+0xee>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	011b      	lsls	r3, r3, #4
 800a8b8:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	791b      	ldrb	r3, [r3, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d019      	beq.n	800a900 <_nx_ip_route_find+0xe8>
            (interface_ptr -> nx_interface_link_up) &&
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d015      	beq.n	800a900 <_nx_ip_route_find+0xe8>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d110      	bne.n	800a900 <_nx_ip_route_find+0xe8>
            ((*ip_interface_ptr == NX_NULL) ||
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d004      	beq.n	800a8f0 <_nx_ip_route_find+0xd8>
             (*ip_interface_ptr == interface_ptr)))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d107      	bne.n	800a900 <_nx_ip_route_find+0xe8>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e105      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	3301      	adds	r3, #1
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d0d0      	beq.n	800a8ae <_nx_ip_route_find+0x96>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a90c:	2300      	movs	r3, #0
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	e037      	b.n	800a982 <_nx_ip_route_find+0x16a>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	4613      	mov	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	011b      	lsls	r3, r3, #4
 800a91c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	3304      	adds	r3, #4
 800a926:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	791b      	ldrb	r3, [r3, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d025      	beq.n	800a97c <_nx_ip_route_find+0x164>
            (interface_ptr -> nx_interface_link_up) &&
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800a934:	2b00      	cmp	r3, #0
 800a936:	d021      	beq.n	800a97c <_nx_ip_route_find+0x164>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	699a      	ldr	r2, [r3, #24]
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	401a      	ands	r2, r3
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 800a944:	429a      	cmp	r2, r3
 800a946:	d119      	bne.n	800a97c <_nx_ip_route_find+0x164>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <_nx_ip_route_find+0x140>
            {
                *ip_interface_ptr = interface_ptr;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	e00b      	b.n	800a970 <_nx_ip_route_find+0x158>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d103      	bne.n	800a966 <_nx_ip_route_find+0x14e>
            {
                *ip_interface_ptr = interface_ptr;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	e004      	b.n	800a970 <_nx_ip_route_find+0x158>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d104      	bne.n	800a97a <_nx_ip_route_find+0x162>
            {
                continue;
            }

            *next_hop_address = destination_address;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800a976:	2300      	movs	r3, #0
 800a978:	e0c8      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
                continue;
 800a97a:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	3301      	adds	r3, #1
 800a980:	617b      	str	r3, [r7, #20]
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d9c4      	bls.n	800a912 <_nx_ip_route_find+0xfa>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	4b63      	ldr	r3, [pc, #396]	; (800ab18 <_nx_ip_route_find+0x300>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	4a63      	ldr	r2, [pc, #396]	; (800ab1c <_nx_ip_route_find+0x304>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d144      	bne.n	800aa1e <_nx_ip_route_find+0x206>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00e      	beq.n	800a9ba <_nx_ip_route_find+0x1a2>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	791b      	ldrb	r3, [r3, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d03b      	beq.n	800aa1e <_nx_ip_route_find+0x206>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d036      	beq.n	800aa1e <_nx_ip_route_find+0x206>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e0a8      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	617b      	str	r3, [r7, #20]
 800a9be:	e02b      	b.n	800aa18 <_nx_ip_route_find+0x200>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800a9c0:	68f9      	ldr	r1, [r7, #12]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	440b      	add	r3, r1
 800a9ce:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d01c      	beq.n	800aa12 <_nx_ip_route_find+0x1fa>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 800a9d8:	68f9      	ldr	r1, [r7, #12]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	440b      	add	r3, r1
 800a9e6:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800a9ea:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d010      	beq.n	800aa12 <_nx_ip_route_find+0x1fa>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	011b      	lsls	r3, r3, #4
 800a9fa:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4413      	add	r3, r2
 800aa02:	1d1a      	adds	r2, r3, #4
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e07c      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	3301      	adds	r3, #1
 800aa16:	617b      	str	r3, [r7, #20]
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d9d0      	bls.n	800a9c0 <_nx_ip_route_find+0x1a8>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d02b      	beq.n	800aa7e <_nx_ip_route_find+0x266>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d027      	beq.n	800aa7e <_nx_ip_route_find+0x266>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d022      	beq.n	800aa7e <_nx_ip_route_find+0x266>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 800aa4a:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d001      	beq.n	800aa54 <_nx_ip_route_find+0x23c>
        {
            return(NX_IP_ADDRESS_ERROR);
 800aa50:	2321      	movs	r3, #33	; 0x21
 800aa52:	e05b      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d103      	bne.n	800aa64 <_nx_ip_route_find+0x24c>
        {
            *ip_interface_ptr = interface_ptr;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	e006      	b.n	800aa72 <_nx_ip_route_find+0x25a>
        }
        else if (*ip_interface_ptr != interface_ptr)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d001      	beq.n	800aa72 <_nx_ip_route_find+0x25a>
        {
            return(NX_IP_ADDRESS_ERROR);
 800aa6e:	2321      	movs	r3, #33	; 0x21
 800aa70:	e04c      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e046      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d016      	beq.n	800aab4 <_nx_ip_route_find+0x29c>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	791b      	ldrb	r3, [r3, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d03c      	beq.n	800ab0a <_nx_ip_route_find+0x2f2>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d037      	beq.n	800ab0a <_nx_ip_route_find+0x2f2>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	695a      	ldr	r2, [r3, #20]
 800aaa0:	4b1d      	ldr	r3, [pc, #116]	; (800ab18 <_nx_ip_route_find+0x300>)
 800aaa2:	4013      	ands	r3, r2
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800aaa4:	4a1d      	ldr	r2, [pc, #116]	; (800ab1c <_nx_ip_route_find+0x304>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d12f      	bne.n	800ab0a <_nx_ip_route_find+0x2f2>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800aab0:	2300      	movs	r3, #0
 800aab2:	e02b      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aab4:	2300      	movs	r3, #0
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	e024      	b.n	800ab04 <_nx_ip_route_find+0x2ec>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	4613      	mov	r3, r2
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	4413      	add	r3, r2
 800aacc:	3304      	adds	r3, #4
 800aace:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	791b      	ldrb	r3, [r3, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d012      	beq.n	800aafe <_nx_ip_route_find+0x2e6>
                (interface_ptr -> nx_interface_link_up) &&
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00e      	beq.n	800aafe <_nx_ip_route_find+0x2e6>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	695a      	ldr	r2, [r3, #20]
 800aae4:	4b0c      	ldr	r3, [pc, #48]	; (800ab18 <_nx_ip_route_find+0x300>)
 800aae6:	4013      	ands	r3, r2
                (interface_ptr -> nx_interface_link_up) &&
 800aae8:	4a0c      	ldr	r2, [pc, #48]	; (800ab1c <_nx_ip_route_find+0x304>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d107      	bne.n	800aafe <_nx_ip_route_find+0x2e6>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800aafa:	2300      	movs	r3, #0
 800aafc:	e006      	b.n	800ab0c <_nx_ip_route_find+0x2f4>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	3301      	adds	r3, #1
 800ab02:	617b      	str	r3, [r7, #20]
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d9d7      	bls.n	800aaba <_nx_ip_route_find+0x2a2>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 800ab0a:	2321      	movs	r3, #33	; 0x21
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	ffff0000 	.word	0xffff0000
 800ab1c:	a9fe0000 	.word	0xa9fe0000

0800ab20 <_nx_ip_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b096      	sub	sp, #88	; 0x58
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ab2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab2e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ab32:	f04f 31ff 	mov.w	r1, #4294967295
 800ab36:	4618      	mov	r0, r3
 800ab38:	f007 fc54 	bl	80123e4 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 800ab3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ab44:	2300      	movs	r3, #0
 800ab46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab48:	e071      	b.n	800ac2e <_nx_ip_thread_entry+0x10e>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 800ab4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab4e:	4613      	mov	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	440b      	add	r3, r1
 800ab58:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d062      	beq.n	800ac28 <_nx_ip_thread_entry+0x108>
 800ab62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	011b      	lsls	r3, r3, #4
 800ab6e:	440b      	add	r3, r1
 800ab70:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d056      	beq.n	800ac28 <_nx_ip_thread_entry+0x108>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 800ab7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	011b      	lsls	r3, r3, #4
 800ab86:	440b      	add	r3, r1
 800ab88:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 800ab90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	011b      	lsls	r3, r3, #4
 800ab9c:	440b      	add	r3, r1
 800ab9e:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800aba2:	2201      	movs	r2, #1
 800aba4:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 800aba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aba8:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 800abaa:	2313      	movs	r3, #19
 800abac:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 800abae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800abbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abbe:	4413      	add	r3, r2
 800abc0:	3304      	adds	r3, #4
 800abc2:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800abc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	011b      	lsls	r3, r3, #4
 800abd0:	440b      	add	r3, r1
 800abd2:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f107 0210 	add.w	r2, r7, #16
 800abdc:	4610      	mov	r0, r2
 800abde:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800abe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe2:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 800abe4:	2301      	movs	r3, #1
 800abe6:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800abe8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abec:	4613      	mov	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	011b      	lsls	r3, r3, #4
 800abf4:	440b      	add	r3, r1
 800abf6:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f107 0210 	add.w	r2, r7, #16
 800ac00:	4610      	mov	r0, r2
 800ac02:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800ac04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac06:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 800ac08:	2302      	movs	r3, #2
 800ac0a:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800ac0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	440b      	add	r3, r1
 800ac1a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f107 0210 	add.w	r2, r7, #16
 800ac24:	4610      	mov	r0, r2
 800ac26:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ac28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d08a      	beq.n	800ab4a <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ac34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac36:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f007 fe4a 	bl	80128d4 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 800ac40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac42:	f503 7012 	add.w	r0, r3, #584	; 0x248
 800ac46:	f107 030c 	add.w	r3, r7, #12
 800ac4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4e:	9200      	str	r2, [sp, #0]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f04f 31ff 	mov.w	r1, #4294967295
 800ac56:	f006 fe9f 	bl	8011998 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ac5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac5c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ac60:	f04f 31ff 	mov.w	r1, #4294967295
 800ac64:	4618      	mov	r0, r3
 800ac66:	f007 fbbd 	bl	80123e4 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f003 0308 	and.w	r3, r3, #8
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d031      	beq.n	800acd8 <_nx_ip_thread_entry+0x1b8>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800ac74:	e023      	b.n	800acbe <_nx_ip_thread_entry+0x19e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac76:	f3ef 8310 	mrs	r3, PRIMASK
 800ac7a:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800ac7e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac80:	b672      	cpsid	i
    return(int_posture);
 800ac82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 800ac84:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 800ac86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac88:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 800ac8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac90:	69da      	ldr	r2, [r3, #28]
 800ac92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac94:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 800ac98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac9a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d103      	bne.n	800acaa <_nx_ip_thread_entry+0x18a>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800aca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aca4:	2200      	movs	r2, #0
 800aca6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800acaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acac:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	f383 8810 	msr	PRIMASK, r3
}
 800acb4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 800acb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800acb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800acba:	f7ff fcf9 	bl	800a6b0 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800acbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acc0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1d6      	bne.n	800ac76 <_nx_ip_thread_entry+0x156>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 0308 	bic.w	r3, r3, #8
 800acce:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 8133 	beq.w	800af3e <_nx_ip_thread_entry+0x41e>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00c      	beq.n	800acfc <_nx_ip_thread_entry+0x1dc>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800ace2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ace4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800ace8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800acea:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acf2:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 8123 	beq.w	800af42 <_nx_ip_thread_entry+0x422>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d011      	beq.n	800ad2a <_nx_ip_thread_entry+0x20a>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 800ad06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad08:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d004      	beq.n	800ad1a <_nx_ip_thread_entry+0x1fa>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800ad10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad12:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800ad16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad18:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad20:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 810e 	beq.w	800af46 <_nx_ip_thread_entry+0x426>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d039      	beq.n	800ada8 <_nx_ip_thread_entry+0x288>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800ad34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad36:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d004      	beq.n	800ad48 <_nx_ip_thread_entry+0x228>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 800ad3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad40:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800ad44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad46:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 800ad48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad4a:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d004      	beq.n	800ad5c <_nx_ip_thread_entry+0x23c>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800ad52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad54:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 800ad58:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad5a:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 800ad5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad5e:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d004      	beq.n	800ad70 <_nx_ip_thread_entry+0x250>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 800ad66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad68:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800ad6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad6e:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800ad70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad72:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <_nx_ip_thread_entry+0x264>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 800ad7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad7c:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800ad80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad82:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 800ad84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad86:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d004      	beq.n	800ad98 <_nx_ip_thread_entry+0x278>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 800ad8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad90:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800ad94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad96:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f023 0301 	bic.w	r3, r3, #1
 800ad9e:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 80d1 	beq.w	800af4a <_nx_ip_thread_entry+0x42a>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f003 0310 	and.w	r3, r3, #16
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d009      	beq.n	800adc6 <_nx_ip_thread_entry+0x2a6>
 800adb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adb4:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <_nx_ip_thread_entry+0x2a6>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 800adbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adbe:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 800adc2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adc4:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f003 0320 	and.w	r3, r3, #32
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d009      	beq.n	800ade4 <_nx_ip_thread_entry+0x2c4>
 800add0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800add2:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800add6:	2b00      	cmp	r3, #0
 800add8:	d004      	beq.n	800ade4 <_nx_ip_thread_entry+0x2c4>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 800adda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800addc:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800ade0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ade2:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	d004      	beq.n	800adf8 <_nx_ip_thread_entry+0x2d8>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 800adee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf0:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 800adf4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adf6:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d036      	beq.n	800ae70 <_nx_ip_thread_entry+0x350>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ae02:	2300      	movs	r3, #0
 800ae04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae06:	e030      	b.n	800ae6a <_nx_ip_thread_entry+0x34a>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 800ae08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	440b      	add	r3, r1
 800ae16:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d021      	beq.n	800ae64 <_nx_ip_thread_entry+0x344>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800ae20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae22:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800ae24:	2308      	movs	r3, #8
 800ae26:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 800ae28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae2c:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 800ae2e:	4b48      	ldr	r3, [pc, #288]	; (800af50 <_nx_ip_thread_entry+0x430>)
 800ae30:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 800ae32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae34:	4613      	mov	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	011b      	lsls	r3, r3, #4
 800ae3c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800ae40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae42:	4413      	add	r3, r2
 800ae44:	3304      	adds	r3, #4
 800ae46:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800ae48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	011b      	lsls	r3, r3, #4
 800ae54:	440b      	add	r3, r1
 800ae56:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f107 0210 	add.w	r2, r7, #16
 800ae60:	4610      	mov	r0, r2
 800ae62:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ae64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae66:	3301      	adds	r3, #1
 800ae68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d0cb      	beq.n	800ae08 <_nx_ip_thread_entry+0x2e8>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d009      	beq.n	800ae8e <_nx_ip_thread_entry+0x36e>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 800ae7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae7c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d004      	beq.n	800ae8e <_nx_ip_thread_entry+0x36e>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 800ae84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae86:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800ae8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae8c:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d004      	beq.n	800aea2 <_nx_ip_thread_entry+0x382>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 800ae98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9a:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800ae9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800aea0:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d034      	beq.n	800af16 <_nx_ip_thread_entry+0x3f6>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800aeac:	2300      	movs	r3, #0
 800aeae:	64bb      	str	r3, [r7, #72]	; 0x48
 800aeb0:	e02e      	b.n	800af10 <_nx_ip_thread_entry+0x3f0>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 800aeb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aeb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	440b      	add	r3, r1
 800aec0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d01f      	beq.n	800af0a <_nx_ip_thread_entry+0x3ea>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 800aeca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aecc:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 800aece:	2312      	movs	r3, #18
 800aed0:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800aed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	011b      	lsls	r3, r3, #4
 800aedc:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800aee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aee2:	4413      	add	r3, r2
 800aee4:	3304      	adds	r3, #4
 800aee6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800aee8:	f107 0308 	add.w	r3, r7, #8
 800aeec:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800aeee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aef2:	4613      	mov	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	011b      	lsls	r3, r3, #4
 800aefa:	440b      	add	r3, r1
 800aefc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f107 0210 	add.w	r2, r7, #16
 800af06:	4610      	mov	r0, r2
 800af08:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800af0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af0c:	3301      	adds	r3, #1
 800af0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800af10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0cd      	beq.n	800aeb2 <_nx_ip_thread_entry+0x392>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d004      	beq.n	800af2a <_nx_ip_thread_entry+0x40a>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 800af20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af22:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 800af26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af28:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af30:	2b00      	cmp	r3, #0
 800af32:	f43f ae7f 	beq.w	800ac34 <_nx_ip_thread_entry+0x114>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 800af36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af38:	f7fe fbfe 	bl	8009738 <_nx_ip_deferred_link_status_process>
 800af3c:	e67a      	b.n	800ac34 <_nx_ip_thread_entry+0x114>
                continue;
 800af3e:	bf00      	nop
 800af40:	e678      	b.n	800ac34 <_nx_ip_thread_entry+0x114>
                continue;
 800af42:	bf00      	nop
 800af44:	e676      	b.n	800ac34 <_nx_ip_thread_entry+0x114>
                continue;
 800af46:	bf00      	nop
 800af48:	e674      	b.n	800ac34 <_nx_ip_thread_entry+0x114>
                continue;
 800af4a:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800af4c:	e672      	b.n	800ac34 <_nx_ip_thread_entry+0x114>
 800af4e:	bf00      	nop
 800af50:	5e000001 	.word	0x5e000001

0800af54 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08a      	sub	sp, #40	; 0x28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 800af5e:	2314      	movs	r3, #20
 800af60:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	3314      	adds	r3, #20
 800af76:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	0e1b      	lsrs	r3, r3, #24
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	3b05      	subs	r3, #5
 800af84:	b2db      	uxtb	r3, r3
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 800af8a:	e0a3      	b.n	800b0d4 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	2b44      	cmp	r3, #68	; 0x44
 800af96:	d010      	beq.n	800afba <_nx_ipv4_option_process+0x66>
 800af98:	2b44      	cmp	r3, #68	; 0x44
 800af9a:	f300 8082 	bgt.w	800b0a2 <_nx_ipv4_option_process+0x14e>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d002      	beq.n	800afa8 <_nx_ipv4_option_process+0x54>
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d002      	beq.n	800afac <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800afa6:	e07c      	b.n	800b0a2 <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 800afa8:	2301      	movs	r3, #1
 800afaa:	e099      	b.n	800b0e0 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	3301      	adds	r3, #1
 800afb0:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	3301      	adds	r3, #1
 800afb6:	623b      	str	r3, [r7, #32]
            continue;
 800afb8:	e08c      	b.n	800b0d4 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	3301      	adds	r3, #1
 800afbe:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d90b      	bls.n	800afde <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	4413      	add	r3, r2
 800afcc:	3302      	adds	r3, #2
 800afce:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7fd ffbb 	bl	8008f50 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800afda:	2300      	movs	r3, #0
 800afdc:	e080      	b.n	800b0e0 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	785b      	ldrb	r3, [r3, #1]
 800afe2:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	789b      	ldrb	r3, [r3, #2]
 800afe8:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	3303      	adds	r3, #3
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	091b      	lsrs	r3, r3, #4
 800aff2:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	3303      	adds	r3, #3
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	f003 030f 	and.w	r3, r3, #15
 800affe:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	2b07      	cmp	r3, #7
 800b004:	d908      	bls.n	800b018 <_nx_ipv4_option_process+0xc4>
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	2b28      	cmp	r3, #40	; 0x28
 800b00a:	d805      	bhi.n	800b018 <_nx_ipv4_option_process+0xc4>
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	b2db      	uxtb	r3, r3
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	4413      	add	r3, r2
 800b01e:	3302      	adds	r3, #2
 800b020:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7fd ff92 	bl	8008f50 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b02c:	2300      	movs	r3, #0
 800b02e:	e057      	b.n	800b0e0 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 800b030:	7b7b      	ldrb	r3, [r7, #13]
 800b032:	2b04      	cmp	r3, #4
 800b034:	d905      	bls.n	800b042 <_nx_ipv4_option_process+0xee>
 800b036:	7b7b      	ldrb	r3, [r7, #13]
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10b      	bne.n	800b05a <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 800b042:	69ba      	ldr	r2, [r7, #24]
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	4413      	add	r3, r2
 800b048:	3303      	adds	r3, #3
 800b04a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7fd ff7d 	bl	8008f50 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b056:	2300      	movs	r3, #0
 800b058:	e042      	b.n	800b0e0 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 800b05a:	7b3b      	ldrb	r3, [r7, #12]
 800b05c:	2b0f      	cmp	r3, #15
 800b05e:	d10b      	bne.n	800b078 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	4413      	add	r3, r2
 800b066:	3304      	adds	r3, #4
 800b068:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7fd ff6e 	bl	8008f50 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b074:	2300      	movs	r3, #0
 800b076:	e033      	b.n	800b0e0 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 800b078:	7afb      	ldrb	r3, [r7, #11]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d013      	beq.n	800b0a6 <_nx_ipv4_option_process+0x152>
 800b07e:	7afb      	ldrb	r3, [r7, #11]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d010      	beq.n	800b0a6 <_nx_ipv4_option_process+0x152>
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	2b03      	cmp	r3, #3
 800b088:	d00d      	beq.n	800b0a6 <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	4413      	add	r3, r2
 800b090:	3304      	adds	r3, #4
 800b092:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7fd ff59 	bl	8008f50 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e01e      	b.n	800b0e0 <_nx_ipv4_option_process+0x18c>
            break;
 800b0a2:	bf00      	nop
 800b0a4:	e000      	b.n	800b0a8 <_nx_ipv4_option_process+0x154>
            break;
 800b0a6:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	785b      	ldrb	r3, [r3, #1]
 800b0ac:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d905      	bls.n	800b0c0 <_nx_ipv4_option_process+0x16c>
 800b0b4:	7bba      	ldrb	r2, [r7, #14]
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d201      	bcs.n	800b0c4 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e00d      	b.n	800b0e0 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 800b0c4:	7bbb      	ldrb	r3, [r7, #14]
 800b0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c8:	4413      	add	r3, r2
 800b0ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	6a3a      	ldr	r2, [r7, #32]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 800b0d4:	6a3a      	ldr	r2, [r7, #32]
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	f4ff af57 	bcc.w	800af8c <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 800b0de:	2301      	movs	r3, #1
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3728      	adds	r7, #40	; 0x28
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b098      	sub	sp, #96	; 0x60
 800b0ec:	af02      	add	r7, sp, #8
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	64bb      	str	r3, [r7, #72]	; 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	653b      	str	r3, [r7, #80]	; 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 800b0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	647b      	str	r3, [r7, #68]	; 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 800b102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b104:	ba1b      	rev	r3, r3
 800b106:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800b108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b114:	429a      	cmp	r2, r3
 800b116:	d066      	beq.n	800b1e6 <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b11e:	429a      	cmp	r2, r3
 800b120:	d90d      	bls.n	800b13e <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b126:	1c5a      	adds	r2, r3, #1
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 800b136:	6838      	ldr	r0, [r7, #0]
 800b138:	f000 fe90 	bl	800be5c <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800b13c:	e233      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14e:	1ad2      	subs	r2, r2, r3
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 800b154:	e044      	b.n	800b1e0 <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d107      	bne.n	800b16e <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b164:	425b      	negs	r3, r3
 800b166:	441a      	add	r2, r3
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 800b16c:	e03b      	b.n	800b1e6 <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 800b174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	461a      	mov	r2, r3
 800b180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b182:	4293      	cmp	r3, r2
 800b184:	d207      	bcs.n	800b196 <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 800b186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b188:	68da      	ldr	r2, [r3, #12]
 800b18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18c:	425b      	negs	r3, r3
 800b18e:	441a      	add	r2, r3
 800b190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b192:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 800b194:	e027      	b.n	800b1e6 <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800b196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b198:	68da      	ldr	r2, [r3, #12]
 800b19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a4:	1a9b      	subs	r3, r3, r2
 800b1a6:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 800b1ac:	e002      	b.n	800b1b4 <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 800b1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 800b1b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d1f7      	bne.n	800b1ae <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 800b1be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d003      	beq.n	800b1d4 <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1d0:	619a      	str	r2, [r3, #24]
 800b1d2:	e002      	b.n	800b1da <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800b1da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1dc:	f000 fe3e 	bl	800be5c <_nx_packet_release>
        while (delta)
 800b1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1b7      	bne.n	800b156 <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ea:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800b1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ee:	0e1b      	lsrs	r3, r3, #24
 800b1f0:	f003 030f 	and.w	r3, r3, #15
 800b1f4:	637b      	str	r3, [r7, #52]	; 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d902      	bls.n	800b208 <_nx_ipv4_packet_receive+0x120>
 800b202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b204:	2b04      	cmp	r3, #4
 800b206:	d80d      	bhi.n	800b224 <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800b21c:	6838      	ldr	r0, [r7, #0]
 800b21e:	f000 fe1d 	bl	800be5c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800b222:	e1c0      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b228:	f003 0302 	and.w	r3, r3, #2
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	64bb      	str	r3, [r7, #72]	; 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 800b234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b236:	2b01      	cmp	r3, #1
 800b238:	d124      	bne.n	800b284 <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 800b23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23c:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800b23e:	2300      	movs	r3, #0
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	2300      	movs	r3, #0
 800b244:	2104      	movs	r1, #4
 800b246:	6838      	ldr	r0, [r7, #0]
 800b248:	f7fe f84e 	bl	80092e8 <_nx_ip_checksum_compute>
 800b24c:	4603      	mov	r3, r0
 800b24e:	633b      	str	r3, [r7, #48]	; 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 800b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b252:	43db      	mvns	r3, r3
 800b254:	b29b      	uxth	r3, r3
 800b256:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the checksum again.  */
        if (checksum)
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d012      	beq.n	800b284 <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 800b27c:	6838      	ldr	r0, [r7, #0]
 800b27e:	f000 fded 	bl	800be5c <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800b282:	e190      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800b284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	ba1a      	rev	r2, r3
 800b28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b28c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800b28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	ba1a      	rev	r2, r3
 800b294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b296:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800b298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	ba1a      	rev	r2, r3
 800b29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a0:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800b2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	ba1a      	rev	r2, r3
 800b2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2aa:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800b2ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	ba1a      	rev	r2, r3
 800b2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2b4:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800b2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b8:	2b05      	cmp	r3, #5
 800b2ba:	d949      	bls.n	800b350 <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7ff fe48 	bl	800af54 <_nx_ipv4_option_process>
 800b2c4:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d108      	bne.n	800b2de <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 800b2d6:	6838      	ldr	r0, [r7, #0]
 800b2d8:	f000 fdc0 	bl	800be5c <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800b2dc:	e163      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 800b2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2ea:	4413      	add	r3, r2
 800b2ec:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 800b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f0:	1f1a      	subs	r2, r3, #4
 800b2f2:	62ba      	str	r2, [r7, #40]	; 0x28
 800b2f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2f6:	6912      	ldr	r2, [r2, #16]
 800b2f8:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	1f1a      	subs	r2, r3, #4
 800b2fe:	62ba      	str	r2, [r7, #40]	; 0x28
 800b300:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b302:	68d2      	ldr	r2, [r2, #12]
 800b304:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800b306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b308:	1f1a      	subs	r2, r3, #4
 800b30a:	62ba      	str	r2, [r7, #40]	; 0x28
 800b30c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b30e:	6892      	ldr	r2, [r2, #8]
 800b310:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 800b312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b314:	1f1a      	subs	r2, r3, #4
 800b316:	62ba      	str	r2, [r7, #40]	; 0x28
 800b318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b31a:	6852      	ldr	r2, [r2, #4]
 800b31c:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 800b31e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 800b326:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 800b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b330:	653b      	str	r3, [r7, #80]	; 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b336:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b346:	3b05      	subs	r3, #5
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	1ad2      	subs	r2, r2, r3
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800b350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b352:	691a      	ldr	r2, [r3, #16]
 800b354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d02f      	beq.n	800b3bc <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800b35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b35e:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800b360:	2b00      	cmp	r3, #0
 800b362:	d02b      	beq.n	800b3bc <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800b364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b366:	691a      	ldr	r2, [r3, #16]
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800b372:	429a      	cmp	r2, r3
 800b374:	d10a      	bne.n	800b38c <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800b376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b378:	691a      	ldr	r2, [r3, #16]
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	43db      	mvns	r3, r3
 800b380:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 800b388:	429a      	cmp	r2, r3
 800b38a:	d017      	beq.n	800b3bc <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800b38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b38e:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800b390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b394:	d012      	beq.n	800b3bc <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800b396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b398:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800b39a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b39e:	d303      	bcc.n	800b3a8 <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800b3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3a2:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	da09      	bge.n	800b3bc <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800b3a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7fd feff 	bl	80091b4 <_nx_igmp_multicast_check>
 800b3b6:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d076      	beq.n	800b4aa <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 800b3bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d046      	beq.n	800b456 <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d033      	beq.n	800b444 <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b3e0:	617b      	str	r3, [r7, #20]
    return(posture);
 800b3e2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b3e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3e6:	b672      	cpsid	i
    return(int_posture);
 800b3e8:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 800b3ea:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00c      	beq.n	800b410 <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 800b40e:	e00a      	b.n	800b426 <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2200      	movs	r2, #0
 800b424:	61da      	str	r2, [r3, #28]
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f383 8810 	msr	PRIMASK, r3
}
 800b430:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b438:	2200      	movs	r2, #0
 800b43a:	2102      	movs	r1, #2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f006 fb8d 	bl	8011b5c <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800b442:	e0b0      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b448:	1c5a      	adds	r2, r3, #1
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 800b44e:	6838      	ldr	r0, [r7, #0]
 800b450:	f000 fd04 	bl	800be5c <_nx_packet_release>
            return;
 800b454:	e0a7      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 800b456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	0c1b      	lsrs	r3, r3, #16
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	f103 0214 	add.w	r2, r3, #20
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	f1a3 0214 	sub.w	r2, r3, #20
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a1b      	ldr	r3, [r3, #32]
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48a:	441a      	add	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800b490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7fe f9b1 	bl	80097fc <_nx_ip_dispatch_process>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 8082 	beq.w	800b5a6 <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 800b4a2:	6838      	ldr	r0, [r7, #0]
 800b4a4:	f000 fcda 	bl	800be5c <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800b4a8:	e07d      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d15a      	bne.n	800b568 <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 800b4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4be:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800b4c2:	d137      	bne.n	800b534 <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f103 0214 	add.w	r2, r3, #20
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	f1a3 0214 	sub.w	r2, r3, #20
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	441a      	add	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	ba1a      	rev	r2, r3
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	ba1a      	rev	r2, r3
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	2b44      	cmp	r3, #68	; 0x44
 800b51a:	d10b      	bne.n	800b534 <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b522:	2b00      	cmp	r3, #0
 800b524:	d006      	beq.n	800b534 <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	4798      	blx	r3

                    return;
 800b532:	e038      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a1b      	ldr	r3, [r3, #32]
 800b538:	1e5a      	subs	r2, r3, #1
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	1ad2      	subs	r2, r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800b560:	6838      	ldr	r0, [r7, #0]
 800b562:	f000 fc7b 	bl	800be5c <_nx_packet_release>

        /* Return to caller.  */
        return;
 800b566:	e01e      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00b      	beq.n	800b58a <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b576:	1c5a      	adds	r2, r3, #1
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	4798      	blx	r3
 800b588:	e00d      	b.n	800b5a6 <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800b59e:	6838      	ldr	r0, [r7, #0]
 800b5a0:	f000 fc5c 	bl	800be5c <_nx_packet_release>

        /* Return to caller.  */
        return;
 800b5a4:	bf00      	nop
    }
}
 800b5a6:	3758      	adds	r7, #88	; 0x58
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08c      	sub	sp, #48	; 0x30
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d901      	bls.n	800b5c8 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 800b5c4:	234d      	movs	r3, #77	; 0x4d
 800b5c6:	e0b1      	b.n	800b72c <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b5d2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b5d4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b5d6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5d8:	b672      	cpsid	i
    return(int_posture);
 800b5da:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 800b5dc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d03d      	beq.n	800b662 <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	1e5a      	subs	r2, r3, #1
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	69da      	ldr	r2, [r3, #28]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	2200      	movs	r2, #0
 800b602:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 800b604:	6a3b      	ldr	r3, [r7, #32]
 800b606:	2200      	movs	r2, #0
 800b608:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	2200      	movs	r2, #0
 800b60e:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	2200      	movs	r2, #0
 800b614:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	691a      	ldr	r2, [r3, #16]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	441a      	add	r2, r3
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	2200      	movs	r2, #0
 800b62e:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 800b630:	6a3b      	ldr	r3, [r7, #32]
 800b632:	2200      	movs	r2, #0
 800b634:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800b63c:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	2204      	movs	r2, #4
 800b642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	6a3a      	ldr	r2, [r7, #32]
 800b65a:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 800b65c:	2300      	movs	r3, #0
 800b65e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b660:	e05d      	b.n	800b71e <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d053      	beq.n	800b71a <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 800b67c:	4b2d      	ldr	r3, [pc, #180]	; (800b734 <_nx_packet_allocate+0x188>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	4a2c      	ldr	r2, [pc, #176]	; (800b738 <_nx_packet_allocate+0x18c>)
 800b686:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d012      	beq.n	800b6c8 <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6bc:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c4:	675a      	str	r2, [r3, #116]	; 0x74
 800b6c6:	e008      	b.n	800b6da <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6cc:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d8:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	220c      	movs	r2, #12
 800b6e8:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b6f0:	4b12      	ldr	r3, [pc, #72]	; (800b73c <_nx_packet_allocate+0x190>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	4a11      	ldr	r2, [pc, #68]	; (800b73c <_nx_packet_allocate+0x190>)
 800b6f8:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	64da      	str	r2, [r3, #76]	; 0x4c
 800b700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b702:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f383 8810 	msr	PRIMASK, r3
}
 800b70a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b70c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b70e:	f008 f9a9 	bl	8013a64 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b718:	e008      	b.n	800b72c <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 800b71a:	2301      	movs	r3, #1
 800b71c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	f383 8810 	msr	PRIMASK, r3
}
 800b728:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 800b72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3730      	adds	r7, #48	; 0x30
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	240023d0 	.word	0x240023d0
 800b738:	0800bae1 	.word	0x0800bae1
 800b73c:	240023cc 	.word	0x240023cc

0800b740 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08e      	sub	sp, #56	; 0x38
 800b744:	af02      	add	r7, sp, #8
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2200      	movs	r2, #0
 800b752:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 800b754:	2301      	movs	r3, #1
 800b756:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 800b760:	2312      	movs	r3, #18
 800b762:	e079      	b.n	800b858 <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800b764:	f107 0114 	add.w	r1, r7, #20
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	2200      	movs	r2, #0
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff ff1d 	bl	800b5ac <_nx_packet_allocate>
 800b772:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 800b774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	e06c      	b.n	800b858 <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b784:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b78c:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	2b01      	cmp	r3, #1
 800b796:	d110      	bne.n	800b7ba <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 800b7a4:	6978      	ldr	r0, [r7, #20]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6919      	ldr	r1, [r3, #16]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a3a      	ldr	r2, [r7, #32]
 800b7b2:	f000 f855 	bl	800b860 <_nx_packet_data_append>
 800b7b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b7b8:	e00f      	b.n	800b7da <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	68da      	ldr	r2, [r3, #12]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 800b7c6:	6978      	ldr	r0, [r7, #20]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6899      	ldr	r1, [r3, #8]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a3a      	ldr	r2, [r7, #32]
 800b7d4:	f000 f844 	bl	800b860 <_nx_packet_data_append>
 800b7d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d005      	beq.n	800b7ec <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fb3a 	bl	800be5c <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	e035      	b.n	800b858 <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1ca      	bne.n	800b792 <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	689a      	ldr	r2, [r3, #8]
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	6919      	ldr	r1, [r3, #16]
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	69fa      	ldr	r2, [r7, #28]
 800b810:	440a      	add	r2, r1
 800b812:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	69fa      	ldr	r2, [r7, #28]
 800b81c:	1a8a      	subs	r2, r1, r2
 800b81e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	6919      	ldr	r1, [r3, #16]
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	69ba      	ldr	r2, [r7, #24]
 800b834:	440a      	add	r2, r1
 800b836:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	429a      	cmp	r2, r3
 800b842:	d005      	beq.n	800b850 <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	4618      	mov	r0, r3
 800b848:	f000 fb08 	bl	800be5c <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 800b84c:	2312      	movs	r3, #18
 800b84e:	e003      	b.n	800b858 <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 800b856:	2300      	movs	r3, #0
    }
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3730      	adds	r7, #48	; 0x30
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08c      	sub	sp, #48	; 0x30
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 800b86e:	2300      	movs	r3, #0
 800b870:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d016      	beq.n	800b8a8 <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	695a      	ldr	r2, [r3, #20]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	4413      	add	r3, r2
 800b894:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1ee      	bne.n	800b884 <_nx_packet_data_append+0x24>
 800b8a6:	e005      	b.n	800b8b4 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	695a      	ldr	r2, [r3, #20]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d247      	bcs.n	800b94c <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 800b8c0:	e033      	b.n	800b92a <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800b8c2:	f107 0114 	add.w	r1, r7, #20
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	6838      	ldr	r0, [r7, #0]
 800b8cc:	f7ff fe6e 	bl	800b5ac <_nx_packet_allocate>
 800b8d0:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 800b8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 800b8de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8e0:	f000 fabc 	bl	800be5c <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	e078      	b.n	800b9da <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 800b8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d012      	beq.n	800b914 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800b8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f0:	699b      	ldr	r3, [r3, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d007      	beq.n	800b906 <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	619a      	str	r2, [r3, #24]
 800b904:	e008      	b.n	800b918 <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	605a      	str	r2, [r3, #4]
 800b912:	e001      	b.n	800b918 <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	695a      	ldr	r2, [r3, #20]
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	4413      	add	r3, r2
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 800b92a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d3c7      	bcc.n	800b8c2 <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 800b938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b93c:	605a      	str	r2, [r3, #4]
 800b93e:	e002      	b.n	800b946 <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b944:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800b946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b948:	2200      	movs	r2, #0
 800b94a:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	441a      	add	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	e032      	b.n	800b9d2 <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 800b970:	e02f      	b.n	800b9d2 <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	695a      	ldr	r2, [r3, #20]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	461a      	mov	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4293      	cmp	r3, r2
 800b982:	d202      	bcs.n	800b98a <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	623b      	str	r3, [r7, #32]
 800b988:	e005      	b.n	800b996 <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	695a      	ldr	r2, [r3, #20]
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified. */
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	6a3a      	ldr	r2, [r7, #32]
 800b99c:	69f9      	ldr	r1, [r7, #28]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f009 fe0c 	bl	80155bc <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	68d9      	ldr	r1, [r3, #12]
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	6a3a      	ldr	r2, [r7, #32]
 800b9b4:	440a      	add	r2, r1
 800b9b6:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d009      	beq.n	800b9d2 <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 800b9be:	69fa      	ldr	r2, [r7, #28]
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	619a      	str	r2, [r3, #24]
    while (data_size)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1cc      	bne.n	800b972 <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3730      	adds	r7, #48	; 0x30
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <_nx_packet_data_extract_offset>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_extract_offset(NX_PACKET *packet_ptr, ULONG offset, VOID *buffer_start, ULONG buffer_length, ULONG *bytes_copied)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b08c      	sub	sp, #48	; 0x30
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	607a      	str	r2, [r7, #4]
 800b9ee:	603b      	str	r3, [r7, #0]
#endif /* NX_DISABLE_PACKET_CHAIN */
ULONG      bytes_to_copy;
NX_PACKET *working_packet_ptr;


    working_packet_ptr =  packet_ptr;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	61bb      	str	r3, [r7, #24]

    /* Check for an invalid offset or packet length.  */
    if (offset >= working_packet_ptr -> nx_packet_length)
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d309      	bcc.n	800ba12 <_nx_packet_data_extract_offset+0x30>
    {

        /* Note: A zero offset with a packet of zero length is ok. */
        if (offset == 0)
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d104      	bne.n	800ba0e <_nx_packet_data_extract_offset+0x2c>
        {

            *bytes_copied = 0;
 800ba04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba06:	2200      	movs	r2, #0
 800ba08:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e064      	b.n	800bad8 <_nx_packet_data_extract_offset+0xf6>
        }

        /* Otherwise, this is an invalid offset or packet length. */
        return(NX_PACKET_OFFSET_ERROR);
 800ba0e:	2353      	movs	r3, #83	; 0x53
 800ba10:	e062      	b.n	800bad8 <_nx_packet_data_extract_offset+0xf6>
    }


    /* Initialize the source pointer to NULL.  */
    source_ptr =  NX_NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Traverse packet chain to offset.  */
    offset_bytes =  offset;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	623b      	str	r3, [r7, #32]
#ifndef NX_DISABLE_PACKET_CHAIN
    while (working_packet_ptr)
 800ba1a:	e016      	b.n	800ba4a <_nx_packet_data_extract_offset+0x68>
    {

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_fragment_length =  (ULONG)((working_packet_ptr -> nx_packet_append_ptr - working_packet_ptr -> nx_packet_prepend_ptr));
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	617b      	str	r3, [r7, #20]

        /* Determine if we are at the offset location fragment in the packet chain  */
        if (packet_fragment_length > offset_bytes)
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	6a3b      	ldr	r3, [r7, #32]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d905      	bls.n	800ba3c <_nx_packet_data_extract_offset+0x5a>
        {

            /* Setup loop to copy from this packet.  */
            source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	4413      	add	r3, r2
 800ba38:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Yes, get out of this  loop.  */
            break;
 800ba3a:	e009      	b.n	800ba50 <_nx_packet_data_extract_offset+0x6e>
        }


        /* Decrement the remaining offset bytes*/
        offset_bytes = offset_bytes - packet_fragment_length;
 800ba3c:	6a3a      	ldr	r2, [r7, #32]
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	623b      	str	r3, [r7, #32]

        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	61bb      	str	r3, [r7, #24]
    while (working_packet_ptr)
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e5      	bne.n	800ba1c <_nx_packet_data_extract_offset+0x3a>
    source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;

#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Check for a valid source pointer.  */
    if (source_ptr == NX_NULL)
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <_nx_packet_data_extract_offset+0x78>
    {
        return(NX_PACKET_OFFSET_ERROR);
 800ba56:	2353      	movs	r3, #83	; 0x53
 800ba58:	e03e      	b.n	800bad8 <_nx_packet_data_extract_offset+0xf6>
    }

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	627b      	str	r3, [r7, #36]	; 0x24
    bytes_to_copy =   (packet_ptr -> nx_packet_length - offset);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	61fb      	str	r3, [r7, #28]

    /* Pickup the amount of bytes to copy.  */
    if (bytes_to_copy < buffer_length)
 800ba68:	69fa      	ldr	r2, [r7, #28]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d205      	bcs.n	800ba7c <_nx_packet_data_extract_offset+0x9a>
    {
        *bytes_copied =  bytes_to_copy;     /* the amount of bytes returned to the caller */
 800ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba72:	69fa      	ldr	r2, [r7, #28]
 800ba74:	601a      	str	r2, [r3, #0]
        remaining_bytes =  bytes_to_copy;   /* for use in the copy loop */
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba7a:	e026      	b.n	800baca <_nx_packet_data_extract_offset+0xe8>
    }
    else
    {
        *bytes_copied =  buffer_length;
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	601a      	str	r2, [r3, #0]
        remaining_bytes =  buffer_length;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (working_packet_ptr && remaining_bytes)
 800ba86:	e020      	b.n	800baca <_nx_packet_data_extract_offset+0xe8>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate bytes to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(working_packet_ptr -> nx_packet_append_ptr - source_ptr);
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	61fb      	str	r3, [r7, #28]
        if (remaining_bytes < bytes_to_copy)
 800ba92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d201      	bcs.n	800ba9e <_nx_packet_data_extract_offset+0xbc>
        {
            bytes_to_copy = remaining_bytes;
 800ba9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9c:	61fb      	str	r3, [r7, #28]
        }

        /* Copy data from this packet.  */
        memcpy(destination_ptr, source_ptr, bytes_to_copy); /* Use case of memcpy is verified. */
 800ba9e:	69fa      	ldr	r2, [r7, #28]
 800baa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baa4:	f009 fd8a 	bl	80155bc <memcpy>

        /* Update the pointers. */
        destination_ptr += bytes_to_copy;
 800baa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	4413      	add	r3, r2
 800baae:	627b      	str	r3, [r7, #36]	; 0x24
        remaining_bytes -= bytes_to_copy;
 800bab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	61bb      	str	r3, [r7, #24]

        /* Check for a next packet.  */
        if (working_packet_ptr)
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <_nx_packet_data_extract_offset+0xe8>
        {

            /* Setup new source pointer.  */
            source_ptr = working_packet_ptr -> nx_packet_prepend_ptr;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (working_packet_ptr && remaining_bytes)
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <_nx_packet_data_extract_offset+0xf4>
 800bad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1d8      	bne.n	800ba88 <_nx_packet_data_extract_offset+0xa6>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_EXTRACT_OFFSET, packet_ptr, buffer_length, *bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3730      	adds	r7, #48	; 0x30
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baf0:	f3ef 8310 	mrs	r3, PRIMASK
 800baf4:	617b      	str	r3, [r7, #20]
    return(posture);
 800baf6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800baf8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bafa:	b672      	cpsid	i
    return(int_posture);
 800bafc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 800bafe:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d042      	beq.n	800bb8e <_nx_packet_pool_cleanup+0xae>
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d03f      	beq.n	800bb8e <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800bb12:	4a23      	ldr	r2, [pc, #140]	; (800bba0 <_nx_packet_pool_cleanup+0xc0>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d13a      	bne.n	800bb8e <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d103      	bne.n	800bb30 <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bb2e:	e012      	b.n	800bb56 <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d103      	bne.n	800bb42 <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bb4a:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bb54:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5a:	1e5a      	subs	r2, r3, #1
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb64:	2b0c      	cmp	r3, #12
 800bb66:	d112      	bne.n	800bb8e <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bb70:	4b0c      	ldr	r3, [pc, #48]	; (800bba4 <_nx_packet_pool_cleanup+0xc4>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3301      	adds	r3, #1
 800bb76:	4a0b      	ldr	r2, [pc, #44]	; (800bba4 <_nx_packet_pool_cleanup+0xc4>)
 800bb78:	6013      	str	r3, [r2, #0]
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f383 8810 	msr	PRIMASK, r3
}
 800bb84:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f007 fe6c 	bl	8013864 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800bb8c:	e005      	b.n	800bb9a <_nx_packet_pool_cleanup+0xba>
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f383 8810 	msr	PRIMASK, r3
}
 800bb98:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800bb9a:	3720      	adds	r7, #32
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	5041434b 	.word	0x5041434b
 800bba4:	240023cc 	.word	0x240023cc

0800bba8 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b092      	sub	sp, #72	; 0x48
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
 800bbb4:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	3303      	adds	r3, #3
 800bbbe:	f023 0303 	bic.w	r3, r3, #3
 800bbc2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc8:	1ad2      	subs	r2, r2, r3
 800bbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbcc:	4413      	add	r3, r2
 800bbce:	f023 0303 	bic.w	r3, r3, #3
 800bbd2:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 800bbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd6:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800bbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbda:	333c      	adds	r3, #60	; 0x3c
 800bbdc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800bbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe0:	3303      	adds	r3, #3
 800bbe2:	f023 0303 	bic.w	r3, r3, #3
 800bbe6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800bbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800bbf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	3303      	adds	r3, #3
 800bbf8:	f023 0203 	bic.w	r2, r3, #3
 800bbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 800bc02:	223c      	movs	r2, #60	; 0x3c
 800bc04:	2100      	movs	r1, #0
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f009 fd00 	bl	801560c <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc28:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc34:	4413      	add	r3, r2
 800bc36:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 800bc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3e:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc44:	4413      	add	r3, r2
 800bc46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc48:	4413      	add	r3, r2
 800bc4a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 800bc4c:	e023      	b.n	800bc96 <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 800bc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc50:	3301      	adds	r3, #1
 800bc52:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 800bc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc58:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 800bc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 800bc60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc62:	2200      	movs	r2, #0
 800bc64:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800bc66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc68:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6c:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 800bc6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc72:	441a      	add	r2, r3
 800bc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc76:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 800bc78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7c:	4413      	add	r3, r2
 800bc7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc80:	441a      	add	r2, r3
 800bc82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc84:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 800bc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc88:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8e:	4413      	add	r3, r2
 800bc90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc92:	4413      	add	r3, r2
 800bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 800bc96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d9d7      	bls.n	800bc4e <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca2:	4413      	add	r3, r2
 800bca4:	425b      	negs	r3, r3
 800bca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bca8:	4413      	add	r3, r2
 800bcaa:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 800bcac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcae:	2200      	movs	r2, #0
 800bcb0:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcb6:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcbc:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcc4:	f3ef 8310 	mrs	r3, PRIMASK
 800bcc8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bcca:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bccc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcce:	b672      	cpsid	i
    return(int_posture);
 800bcd0:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800bcd2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4a19      	ldr	r2, [pc, #100]	; (800bd3c <_nx_packet_pool_create+0x194>)
 800bcd8:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 800bcda:	4b19      	ldr	r3, [pc, #100]	; (800bd40 <_nx_packet_pool_create+0x198>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d012      	beq.n	800bd08 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800bce2:	4b17      	ldr	r3, [pc, #92]	; (800bd40 <_nx_packet_pool_create+0x198>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800bcea:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <_nx_packet_pool_create+0x198>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800bcf2:	6a3b      	ldr	r3, [r7, #32]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6a3a      	ldr	r2, [r7, #32]
 800bcfc:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 800bcfe:	4b10      	ldr	r3, [pc, #64]	; (800bd40 <_nx_packet_pool_create+0x198>)
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	635a      	str	r2, [r3, #52]	; 0x34
 800bd06:	e008      	b.n	800bd1a <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 800bd08:	4a0d      	ldr	r2, [pc, #52]	; (800bd40 <_nx_packet_pool_create+0x198>)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 800bd1a:	4b0a      	ldr	r3, [pc, #40]	; (800bd44 <_nx_packet_pool_create+0x19c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	4a08      	ldr	r2, [pc, #32]	; (800bd44 <_nx_packet_pool_create+0x19c>)
 800bd22:	6013      	str	r3, [r2, #0]
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f383 8810 	msr	PRIMASK, r3
}
 800bd2e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3748      	adds	r7, #72	; 0x48
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	5041434b 	.word	0x5041434b
 800bd40:	240022d8 	.word	0x240022d8
 800bd44:	240022d4 	.word	0x240022d4

0800bd48 <_nx_packet_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_delete(NX_PACKET_POOL *pool_ptr)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08e      	sub	sp, #56	; 0x38
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd50:	f3ef 8310 	mrs	r3, PRIMASK
 800bd54:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bd58:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd5a:	b672      	cpsid	i
    return(int_posture);
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28

TX_THREAD *thread_ptr;      /* Working thread pointer  */


    /* Disable interrupts to remove the packet pool from the created list.  */
    TX_DISABLE
 800bd5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Decrement the number of packet pools created.  */
    _nx_packet_pool_created_count--;
 800bd60:	4b3b      	ldr	r3, [pc, #236]	; (800be50 <_nx_packet_pool_delete+0x108>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	4a3a      	ldr	r2, [pc, #232]	; (800be50 <_nx_packet_pool_delete+0x108>)
 800bd68:	6013      	str	r3, [r2, #0]

    /* Clear the packet pool ID to make it invalid.  */
    pool_ptr -> nx_packet_pool_id =  0;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]

    /* See if the packet pool only one on the list.  */
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d103      	bne.n	800bd82 <_nx_packet_pool_delete+0x3a>
    {

        /* Only created packet pool, just set the created list to NULL.  */
        _nx_packet_pool_created_ptr =  NX_NULL;
 800bd7a:	4b36      	ldr	r3, [pc, #216]	; (800be54 <_nx_packet_pool_delete+0x10c>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	e012      	b.n	800bda8 <_nx_packet_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            pool_ptr -> nx_packet_pool_created_previous;
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6b92      	ldr	r2, [r2, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800bd8a:	639a      	str	r2, [r3, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            pool_ptr -> nx_packet_pool_created_next;
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	6b52      	ldr	r2, [r2, #52]	; 0x34
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800bd94:	635a      	str	r2, [r3, #52]	; 0x34

        /* See if we have to update the created list head pointer.  */
        if (_nx_packet_pool_created_ptr == pool_ptr)
 800bd96:	4b2f      	ldr	r3, [pc, #188]	; (800be54 <_nx_packet_pool_delete+0x10c>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d103      	bne.n	800bda8 <_nx_packet_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda4:	4a2b      	ldr	r2, [pc, #172]	; (800be54 <_nx_packet_pool_delete+0x10c>)
 800bda6:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bda8:	4b2b      	ldr	r3, [pc, #172]	; (800be58 <_nx_packet_pool_delete+0x110>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3301      	adds	r3, #1
 800bdae:	4a2a      	ldr	r2, [pc, #168]	; (800be58 <_nx_packet_pool_delete+0x110>)
 800bdb0:	6013      	str	r3, [r2, #0]
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	f383 8810 	msr	PRIMASK, r3
}
 800bdbc:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the packet pool suspension list to resume any and all
       threads suspended on this packet pool.  */
    thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc2:	637b      	str	r3, [r7, #52]	; 0x34
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800bdc4:	e026      	b.n	800be14 <_nx_packet_pool_delete+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdc6:	f3ef 8310 	mrs	r3, PRIMASK
 800bdca:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bdcc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bdce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdd0:	b672      	cpsid	i
    return(int_posture);
 800bdd2:	69bb      	ldr	r3, [r7, #24]
    {
        /* Lockout interrupts.  */
        TX_DISABLE
 800bdd4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd8:	2200      	movs	r2, #0
 800bdda:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800bddc:	4b1e      	ldr	r3, [pc, #120]	; (800be58 <_nx_packet_pool_delete+0x110>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3301      	adds	r3, #1
 800bde2:	4a1d      	ldr	r2, [pc, #116]	; (800be58 <_nx_packet_pool_delete+0x110>)
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	f383 8810 	msr	PRIMASK, r3
}
 800bdf0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the return status in the thread to NX_POOL_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 800bdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf4:	2230      	movs	r2, #48	; 0x30
 800bdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfe:	637b      	str	r3, [r7, #52]	; 0x34

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800be00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be04:	4618      	mov	r0, r3
 800be06:	f007 fd2d 	bl	8013864 <_tx_thread_system_resume>

        /* Decrease the suspended count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0e:	1e5a      	subs	r2, r3, #1
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	631a      	str	r2, [r3, #48]	; 0x30
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1d4      	bne.n	800bdc6 <_nx_packet_pool_delete+0x7e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be1c:	f3ef 8310 	mrs	r3, PRIMASK
 800be20:	613b      	str	r3, [r7, #16]
    return(posture);
 800be22:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800be24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be26:	b672      	cpsid	i
    return(int_posture);
 800be28:	68fb      	ldr	r3, [r7, #12]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800be2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <_nx_packet_pool_delete+0x110>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3b01      	subs	r3, #1
 800be32:	4a09      	ldr	r2, [pc, #36]	; (800be58 <_nx_packet_pool_delete+0x110>)
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f383 8810 	msr	PRIMASK, r3
}
 800be40:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(pool_ptr);

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800be42:	f007 fcd5 	bl	80137f0 <_tx_thread_system_preempt_check>

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3738      	adds	r7, #56	; 0x38
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	240022d4 	.word	0x240022d4
 800be54:	240022d8 	.word	0x240022d8
 800be58:	240023cc 	.word	0x240023cc

0800be5c <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	; 0x28
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 800be64:	e0a5      	b.n	800bfb2 <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800be6e:	d011      	beq.n	800be94 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d009      	beq.n	800be90 <_nx_packet_release+0x34>
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a50      	ldr	r2, [pc, #320]	; (800bfc4 <_nx_packet_release+0x168>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d104      	bne.n	800be90 <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	699b      	ldr	r3, [r3, #24]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 800be90:	2307      	movs	r3, #7
 800be92:	e093      	b.n	800bfbc <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be9a:	f3ef 8310 	mrs	r3, PRIMASK
 800be9e:	617b      	str	r3, [r7, #20]
    return(posture);
 800bea0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bea2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bea4:	b672      	cpsid	i
    return(int_posture);
 800bea6:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 800bea8:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d062      	beq.n	800bf82 <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec0:	69ba      	ldr	r2, [r7, #24]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d103      	bne.n	800bece <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	2200      	movs	r2, #0
 800beca:	62da      	str	r2, [r3, #44]	; 0x2c
 800becc:	e00d      	b.n	800beea <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bede:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800bee4:	69ba      	ldr	r2, [r7, #24]
 800bee6:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bee8:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beee:	1e5a      	subs	r2, r3, #1
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2200      	movs	r2, #0
 800bef8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800befa:	4b33      	ldr	r3, [pc, #204]	; (800bfc8 <_nx_packet_release+0x16c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3301      	adds	r3, #1
 800bf00:	4a31      	ldr	r2, [pc, #196]	; (800bfc8 <_nx_packet_release+0x16c>)
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	6a3b      	ldr	r3, [r7, #32]
 800bf06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f383 8810 	msr	PRIMASK, r3
}
 800bf0e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	691a      	ldr	r2, [r3, #16]
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf30:	441a      	add	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800bf50:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800bf7a:	69b8      	ldr	r0, [r7, #24]
 800bf7c:	f007 fc72 	bl	8013864 <_tx_thread_system_resume>
 800bf80:	e015      	b.n	800bfae <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f04f 32ff 	mov.w	r2, #4294967295
 800bf88:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	69da      	ldr	r2, [r3, #28]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	1c5a      	adds	r2, r3, #1
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	609a      	str	r2, [r3, #8]
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	f383 8810 	msr	PRIMASK, r3
}
 800bfac:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f47f af56 	bne.w	800be66 <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3728      	adds	r7, #40	; 0x28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	5041434b 	.word	0x5041434b
 800bfc8:	240023cc 	.word	0x240023cc

0800bfcc <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfd4:	f3ef 8310 	mrs	r3, PRIMASK
 800bfd8:	617b      	str	r3, [r7, #20]
    return(posture);
 800bfda:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bfdc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfde:	b672      	cpsid	i
    return(int_posture);
 800bfe0:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800bfe2:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a1b      	ldr	r3, [r3, #32]
 800bfe8:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800bfec:	d025      	beq.n	800c03a <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800bff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff6:	d020      	beq.n	800c03a <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 800bffe:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c00a:	441a      	add	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c01a:	1a9a      	subs	r2, r3, r2
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f383 8810 	msr	PRIMASK, r3
}
 800c032:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 800c034:	2300      	movs	r3, #0
 800c036:	61fb      	str	r3, [r7, #28]
 800c038:	e009      	b.n	800c04e <_nx_packet_transmit_release+0x82>
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	f383 8810 	msr	PRIMASK, r3
}
 800c044:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff ff08 	bl	800be5c <_nx_packet_release>
 800c04c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800c04e:	69fb      	ldr	r3, [r7, #28]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3720      	adds	r7, #32
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c062:	f3ef 8310 	mrs	r3, PRIMASK
 800c066:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c068:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c06a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c06c:	b672      	cpsid	i
    return(int_posture);
 800c06e:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800c070:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d110      	bne.n	800c09e <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f383 8810 	msr	PRIMASK, r3
}
 800c094:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800c096:	6838      	ldr	r0, [r7, #0]
 800c098:	f7ff fee0 	bl	800be5c <_nx_packet_release>

        /* Return to caller.  */
        return;
 800c09c:	e02f      	b.n	800c0fe <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d011      	beq.n	800c0cc <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ca:	e018      	b.n	800c0fe <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	61da      	str	r2, [r3, #28]
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	f383 8810 	msr	PRIMASK, r3
}
 800c0ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2120      	movs	r1, #32
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f005 fd2f 	bl	8011b5c <_tx_event_flags_set>
    }
}
 800c0fe:	3720      	adds	r7, #32
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <_nx_tcp_cleanup_deferred>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_cleanup_deferred(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
    NX_PARAMETER_NOT_USED(thread_ptr);

    NX_CLEANUP_EXTENSION
    /* This function is never called... so do nothing!  */
}
 800c10e:	bf00      	nop
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
	...

0800c11c <_nx_tcp_client_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_client_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08e      	sub	sp, #56	; 0x38
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c126:	f3ef 8310 	mrs	r3, PRIMASK
 800c12a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c12e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c130:	b672      	cpsid	i
    return(int_posture);
 800c132:	6a3b      	ldr	r3, [r7, #32]
NX_TCP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts to remove the suspended thread from the TCP socket.  */
    TX_DISABLE
 800c134:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c13a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d004      	beq.n	800c14c <_nx_tcp_client_bind_cleanup+0x30>
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a42      	ldr	r2, [pc, #264]	; (800c250 <_nx_tcp_client_bind_cleanup+0x134>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d006      	beq.n	800c15a <_nx_tcp_client_bind_cleanup+0x3e>
 800c14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	f383 8810 	msr	PRIMASK, r3
}
 800c156:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c158:	e077      	b.n	800c24a <_nx_tcp_client_bind_cleanup+0x12e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <_nx_tcp_client_bind_cleanup+0x54>
 800c162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c164:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	f383 8810 	msr	PRIMASK, r3
}
 800c16c:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c16e:	e06c      	b.n	800c24a <_nx_tcp_client_bind_cleanup+0x12e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c170:	f3ef 8305 	mrs	r3, IPSR
 800c174:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c176:	697a      	ldr	r2, [r7, #20]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800c178:	4b36      	ldr	r3, [pc, #216]	; (800c254 <_nx_tcp_client_bind_cleanup+0x138>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d104      	bne.n	800c18c <_nx_tcp_client_bind_cleanup+0x70>
 800c182:	4b35      	ldr	r3, [pc, #212]	; (800c258 <_nx_tcp_client_bind_cleanup+0x13c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a35      	ldr	r2, [pc, #212]	; (800c25c <_nx_tcp_client_bind_cleanup+0x140>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d116      	bne.n	800c1ba <_nx_tcp_client_bind_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a34      	ldr	r2, [pc, #208]	; (800c260 <_nx_tcp_client_bind_cleanup+0x144>)
 800c190:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c198:	62bb      	str	r3, [r7, #40]	; 0x28
 800c19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	f383 8810 	msr	PRIMASK, r3
}
 800c1a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800c1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f005 fcd2 	bl	8011b5c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800c1b8:	e047      	b.n	800c24a <_nx_tcp_client_bind_cleanup+0x12e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_tcp_socket_bound_previous;
 800c1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c1ce:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d104      	bne.n	800c1e4 <_nx_tcp_client_bind_cleanup+0xc8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800c1e2:	e00e      	b.n	800c202 <_nx_tcp_client_bind_cleanup+0xe6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c1f6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c200:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c208:	1e5a      	subs	r2, r3, #1
 800c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c214:	2b0c      	cmp	r3, #12
 800c216:	d112      	bne.n	800c23e <_nx_tcp_client_bind_cleanup+0x122>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2223      	movs	r2, #35	; 0x23
 800c21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c220:	4b10      	ldr	r3, [pc, #64]	; (800c264 <_nx_tcp_client_bind_cleanup+0x148>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	3301      	adds	r3, #1
 800c226:	4a0f      	ldr	r2, [pc, #60]	; (800c264 <_nx_tcp_client_bind_cleanup+0x148>)
 800c228:	6013      	str	r3, [r2, #0]
 800c22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f383 8810 	msr	PRIMASK, r3
}
 800c234:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f007 fb14 	bl	8013864 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c23c:	e005      	b.n	800c24a <_nx_tcp_client_bind_cleanup+0x12e>
 800c23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c240:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	f383 8810 	msr	PRIMASK, r3
}
 800c248:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c24a:	3738      	adds	r7, #56	; 0x38
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	54435020 	.word	0x54435020
 800c254:	2400008c 	.word	0x2400008c
 800c258:	240023d0 	.word	0x240023d0
 800c25c:	24002470 	.word	0x24002470
 800c260:	0800c105 	.word	0x0800c105
 800c264:	240023cc 	.word	0x240023cc

0800c268 <_nx_tcp_connect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_connect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08e      	sub	sp, #56	; 0x38
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c272:	f3ef 8310 	mrs	r3, PRIMASK
 800c276:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c27a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c27c:	b672      	cpsid	i
    return(int_posture);
 800c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800c280:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c286:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d004      	beq.n	800c298 <_nx_tcp_connect_cleanup+0x30>
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a3a      	ldr	r2, [pc, #232]	; (800c37c <_nx_tcp_connect_cleanup+0x114>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d006      	beq.n	800c2a6 <_nx_tcp_connect_cleanup+0x3e>
 800c298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c29a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	f383 8810 	msr	PRIMASK, r3
}
 800c2a2:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c2a4:	e067      	b.n	800c376 <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d106      	bne.n	800c2bc <_nx_tcp_connect_cleanup+0x54>
 800c2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	f383 8810 	msr	PRIMASK, r3
}
 800c2b8:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c2ba:	e05c      	b.n	800c376 <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Pickup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2c4:	f3ef 8305 	mrs	r3, IPSR
 800c2c8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c2ca:	69ba      	ldr	r2, [r7, #24]

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800c2cc:	4b2c      	ldr	r3, [pc, #176]	; (800c380 <_nx_tcp_connect_cleanup+0x118>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d104      	bne.n	800c2e0 <_nx_tcp_connect_cleanup+0x78>
 800c2d6:	4b2b      	ldr	r3, [pc, #172]	; (800c384 <_nx_tcp_connect_cleanup+0x11c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a2b      	ldr	r2, [pc, #172]	; (800c388 <_nx_tcp_connect_cleanup+0x120>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d112      	bne.n	800c306 <_nx_tcp_connect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a2a      	ldr	r2, [pc, #168]	; (800c38c <_nx_tcp_connect_cleanup+0x124>)
 800c2e4:	669a      	str	r2, [r3, #104]	; 0x68
 800c2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f383 8810 	msr	PRIMASK, r3
}
 800c2f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800c2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c2fe:	4618      	mov	r0, r3
 800c300:	f005 fc2c 	bl	8011b5c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800c304:	e037      	b.n	800c376 <_nx_tcp_connect_cleanup+0x10e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_connect_suspended_thread =  NX_NULL;
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	2200      	movs	r2, #0
 800c310:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	2200      	movs	r2, #0
 800c318:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Return to the proper socket state.  */
        if (socket_ptr -> nx_tcp_socket_client_type)
 800c31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d003      	beq.n	800c32c <_nx_tcp_connect_cleanup+0xc4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Client socket, return to a CLOSED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800c324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c326:	2201      	movs	r2, #1
 800c328:	639a      	str	r2, [r3, #56]	; 0x38
 800c32a:	e007      	b.n	800c33c <_nx_tcp_connect_cleanup+0xd4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Server socket, return to LISTEN state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	2202      	movs	r2, #2
 800c330:	639a      	str	r2, [r3, #56]	; 0x38

            /* Move back the acknowledgment number just in case there is a retry.  */
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c336:	1e5a      	subs	r2, r3, #1
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	641a      	str	r2, [r3, #64]	; 0x40
        }

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c340:	2b0c      	cmp	r3, #12
 800c342:	d112      	bne.n	800c36a <_nx_tcp_connect_cleanup+0x102>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2238      	movs	r2, #56	; 0x38
 800c348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c34c:	4b10      	ldr	r3, [pc, #64]	; (800c390 <_nx_tcp_connect_cleanup+0x128>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3301      	adds	r3, #1
 800c352:	4a0f      	ldr	r2, [pc, #60]	; (800c390 <_nx_tcp_connect_cleanup+0x128>)
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c358:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	f383 8810 	msr	PRIMASK, r3
}
 800c360:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f007 fa7e 	bl	8013864 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c368:	e005      	b.n	800c376 <_nx_tcp_connect_cleanup+0x10e>
 800c36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c36c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f383 8810 	msr	PRIMASK, r3
}
 800c374:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c376:	3738      	adds	r7, #56	; 0x38
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	54435020 	.word	0x54435020
 800c380:	2400008c 	.word	0x2400008c
 800c384:	240023d0 	.word	0x240023d0
 800c388:	24002470 	.word	0x24002470
 800c38c:	0800c105 	.word	0x0800c105
 800c390:	240023cc 	.word	0x240023cc

0800c394 <_nx_tcp_deferred_cleanup_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_deferred_cleanup_check(NX_IP *ip_ptr)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
NX_TCP_SOCKET *socket_ptr;
TX_THREAD     *thread_ptr;


    /* Pickup the first socket and the created count.  */
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800c3a2:	60fb      	str	r3, [r7, #12]
    created_sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800c3aa:	617b      	str	r3, [r7, #20]

    /* Loop through all created TCP sockets on the IP instance.  */
    while (created_sockets--)
 800c3ac:	e07a      	b.n	800c4a4 <_nx_tcp_deferred_cleanup_check+0x110>
    {

        /* Check the socket for deferred bind cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_bind_suspended_count;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c3b4:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d015      	beq.n	800c3e8 <_nx_tcp_deferred_cleanup_check+0x54>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_bind_suspension_list;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c3c2:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3c8:	4a3c      	ldr	r2, [pc, #240]	; (800c4bc <_nx_tcp_deferred_cleanup_check+0x128>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d103      	bne.n	800c3d6 <_nx_tcp_deferred_cleanup_check+0x42>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_client_bind_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	68b8      	ldr	r0, [r7, #8]
 800c3d2:	f7ff fea3 	bl	800c11c <_nx_tcp_client_bind_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3da:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1ed      	bne.n	800c3c4 <_nx_tcp_deferred_cleanup_check+0x30>
        }

        /* Check the socket for deferred connect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_connect_suspended_thread;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c3ee:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d008      	beq.n	800c408 <_nx_tcp_deferred_cleanup_check+0x74>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3fa:	4a30      	ldr	r2, [pc, #192]	; (800c4bc <_nx_tcp_deferred_cleanup_check+0x128>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d103      	bne.n	800c408 <_nx_tcp_deferred_cleanup_check+0x74>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c400:	2100      	movs	r1, #0
 800c402:	68b8      	ldr	r0, [r7, #8]
 800c404:	f7ff ff30 	bl	800c268 <_nx_tcp_connect_cleanup>
            }
        }

        /* Check the socket for deferred disconnect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_disconnect_suspended_thread;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c40e:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d008      	beq.n	800c428 <_nx_tcp_deferred_cleanup_check+0x94>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c41a:	4a28      	ldr	r2, [pc, #160]	; (800c4bc <_nx_tcp_deferred_cleanup_check+0x128>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d103      	bne.n	800c428 <_nx_tcp_deferred_cleanup_check+0x94>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c420:	2100      	movs	r1, #0
 800c422:	68b8      	ldr	r0, [r7, #8]
 800c424:	f000 f84c 	bl	800c4c0 <_nx_tcp_disconnect_cleanup>
            }
        }

        /* Check the socket for deferred receive cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_receive_suspended_count;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c42e:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d015      	beq.n	800c462 <_nx_tcp_deferred_cleanup_check+0xce>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c43c:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c442:	4a1e      	ldr	r2, [pc, #120]	; (800c4bc <_nx_tcp_deferred_cleanup_check+0x128>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d103      	bne.n	800c450 <_nx_tcp_deferred_cleanup_check+0xbc>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_receive_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c448:	2100      	movs	r1, #0
 800c44a:	68b8      	ldr	r0, [r7, #8]
 800c44c:	f001 f92e 	bl	800d6ac <_nx_tcp_receive_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c454:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	3b01      	subs	r3, #1
 800c45a:	613b      	str	r3, [r7, #16]
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1ed      	bne.n	800c43e <_nx_tcp_deferred_cleanup_check+0xaa>
        }

        /* Check the socket for deferred transmit cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_transmit_suspended_count;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c468:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d015      	beq.n	800c49c <_nx_tcp_deferred_cleanup_check+0x108>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_transmit_suspension_list;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c476:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c47c:	4a0f      	ldr	r2, [pc, #60]	; (800c4bc <_nx_tcp_deferred_cleanup_check+0x128>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d103      	bne.n	800c48a <_nx_tcp_deferred_cleanup_check+0xf6>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_transmit_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c482:	2100      	movs	r1, #0
 800c484:	68b8      	ldr	r0, [r7, #8]
 800c486:	f003 f839 	bl	800f4fc <_nx_tcp_transmit_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48e:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	3b01      	subs	r3, #1
 800c494:	613b      	str	r3, [r7, #16]
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1ed      	bne.n	800c478 <_nx_tcp_deferred_cleanup_check+0xe4>
        }

        /* Move to next created TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c4a2:	60fb      	str	r3, [r7, #12]
    while (created_sockets--)
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	1e5a      	subs	r2, r3, #1
 800c4a8:	617a      	str	r2, [r7, #20]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f47f af7f 	bne.w	800c3ae <_nx_tcp_deferred_cleanup_check+0x1a>
    }
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	0800c105 	.word	0x0800c105

0800c4c0 <_nx_tcp_disconnect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_disconnect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08e      	sub	sp, #56	; 0x38
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c4ce:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4d4:	b672      	cpsid	i
    return(int_posture);
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800c4d8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <_nx_tcp_disconnect_cleanup+0x30>
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a30      	ldr	r2, [pc, #192]	; (800c5ac <_nx_tcp_disconnect_cleanup+0xec>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d006      	beq.n	800c4fe <_nx_tcp_disconnect_cleanup+0x3e>
 800c4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4f4:	6a3b      	ldr	r3, [r7, #32]
 800c4f6:	f383 8810 	msr	PRIMASK, r3
}
 800c4fa:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c4fc:	e053      	b.n	800c5a6 <_nx_tcp_disconnect_cleanup+0xe6>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c502:	2b00      	cmp	r3, #0
 800c504:	d106      	bne.n	800c514 <_nx_tcp_disconnect_cleanup+0x54>
 800c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c508:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	f383 8810 	msr	PRIMASK, r3
}
 800c510:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c512:	e048      	b.n	800c5a6 <_nx_tcp_disconnect_cleanup+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c514:	f3ef 8305 	mrs	r3, IPSR
 800c518:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c51a:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800c51c:	4b24      	ldr	r3, [pc, #144]	; (800c5b0 <_nx_tcp_disconnect_cleanup+0xf0>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4313      	orrs	r3, r2
 800c522:	2b00      	cmp	r3, #0
 800c524:	d104      	bne.n	800c530 <_nx_tcp_disconnect_cleanup+0x70>
 800c526:	4b23      	ldr	r3, [pc, #140]	; (800c5b4 <_nx_tcp_disconnect_cleanup+0xf4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a23      	ldr	r2, [pc, #140]	; (800c5b8 <_nx_tcp_disconnect_cleanup+0xf8>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d116      	bne.n	800c55e <_nx_tcp_disconnect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a22      	ldr	r2, [pc, #136]	; (800c5bc <_nx_tcp_disconnect_cleanup+0xfc>)
 800c534:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c53c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c540:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	f383 8810 	msr	PRIMASK, r3
}
 800c548:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800c54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c550:	2200      	movs	r2, #0
 800c552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c556:	4618      	mov	r0, r3
 800c558:	f005 fb00 	bl	8011b5c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800c55c:	e023      	b.n	800c5a6 <_nx_tcp_disconnect_cleanup+0xe6>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_disconnect_suspended_thread =  NX_NULL;
 800c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c566:	2200      	movs	r2, #0
 800c568:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c570:	2b0c      	cmp	r3, #12
 800c572:	d112      	bne.n	800c59a <_nx_tcp_disconnect_cleanup+0xda>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2241      	movs	r2, #65	; 0x41
 800c578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c57c:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <_nx_tcp_disconnect_cleanup+0x100>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3301      	adds	r3, #1
 800c582:	4a0f      	ldr	r2, [pc, #60]	; (800c5c0 <_nx_tcp_disconnect_cleanup+0x100>)
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c588:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	f383 8810 	msr	PRIMASK, r3
}
 800c590:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f007 f966 	bl	8013864 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c598:	e005      	b.n	800c5a6 <_nx_tcp_disconnect_cleanup+0xe6>
 800c59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c59c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f383 8810 	msr	PRIMASK, r3
}
 800c5a4:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c5a6:	3738      	adds	r7, #56	; 0x38
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	54435020 	.word	0x54435020
 800c5b0:	2400008c 	.word	0x2400008c
 800c5b4:	240023d0 	.word	0x240023d0
 800c5b8:	24002470 	.word	0x24002470
 800c5bc:	0800c105 	.word	0x0800c105
 800c5c0:	240023cc 	.word	0x240023cc

0800c5c4 <_nx_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_enable(NX_IP *ip_ptr)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);
    /* Place all server listen request structures on the available list.   */

    /* Setup a pointer to the first listen.  */
    listen_ptr =  &(ip_ptr -> nx_ip_tcp_server_listen_reqs[0]);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800c5d2:	60bb      	str	r3, [r7, #8]

    /* Setup the available listen requests head pointer.  */
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    /* Loop through the listen requests and link them on the available list.  */
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 800c5dc:	2300      	movs	r3, #0
 800c5de:	60fb      	str	r3, [r7, #12]
 800c5e0:	e00d      	b.n	800c5fe <_nx_tcp_enable+0x3a>
    {

        /* Link listen request to next listen request.  */
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	61da      	str	r2, [r3, #28]

        /* Determine if we need to move to the next listen request.  */
        if (i < (NX_MAX_LISTEN_REQUESTS - 1))
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2b08      	cmp	r3, #8
 800c5f0:	d802      	bhi.n	800c5f8 <_nx_tcp_enable+0x34>
        {
            listen_ptr++;
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	3324      	adds	r3, #36	; 0x24
 800c5f6:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2b09      	cmp	r3, #9
 800c602:	d9ee      	bls.n	800c5e2 <_nx_tcp_enable+0x1e>
        }
    }

    /* Make sure the last listen request has a NULL pointer.  */
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2200      	movs	r2, #0
 800c608:	61da      	str	r2, [r3, #28]

    /* Set the TCP packet queue processing function.  */
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a13      	ldr	r2, [pc, #76]	; (800c65c <_nx_tcp_enable+0x98>)
 800c60e:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

    /* Set the TCP periodic processing function.  */
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a12      	ldr	r2, [pc, #72]	; (800c660 <_nx_tcp_enable+0x9c>)
 800c616:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

    /* Set the TCP fast periodic processing function.  */
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4a11      	ldr	r2, [pc, #68]	; (800c664 <_nx_tcp_enable+0xa0>)
 800c61e:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

    /* Set the TCP deferred cleanup check function.  */
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a10      	ldr	r2, [pc, #64]	; (800c668 <_nx_tcp_enable+0xa4>)
 800c626:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718

    /* Setup base timer variables.  */
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 800c62a:	4b10      	ldr	r3, [pc, #64]	; (800c66c <_nx_tcp_enable+0xa8>)
 800c62c:	220a      	movs	r2, #10
 800c62e:	601a      	str	r2, [r3, #0]
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 800c630:	4b0f      	ldr	r3, [pc, #60]	; (800c670 <_nx_tcp_enable+0xac>)
 800c632:	2214      	movs	r2, #20
 800c634:	601a      	str	r2, [r3, #0]

    /*lint -e{778} suppress constant expression, since NX_TCP_TRANSMIT_TIMER_RATE can be redefined. */
    /*lint -e{835} -e{845} suppress operating on zero. */
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 800c636:	4b0f      	ldr	r3, [pc, #60]	; (800c674 <_nx_tcp_enable+0xb0>)
 800c638:	2264      	movs	r2, #100	; 0x64
 800c63a:	601a      	str	r2, [r3, #0]

    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 800c63c:	4b0e      	ldr	r3, [pc, #56]	; (800c678 <_nx_tcp_enable+0xb4>)
 800c63e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800c642:	601a      	str	r2, [r3, #0]

    _nx_ip_fast_periodic_timer_create(ip_ptr);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f7fd fbd3 	bl	8009df0 <_nx_ip_fast_periodic_timer_create>

    /* Set the TCP packet receive function in the IP structure to indicate
       we are ready to receive TCP packets.  */
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a0b      	ldr	r2, [pc, #44]	; (800c67c <_nx_tcp_enable+0xb8>)
 800c64e:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	0800d63d 	.word	0x0800d63d
 800c660:	0800d629 	.word	0x0800d629
 800c664:	0800c681 	.word	0x0800c681
 800c668:	0800c395 	.word	0x0800c395
 800c66c:	240022f0 	.word	0x240022f0
 800c670:	240022fc 	.word	0x240022fc
 800c674:	240022f4 	.word	0x240022f4
 800c678:	240022f8 	.word	0x240022f8
 800c67c:	0800d125 	.word	0x0800d125

0800c680 <_nx_tcp_fast_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_fast_periodic_processing(NX_IP *ip_ptr)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
ULONG          sockets;
ULONG          timer_rate;


    /* Pickup this timer's periodic rate.  */
    timer_rate =  _nx_tcp_fast_timer_rate;
 800c688:	4b73      	ldr	r3, [pc, #460]	; (800c858 <_nx_tcp_fast_periodic_processing+0x1d8>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]

    /* Pickup the number of created TCP sockets.  */
    sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800c694:	613b      	str	r3, [r7, #16]

    /* Pickup the first socket.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800c69c:	617b      	str	r3, [r7, #20]

    /* Loop through the created sockets.  */
    while (sockets--)
 800c69e:	e0cf      	b.n	800c840 <_nx_tcp_fast_periodic_processing+0x1c0>
    {

        /* Determine if the socket is in an established or disconnect state and has delayed sending an ACK
           from a previous receive packet event.  */
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d91d      	bls.n	800c6e4 <_nx_tcp_fast_periodic_processing+0x64>
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d105      	bne.n	800c6c0 <_nx_tcp_fast_periodic_processing+0x40>
             (socket_ptr -> nx_tcp_socket_rx_window_last_sent < socket_ptr -> nx_tcp_socket_rx_window_current)))
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d211      	bcs.n	800c6e4 <_nx_tcp_fast_periodic_processing+0x64>
        {

            /* Determine if the ACK has expired.  */
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d306      	bcc.n	800c6d8 <_nx_tcp_fast_periodic_processing+0x58>
            {

                /* Send the delayed ACK, which also resets the ACK timeout.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6978      	ldr	r0, [r7, #20]
 800c6d2:	f000 fd95 	bl	800d200 <_nx_tcp_packet_send_ack>
 800c6d6:	e005      	b.n	800c6e4 <_nx_tcp_fast_periodic_processing+0x64>
            }
            else
            {

                /* No, it hasn't expired yet.  Just decrement it for now.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout -= timer_rate;
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	649a      	str	r2, [r3, #72]	; 0x48
            }
        }

        /* Determine if a timeout is active.  */
        if (socket_ptr -> nx_tcp_socket_timeout)
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 80a4 	beq.w	800c838 <_nx_tcp_fast_periodic_processing+0x1b8>
        {

            /* Yes, a timeout is active.  Determine if it has expired.  */
            if (socket_ptr -> nx_tcp_socket_timeout > timer_rate)
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d208      	bcs.n	800c70e <_nx_tcp_fast_periodic_processing+0x8e>
            {

                /* No, it hasn't expired yet.  Just decrement the timeout value.  */
                socket_ptr -> nx_tcp_socket_timeout -= timer_rate;
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	1ad2      	subs	r2, r2, r3
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800c70c:	e094      	b.n	800c838 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d304      	bcc.n	800c728 <_nx_tcp_fast_periodic_processing+0xa8>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00c      	beq.n	800c742 <_nx_tcp_fast_periodic_processing+0xc2>
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 800c734:	429a      	cmp	r2, r3
 800c736:	d308      	bcc.n	800c74a <_nx_tcp_fast_periodic_processing+0xca>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE))
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d103      	bne.n	800c74a <_nx_tcp_fast_periodic_processing+0xca>
            {

                /* Number of retries has been exceeded.  */

                /* Close the socket via a connection reset.  */
                _nx_tcp_socket_connection_reset(socket_ptr);
 800c742:	6978      	ldr	r0, [r7, #20]
 800c744:	f001 f887 	bl	800d856 <_nx_tcp_socket_connection_reset>
 800c748:	e076      	b.n	800c838 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* YUXIN MODIFIED HERE */
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74e:	2b03      	cmp	r3, #3
 800c750:	d003      	beq.n	800c75a <_nx_tcp_fast_periodic_processing+0xda>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800c756:	2b04      	cmp	r3, #4
 800c758:	d11d      	bne.n	800c796 <_nx_tcp_fast_periodic_processing+0x116>
            {

                /* Yes, the timeout on the SYN message has expired.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c774:	6979      	ldr	r1, [r7, #20]
 800c776:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800c77a:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c77e:	409a      	lsls	r2, r3
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

                /* Send the initial SYN message again.  Adjust the sequence number before and
                   after to ensure the same sequence as the initial SYN.  */
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78a:	3b01      	subs	r3, #1
 800c78c:	4619      	mov	r1, r3
 800c78e:	6978      	ldr	r0, [r7, #20]
 800c790:	f000 feda 	bl	800d548 <_nx_tcp_packet_send_syn>
 800c794:	e050      	b.n	800c838 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* Has the TCP timeout for transmit packet or probing zero window expired?  */
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d107      	bne.n	800c7b0 <_nx_tcp_fast_periodic_processing+0x130>
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d116      	bne.n	800c7d6 <_nx_tcp_fast_periodic_processing+0x156>
                      (socket_ptr -> nx_tcp_socket_state <= NX_TCP_CLOSE_WAIT)))
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 800c7ac:	2b06      	cmp	r3, #6
 800c7ae:	d812      	bhi.n	800c7d6 <_nx_tcp_fast_periodic_processing+0x156>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b4:	1e5a      	subs	r2, r3, #1
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	661a      	str	r2, [r3, #96]	; 0x60

                /* Retransmit the packet. */
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	6979      	ldr	r1, [r7, #20]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f001 fa6c 	bl	800dc9c <_nx_tcp_socket_retransmit>

                /* Exit fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	659a      	str	r2, [r3, #88]	; 0x58
 800c7d4:	e030      	b.n	800c838 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7da:	2b07      	cmp	r3, #7
 800c7dc:	d007      	beq.n	800c7ee <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800c7e2:	2b09      	cmp	r3, #9
 800c7e4:	d003      	beq.n	800c7ee <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800c7ea:	2b0b      	cmp	r3, #11
 800c7ec:	d11d      	bne.n	800c82a <_nx_tcp_fast_periodic_processing+0x1aa>

                /* We have a timeout condition on sending the FIN... so it needs to be
                   retried.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c7f4:	1c5a      	adds	r2, r3, #1
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c808:	6979      	ldr	r1, [r7, #20]
 800c80a:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800c80e:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c812:	409a      	lsls	r2, r3
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

                /* Send another FIN packet.  */
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c81e:	3b01      	subs	r3, #1
 800c820:	4619      	mov	r1, r3
 800c822:	6978      	ldr	r0, [r7, #20]
 800c824:	f000 fe25 	bl	800d472 <_nx_tcp_packet_send_fin>
 800c828:	e006      	b.n	800c838 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	2b0a      	cmp	r3, #10
 800c830:	d102      	bne.n	800c838 <_nx_tcp_fast_periodic_processing+0x1b8>
            {

                /* Clean the transmission control block.  */
                _nx_tcp_socket_block_cleanup(socket_ptr);
 800c832:	6978      	ldr	r0, [r7, #20]
 800c834:	f000 ffe2 	bl	800d7fc <_nx_tcp_socket_block_cleanup>
            }
        }

        /* Move to the next TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c83e:	617b      	str	r3, [r7, #20]
    while (sockets--)
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	1e5a      	subs	r2, r3, #1
 800c844:	613a      	str	r2, [r7, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	f47f af2a 	bne.w	800c6a0 <_nx_tcp_fast_periodic_processing+0x20>
    }
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	3718      	adds	r7, #24
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	240022f0 	.word	0x240022f0

0800c85c <_nx_tcp_mss_option_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_mss_option_get(UCHAR *option_ptr, ULONG option_area_size, ULONG *mss)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]

ULONG option_length;

    /* Initialize the value.  */
    *mss = 0;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]

    /* Loop through the option area looking for the MSS.  */
    while (option_area_size >= 4)
 800c86e:	e043      	b.n	800c8f8 <_nx_tcp_mss_option_get+0x9c>
    {

        /* Is the current character the MSS type?  */
        if (*option_ptr == NX_TCP_MSS_KIND)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	2b02      	cmp	r3, #2
 800c876:	d11a      	bne.n	800c8ae <_nx_tcp_mss_option_get+0x52>
        {

            /* Yes, we found it!  */

            /* Move the pointer forward by one.  */
            option_ptr++;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3301      	adds	r3, #1
 800c87c:	60fb      	str	r3, [r7, #12]

            /* Check the option length, if option length is not equal to 4, return NX_FALSE.  */
            if (*option_ptr++ != 4)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	1c5a      	adds	r2, r3, #1
 800c882:	60fa      	str	r2, [r7, #12]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b04      	cmp	r3, #4
 800c888:	d001      	beq.n	800c88e <_nx_tcp_mss_option_get+0x32>
            {
                return(NX_FALSE);
 800c88a:	2300      	movs	r3, #0
 800c88c:	e03a      	b.n	800c904 <_nx_tcp_mss_option_get+0xa8>
            }

            /* Build the mss size.  */
            *mss = (ULONG)*option_ptr++;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	60fa      	str	r2, [r7, #12]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	601a      	str	r2, [r3, #0]

            /* Get the LSB of the MSS.  */
            *mss = (*mss << 8) | (ULONG)*option_ptr;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	021b      	lsls	r3, r3, #8
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	7812      	ldrb	r2, [r2, #0]
 800c8a6:	431a      	orrs	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	601a      	str	r2, [r3, #0]

            /* Finished, get out of the loop!  */
            break;
 800c8ac:	e029      	b.n	800c902 <_nx_tcp_mss_option_get+0xa6>
        }

        /* Otherwise, process relative to the option type.  */

        /* Check for end of list.  */
        if (*option_ptr == NX_TCP_EOL_KIND)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d024      	beq.n	800c900 <_nx_tcp_mss_option_get+0xa4>
            /* Yes, end of list, get out!  */
            break;
        }

        /* Check for NOP.  */
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	1c5a      	adds	r2, r3, #1
 800c8ba:	60fa      	str	r2, [r7, #12]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d103      	bne.n	800c8ca <_nx_tcp_mss_option_get+0x6e>
        {

            /* One character option!  */
            option_area_size--;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	60bb      	str	r3, [r7, #8]
 800c8c8:	e016      	b.n	800c8f8 <_nx_tcp_mss_option_get+0x9c>
        }
        else
        {

            /* Derive the option length.  */
            option_length =  ((ULONG)*option_ptr);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	617b      	str	r3, [r7, #20]

            /* Return when option length is invalid. */
            if (option_length == 0)
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d101      	bne.n	800c8da <_nx_tcp_mss_option_get+0x7e>
            {
                return(NX_FALSE);
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e014      	b.n	800c904 <_nx_tcp_mss_option_get+0xa8>
            }

            /* Move the option pointer forward.  */
            option_ptr =  option_ptr + (option_length - 1);
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	60fb      	str	r3, [r7, #12]

            /* Determine if this is greater than the option area size.  */
            if (option_length > option_area_size)
 800c8e4:	697a      	ldr	r2, [r7, #20]
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d901      	bls.n	800c8f0 <_nx_tcp_mss_option_get+0x94>
            {
                return(NX_FALSE);
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	e009      	b.n	800c904 <_nx_tcp_mss_option_get+0xa8>
            }
            else
            {
                option_area_size =  option_area_size - option_length;
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	60bb      	str	r3, [r7, #8]
    while (option_area_size >= 4)
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2b03      	cmp	r3, #3
 800c8fc:	d8b8      	bhi.n	800c870 <_nx_tcp_mss_option_get+0x14>
 800c8fe:	e000      	b.n	800c902 <_nx_tcp_mss_option_get+0xa6>
            break;
 800c900:	bf00      	nop
            }
        }
    }

    /* Return.  */
    return(NX_TRUE);
 800c902:	2301      	movs	r3, #1
}
 800c904:	4618      	mov	r0, r3
 800c906:	371c      	adds	r7, #28
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <_nx_tcp_no_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_no_connection_reset(NX_IP *ip_ptr, NX_PACKET *packet_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800c910:	b590      	push	{r4, r7, lr}
 800c912:	b0d3      	sub	sp, #332	; 0x14c
 800c914:	af00      	add	r7, sp, #0
 800c916:	f107 030c 	add.w	r3, r7, #12
 800c91a:	6018      	str	r0, [r3, #0]
 800c91c:	f107 0308 	add.w	r3, r7, #8
 800c920:	6019      	str	r1, [r3, #0]
 800c922:	1d3b      	adds	r3, r7, #4
 800c924:	601a      	str	r2, [r3, #0]
ULONG         data_offset = 0;
#endif /* NX_IPSEC_ENABLE */


    /* Clear the fake socket first.  */
    memset((void *)&fake_socket, 0, sizeof(NX_TCP_SOCKET));
 800c926:	f107 0314 	add.w	r3, r7, #20
 800c92a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c92e:	2100      	movs	r1, #0
 800c930:	4618      	mov	r0, r3
 800c932:	f008 fe6b 	bl	801560c <memset>

    /* Build a fake socket so we can send a reset TCP requests that are not valid.  */
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;
 800c936:	f107 0314 	add.w	r3, r7, #20
 800c93a:	f107 020c 	add.w	r2, r7, #12
 800c93e:	6812      	ldr	r2, [r2, #0]
 800c940:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* Set the connection IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800c944:	f107 0308 	add.w	r3, r7, #8
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c94e:	2b04      	cmp	r3, #4
 800c950:	d12b      	bne.n	800c9aa <_nx_tcp_no_connection_reset+0x9a>
    {
    NX_IPV4_HEADER *ip_header_ptr;

        /* Set the IP header.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800c952:	f107 0308 	add.w	r3, r7, #8
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c95a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

        /* Set the connection ip.  */
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V4;
 800c95e:	f107 0314 	add.w	r3, r7, #20
 800c962:	2204      	movs	r2, #4
 800c964:	615a      	str	r2, [r3, #20]
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 800c966:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c96a:	68da      	ldr	r2, [r3, #12]
 800c96c:	f107 0314 	add.w	r3, r7, #20
 800c970:	619a      	str	r2, [r3, #24]

        /* Assume the interface that receives the incoming packet is the best interface
           for sending responses. */
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800c972:	f107 0308 	add.w	r3, r7, #8
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c97a:	f107 0314 	add.w	r3, r7, #20
 800c97e:	629a      	str	r2, [r3, #40]	; 0x28
        fake_socket.nx_tcp_socket_next_hop_address = NX_NULL;
 800c980:	f107 0314 	add.w	r3, r7, #20
 800c984:	2200      	movs	r2, #0
 800c986:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Find the next hop info. */
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 800c988:	f107 0314 	add.w	r3, r7, #20
 800c98c:	6999      	ldr	r1, [r3, #24]
 800c98e:	f107 0314 	add.w	r3, r7, #20
 800c992:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c996:	f107 0314 	add.w	r3, r7, #20
 800c99a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c99e:	f107 000c 	add.w	r0, r7, #12
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	6800      	ldr	r0, [r0, #0]
 800c9a6:	f7fd ff37 	bl	800a818 <_nx_ip_route_find>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* FEATURE_NX_IPV6 */

    /* Set the source port and destination port.  */
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800c9aa:	1d3b      	adds	r3, r7, #4
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	f107 0314 	add.w	r3, r7, #20
 800c9b6:	60da      	str	r2, [r3, #12]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800c9b8:	1d3b      	adds	r3, r7, #4
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	0c1a      	lsrs	r2, r3, #16
 800c9c0:	f107 0314 	add.w	r3, r7, #20
 800c9c4:	61da      	str	r2, [r3, #28]

    /* Set the sequence number only if the incoming segment does not have the ACK flag, according to
       Section 3.4, "Reset Generation" on page 37, RFC793. */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800c9c6:	1d3b      	adds	r3, r7, #4
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d122      	bne.n	800ca1a <_nx_tcp_no_connection_reset+0x10a>
    {
        /* Get the header length.  */
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800c9d4:	1d3b      	adds	r3, r7, #4
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	0f1b      	lsrs	r3, r3, #28
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Update sequence number to set the reset acknowledge number.  */
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800c9e2:	1d3b      	adds	r3, r7, #4
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	685a      	ldr	r2, [r3, #4]
 800c9e8:	f107 0308 	add.w	r3, r7, #8
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c9f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c9f4:	1acb      	subs	r3, r1, r3
 800c9f6:	441a      	add	r2, r3
 800c9f8:	1d3b      	adds	r3, r7, #4
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	605a      	str	r2, [r3, #4]

        /* Check the SYN and FIN bits.  */
        if (tcp_header_ptr -> nx_tcp_header_word_3 & (NX_TCP_SYN_BIT | NX_TCP_FIN_BIT))
 800c9fe:	1d3b      	adds	r3, r7, #4
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d006      	beq.n	800ca1a <_nx_tcp_no_connection_reset+0x10a>
        {

            /* Update sequence number to set the reset acknowledge number.  */
            tcp_header_ptr -> nx_tcp_sequence_number++;
 800ca0c:	1d3b      	adds	r3, r7, #4
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	1c5a      	adds	r2, r3, #1
 800ca14:	1d3b      	adds	r3, r7, #4
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	605a      	str	r2, [r3, #4]
            fake_socket.nx_tcp_socket_egress_sa_data_offset = 0;
        }
    }
#endif

    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 800ca1a:	f107 0314 	add.w	r3, r7, #20
 800ca1e:	2280      	movs	r2, #128	; 0x80
 800ca20:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Send a RST to indicate the connection was not available.  */
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 800ca24:	1d3b      	adds	r3, r7, #4
 800ca26:	f107 0214 	add.w	r2, r7, #20
 800ca2a:	6819      	ldr	r1, [r3, #0]
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f000 fd57 	bl	800d4e0 <_nx_tcp_packet_send_rst>
}
 800ca32:	bf00      	nop
 800ca34:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd90      	pop	{r4, r7, pc}

0800ca3c <_nx_tcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b09c      	sub	sp, #112	; 0x70
 800ca40:	af02      	add	r7, sp, #8
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]

UINT                         index;
UINT                         port;
ULONG                       *source_ip = NX_NULL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	667b      	str	r3, [r7, #100]	; 0x64
ULONG                       *dest_ip = NX_NULL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	663b      	str	r3, [r7, #96]	; 0x60
NX_TCP_SOCKET               *socket_ptr;
NX_TCP_HEADER               *tcp_header_ptr;
struct NX_TCP_LISTEN_STRUCT *listen_ptr;
VOID                         (*listen_callback)(NX_TCP_SOCKET *socket_ptr, UINT port);
ULONG                        option_words;
ULONG                        mss = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60bb      	str	r3, [r7, #8]
ULONG                        checksum;
NX_INTERFACE                *interface_ptr = NX_NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                         compute_checksum = 1;
 800ca56:	2301      	movs	r3, #1
 800ca58:	653b      	str	r3, [r7, #80]	; 0x50
NX_PACKET                   *queued_ptr;
NX_PACKET                   *queued_prev_ptr;
ULONG                       *queued_source_ip;
UINT                         queued_source_port;
UINT                         is_a_RST_request;
UINT                         is_valid_option_flag = NX_TRUE;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Pickup the source IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca64:	2b04      	cmp	r3, #4
 800ca66:	d10e      	bne.n	800ca86 <_nx_tcp_packet_process+0x4a>
    {

    NX_IPV4_HEADER *ip_header_ptr;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca6c:	637b      	str	r3, [r7, #52]	; 0x34

        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 800ca6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca70:	330c      	adds	r3, #12
 800ca72:	667b      	str	r3, [r7, #100]	; 0x64

        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 800ca74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca76:	3310      	adds	r3, #16
 800ca78:	663b      	str	r3, [r7, #96]	; 0x60

        mss = 536;
 800ca7a:	f44f 7306 	mov.w	r3, #536	; 0x218
 800ca7e:	60bb      	str	r3, [r7, #8]

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca84:	657b      	str	r3, [r7, #84]	; 0x54
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
    }
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 800ca86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8a:	f003 0308 	and.w	r3, r3, #8
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d001      	beq.n	800ca96 <_nx_tcp_packet_process+0x5a>
    {
        compute_checksum = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	653b      	str	r3, [r7, #80]	; 0x50
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800ca96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d023      	beq.n	800cae4 <_nx_tcp_packet_process+0xa8>
#endif /* defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                           (UINT)packet_ptr -> nx_packet_length,
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800caa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caa6:	2106      	movs	r1, #6
 800caa8:	6838      	ldr	r0, [r7, #0]
 800caaa:	f7fc fc1d 	bl	80092e8 <_nx_ip_checksum_compute>
 800caae:	4603      	mov	r3, r0
 800cab0:	633b      	str	r3, [r7, #48]	; 0x30
                                           source_ip, dest_ip);

        checksum = NX_LOWER_16_MASK & ~checksum;
 800cab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab4:	43db      	mvns	r3, r3
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the checksum.  */
        if (checksum != 0)
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d011      	beq.n	800cae4 <_nx_tcp_packet_process+0xa8>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP invalid packet error count.  */
            ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cac6:	1c5a      	adds	r2, r3, #1
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Increment the TCP packet checksum error count.  */
            ip_ptr -> nx_ip_tcp_checksum_errors++;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cad4:	1c5a      	adds	r2, r3, #1
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
#endif

            /* Checksum error, just release the packet.  */
            _nx_packet_release(packet_ptr);
 800cadc:	6838      	ldr	r0, [r7, #0]
 800cade:	f7ff f9bd 	bl	800be5c <_nx_packet_release>
            return;
 800cae2:	e31c      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
        }
    }

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	ba1a      	rev	r2, r3
 800caf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	ba1a      	rev	r2, r3
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800cafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	ba1a      	rev	r2, r3
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	ba1a      	rev	r2, r3
 800cb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb10:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	ba1a      	rev	r2, r3
 800cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1a:	611a      	str	r2, [r3, #16]

    /* Determine if there are any option words...  Note there are always 5 words in a TCP header.  */
    option_words =  (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	0f1b      	lsrs	r3, r3, #28
 800cb22:	3b05      	subs	r3, #5
 800cb24:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Check for valid packet length.  */
    if (((INT)option_words < 0) || (packet_ptr -> nx_packet_length < (sizeof(NX_TCP_HEADER) + (option_words << 2))))
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	db06      	blt.n	800cb3a <_nx_tcp_packet_process+0xfe>
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	3314      	adds	r3, #20
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d20a      	bcs.n	800cb50 <_nx_tcp_packet_process+0x114>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800cb48:	6838      	ldr	r0, [r7, #0]
 800cb4a:	f7ff f987 	bl	800be5c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800cb4e:	e2e6      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
    }
#endif

    if (option_words)
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d01c      	beq.n	800cb90 <_nx_tcp_packet_process+0x154>
    {

        /* Yes, there are one or more option words.  */

        /* Derive the Maximum Segment Size (MSS) in the option words.  */
        status = _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	f103 0014 	add.w	r0, r3, #20
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	f107 0208 	add.w	r2, r7, #8
 800cb66:	4619      	mov	r1, r3
 800cb68:	f7ff fe78 	bl	800c85c <_nx_tcp_mss_option_get>
 800cb6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Check the status. if status is NX_FALSE, means Option Length is invalid.  */
        if (status == NX_FALSE)
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d102      	bne.n	800cb7a <_nx_tcp_packet_process+0x13e>
        {

            /* The option is invalid.  */
            is_valid_option_flag = NX_FALSE;
 800cb74:	2300      	movs	r3, #0
 800cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb78:	e00a      	b.n	800cb90 <_nx_tcp_packet_process+0x154>
        else
        {

            /* Set the default MSS if the MSS value was not found.  */
            /*lint -e{644} suppress variable might not be initialized, since "mss" was initialized in _nx_tcp_mss_option_get. */
            if (mss == 0)
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d107      	bne.n	800cb90 <_nx_tcp_packet_process+0x154>
            {
#ifndef NX_DISABLE_IPV4
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb86:	2b04      	cmp	r3, #4
 800cb88:	d102      	bne.n	800cb90 <_nx_tcp_packet_process+0x154>
                {
                    mss = 536;
 800cb8a:	f44f 7306 	mov.w	r3, #536	; 0x218
 800cb8e:	60bb      	str	r3, [r7, #8]
        }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
    }

    /* Pickup the destination TCP port.  */
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	623b      	str	r3, [r7, #32]

    /* Pickup the source TCP port.  */
    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	0c1b      	lsrs	r3, r3, #16
 800cb9e:	61fb      	str	r3, [r7, #28]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	0a1a      	lsrs	r2, r3, #8
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	4413      	add	r3, r2
 800cba8:	f003 031f 	and.w	r3, r3, #31
 800cbac:	61bb      	str	r3, [r7, #24]

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	69ba      	ldr	r2, [r7, #24]
 800cbb2:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cbb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbba:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if there are any sockets bound on this port index.  */
    if (socket_ptr)
 800cbbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d066      	beq.n	800cc90 <_nx_tcp_packet_process+0x254>

        /*  Yes, loop to examine the list of bound ports on this index.  */
        do
        {

            find_a_match = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if the port has been found.  */
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 800cbc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	6a3a      	ldr	r2, [r7, #32]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d152      	bne.n	800cc76 <_nx_tcp_packet_process+0x23a>
                (socket_ptr -> nx_tcp_socket_connect_port == source_port))
 800cbd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbd2:	69db      	ldr	r3, [r3, #28]
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 800cbd4:	69fa      	ldr	r2, [r7, #28]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d14d      	bne.n	800cc76 <_nx_tcp_packet_process+0x23a>
            {

                /* Make sure they are the same IP protocol */
                if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == packet_ptr -> nx_packet_ip_version)
 800cbda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d10c      	bne.n	800cc02 <_nx_tcp_packet_process+0x1c6>
                {

#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cbee:	2b04      	cmp	r3, #4
 800cbf0:	d107      	bne.n	800cc02 <_nx_tcp_packet_process+0x1c6>
                    {

                        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 == *source_ip)
 800cbf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbf4:	699a      	ldr	r2, [r3, #24]
 800cbf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d101      	bne.n	800cc02 <_nx_tcp_packet_process+0x1c6>
                        {
                            find_a_match = 1;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	63bb      	str	r3, [r7, #56]	; 0x38
                        }
                    }
#endif /* FEATURE_NX_IPV6 */
                }

                if (find_a_match)
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d036      	beq.n	800cc76 <_nx_tcp_packet_process+0x23a>
                    /* Determine if we need to update the tcp port head pointer.  This should
                       only be done if the found socket pointer is not the head pointer and
                       the mutex for this IP instance is available.  */

                    /* Move the port head pointer to this socket.  */
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	69ba      	ldr	r2, [r7, #24]
 800cc0c:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cc10:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cc12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* If this packet contains SYN */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d024      	beq.n	800cc6c <_nx_tcp_packet_process+0x230>
                    {

                        /* Record the MSS value if it is present and the   Otherwise use 536, as
                           outlined in RFC 1122 section 4.2.2.6. */
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 800cc22:	68ba      	ldr	r2, [r7, #8]
 800cc24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc26:	625a      	str	r2, [r3, #36]	; 0x24

                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 800cc28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc2a:	691a      	ldr	r2, [r3, #16]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d208      	bcs.n	800cc44 <_nx_tcp_packet_process+0x208>
 800cc32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d004      	beq.n	800cc44 <_nx_tcp_packet_process+0x208>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = socket_ptr -> nx_tcp_socket_mss;
 800cc3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc3c:	691a      	ldr	r2, [r3, #16]
 800cc3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc40:	621a      	str	r2, [r3, #32]
 800cc42:	e00b      	b.n	800cc5c <_nx_tcp_packet_process+0x220>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 800cc44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc48:	2b03      	cmp	r3, #3
 800cc4a:	d104      	bne.n	800cc56 <_nx_tcp_packet_process+0x21a>
                                 (socket_ptr -> nx_tcp_socket_connect_mss > mss))
 800cc4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc4e:	6a1a      	ldr	r2, [r3, #32]
 800cc50:	68bb      	ldr	r3, [r7, #8]
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d902      	bls.n	800cc5c <_nx_tcp_packet_process+0x220>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc5a:	621a      	str	r2, [r3, #32]
                        }

                        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
                            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 800cc5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc5e:	6a1b      	ldr	r3, [r3, #32]
 800cc60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc62:	6a12      	ldr	r2, [r2, #32]
 800cc64:	fb02 f203 	mul.w	r2, r2, r3
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800cc68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc6a:	631a      	str	r2, [r3, #48]	; 0x30
                        socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
                    }

                    /* Process the packet within an existing TCP connection.  */
                    _nx_tcp_socket_packet_process(socket_ptr, packet_ptr);
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cc70:	f000 fe4e 	bl	800d910 <_nx_tcp_socket_packet_process>

                    /* Get out of the search loop and this function!  */
                    return;
 800cc74:	e253      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
                }
            }

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
 800cc76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc7c:	65fb      	str	r3, [r7, #92]	; 0x5c
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	69ba      	ldr	r2, [r7, #24]
 800cc82:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d198      	bne.n	800cbc2 <_nx_tcp_packet_process+0x186>
    }

    /* At this point, we know there is not an existing TCP connection.  */

    /* If this packet contains the valid option.  */
    if (is_valid_option_flag == NX_FALSE)
 800cc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10f      	bne.n	800ccb6 <_nx_tcp_packet_process+0x27a>
    {

        /* Send RST message.
           TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
           a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 800cc96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7ff fe38 	bl	800c910 <_nx_tcp_no_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error count.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cca6:	1c5a      	adds	r2, r3, #1
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

        /* Not a connection request, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800ccae:	6838      	ldr	r0, [r7, #0]
 800ccb0:	f7ff f8d4 	bl	800be5c <_nx_packet_release>

        return;
 800ccb4:	e233      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
#endif

    /* Handle new connection requests without ACK bit in NX_TCP_SYN_RECEIVED state.
       NX_TCP_SYN_RECEIVED state is equal of LISTEN state of RFC.
       RFC793, Section3.9, Page65. */
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f040 8209 	bne.w	800d0d6 <_nx_tcp_packet_process+0x69a>
        (ip_ptr -> nx_ip_tcp_active_listen_requests))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 8203 	beq.w	800d0d6 <_nx_tcp_packet_process+0x69a>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	d145      	bne.n	800cd66 <_nx_tcp_packet_process+0x32a>
        {

            /* Check for LAND attack packet. This is an incoming packet with matching
               Source and Destination IP address, and matching source and destination port. */
            if ((*source_ip == *dest_ip) && (source_port == port))
 800ccda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d10e      	bne.n	800cd04 <_nx_tcp_packet_process+0x2c8>
 800cce6:	69fa      	ldr	r2, [r7, #28]
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d10a      	bne.n	800cd04 <_nx_tcp_packet_process+0x2c8>

                /* Bogus packet. Drop it! */

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ccf4:	1c5a      	adds	r2, r3, #1
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet we will not process any further.  */
                _nx_packet_release(packet_ptr);
 800ccfc:	6838      	ldr	r0, [r7, #0]
 800ccfe:	f7ff f8ad 	bl	800be5c <_nx_packet_release>
                return;
 800cd02:	e20c      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>

            /* It shall not make connections if the source IP address
               is broadcast or multicast.   */
            if (
                /* Check for Multicast address */
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800cd04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
            if (
 800cd0c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800cd10:	d01e      	beq.n	800cd50 <_nx_tcp_packet_process+0x314>
                /* Check for subnet-directed broadcast */
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 800cd12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd18:	699b      	ldr	r3, [r3, #24]
 800cd1a:	401a      	ands	r2, r3
 800cd1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd1e:	69db      	ldr	r3, [r3, #28]
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d10a      	bne.n	800cd3a <_nx_tcp_packet_process+0x2fe>
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 800cd24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	43db      	mvns	r3, r3
 800cd2e:	401a      	ands	r2, r3
 800cd30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	43db      	mvns	r3, r3
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d00a      	beq.n	800cd50 <_nx_tcp_packet_process+0x314>
                /* Check for local subnet address */
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 800cd3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd40:	69db      	ldr	r3, [r3, #28]
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d004      	beq.n	800cd50 <_nx_tcp_packet_process+0x314>
                /* Check for limited broadcast */
                (*source_ip == NX_IP_LIMITED_BROADCAST)
 800cd46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd48:	681b      	ldr	r3, [r3, #0]
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 800cd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4e:	d10a      	bne.n	800cd66 <_nx_tcp_packet_process+0x32a>
               )
            {

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800cd5e:	6838      	ldr	r0, [r7, #0]
 800cd60:	f7ff f87c 	bl	800be5c <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 800cd64:	e1db      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
            }
        }
#endif /* FEATURE_NX_IPV6*/

        /* Search all ports in listen mode for a match. */
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800cd6c:	65bb      	str	r3, [r7, #88]	; 0x58
        do
        {

            /* Determine if this port is in a listen mode.  */
            if (listen_ptr -> nx_tcp_listen_port == port)
 800cd6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6a3a      	ldr	r2, [r7, #32]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	f040 81a4 	bne.w	800d0c2 <_nx_tcp_packet_process+0x686>

                /* Determine if the packet is an initial connection request.
                   The incoming SYN packet is a connection request.
                   The incoming RST packet is related to a previous connection request.
                   Fourth other text or control. RFC793, Section3.9, Page66. */
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d110      	bne.n	800cda8 <_nx_tcp_packet_process+0x36c>
                    (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)))
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10a      	bne.n	800cda8 <_nx_tcp_packet_process+0x36c>
                {

#ifndef NX_DISABLE_TCP_INFO
                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cd98:	1c5a      	adds	r2, r3, #1
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* NX_DISABLE_TCP_INFO */

                    /* Release the packet.  */
                    _nx_packet_release(packet_ptr);
 800cda0:	6838      	ldr	r0, [r7, #0]
 800cda2:	f7ff f85b 	bl	800be5c <_nx_packet_release>

                    return;
 800cda6:	e1ba      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
                }

#ifndef NX_DISABLE_TCP_INFO

                /* Check for a SYN bit set.  */
                if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT))
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00d      	beq.n	800cdd0 <_nx_tcp_packet_process+0x394>
                {

                    /* Increment the passive TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_passive_connections++;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cdba:	1c5a      	adds	r2, r3, #1
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

                    /* Increment the TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_connections++;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cdc8:	1c5a      	adds	r2, r3, #1
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif

                /* Okay, this port is in a listen mode.  We now need to see if
                   there is an available socket for the new connection request
                   present.  */
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 800cdd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 80b2 	beq.w	800cf3e <_nx_tcp_packet_process+0x502>
                    ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT) == NX_NULL))
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f040 80ab 	bne.w	800cf3e <_nx_tcp_packet_process+0x502>
                    /* Yes there is indeed a socket present.  We now need to
                       fill in the appropriate info and call the server callback
                       routine.  */

                    /* Allocate the supplied server socket.  */
                    socket_ptr = listen_ptr -> nx_tcp_listen_socket_ptr;
 800cde8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Clear the server socket pointer in the listen request.  If the
                       application wishes to honor more server connections on this port,
                       the application must call relisten with a new server socket
                       pointer.  */
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 800cdee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	609a      	str	r2, [r3, #8]

                    /* Fill the socket in with the appropriate information.  */


#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d116      	bne.n	800ce2c <_nx_tcp_packet_process+0x3f0>
                    {

                        /* Assume the interface that receives the incoming packet is the best interface
                           for sending responses. */
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 800cdfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce02:	629a      	str	r2, [r3, #40]	; 0x28
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 800ce04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce06:	2200      	movs	r2, #0
 800ce08:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Set the next hop address.  */
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 800ce0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce0c:	6819      	ldr	r1, [r3, #0]
 800ce0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce10:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ce14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce16:	332c      	adds	r3, #44	; 0x2c
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7fd fcfd 	bl	800a818 <_nx_ip_route_find>
                                          &socket_ptr -> nx_tcp_socket_next_hop_address);

                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 800ce1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce20:	2204      	movs	r2, #4
 800ce22:	615a      	str	r2, [r3, #20]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 800ce24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce2a:	619a      	str	r2, [r3, #24]
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
                    }
#endif /* FEATURE_NX_IPV6 */

                    socket_ptr -> nx_tcp_socket_connect_port = source_port;
 800ce2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce2e:	69fa      	ldr	r2, [r7, #28]
 800ce30:	61da      	str	r2, [r3, #28]
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 800ce32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce38:	641a      	str	r2, [r3, #64]	; 0x40


                    /* Yes, MSS was found, so store it!  */
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce3e:	625a      	str	r2, [r3, #36]	; 0x24
                     */
                    socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

                    /* Set the initial slow start threshold to be the advertised window size. */
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800ce40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce46:	635a      	str	r2, [r3, #52]	; 0x34

                    /* Slow start:  setup initial window (IW) to be MSS,  RFC 2581, 3.1 */
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = mss;
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce4c:	659a      	str	r2, [r3, #88]	; 0x58

                    /* Initialize the transmit outstanding byte count to zero. */
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800ce4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce50:	2200      	movs	r2, #0
 800ce52:	65da      	str	r2, [r3, #92]	; 0x5c

                    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
                    index = (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	0a1a      	lsrs	r2, r3, #8
 800ce58:	6a3b      	ldr	r3, [r7, #32]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f003 031f 	and.w	r3, r3, #31
 800ce60:	61bb      	str	r3, [r7, #24]

                    /* Determine if the list is NULL.  */
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	69ba      	ldr	r2, [r7, #24]
 800ce66:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800ce6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d028      	beq.n	800cec4 <_nx_tcp_packet_process+0x488>
                    {

                        /* There are already sockets on this list... just add this one
                           to the end.  */
                        socket_ptr -> nx_tcp_socket_bound_next =
                            ip_ptr -> nx_ip_tcp_port_table[index];
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800ce7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                        socket_ptr -> nx_tcp_socket_bound_next =
 800ce7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =
                            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	69ba      	ldr	r2, [r7, #24]
 800ce88:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800ce8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce90:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
                        socket_ptr -> nx_tcp_socket_bound_previous =
 800ce94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce96:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	69ba      	ldr	r2, [r7, #24]
 800ce9e:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ceaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ceac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                            socket_ptr;
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous = socket_ptr;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	69ba      	ldr	r2, [r7, #24]
 800ceb4:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800ceb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cebe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800cec2:	e00e      	b.n	800cee2 <_nx_tcp_packet_process+0x4a6>
                    else
                    {

                        /* Nothing is on the TCP port list.  Add this TCP socket to an
                           empty list.  */
                        socket_ptr -> nx_tcp_socket_bound_next =      socket_ptr;
 800cec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cec6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cec8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 800cecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cece:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ced0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	69ba      	ldr	r2, [r7, #24]
 800ced8:	f502 7281 	add.w	r2, r2, #258	; 0x102
 800cedc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    }

                    /* Pickup the listen callback function.  */
                    listen_callback = listen_ptr -> nx_tcp_listen_callback;
 800cee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	617b      	str	r3, [r7, #20]

                    /* Release the incoming packet.  */
                    _nx_packet_release(packet_ptr);
 800cee8:	6838      	ldr	r0, [r7, #0]
 800ceea:	f7fe ffb7 	bl	800be5c <_nx_packet_release>

                    /* Determine if an accept call with suspension has already been made
                       for this socket.  If so, the SYN message needs to be sent from
                       here.  */
                    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800ceee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef2:	2b04      	cmp	r3, #4
 800cef4:	d11a      	bne.n	800cf2c <_nx_tcp_packet_process+0x4f0>
                        /* The application is suspended on an accept call for this socket.
                           Simply send the SYN now and keep the thread suspended until the
                           other side completes the connection.  */

                        /* Send the SYN message, but increment the ACK first.  */
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800cef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefa:	1c5a      	adds	r2, r3, #1
 800cefc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cefe:	641a      	str	r2, [r3, #64]	; 0x40

                        /* Increment the sequence number for the SYN message.  */
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 800cf00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf08:	63da      	str	r2, [r3, #60]	; 0x3c

                        /* Setup a timeout so the connection attempt can be sent again.  */
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800cf0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf0c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800cf10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf12:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800cf16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                        /* Send the SYN+ACK message.  */
                        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800cf1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf22:	3b01      	subs	r3, #1
 800cf24:	4619      	mov	r1, r3
 800cf26:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cf28:	f000 fb0e 	bl	800d548 <_nx_tcp_packet_send_syn>
                    }

                    /* Determine if there is a listen callback function.  */
                    if (listen_callback)
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 80c6 	beq.w	800d0c0 <_nx_tcp_packet_process+0x684>
                    {
                        /* Call the user's listen callback function.  */
                        (listen_callback)(socket_ptr, port);
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	6a39      	ldr	r1, [r7, #32]
 800cf38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cf3a:	4798      	blx	r3
                    if (listen_callback)
 800cf3c:	e0c0      	b.n	800d0c0 <_nx_tcp_packet_process+0x684>
                        /* If trace is enabled, insert this event into the trace buffer.  */
                        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_SYN_RECEIVE, ip_ptr, NX_NULL, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
                    }

                    /* Check for the same connection request already in the queue.  */
                    queued_count = listen_ptr -> nx_tcp_listen_queue_current;
 800cf3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	64fb      	str	r3, [r7, #76]	; 0x4c
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800cf44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	64bb      	str	r3, [r7, #72]	; 0x48
                    queued_prev_ptr = queued_ptr;
 800cf4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf4c:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Initialize the check for queued request to false.*/
                    is_a_RST_request = NX_FALSE;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Loop through the queued list in order to search for duplicate request.  */
                    while (queued_count--)
 800cf52:	e05c      	b.n	800d00e <_nx_tcp_packet_process+0x5d2>
                    {

                        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 800cf54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	0c1b      	lsrs	r3, r3, #16
 800cf5c:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_IPV4
                        /* Pickup the queued source port and source IP address for comparison.  */
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cf5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d121      	bne.n	800cfac <_nx_tcp_packet_process+0x570>
                        {

                            /*lint -e{929} -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                            queued_source_ip = (ULONG *)(((ULONG *)queued_ptr -> nx_packet_prepend_ptr) - 2);
 800cf68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	3b08      	subs	r3, #8
 800cf6e:	60fb      	str	r3, [r7, #12]

                            /* Determine if this matches the current connection request.  */
                            if ((*queued_source_ip == *source_ip) && (queued_source_port == source_port))
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d117      	bne.n	800cfac <_nx_tcp_packet_process+0x570>
 800cf7c:	693a      	ldr	r2, [r7, #16]
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d113      	bne.n	800cfac <_nx_tcp_packet_process+0x570>
                            {

                                /* Possible duplicate connection request to one that is already queued.  */

                                /* Check for a RST (reset) bit set.  */
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <_nx_tcp_packet_process+0x55a>
                                {

                                    /* RST packet matches a previously queued connection request. */
                                    is_a_RST_request = NX_TRUE;
 800cf90:	2301      	movs	r3, #1
 800cf92:	643b      	str	r3, [r7, #64]	; 0x40
 800cf94:	e00a      	b.n	800cfac <_nx_tcp_packet_process+0x570>
                                }
                                else
                                {
#ifndef NX_DISABLE_TCP_INFO
                                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
                                    /* Simply release the packet and return.  */
                                    _nx_packet_release(packet_ptr);
 800cfa4:	6838      	ldr	r0, [r7, #0]
 800cfa6:	f7fe ff59 	bl	800be5c <_nx_packet_release>

                                    /* Return!  */
                                    return;
 800cfaa:	e0b8      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
                        }
#endif /* FEATURE_NX_IPV6  */

                        /* Handle the case of the RST packet which cancels a previously received
                           connection request. */
                        if (is_a_RST_request)
 800cfac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d028      	beq.n	800d004 <_nx_tcp_packet_process+0x5c8>
                        {

                            /* A previous connection request needs to be removed from the listen queue. */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 800cfb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d104      	bne.n	800cfc6 <_nx_tcp_packet_process+0x58a>
                            {

                                /* Reset the front (oldest) of the queue to the next request. */
                                listen_ptr -> nx_tcp_listen_queue_head = queued_ptr -> nx_packet_queue_next;
 800cfbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfbe:	69da      	ldr	r2, [r3, #28]
 800cfc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfc2:	615a      	str	r2, [r3, #20]
 800cfc4:	e003      	b.n	800cfce <_nx_tcp_packet_process+0x592>
                            else
                            {

                                /* Link around the request we are removing. */
                                /*lint -e{613} suppress possible use of null pointer, since 'queued_prev_ptr' must not be NULL.  */
                                queued_prev_ptr -> nx_packet_queue_next = queued_ptr -> nx_packet_queue_next;
 800cfc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfc8:	69da      	ldr	r2, [r3, #28]
 800cfca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfcc:	61da      	str	r2, [r3, #28]
                            }

                            /* Is the request being removed the tail (most recent connection?)   */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 800cfce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d102      	bne.n	800cfde <_nx_tcp_packet_process+0x5a2>
                            {

                                /* Yes, set the previous connection request as the tail. */
                                listen_ptr -> nx_tcp_listen_queue_tail = queued_prev_ptr;
 800cfd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfdc:	619a      	str	r2, [r3, #24]
                            }

                            /* Release the connection request packet.  */
                            _nx_packet_release(queued_ptr);
 800cfde:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cfe0:	f7fe ff3c 	bl	800be5c <_nx_packet_release>

                            /* Update the listen queue. */
                            listen_ptr -> nx_tcp_listen_queue_current--;
 800cfe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	1e5a      	subs	r2, r3, #1
 800cfea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfec:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_TCP_INFO
                            /* Increment the TCP dropped packet count.  */
                            ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                            /* Simply release the packet and return.  */
                            _nx_packet_release(packet_ptr);
 800cffc:	6838      	ldr	r0, [r7, #0]
 800cffe:	f7fe ff2d 	bl	800be5c <_nx_packet_release>

                            /* Return!  */
                            return;
 800d002:	e08c      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
                        }

                        /* Move to next item in the queue.  */
                        queued_prev_ptr = queued_ptr;
 800d004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d006:	647b      	str	r3, [r7, #68]	; 0x44
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 800d008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d00a:	69db      	ldr	r3, [r3, #28]
 800d00c:	64bb      	str	r3, [r7, #72]	; 0x48
                    while (queued_count--)
 800d00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d010:	1e5a      	subs	r2, r3, #1
 800d012:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d014:	2b00      	cmp	r3, #0
 800d016:	d19d      	bne.n	800cf54 <_nx_tcp_packet_process+0x518>
                    }

                    /* Not a duplicate connection request, place this request on the listen queue.  */

                    /* Is this a RST packet? */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00a      	beq.n	800d03a <_nx_tcp_packet_process+0x5fe>
                    {

                        /* Yes, so not a connection request. Do not place on the listen queue. */
#ifndef NX_DISABLE_TCP_INFO
                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d02a:	1c5a      	adds	r2, r3, #1
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 800d032:	6838      	ldr	r0, [r7, #0]
 800d034:	f7fe ff12 	bl	800be5c <_nx_packet_release>

                        /* Return!  */
                        return;
 800d038:	e071      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
                    }

                    /* Set the next pointer of the packet to NULL.  */
                    packet_ptr -> nx_packet_queue_next = NX_NULL;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	2200      	movs	r2, #0
 800d03e:	61da      	str	r2, [r3, #28]

                    /* Queue the new connection request.  */
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 800d040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d004      	beq.n	800d052 <_nx_tcp_packet_process+0x616>
                    {

                        /* There is a connection request already queued, just link packet to tail.  */
                        (listen_ptr -> nx_tcp_listen_queue_tail) -> nx_packet_queue_next = packet_ptr;
 800d048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	61da      	str	r2, [r3, #28]
 800d050:	e002      	b.n	800d058 <_nx_tcp_packet_process+0x61c>
                    }
                    else
                    {

                        /* The queue is empty.  Setup head pointer to the new packet.  */
                        listen_ptr -> nx_tcp_listen_queue_head = packet_ptr;
 800d052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	615a      	str	r2, [r3, #20]
                    }

                    /* Setup the tail pointer to the new packet and increment the queue count.  */
                    listen_ptr -> nx_tcp_listen_queue_tail =  packet_ptr;
 800d058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	619a      	str	r2, [r3, #24]
                    listen_ptr -> nx_tcp_listen_queue_current++;
 800d05e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	1c5a      	adds	r2, r3, #1
 800d064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d066:	611a      	str	r2, [r3, #16]

                    /* Add debug information. */
                    NX_PACKET_DEBUG(NX_PACKET_TCP_LISTEN_QUEUE, __LINE__, packet_ptr);

                    /* Determine if the queue depth has been exceeded.  */
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 800d068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d06a:	691a      	ldr	r2, [r3, #16]
 800d06c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	429a      	cmp	r2, r3
 800d072:	d953      	bls.n	800d11c <_nx_tcp_packet_process+0x6e0>
                    {

#ifndef NX_DISABLE_TCP_INFO

                        /* Increment the TCP connections dropped count.  */
                        ip_ptr -> nx_ip_tcp_connections_dropped++;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                        ip_ptr -> nx_ip_tcp_connections--;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d088:	1e5a      	subs	r2, r3, #1
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d096:	1c5a      	adds	r2, r3, #1
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                        /* Save the head packet pointer, since this will be released below.  */
                        packet_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800d09e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0a0:	695b      	ldr	r3, [r3, #20]
 800d0a2:	603b      	str	r3, [r7, #0]

                        /* Remove the oldest packet from the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_head = (listen_ptr -> nx_tcp_listen_queue_head) -> nx_packet_queue_next;
 800d0a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	69da      	ldr	r2, [r3, #28]
 800d0aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0ac:	615a      	str	r2, [r3, #20]

                        /* Decrement the number of packets in the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_current--;
 800d0ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	1e5a      	subs	r2, r3, #1
 800d0b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0b6:	611a      	str	r2, [r3, #16]

                        /* We have exceeded the number of connections that can be
                           queued for this port.  */

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 800d0b8:	6838      	ldr	r0, [r7, #0]
 800d0ba:	f7fe fecf 	bl	800be5c <_nx_packet_release>
                    }
                }

                /* Finished processing, just return.  */
                return;
 800d0be:	e02d      	b.n	800d11c <_nx_tcp_packet_process+0x6e0>
 800d0c0:	e02c      	b.n	800d11c <_nx_tcp_packet_process+0x6e0>
            }

            /* Move to the next listen request.  */
            listen_ptr = listen_ptr -> nx_tcp_listen_next;
 800d0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0c4:	69db      	ldr	r3, [r3, #28]
 800d0c6:	65bb      	str	r3, [r7, #88]	; 0x58
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800d0ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	f47f ae4c 	bne.w	800cd6e <_nx_tcp_packet_process+0x332>
    }

#ifndef NX_DISABLE_TCP_INFO

    /* Determine if a connection request is present.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d006      	beq.n	800d0f0 <_nx_tcp_packet_process+0x6b4>
    {

        /* Yes, increment the TCP connections dropped count.  */
        ip_ptr -> nx_ip_tcp_connections_dropped++;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d0e8:	1c5a      	adds	r2, r3, #1
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the TCP dropped packet count.  */
    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d0f6:	1c5a      	adds	r2, r3, #1
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* NX_DISABLE_TCP_INFO  */

    /* Determine if a RST is present. If so, don't send a RST in response.  */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 800d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d104      	bne.n	800d114 <_nx_tcp_packet_process+0x6d8>
    {

        /* Non RST is present, send reset when no connection is present.  */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 800d10a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7ff fbfe 	bl	800c910 <_nx_tcp_no_connection_reset>
    }

    /* Not a connection request, just release the packet.  */
    _nx_packet_release(packet_ptr);
 800d114:	6838      	ldr	r0, [r7, #0]
 800d116:	f7fe fea1 	bl	800be5c <_nx_packet_release>

    return;
 800d11a:	e000      	b.n	800d11e <_nx_tcp_packet_process+0x6e2>
                return;
 800d11c:	bf00      	nop
}
 800d11e:	3768      	adds	r7, #104	; 0x68
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <_nx_tcp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_TCP_HEADER))
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d132:	2b13      	cmp	r3, #19
 800d134:	d80a      	bhi.n	800d14c <_nx_tcp_packet_receive+0x28>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800d144:	6838      	ldr	r0, [r7, #0]
 800d146:	f7fe fe89 	bl	800be5c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800d14a:	e052      	b.n	800d1f2 <_nx_tcp_packet_receive+0xce>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d14c:	f3ef 8305 	mrs	r3, IPSR
 800d150:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d152:	69ba      	ldr	r2, [r7, #24]
    }
#endif

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800d154:	4b28      	ldr	r3, [pc, #160]	; (800d1f8 <_nx_tcp_packet_receive+0xd4>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4313      	orrs	r3, r2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d106      	bne.n	800d16c <_nx_tcp_packet_receive+0x48>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800d164:	4b25      	ldr	r3, [pc, #148]	; (800d1fc <_nx_tcp_packet_receive+0xd8>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d03e      	beq.n	800d1ea <_nx_tcp_packet_receive+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d16c:	f3ef 8310 	mrs	r3, PRIMASK
 800d170:	617b      	str	r3, [r7, #20]
    return(posture);
 800d172:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d174:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d176:	b672      	cpsid	i
    return(int_posture);
 800d178:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback.  Just place the message at the
           end of the TCP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800d17a:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the TCP message queue.  */
        if (ip_ptr -> nx_ip_tcp_queue_head)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d013      	beq.n	800d1ae <_nx_tcp_packet_receive+0x8a>
        {

            /* Link the current packet at the end of the queue.  */
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	61da      	str	r2, [r3, #28]
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2200      	movs	r2, #0
 800d19c:	61da      	str	r2, [r3, #28]

            /* Increment the count of incoming TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800d1ac:	e00e      	b.n	800d1cc <_nx_tcp_packet_receive+0xa8>
        }
        else
        {

            /* Empty queue, add to the head of the TCP message queue.  */
            ip_ptr -> nx_ip_tcp_queue_head =        packet_ptr;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	683a      	ldr	r2, [r7, #0]
 800d1b2:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
            ip_ptr -> nx_ip_tcp_queue_tail =        packet_ptr;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
            packet_ptr -> nx_packet_queue_next =    NX_NULL;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	61da      	str	r2, [r3, #28]

            /* Set the initial count TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f383 8810 	msr	PRIMASK, r3
}
 800d1d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the TCP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d1de:	2200      	movs	r2, #0
 800d1e0:	2180      	movs	r1, #128	; 0x80
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f004 fcba 	bl	8011b5c <_tx_event_flags_set>
 800d1e8:	e003      	b.n	800d1f2 <_nx_tcp_packet_receive+0xce>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the TCP processing directly.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7ff fc25 	bl	800ca3c <_nx_tcp_packet_process>
    }
}
 800d1f2:	3720      	adds	r7, #32
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	2400008c 	.word	0x2400008c
 800d1fc:	240023d0 	.word	0x240023d0

0800d200 <_nx_tcp_packet_send_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_ack(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af04      	add	r7, sp, #16
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20e:	2200      	movs	r2, #0
 800d210:	9202      	str	r2, [sp, #8]
 800d212:	2200      	movs	r2, #0
 800d214:	9201      	str	r2, [sp, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	9200      	str	r2, [sp, #0]
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f80b 	bl	800d23c <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800d226:	4b04      	ldr	r3, [pc, #16]	; (800d238 <_nx_tcp_packet_send_ack+0x38>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d22e:	bf00      	nop
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	240022fc 	.word	0x240022fc

0800d23c <_nx_tcp_packet_send_control>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_control(NX_TCP_SOCKET *socket_ptr, ULONG control_bits, ULONG tx_sequence,
                                  ULONG ack_number, ULONG option_word_1, ULONG option_word_2, UCHAR *data)
{
 800d23c:	b5b0      	push	{r4, r5, r7, lr}
 800d23e:	b092      	sub	sp, #72	; 0x48
 800d240:	af04      	add	r7, sp, #16
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]

NX_IP         *ip_ptr;
NX_PACKET     *packet_ptr;
NX_TCP_HEADER *tcp_header_ptr;
ULONG          checksum;
ULONG          data_offset = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	623b      	str	r3, [r7, #32]
ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	637b      	str	r3, [r7, #52]	; 0x34
 800d252:	2300      	movs	r3, #0
 800d254:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800d256:	2301      	movs	r3, #1
 800d258:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d260:	61fb      	str	r3, [r7, #28]

    if (control_bits & NX_TCP_SYN_BIT)
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d006      	beq.n	800d27a <_nx_tcp_packet_send_control+0x3e>
    {

        /* Set header size. */
        header_size = NX_TCP_SYN_HEADER;
 800d26c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d270:	62bb      	str	r3, [r7, #40]	; 0x28
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d276:	627b      	str	r3, [r7, #36]	; 0x24
 800d278:	e005      	b.n	800d286 <_nx_tcp_packet_send_control+0x4a>
    }
    else
    {

        /* Set header size. */
        header_size = NX_TCP_HEADER_SIZE;
 800d27a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800d27e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Set window size. */
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current >> socket_ptr -> nx_tcp_rcv_win_scale_value;
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d284:	627b      	str	r3, [r7, #36]	; 0x24
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {

            /*lint -e{835} -e{845} suppress operating on zero. */
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d292:	f107 0110 	add.w	r1, r7, #16
 800d296:	2300      	movs	r3, #0
 800d298:	f7fe f988 	bl	800b5ac <_nx_packet_allocate>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f040 80e3 	bne.w	800d46a <_nx_tcp_packet_send_control+0x22e>
        }
    }
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Check to see if the packet has enough room to fill with the max TCP header (SYN + probe data).  */
    if ((UINT)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr) < (NX_TCP_SYN_SIZE + 1))
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	695a      	ldr	r2, [r3, #20]
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	2b1c      	cmp	r3, #28
 800d2b0:	d804      	bhi.n	800d2bc <_nx_tcp_packet_send_control+0x80>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(packet_ptr);
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fe fdd1 	bl	800be5c <_nx_packet_release>
        return;
 800d2ba:	e0d7      	b.n	800d46c <_nx_tcp_packet_send_control+0x230>
    }

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized in _nx_packet_allocate. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	695a      	ldr	r2, [r3, #20]
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	b2d2      	uxtb	r2, r2
 800d2c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Allocate a packet for the control message.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	695b      	ldr	r3, [r3, #20]
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d103      	bne.n	800d2d8 <_nx_tcp_packet_send_control+0x9c>
    {

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d2d6:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_IPSEC_ENABLE
    packet_ptr -> nx_packet_ipsec_sa_ptr = socket_ptr -> nx_tcp_socket_egress_sa;
#endif

    /* Setup the packet payload pointers and length for a basic TCP packet.  */
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	689a      	ldr	r2, [r3, #8]
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	3214      	adds	r2, #20
 800d2e0:	60da      	str	r2, [r3, #12]

    /* Setup the packet length.  */
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	2214      	movs	r2, #20
 800d2e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	61bb      	str	r3, [r7, #24]

    /* Build the control request in the TCP header.  */
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	041a      	lsls	r2, r3, #16
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	69db      	ldr	r3, [r3, #28]
 800d2f8:	431a      	orrs	r2, r3
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	601a      	str	r2, [r3, #0]
    tcp_header_ptr -> nx_tcp_sequence_number =      tx_sequence;
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	605a      	str	r2, [r3, #4]
    tcp_header_ptr -> nx_tcp_acknowledgment_number = ack_number;
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	609a      	str	r2, [r3, #8]
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 800d30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	431a      	orrs	r2, r3
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	431a      	orrs	r2, r3
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	60da      	str	r2, [r3, #12]
    tcp_header_ptr -> nx_tcp_header_word_4 =        0;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	2200      	movs	r2, #0
 800d31c:	611a      	str	r2, [r3, #16]

    /* Remember the last ACKed sequence and the last reported window size.  */
    socket_ptr -> nx_tcp_socket_rx_sequence_acked =    ack_number;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	683a      	ldr	r2, [r7, #0]
 800d322:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	ba1a      	rev	r2, r3
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	ba1a      	rev	r2, r3
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	ba1a      	rev	r2, r3
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	ba1a      	rev	r2, r3
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	ba1a      	rev	r2, r3
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	611a      	str	r2, [r3, #16]

    /* Check whether or not data is set. */
    if (data)
 800d35e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00a      	beq.n	800d37a <_nx_tcp_packet_send_control+0x13e>
    {

        /* Zero window probe data exist. */
        *packet_ptr -> nx_packet_append_ptr++ = *data;
 800d364:	693a      	ldr	r2, [r7, #16]
 800d366:	68d3      	ldr	r3, [r2, #12]
 800d368:	1c59      	adds	r1, r3, #1
 800d36a:	60d1      	str	r1, [r2, #12]
 800d36c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d36e:	7812      	ldrb	r2, [r2, #0]
 800d370:	701a      	strb	r2, [r3, #0]
        packet_ptr -> nx_packet_length++;
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d376:	3201      	adds	r2, #1
 800d378:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Whether it is a SYN packet. */
    if (control_bits & NX_TCP_SYN_BIT)
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d380:	2b00      	cmp	r3, #0
 800d382:	d018      	beq.n	800d3b6 <_nx_tcp_packet_send_control+0x17a>
    {

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the TCP header.  */
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 800d384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d386:	ba1b      	rev	r3, r3
 800d388:	64bb      	str	r3, [r7, #72]	; 0x48
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 800d38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d38c:	ba1b      	rev	r3, r3
 800d38e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Set options. */
        /*lint --e{927} --e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d396:	601a      	str	r2, [r3, #0]
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	3304      	adds	r3, #4
 800d39e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3a0:	601a      	str	r2, [r3, #0]

        /* Adjust packet information. */
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	68da      	ldr	r2, [r3, #12]
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	3208      	adds	r2, #8
 800d3aa:	60da      	str	r2, [r3, #12]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	3208      	adds	r2, #8
 800d3b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3bc:	f003 0304 	and.w	r3, r3, #4
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <_nx_tcp_packet_send_control+0x18c>
    {
        compute_checksum = 0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d028      	beq.n	800d420 <_nx_tcp_packet_send_control+0x1e4>
    {


        /* Set the packet source IP address. */
#ifndef NX_DISABLE_IPV4
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	695b      	ldr	r3, [r3, #20]
 800d3d2:	2b04      	cmp	r3, #4
 800d3d4:	d106      	bne.n	800d3e4 <_nx_tcp_packet_send_control+0x1a8>
        {

            /* For IPv4 the IP instance has only one global address. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3da:	3314      	adds	r3, #20
 800d3dc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3318      	adds	r3, #24
 800d3e2:	633b      	str	r3, [r7, #48]	; 0x30
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
        }
#endif /* FEATURE_NX_IPV6 */

        /* Calculate the TCP checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800d3e4:	6938      	ldr	r0, [r7, #16]
                                            (UINT)packet_ptr -> nx_packet_length, source_ip, dest_ip);
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f0:	2106      	movs	r1, #6
 800d3f2:	f7fb ff79 	bl	80092e8 <_nx_ip_checksum_compute>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	617b      	str	r3, [r7, #20]

        checksum = ~checksum & NX_LOWER_16_MASK;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	43db      	mvns	r3, r3
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	617b      	str	r3, [r7, #20]

        /* Move the checksum into header.  */
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	ba1a      	rev	r2, r3
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	611a      	str	r2, [r3, #16]
        tcp_header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	041a      	lsls	r2, r3, #16
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	611a      	str	r2, [r3, #16]
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	ba1a      	rev	r2, r3
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	611a      	str	r2, [r3, #16]
 800d41e:	e005      	b.n	800d42c <_nx_tcp_packet_send_control+0x1f0>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	f042 0204 	orr.w	r2, r2, #4
 800d42a:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

#ifndef NX_DISABLE_IPV4
    /* Send the TCP packet to the IP component.  */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	2b04      	cmp	r3, #4
 800d432:	d11b      	bne.n	800d46c <_nx_tcp_packet_send_control+0x230>
    {

        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800d434:	6938      	ldr	r0, [r7, #16]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	699c      	ldr	r4, [r3, #24]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                           socket_ptr -> nx_tcp_socket_type_of_service, socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800d44c:	68f9      	ldr	r1, [r7, #12]
 800d44e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800d450:	9103      	str	r1, [sp, #12]
 800d452:	9202      	str	r2, [sp, #8]
 800d454:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800d458:	9201      	str	r2, [sp, #4]
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	462b      	mov	r3, r5
 800d45e:	4622      	mov	r2, r4
 800d460:	4601      	mov	r1, r0
 800d462:	69f8      	ldr	r0, [r7, #28]
 800d464:	f7fd f966 	bl	800a734 <_nx_ip_packet_send>
 800d468:	e000      	b.n	800d46c <_nx_tcp_packet_send_control+0x230>
                return;
 800d46a:	bf00      	nop
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
                             socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
    }
#endif /* FEATURE_NX_IPV6 */
}
 800d46c:	3738      	adds	r7, #56	; 0x38
 800d46e:	46bd      	mov	sp, r7
 800d470:	bdb0      	pop	{r4, r5, r7, pc}

0800d472 <_nx_tcp_packet_send_fin>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_fin(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b086      	sub	sp, #24
 800d476:	af04      	add	r7, sp, #16
 800d478:	6078      	str	r0, [r7, #4]
 800d47a:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d480:	2200      	movs	r2, #0
 800d482:	9202      	str	r2, [sp, #8]
 800d484:	2200      	movs	r2, #0
 800d486:	9201      	str	r2, [sp, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	9200      	str	r2, [sp, #0]
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff fed2 	bl	800d23c <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <_nx_tcp_packet_send_probe>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_probe(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence, UCHAR data)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b088      	sub	sp, #32
 800d4a4:	af04      	add	r7, sp, #16
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	71fb      	strb	r3, [r7, #7]

    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4b2:	1dfb      	adds	r3, r7, #7
 800d4b4:	9302      	str	r3, [sp, #8]
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f7ff feb8 	bl	800d23c <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, &data);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800d4cc:	4b03      	ldr	r3, [pc, #12]	; (800d4dc <_nx_tcp_packet_send_probe+0x3c>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d4d4:	bf00      	nop
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	240022fc 	.word	0x240022fc

0800d4e0 <_nx_tcp_packet_send_rst>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_rst(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *header_ptr)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af04      	add	r7, sp, #16
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
    /* Reset Generation, RFC793, Section3.4, Page37, the RST packet is set up based on if the incoming packet has the ACK bit set. */
    /* If the incoming segment has an ACK field, the reset takes its sequence number from the ACK field of the segment,
       otherwise the reset has sequence number zero and the ACK field is set to the sum of the sequence number and segment length of the incoming segment.  */

    /* Check for the ACK bit in the incoming TCP header.  */
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00e      	beq.n	800d514 <_nx_tcp_packet_send_rst+0x34>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	689a      	ldr	r2, [r3, #8]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9302      	str	r3, [sp, #8]
 800d4fe:	2300      	movs	r3, #0
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	2300      	movs	r3, #0
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	2300      	movs	r3, #0
 800d508:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7ff fe95 	bl	800d23c <_nx_tcp_packet_send_control>
 800d512:	e00d      	b.n	800d530 <_nx_tcp_packet_send_rst+0x50>
                                    0, 0, 0, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_RST_BIT | NX_TCP_ACK_BIT), 0,
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	9202      	str	r2, [sp, #8]
 800d51c:	2200      	movs	r2, #0
 800d51e:	9201      	str	r2, [sp, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	9200      	str	r2, [sp, #0]
 800d524:	2200      	movs	r2, #0
 800d526:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7ff fe86 	bl	800d23c <_nx_tcp_packet_send_control>
                                    header_ptr -> nx_tcp_sequence_number, 0, 0, NX_NULL);
    }

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the resets sent count.  */
    socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_resets_sent++;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d536:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d53a:	3201      	adds	r2, #1
 800d53c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
#endif /* NX_DISABLE_TCP_INFO */
}
 800d540:	bf00      	nop
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <_nx_tcp_packet_send_syn>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_syn(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08a      	sub	sp, #40	; 0x28
 800d54c:	af04      	add	r7, sp, #16
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
ULONG        option_word_2;
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
UINT         include_window_scaling = NX_FALSE;
UINT         scale_factor;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
ULONG        mss = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	617b      	str	r3, [r7, #20]
    }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
    /* Update the mss value based on IP version type. */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	2b04      	cmp	r3, #4
 800d55c:	d104      	bne.n	800d568 <_nx_tcp_packet_send_syn+0x20>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d564:	3b28      	subs	r3, #40	; 0x28
 800d566:	617b      	str	r3, [r7, #20]
        }
#endif /* NX_IPSEC_ENABLE */
    }
#endif /* FEATURE_NX_IPV6 */

    mss &= 0x0000FFFFUL;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	617b      	str	r3, [r7, #20]

    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	429a      	cmp	r2, r3
 800d576:	d906      	bls.n	800d586 <_nx_tcp_packet_send_syn+0x3e>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <_nx_tcp_packet_send_syn+0x3e>
    {

        /* Use the custom MSS. */
        mss = socket_ptr -> nx_tcp_socket_mss;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	617b      	str	r3, [r7, #20]
    }

    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58a:	2b04      	cmp	r3, #4
 800d58c:	d115      	bne.n	800d5ba <_nx_tcp_packet_send_syn+0x72>
    {

        /* Update the connect MSS for TCP server socket. */
        if (mss < socket_ptr -> nx_tcp_socket_peer_mss)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	429a      	cmp	r2, r3
 800d596:	d203      	bcs.n	800d5a0 <_nx_tcp_packet_send_syn+0x58>
        {
            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	621a      	str	r2, [r3, #32]
 800d59e:	e003      	b.n	800d5a8 <_nx_tcp_packet_send_syn+0x60>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_connect_mss =  socket_ptr -> nx_tcp_socket_peer_mss;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	621a      	str	r2, [r3, #32]
        }

        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
        socket_ptr -> nx_tcp_socket_connect_mss2 =
            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	6a12      	ldr	r2, [r2, #32]
 800d5b0:	fb02 f203 	mul.w	r2, r2, r3
        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	631a      	str	r2, [r3, #48]	; 0x30
 800d5b8:	e002      	b.n	800d5c0 <_nx_tcp_packet_send_syn+0x78>
    }
    else
    {

        /* Set the MSS. */
        socket_ptr -> nx_tcp_socket_connect_mss = mss;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	697a      	ldr	r2, [r7, #20]
 800d5be:	621a      	str	r2, [r3, #32]
    }

    /* Build the MSS option.  */
    option_word_1 = NX_TCP_MSS_OPTION | mss;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d5c6:	613b      	str	r3, [r7, #16]

    /* Set default option word2. */
    option_word_2 = NX_TCP_OPTION_END;
 800d5c8:	4b16      	ldr	r3, [pc, #88]	; (800d624 <_nx_tcp_packet_send_syn+0xdc>)
 800d5ca:	60fb      	str	r3, [r7, #12]
        socket_ptr -> nx_tcp_rcv_win_scale_value = scale_factor;
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Send SYN or SYN+ACK packet according to socket state. */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d10d      	bne.n	800d5f0 <_nx_tcp_packet_send_syn+0xa8>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	9302      	str	r3, [sp, #8]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff fe27 	bl	800d23c <_nx_tcp_packet_send_control>
 800d5ee:	e00e      	b.n	800d60e <_nx_tcp_packet_send_syn+0xc6>
                                    0, option_word_1, option_word_2, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_SYN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	9302      	str	r3, [sp, #8]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	9301      	str	r3, [sp, #4]
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	4613      	mov	r3, r2
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f7ff fe17 	bl	800d23c <_nx_tcp_packet_send_control>
                                    socket_ptr -> nx_tcp_socket_rx_sequence, option_word_1, option_word_2, NX_NULL);
    }

    /* Initialize recover sequence and previous cumulative acknowledgment. */
    socket_ptr -> nx_tcp_socket_tx_sequence_recover = tx_sequence;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	683a      	ldr	r2, [r7, #0]
 800d612:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d61a:	bf00      	nop
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	01010100 	.word	0x01010100

0800d628 <_nx_tcp_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_periodic_processing(NX_IP *ip_ptr)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
        keepalive_enabled = socket_ptr -> nx_tcp_socket_keepalive_enabled;
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <_nx_tcp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_queue_process(NX_IP *ip_ptr)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d644:	f3ef 8310 	mrs	r3, PRIMASK
 800d648:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d64a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d64c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d64e:	b672      	cpsid	i
    return(int_posture);
 800d650:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800d652:	61bb      	str	r3, [r7, #24]

    /* Remove the TCP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d65a:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
    ip_ptr -> nx_ip_tcp_queue_tail =  NX_NULL;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    ip_ptr -> nx_ip_tcp_received_packet_count =  0;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	f383 8810 	msr	PRIMASK, r3
}
 800d67e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire TCP message queue and process packets
       one by one.  */
    while (queue_head)
 800d680:	e00b      	b.n	800d69a <_nx_tcp_queue_process+0x5e>
    {

        /* Pickup the first queue TCP message and remove it from the
           TCP queue.  */
        packet_ptr =  queue_head;
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	69db      	ldr	r3, [r3, #28]
 800d68a:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2200      	movs	r2, #0
 800d690:	61da      	str	r2, [r3, #28]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Process the packet.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800d692:	6979      	ldr	r1, [r7, #20]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff f9d1 	bl	800ca3c <_nx_tcp_packet_process>
    while (queue_head)
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1f0      	bne.n	800d682 <_nx_tcp_queue_process+0x46>
    }
}
 800d6a0:	bf00      	nop
 800d6a2:	bf00      	nop
 800d6a4:	3720      	adds	r7, #32
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <_nx_tcp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08e      	sub	sp, #56	; 0x38
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d6b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ba:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d6be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d6c0:	b672      	cpsid	i
    return(int_posture);
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800d6c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d004      	beq.n	800d6dc <_nx_tcp_receive_cleanup+0x30>
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a43      	ldr	r2, [pc, #268]	; (800d7e4 <_nx_tcp_receive_cleanup+0x138>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d006      	beq.n	800d6ea <_nx_tcp_receive_cleanup+0x3e>
 800d6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6de:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	f383 8810 	msr	PRIMASK, r3
}
 800d6e6:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800d6e8:	e078      	b.n	800d7dc <_nx_tcp_receive_cleanup+0x130>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d106      	bne.n	800d700 <_nx_tcp_receive_cleanup+0x54>
 800d6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	f383 8810 	msr	PRIMASK, r3
}
 800d6fc:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800d6fe:	e06d      	b.n	800d7dc <_nx_tcp_receive_cleanup+0x130>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d700:	f3ef 8305 	mrs	r3, IPSR
 800d704:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d706:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800d708:	4b37      	ldr	r3, [pc, #220]	; (800d7e8 <_nx_tcp_receive_cleanup+0x13c>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d104      	bne.n	800d71c <_nx_tcp_receive_cleanup+0x70>
 800d712:	4b36      	ldr	r3, [pc, #216]	; (800d7ec <_nx_tcp_receive_cleanup+0x140>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a36      	ldr	r2, [pc, #216]	; (800d7f0 <_nx_tcp_receive_cleanup+0x144>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d116      	bne.n	800d74a <_nx_tcp_receive_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a35      	ldr	r2, [pc, #212]	; (800d7f4 <_nx_tcp_receive_cleanup+0x148>)
 800d720:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f383 8810 	msr	PRIMASK, r3
}
 800d734:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d73c:	2200      	movs	r2, #0
 800d73e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d742:	4618      	mov	r0, r3
 800d744:	f004 fa0a 	bl	8011b5c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800d748:	e048      	b.n	800d7dc <_nx_tcp_receive_cleanup+0x130>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	429a      	cmp	r2, r3
 800d758:	d104      	bne.n	800d764 <_nx_tcp_receive_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  NX_NULL;
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	2200      	movs	r2, #0
 800d75e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800d762:	e00e      	b.n	800d782 <_nx_tcp_receive_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d776:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d780:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d788:	1e5a      	subs	r2, r3, #1
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d794:	2b0c      	cmp	r3, #12
 800d796:	d11b      	bne.n	800d7d0 <_nx_tcp_receive_cleanup+0x124>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which receive error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 800d798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79c:	2b05      	cmp	r3, #5
 800d79e:	d004      	beq.n	800d7aa <_nx_tcp_receive_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2238      	movs	r2, #56	; 0x38
 800d7a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d7a8:	e003      	b.n	800d7b2 <_nx_tcp_receive_cleanup+0x106>
            }
            else
            {

                /* Setup return status.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d7b2:	4b11      	ldr	r3, [pc, #68]	; (800d7f8 <_nx_tcp_receive_cleanup+0x14c>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	4a0f      	ldr	r2, [pc, #60]	; (800d7f8 <_nx_tcp_receive_cleanup+0x14c>)
 800d7ba:	6013      	str	r3, [r2, #0]
 800d7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	f383 8810 	msr	PRIMASK, r3
}
 800d7c6:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f006 f84b 	bl	8013864 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800d7ce:	e005      	b.n	800d7dc <_nx_tcp_receive_cleanup+0x130>
 800d7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f383 8810 	msr	PRIMASK, r3
}
 800d7da:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800d7dc:	3738      	adds	r7, #56	; 0x38
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	54435020 	.word	0x54435020
 800d7e8:	2400008c 	.word	0x2400008c
 800d7ec:	240023d0 	.word	0x240023d0
 800d7f0:	24002470 	.word	0x24002470
 800d7f4:	0800c105 	.word	0x0800c105
 800d7f8:	240023cc 	.word	0x240023cc

0800d7fc <_nx_tcp_socket_block_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_block_cleanup(NX_TCP_SOCKET *socket_ptr)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]

    /* Clean up the connect IP address.  */

    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	615a      	str	r2, [r3, #20]
#ifdef FEATURE_NX_IPV6
    /* Clean up the IP address field. */
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
#else /* FEATURE_NX_IPV6 */
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = 0;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	619a      	str	r2, [r3, #24]
#endif /* FEATURE_NX_IPV6 */

    /* Clean up the connect port.  */
    socket_ptr -> nx_tcp_socket_connect_port = 0;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	61da      	str	r2, [r3, #28]

    /* Reset zero window probe flag. */
    socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

    /* Simply clear the timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = 0;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Reset duplicated ack received. */
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset fast recovery stage. */
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

    /* Connection needs to be closed down immediately.  */
    if (socket_ptr -> nx_tcp_socket_client_type)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <_nx_tcp_socket_block_cleanup+0x48>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Client socket, return to a CLOSED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	639a      	str	r2, [r3, #56]	; 0x38
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Server socket, return to LISTEN state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
    }
}
 800d842:	e002      	b.n	800d84a <_nx_tcp_socket_block_cleanup+0x4e>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2202      	movs	r2, #2
 800d848:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d84a:	bf00      	nop
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr

0800d856 <_nx_tcp_socket_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_connection_reset(NX_TCP_SOCKET *socket_ptr)
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b084      	sub	sp, #16
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]

UINT saved_state;

    /* Save the current state of the socket.  */
    saved_state =  socket_ptr -> nx_tcp_socket_state;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d862:	60fb      	str	r3, [r7, #12]

    /* Cleanup the transmission control block.  */
    _nx_tcp_socket_block_cleanup(socket_ptr);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff ffc9 	bl	800d7fc <_nx_tcp_socket_block_cleanup>

    /* Check for queued sent packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d002      	beq.n	800d87a <_nx_tcp_socket_connection_reset+0x24>
    {

        /* Release all transmit packets.  */
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f001 fdf9 	bl	800f46c <_nx_tcp_socket_transmit_queue_flush>
    }

    /* Check for queued receive packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00a      	beq.n	800d89a <_nx_tcp_socket_connection_reset+0x44>
    {

        /* Release all received packets.  */
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f9db 	bl	800dc40 <_nx_tcp_socket_receive_queue_flush>
    }

    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800d88a:	e006      	b.n	800d89a <_nx_tcp_socket_connection_reset+0x44>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d892:	2100      	movs	r1, #0
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff ff09 	bl	800d6ac <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1f3      	bne.n	800d88c <_nx_tcp_socket_connection_reset+0x36>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800d8a4:	e006      	b.n	800d8b4 <_nx_tcp_socket_connection_reset+0x5e>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f001 fe24 	bl	800f4fc <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1f3      	bne.n	800d8a6 <_nx_tcp_socket_connection_reset+0x50>
    }

    /* Check for suspended connect thread.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d006      	beq.n	800d8d6 <_nx_tcp_socket_connection_reset+0x80>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe fcc9 	bl	800c268 <_nx_tcp_connect_cleanup>
    }

    /* Check for suspended disconnect thread.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d006      	beq.n	800d8ee <_nx_tcp_socket_connection_reset+0x98>
    {

        /* Resume the thread suspended on the disconnect.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7fe fde9 	bl	800c4c0 <_nx_tcp_disconnect_cleanup>
    }

    /* Determine if the socket was in an established state.  */
    if (saved_state == NX_TCP_ESTABLISHED)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2b05      	cmp	r3, #5
 800d8f2:	d109      	bne.n	800d908 <_nx_tcp_socket_connection_reset+0xb2>
    {

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d004      	beq.n	800d908 <_nx_tcp_socket_connection_reset+0xb2>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	4798      	blx	r3

        /* Notify the application through the socket disconnect_complete callback.  */
        (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
    }
#endif
}
 800d908:	bf00      	nop
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <_nx_tcp_socket_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_packet_process(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 800d910:	b5b0      	push	{r4, r5, r7, lr}
 800d912:	b090      	sub	sp, #64	; 0x40
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]

UINT          packet_queued =  NX_FALSE;
 800d91a:	2300      	movs	r3, #0
 800d91c:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG         packet_data_length;
ULONG         packet_sequence;
ULONG         rx_sequence;
ULONG         rx_window;
UINT          outside_of_window;
ULONG         mss = 0;
 800d91e:	2300      	movs	r3, #0
 800d920:	60bb      	str	r3, [r7, #8]

    /* Copy the TCP header, since the actual packet can be delivered to
       a waiting socket/thread during this routine and before we are done
       using the header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	f107 040c 	add.w	r4, r7, #12
 800d92a:	461d      	mov	r5, r3
 800d92c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d92e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	6023      	str	r3, [r4, #0]

    /* Get the size of the TCP header.  */
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	0f1b      	lsrs	r3, r3, #28
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Process the segment if socket state is equal or greater than NX_TCP_SYN_RECEIVED. According to RFC 793, Section 3.9, Page 69.  */
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d940:	2b03      	cmp	r3, #3
 800d942:	f240 80b5 	bls.w	800dab0 <_nx_tcp_socket_packet_process+0x1a0>
    {

        /* Step1: Check sequence number. According to RFC 793, Section 3.9, Page 69.  */

        /* Pickup the sequence of this packet. */
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the data length in the packet.  */
        packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup the rx sequence.  */
        rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d958:	62bb      	str	r3, [r7, #40]	; 0x28
            socket_ptr -> nx_tcp_socket_rx_window_current =  socket_ptr -> nx_tcp_socket_rx_window_default;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Pickup the rx window.  */
        rx_window = socket_ptr -> nx_tcp_socket_rx_window_current;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d95e:	627b      	str	r3, [r7, #36]	; 0x24

        /* There are four cases for the acceptability test for an incoming segment.
           Section 3.9 Page 69, RFC 793.  */
        outside_of_window = NX_TRUE;
 800d960:	2301      	movs	r3, #1
 800d962:	63bb      	str	r3, [r7, #56]	; 0x38

        if (packet_data_length == 0)
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	2b00      	cmp	r3, #0
 800d968:	d12b      	bne.n	800d9c2 <_nx_tcp_socket_packet_process+0xb2>
        {
            if (rx_window == 0)
 800d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d119      	bne.n	800d9a4 <_nx_tcp_socket_packet_process+0x94>
            {
                if (packet_sequence == rx_sequence)
 800d970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d974:	429a      	cmp	r2, r3
 800d976:	d102      	bne.n	800d97e <_nx_tcp_socket_packet_process+0x6e>
                {
                    outside_of_window = NX_FALSE;
 800d978:	2300      	movs	r3, #0
 800d97a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d97c:	e044      	b.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
                }
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10a      	bne.n	800d99e <_nx_tcp_socket_packet_process+0x8e>
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d105      	bne.n	800d99e <_nx_tcp_socket_packet_process+0x8e>
                         ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_CONTROL_MASK) == NX_TCP_ACK_BIT))
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	f403 13b8 	and.w	r3, r3, #1507328	; 0x170000
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 800d998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d99c:	d134      	bne.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
                {

                    /* If the RCV.WND is zero, no segments will be acceptable, but
                       special allowance should be made to accept valid ACKs, URGs and RSTs.
                       Section 3.9 Page 69, RFC 793. */
                    outside_of_window = NX_FALSE;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9a2:	e031      	b.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
                }
            }
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800d9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	db2c      	blt.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
                     ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0))
 800d9ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	441a      	add	r2, r3
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	1ad3      	subs	r3, r2, r3
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	dd25      	ble.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9c0:	e022      	b.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
            }
        }
        else
        {
            if ((rx_window > 0) &&
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d01f      	beq.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800d9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9cc:	1ad3      	subs	r3, r2, r3
            if ((rx_window > 0) &&
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	db06      	blt.n	800d9e0 <_nx_tcp_socket_packet_process+0xd0>
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 800d9d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	441a      	add	r2, r3
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	1ad3      	subs	r3, r2, r3
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dc11      	bgt.n	800da04 <_nx_tcp_socket_packet_process+0xf4>
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 800d9e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	441a      	add	r2, r3
 800d9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	3b01      	subs	r3, #1
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	db0b      	blt.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
                  ((INT)rx_sequence + 1 + ((INT)rx_window - (INT)packet_sequence) - (INT)packet_data_length > 0))))
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	1c5a      	adds	r2, r3, #1
 800d9f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	1acb      	subs	r3, r1, r3
 800d9fa:	441a      	add	r2, r3
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	1ad3      	subs	r3, r2, r3
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 800da00:	2b00      	cmp	r3, #0
 800da02:	dd01      	ble.n	800da08 <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 800da04:	2300      	movs	r3, #0
 800da06:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* Detect whether or not the data is outside the window.  */
        if (outside_of_window)
 800da08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d016      	beq.n	800da3c <_nx_tcp_socket_packet_process+0x12c>
        {

            /* If an incoming segment is not acceptable, an acknowledgment should be sent in reply
               (unless the RST bit is set, if so drop the segment and return).
               Section 3.9, Page 69, RFC 793.  */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da14:	2b00      	cmp	r3, #0
 800da16:	d105      	bne.n	800da24 <_nx_tcp_socket_packet_process+0x114>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1c:	4619      	mov	r1, r3
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff fbee 	bl	800d200 <_nx_tcp_packet_send_ack>
            }

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP dropped packet count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da2a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800da2e:	3201      	adds	r2, #1
 800da30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800da34:	6838      	ldr	r0, [r7, #0]
 800da36:	f7fe fa11 	bl	800be5c <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800da3a:	e0fe      	b.n	800dc3a <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step2: Check the RST bit. According to RFC 793, Section 3.9, Page 70.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00e      	beq.n	800da64 <_nx_tcp_socket_packet_process+0x154>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da4c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800da50:	3201      	adds	r2, #1
 800da52:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_copy.nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7ff fefd 	bl	800d856 <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800da5c:	6838      	ldr	r0, [r7, #0]
 800da5e:	f7fe f9fd 	bl	800be5c <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800da62:	e0ea      	b.n	800dc3a <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step3: Check the SYN bit. According to RFC 793, Section 3.9, Page 71.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00f      	beq.n	800da8e <_nx_tcp_socket_packet_process+0x17e>

            /* The SYN is in the window it is an error, send a reset.  */

            /* Adjust the SEQ for the SYN bit. */
            /* The reset logic uses the sequence number in tcp_header_ptr as its ACK number. */
            tcp_header_copy.nx_tcp_sequence_number++;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	3301      	adds	r3, #1
 800da72:	613b      	str	r3, [r7, #16]

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800da74:	f107 030c 	add.w	r3, r7, #12
 800da78:	4619      	mov	r1, r3
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7ff fd30 	bl	800d4e0 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff fee8 	bl	800d856 <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800da86:	6838      	ldr	r0, [r7, #0]
 800da88:	f7fe f9e8 	bl	800be5c <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800da8c:	e0d5      	b.n	800dc3a <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step4: Check the ACK field. According to RFC 793, Section 3.9, Page 72.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da92:	2b04      	cmp	r3, #4
 800da94:	d00c      	beq.n	800dab0 <_nx_tcp_socket_packet_process+0x1a0>
        {

            /* Check the ACK field.  */
            if (_nx_tcp_socket_state_ack_check(socket_ptr, &tcp_header_copy) == NX_FALSE)
 800da96:	f107 030c 	add.w	r3, r7, #12
 800da9a:	4619      	mov	r1, r3
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 fab5 	bl	800e00c <_nx_tcp_socket_state_ack_check>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d103      	bne.n	800dab0 <_nx_tcp_socket_packet_process+0x1a0>
            {

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800daa8:	6838      	ldr	r0, [r7, #0]
 800daaa:	f7fe f9d7 	bl	800be5c <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 800daae:	e0c4      	b.n	800dc3a <_nx_tcp_socket_packet_process+0x32a>
            }
        }
    }

    /* Illegal option length check. */
    if (header_length > sizeof(NX_TCP_HEADER))
 800dab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab2:	2b14      	cmp	r3, #20
 800dab4:	d93b      	bls.n	800db2e <_nx_tcp_socket_packet_process+0x21e>
    {

        /* There are one or more option words.  */
        /* The illegal option length is validated during MSS option get function. */
        if (!_nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)),
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	f103 0014 	add.w	r0, r3, #20
 800dabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac0:	3b14      	subs	r3, #20
 800dac2:	f107 0208 	add.w	r2, r7, #8
 800dac6:	4619      	mov	r1, r3
 800dac8:	f7fe fec8 	bl	800c85c <_nx_tcp_mss_option_get>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d12d      	bne.n	800db2e <_nx_tcp_socket_packet_process+0x21e>
            /* TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
               a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */

            /* Preprocess the sequence number if the incoming segment does not have an ACK field.
               Reset Generation, RFC793, Section3.4, Page37. */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d113      	bne.n	800db04 <_nx_tcp_socket_packet_process+0x1f4>
            {

                /* Update sequence number to set the reset acknowledge number.  */
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae4:	1acb      	subs	r3, r1, r3
 800dae6:	4413      	add	r3, r2
 800dae8:	613b      	str	r3, [r7, #16]

                /* Check the SYN and FIN bits.  */
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d104      	bne.n	800dafe <_nx_tcp_socket_packet_process+0x1ee>
                    (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_FIN_BIT))
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <_nx_tcp_socket_packet_process+0x1f4>
                {

                    /* Update sequence number to set the reset acknowledge number.  */
                    tcp_header_copy.nx_tcp_sequence_number++;
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	3301      	adds	r3, #1
 800db02:	613b      	str	r3, [r7, #16]
                }
            }

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800db04:	f107 030c 	add.w	r3, r7, #12
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff fce8 	bl	800d4e0 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7ff fea0 	bl	800d856 <_nx_tcp_socket_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
            /* Increment the TCP invalid packet error count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_invalid_packets++;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800db1c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800db20:	3201      	adds	r2, #1
 800db22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800db26:	6838      	ldr	r0, [r7, #0]
 800db28:	f7fe f998 	bl	800be5c <_nx_packet_release>

            return;
 800db2c:	e085      	b.n	800dc3a <_nx_tcp_socket_packet_process+0x32a>
        }

    }

    /* Process relative to the state of the socket.  */
    switch (socket_ptr -> nx_tcp_socket_state)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db32:	3b03      	subs	r3, #3
 800db34:	2b08      	cmp	r3, #8
 800db36:	d866      	bhi.n	800dc06 <_nx_tcp_socket_packet_process+0x2f6>
 800db38:	a201      	add	r2, pc, #4	; (adr r2, 800db40 <_nx_tcp_socket_packet_process+0x230>)
 800db3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3e:	bf00      	nop
 800db40:	0800db65 	.word	0x0800db65
 800db44:	0800db87 	.word	0x0800db87
 800db48:	0800dba7 	.word	0x0800dba7
 800db4c:	0800dbbf 	.word	0x0800dbbf
 800db50:	0800dbd5 	.word	0x0800dbd5
 800db54:	0800dbe7 	.word	0x0800dbe7
 800db58:	0800dbf9 	.word	0x0800dbf9
 800db5c:	0800dc07 	.word	0x0800dc07
 800db60:	0800dbc7 	.word	0x0800dbc7

    case  NX_TCP_SYN_SENT:

        /* Call the SYN SENT state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_sent(socket_ptr, &tcp_header_copy, packet_ptr);
 800db64:	f107 030c 	add.w	r3, r7, #12
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	4619      	mov	r1, r3
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f001 fae8 	bl	800f142 <_nx_tcp_socket_state_syn_sent>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db76:	2b05      	cmp	r3, #5
 800db78:	d147      	bne.n	800dc0a <_nx_tcp_socket_packet_process+0x2fa>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fe33 	bl	800e7e8 <_nx_tcp_socket_state_data_check>
 800db82:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 800db84:	e041      	b.n	800dc0a <_nx_tcp_socket_packet_process+0x2fa>

    case  NX_TCP_SYN_RECEIVED:

        /* Call the SYN RECEIVED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_received(socket_ptr, &tcp_header_copy);
 800db86:	f107 030c 	add.w	r3, r7, #12
 800db8a:	4619      	mov	r1, r3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f001 fa7b 	bl	800f088 <_nx_tcp_socket_state_syn_received>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db96:	2b05      	cmp	r3, #5
 800db98:	d139      	bne.n	800dc0e <_nx_tcp_socket_packet_process+0x2fe>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fe23 	bl	800e7e8 <_nx_tcp_socket_state_data_check>
 800dba2:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 800dba4:	e033      	b.n	800dc0e <_nx_tcp_socket_packet_process+0x2fe>

    case  NX_TCP_ESTABLISHED:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dba6:	6839      	ldr	r1, [r7, #0]
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 fe1d 	bl	800e7e8 <_nx_tcp_socket_state_data_check>
 800dbae:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the ESTABLISHED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_established(socket_ptr);
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 f951 	bl	800ee58 <_nx_tcp_socket_state_established>

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f001 fbac 	bl	800f314 <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 800dbbc:	e028      	b.n	800dc10 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSE_WAIT:

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f001 fba8 	bl	800f314 <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 800dbc4:	e024      	b.n	800dc10 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_LAST_ACK:

        /* Call the LAST ACK state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_last_ack(socket_ptr, &tcp_header_copy);
 800dbc6:	f107 030c 	add.w	r3, r7, #12
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f001 fa31 	bl	800f034 <_nx_tcp_socket_state_last_ack>

        /* State processing is complete.  */
        break;
 800dbd2:	e01d      	b.n	800dc10 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_1:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dbd4:	6839      	ldr	r1, [r7, #0]
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fe06 	bl	800e7e8 <_nx_tcp_socket_state_data_check>
 800dbdc:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 1 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait1(socket_ptr);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f001 f97e 	bl	800eee0 <_nx_tcp_socket_state_fin_wait1>

        /* State processing is complete.  */
        break;
 800dbe4:	e014      	b.n	800dc10 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_2:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dbe6:	6839      	ldr	r1, [r7, #0]
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fdfd 	bl	800e7e8 <_nx_tcp_socket_state_data_check>
 800dbee:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 2 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait2(socket_ptr);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f001 f9e1 	bl	800efb8 <_nx_tcp_socket_state_fin_wait2>

        /* State processing is complete.  */
        break;
 800dbf6:	e00b      	b.n	800dc10 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSING:

        /* Call the CLOSING state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_closing(socket_ptr, &tcp_header_copy);
 800dbf8:	f107 030c 	add.w	r3, r7, #12
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fcf6 	bl	800e5f0 <_nx_tcp_socket_state_closing>

        /* State processing is complete.  */
        break;
 800dc04:	e004      	b.n	800dc10 <_nx_tcp_socket_packet_process+0x300>

        /* State processing is complete.  */
        break;

    default:
        break;
 800dc06:	bf00      	nop
 800dc08:	e002      	b.n	800dc10 <_nx_tcp_socket_packet_process+0x300>
        break;
 800dc0a:	bf00      	nop
 800dc0c:	e000      	b.n	800dc10 <_nx_tcp_socket_packet_process+0x300>
        break;
 800dc0e:	bf00      	nop
    }

    /* Check for an URG (urgent) bit set.  */
    /*lint -e{644} suppress variable might not be initialized, since "tcp_header_copy" was initialized. */
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d009      	beq.n	800dc2e <_nx_tcp_socket_packet_process+0x31e>
    {

        /* Yes, an Urgent bit is set.  */

        /* Pickup the urgent callback function specified when the socket was created.  */
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dc20:	623b      	str	r3, [r7, #32]

        /* Determine if there is an urgent callback function specified.  */
        if (urgent_callback)
 800dc22:	6a3b      	ldr	r3, [r7, #32]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d002      	beq.n	800dc2e <_nx_tcp_socket_packet_process+0x31e>
        {

            /* Yes, call the application's urgent callback function to alert the application
               of the presence of the urgent bit.  */
            (urgent_callback)(socket_ptr);
 800dc28:	6a3b      	ldr	r3, [r7, #32]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	4798      	blx	r3
        }
    }

    /* Determine if we need to release the packet.  */
    if (!packet_queued)
 800dc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <_nx_tcp_socket_packet_process+0x32a>
    {

        /* Yes, the packet was not queued up above, so it needs to be released.  */
        _nx_packet_release(packet_ptr);
 800dc34:	6838      	ldr	r0, [r7, #0]
 800dc36:	f7fe f911 	bl	800be5c <_nx_packet_release>
    }
}
 800dc3a:	3740      	adds	r7, #64	; 0x40
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bdb0      	pop	{r4, r5, r7, pc}

0800dc40 <_nx_tcp_socket_receive_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_receive_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dc4e:	60fb      	str	r3, [r7, #12]

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800dc60:	e012      	b.n	800dc88 <_nx_tcp_socket_receive_queue_flush+0x48>
    {

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6a1b      	ldr	r3, [r3, #32]
 800dc66:	60bb      	str	r3, [r7, #8]

        /* Mark it as allocated so it will be released.  */
        /*lint -e{923} suppress cast of ULONT to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800dc6e:	621a      	str	r2, [r3, #32]

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f7fe f8f3 	bl	800be5c <_nx_packet_release>

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	60fb      	str	r3, [r7, #12]

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dc80:	1e5a      	subs	r2, r3, #1
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1e7      	bne.n	800dc62 <_nx_tcp_socket_receive_queue_flush+0x22>
    }
}
 800dc92:	bf00      	nop
 800dc94:	bf00      	nop
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <_nx_tcp_socket_retransmit>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_retransmit(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, UINT need_fast_retransmit)
{
 800dc9c:	b590      	push	{r4, r7, lr}
 800dc9e:	b097      	sub	sp, #92	; 0x5c
 800dca0:	af04      	add	r7, sp, #16
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
       RFC 793 Sec 3.7, p42: keep send new data.

       In the zero window probe phase, we send the zero window probe, and increase
       exponentially the interval between successive probes.
       RFC 1122 Sec 4.2.2.17, p92.  */
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d164      	bne.n	800dd7a <_nx_tcp_socket_retransmit+0xde>
    {

        /* Pickup the head of the transmit queue.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dcb6:	647b      	str	r3, [r7, #68]	; 0x44

        if (packet_ptr)
 800dcb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d02f      	beq.n	800dd1e <_nx_tcp_socket_retransmit+0x82>
        {

        /* Get one byte from send queue. */
        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_TCP_HEADER *header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800dcbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	613b      	str	r3, [r7, #16]

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	ba1a      	rev	r2, r3
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	60da      	str	r2, [r3, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	ba1a      	rev	r2, r3
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	605a      	str	r2, [r3, #4]

            /* Get sequence number and first byte. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 800dcd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcda:	689a      	ldr	r2, [r3, #8]
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	0f1b      	lsrs	r3, r3, #28
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	781a      	ldrb	r2, [r3, #0]
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            /* Now set zero window probe started. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	685a      	ldr	r2, [r3, #4]
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	ba1a      	rev	r2, r3
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	605a      	str	r2, [r3, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	ba1a      	rev	r2, r3
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	60da      	str	r2, [r3, #12]
 800dd1c:	e005      	b.n	800dd2a <_nx_tcp_socket_retransmit+0x8e>
        }
        else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f000 8169 	beq.w	800dffc <_nx_tcp_socket_retransmit+0x360>

        /* In the zero window probe phase, we send the zero window probe, and increase
           exponentially the interval between successive probes.  */

        /* Increment the retry counter.  */
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd30:	1c5a      	adds	r2, r3, #1
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd3e:	1c5a      	adds	r2, r3, #1
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Setup the next timeout.  */
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd52:	68b9      	ldr	r1, [r7, #8]
 800dd54:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800dd58:	fb01 f303 	mul.w	r3, r1, r3
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800dd5c:	409a      	lsls	r2, r3
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send the zero window probe.  */
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800dd70:	461a      	mov	r2, r3
 800dd72:	68b8      	ldr	r0, [r7, #8]
 800dd74:	f7ff fb94 	bl	800d4a0 <_nx_tcp_packet_send_probe>
                                  socket_ptr -> nx_tcp_socket_zero_window_probe_data);

        return;
 800dd78:	e143      	b.n	800e002 <_nx_tcp_socket_retransmit+0x366>
    }
    else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE)
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d103      	bne.n	800dd8c <_nx_tcp_socket_retransmit+0xf0>
    {

        /* If advertised window isn't zero, reset zero window probe flag. */
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }

    /* Increment the retry counter only if the receiver window is open. */
    /* Increment the retry counter.  */
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d004      	beq.n	800ddaa <_nx_tcp_socket_retransmit+0x10e>
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d12a      	bne.n	800de00 <_nx_tcp_socket_retransmit+0x164>
    {

        /* Timed out on an outgoing packet.  Enter slow start mode. */
        /* Compute the flight size / 2 value. */
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddae:	085b      	lsrs	r3, r3, #1
 800ddb0:	643b      	str	r3, [r7, #64]	; 0x40

        /* Make sure we have at least 2 * MSS */
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	6a1b      	ldr	r3, [r3, #32]
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d203      	bcs.n	800ddc6 <_nx_tcp_socket_retransmit+0x12a>
        {
            window = socket_ptr -> nx_tcp_socket_connect_mss << 1;
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	6a1b      	ldr	r3, [r3, #32]
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Set the slow_start_threshold */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ddca:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the current window to be MSS size. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	6a1a      	ldr	r2, [r3, #32]
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Determine if this socket needs fast retransmit.  */
        if (need_fast_retransmit == NX_TRUE)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d112      	bne.n	800de00 <_nx_tcp_socket_retransmit+0x164>
        {

            /* Update cwnd to ssthreshold plus 3 * MSS.  */
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	0059      	lsls	r1, r3, #1
 800dde4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dde6:	440b      	add	r3, r1
 800dde8:	441a      	add	r2, r3
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	659a      	str	r2, [r3, #88]	; 0x58

            /* Now TCP is in fast recovery procedure. */
            socket_ptr -> nx_tcp_socket_fast_recovery = NX_TRUE;
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

            /* Update the transmit sequence that enters fast transmit. */
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfa:	1e5a      	subs	r2, r3, #1
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    /* Setup the next timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800de0c:	68b9      	ldr	r1, [r7, #8]
 800de0e:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800de12:	fb01 f303 	mul.w	r3, r1, r3
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800de16:	409a      	lsls	r2, r3
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Get available size of packet that can be sent. */
    available = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de22:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Pickup the head of the transmit queue.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800de2a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if the packet has been released by the
       application I/O driver.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 800de2c:	e0dc      	b.n	800dfe8 <_nx_tcp_socket_retransmit+0x34c>
    {

    /* Update the ACK number in case it has changed since the data was originally transmitted. */
    ULONG          checksum;
    NX_TCP_HEADER *header_ptr;
    ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800de2e:	2300      	movs	r3, #0
 800de30:	63bb      	str	r3, [r7, #56]	; 0x38
 800de32:	2300      	movs	r3, #0
 800de34:	637b      	str	r3, [r7, #52]	; 0x34
    NX_PACKET     *next_ptr;
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    UINT           compute_checksum = 1;
 800de36:	2301      	movs	r3, #1
 800de38:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef NX_DISABLE_TCP_TX_CHECKSUM
        compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 800de3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de40:	3314      	adds	r3, #20
 800de42:	429a      	cmp	r2, r3
 800de44:	f200 80dc 	bhi.w	800e000 <_nx_tcp_socket_retransmit+0x364>
            /* This packet can not be sent. */
            break;
        }

        /* Decrease the available size. */
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 800de48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de4e:	1ad3      	subs	r3, r2, r3
 800de50:	3314      	adds	r3, #20
 800de52:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Pickup next packet. */
        next_ptr = packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800de54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de56:	6a1b      	ldr	r3, [r3, #32]
 800de58:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	2b04      	cmp	r3, #4
 800de60:	d10a      	bne.n	800de78 <_nx_tcp_socket_retransmit+0x1dc>
        {

            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800de62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de64:	2204      	movs	r2, #4
 800de66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Get the source and destination addresses. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6e:	3314      	adds	r3, #20
 800de70:	63bb      	str	r3, [r7, #56]	; 0x38
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	3318      	adds	r3, #24
 800de76:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif /* FEATURE_NX_IPV6 */

        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800de78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Record the original data.  */
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	627b      	str	r3, [r7, #36]	; 0x24
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	623b      	str	r3, [r7, #32]
        original_header_word_4 = header_ptr -> nx_tcp_header_word_4;
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	61fb      	str	r3, [r7, #28]

        /* Update the ACK number in the TCP header.  */
        header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	609a      	str	r2, [r3, #8]

        /* Convert to network byte order for checksum */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	ba1a      	rev	r2, r3
 800de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea0:	609a      	str	r2, [r3, #8]
        if (window_size > 0xFFFF)
        {
            window_size = 0xFFFF;
        }
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dea6:	61bb      	str	r3, [r7, #24]
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 800dea8:	69ba      	ldr	r2, [r7, #24]
 800deaa:	4b57      	ldr	r3, [pc, #348]	; (800e008 <_nx_tcp_socket_retransmit+0x36c>)
 800deac:	4313      	orrs	r3, r2
 800deae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800deb0:	60d3      	str	r3, [r2, #12]

        /* Swap the content to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	ba1a      	rev	r2, r3
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	60da      	str	r2, [r3, #12]

        /* Convert back to host byte order to so we can zero out the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	691b      	ldr	r3, [r3, #16]
 800dec0:	ba1a      	rev	r2, r3
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	611a      	str	r2, [r3, #16]

        /* Remember the last ACKed sequence and the last reported window size.  */
        socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Zero out existing checksum before computing new one. */
        header_ptr -> nx_tcp_header_word_4 = header_ptr -> nx_tcp_header_word_4 & 0x0000FFFF;
 800ded6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	b29a      	uxth	r2, r3
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	611a      	str	r2, [r3, #16]

        /* Convert back to network byte order to so we can do the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800dee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee2:	691b      	ldr	r3, [r3, #16]
 800dee4:	ba1a      	rev	r2, r3
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	611a      	str	r2, [r3, #16]


#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800def0:	f003 0304 	and.w	r3, r3, #4
 800def4:	2b00      	cmp	r3, #0
 800def6:	d001      	beq.n	800defc <_nx_tcp_socket_retransmit+0x260>
        {
            compute_checksum = 0;
 800def8:	2300      	movs	r3, #0
 800defa:	633b      	str	r3, [r7, #48]	; 0x30
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800defc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defe:	2b00      	cmp	r3, #0
 800df00:	d020      	beq.n	800df44 <_nx_tcp_socket_retransmit+0x2a8>
#endif /* defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
        {
            /* Calculate the TCP checksum without protection.  */
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                                packet_ptr -> nx_packet_length,
 800df02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800df06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0c:	2106      	movs	r1, #6
 800df0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800df10:	f7fb f9ea 	bl	80092e8 <_nx_ip_checksum_compute>
 800df14:	4603      	mov	r3, r0
 800df16:	617b      	str	r3, [r7, #20]
                                                source_ip, dest_ip);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	43db      	mvns	r3, r3
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	617b      	str	r3, [r7, #20]

            /* Convert back to host byte order */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	691b      	ldr	r3, [r3, #16]
 800df24:	ba1a      	rev	r2, r3
 800df26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df28:	611a      	str	r2, [r3, #16]

            /* Move the checksum into header.  */
            header_ptr -> nx_tcp_header_word_4 =  header_ptr -> nx_tcp_header_word_4 | (checksum << NX_SHIFT_BY_16);
 800df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2c:	691a      	ldr	r2, [r3, #16]
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	041b      	lsls	r3, r3, #16
 800df32:	431a      	orrs	r2, r3
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	611a      	str	r2, [r3, #16]

            /* Convert back to network byte order for transmit. */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800df38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3a:	691b      	ldr	r3, [r3, #16]
 800df3c:	ba1a      	rev	r2, r3
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	611a      	str	r2, [r3, #16]
 800df42:	e005      	b.n	800df50 <_nx_tcp_socket_retransmit+0x2b4>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800df44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df48:	f043 0204 	orr.w	r2, r3, #4
 800df4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df4e:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

        /* Determine if the retransmitted packet is identical to the original packet.
           RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df56:	429a      	cmp	r2, r3
 800df58:	d10d      	bne.n	800df76 <_nx_tcp_socket_retransmit+0x2da>
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 800df5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5c:	68db      	ldr	r3, [r3, #12]
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800df5e:	6a3a      	ldr	r2, [r7, #32]
 800df60:	429a      	cmp	r2, r3
 800df62:	d108      	bne.n	800df76 <_nx_tcp_socket_retransmit+0x2da>
            (header_ptr -> nx_tcp_header_word_4 == original_header_word_4))
 800df64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df66:	691b      	ldr	r3, [r3, #16]
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 800df68:	69fa      	ldr	r2, [r7, #28]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d103      	bne.n	800df76 <_nx_tcp_socket_retransmit+0x2da>
        {

            /* Yes, identical packet, update the identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 800df6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df70:	2201      	movs	r2, #1
 800df72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        }


#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP retransmit count.  */
        ip_ptr -> nx_ip_tcp_retransmit_packets++;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Increment the TCP retransmit count for the socket.  */
        socket_ptr -> nx_tcp_socket_retransmit_packets++;
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df8a:	1c5a      	adds	r2, r3, #1
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RETRY, ip_ptr, socket_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_timeout_retries, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800df92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df94:	2200      	movs	r2, #0
 800df96:	61da      	str	r2, [r3, #28]
        /* Yes, the driver has finished with the packet at the head of the
           transmit sent list... so it can be sent again!  */

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	695b      	ldr	r3, [r3, #20]
 800df9c:	2b04      	cmp	r3, #4
 800df9e:	d118      	bne.n	800dfd2 <_nx_tcp_socket_retransmit+0x336>
        {
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	6998      	ldr	r0, [r3, #24]
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
                               socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
                               socket_ptr -> nx_tcp_socket_type_of_service,
                               socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800dfba:	9103      	str	r1, [sp, #12]
 800dfbc:	9202      	str	r2, [sp, #8]
 800dfbe:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800dfc2:	9201      	str	r2, [sp, #4]
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	4623      	mov	r3, r4
 800dfc8:	4602      	mov	r2, r0
 800dfca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f7fc fbb1 	bl	800a734 <_nx_ip_packet_send>
#endif /* FEATURE_NX_IPV6 */

        /* Move to next packet. */
        /* During fast recovery, only one packet is retransmitted at once. */
        /* After a timeout, the sending data can be at most one SMSS. */
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800dfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd4:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800dfd8:	d013      	beq.n	800e002 <_nx_tcp_socket_retransmit+0x366>
            (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d00e      	beq.n	800e002 <_nx_tcp_socket_retransmit+0x366>
        {
            break;
        }
        else
        {
            packet_ptr = next_ptr;
 800dfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe6:	647b      	str	r3, [r7, #68]	; 0x44
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 800dfe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d009      	beq.n	800e002 <_nx_tcp_socket_retransmit+0x366>
 800dfee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dff0:	69db      	ldr	r3, [r3, #28]
 800dff2:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800dff6:	f43f af1a 	beq.w	800de2e <_nx_tcp_socket_retransmit+0x192>
 800dffa:	e002      	b.n	800e002 <_nx_tcp_socket_retransmit+0x366>
            return;
 800dffc:	bf00      	nop
 800dffe:	e000      	b.n	800e002 <_nx_tcp_socket_retransmit+0x366>
            break;
 800e000:	bf00      	nop
        }
    }
}
 800e002:	374c      	adds	r7, #76	; 0x4c
 800e004:	46bd      	mov	sp, r7
 800e006:	bd90      	pop	{r4, r7, pc}
 800e008:	50180000 	.word	0x50180000

0800e00c <_nx_tcp_socket_state_ack_check>:
/*                                            fixed compiler warnings,    */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_ack_check(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b090      	sub	sp, #64	; 0x40
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]

NX_TCP_HEADER *search_header_ptr = NX_NULL;
 800e016:	2300      	movs	r3, #0
 800e018:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG          starting_tx_sequence;
ULONG          ending_tx_sequence;
ULONG          ending_rx_sequence;
ULONG          acked_bytes;
ULONG          tcp_payload_length;
UINT           wrapped_flag = NX_FALSE;
 800e01a:	2300      	movs	r3, #0
 800e01c:	623b      	str	r3, [r7, #32]


    /* Determine if the header has an ACK bit set.  This is an
       acknowledgement of a previous transmission.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 82dc 	beq.w	800e5e4 <_nx_tcp_socket_state_ack_check+0x5d8>
    {

        /* Initialize tx sequence. */
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e032:	2b00      	cmp	r3, #0
 800e034:	d004      	beq.n	800e040 <_nx_tcp_socket_state_ack_check+0x34>
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence + 1;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e03a:	3301      	adds	r3, #1
 800e03c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e03e:	e002      	b.n	800e046 <_nx_tcp_socket_state_ack_check+0x3a>
        }
        else
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e044:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	61fb      	str	r3, [r7, #28]

        /* Initialize ending rx sequence. */
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d028      	beq.n	800e0ae <_nx_tcp_socket_state_ack_check+0xa2>
        {
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e062:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Setup a pointer to header of this packet in the sent list.  */
#ifndef NX_DISABLE_IPV4
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800e064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e066:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e06a:	2b04      	cmp	r3, #4
 800e06c:	d11d      	bne.n	800e0aa <_nx_tcp_socket_state_ack_check+0x9e>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800e06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e072:	3314      	adds	r3, #20
 800e074:	63fb      	str	r3, [r7, #60]	; 0x3c
            {
                return(NX_FALSE);
            }

            /* Determine the size of the TCP header.  */
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 800e076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	633b      	str	r3, [r7, #48]	; 0x30
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07e:	0f1b      	lsrs	r3, r3, #28
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	61bb      	str	r3, [r7, #24]

            /* Determine the sequence number in the TCP header.  */
            search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 800e084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	617b      	str	r3, [r7, #20]

            /* Calculate the payload length of TCP. */
            tcp_payload_length = (search_ptr -> nx_packet_length -
 800e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  (header_length +
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
                                           (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 800e08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	4619      	mov	r1, r3
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
 800e094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e096:	1ac9      	subs	r1, r1, r3
                                  (header_length +
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	1acb      	subs	r3, r1, r3
            tcp_payload_length = (search_ptr -> nx_packet_length -
 800e09c:	4413      	add	r3, r2
 800e09e:	613b      	str	r3, [r7, #16]

            /* Calculate the ending packet sequence.  */
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e0a8:	e004      	b.n	800e0b4 <_nx_tcp_socket_state_ack_check+0xa8>
                return(NX_FALSE);
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	e29b      	b.n	800e5e6 <_nx_tcp_socket_state_ack_check+0x5da>
        }
        else
        {
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif

        /* First, determine if incoming ACK matches our transmit sequence.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d111      	bne.n	800e0e2 <_nx_tcp_socket_state_ack_check+0xd6>
        {

            /* In this case, everything on the transmit list is acknowledged.  Simply set the packet
               release count to the number of packets in the transmit queue.  */
            packet_release_count =  socket_ptr -> nx_tcp_socket_transmit_sent_count;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e0c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Set the previous pointer to the socket transmit tail pointer.  */
            previous_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_tail;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e0cc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Is this ACK to FIN? */
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d2:	2b06      	cmp	r3, #6
 800e0d4:	f240 80d6 	bls.w	800e284 <_nx_tcp_socket_state_ack_check+0x278>
            {

                /* Yes it is. */
                socket_ptr -> nx_tcp_socket_fin_acked = NX_TRUE;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800e0e0:	e0d0      	b.n	800e284 <_nx_tcp_socket_state_ack_check+0x278>
        {

            /* Calculate the start and end of the transmit sequence.  */

            /* Pickup the head of the transmit queue.  */
            search_ptr =    socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e0e8:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if there is a packet on the transmit queue... and determine if the packet has been
               transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if ((search_ptr) && (search_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_DRIVER_TX_DONE)))
 800e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d059      	beq.n	800e1a4 <_nx_tcp_socket_state_ack_check+0x198>
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	69db      	ldr	r3, [r3, #28]
 800e0f4:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e0f8:	d154      	bne.n	800e1a4 <_nx_tcp_socket_state_ack_check+0x198>
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Determine if the incoming ACK matches the front of our transmit queue. */
                if (tcp_header_ptr -> nx_tcp_acknowledgment_number == starting_tx_sequence)
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	69fa      	ldr	r2, [r7, #28]
 800e106:	429a      	cmp	r2, r3
 800e108:	d143      	bne.n	800e192 <_nx_tcp_socket_state_ack_check+0x186>
                {

                    /* Handle duplicated ACK packet.  */
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e10e:	1c5a      	adds	r2, r3, #1
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	66da      	str	r2, [r3, #108]	; 0x6c

                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e118:	2b03      	cmp	r3, #3
 800e11a:	d12a      	bne.n	800e172 <_nx_tcp_socket_state_ack_check+0x166>
                    {
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	689a      	ldr	r2, [r3, #8]
                                  socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	3b01      	subs	r3, #1
 800e128:	2b00      	cmp	r3, #0
 800e12a:	dd08      	ble.n	800e13e <_nx_tcp_socket_state_ack_check+0x132>
                        {

                            /* Cumulative acknowledge covers more than recover. */
                            /* Section 3.2, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e132:	2201      	movs	r2, #1
 800e134:	6879      	ldr	r1, [r7, #4]
 800e136:	4618      	mov	r0, r3
 800e138:	f7ff fdb0 	bl	800dc9c <_nx_tcp_socket_retransmit>
 800e13c:	e029      	b.n	800e192 <_nx_tcp_socket_state_ack_check+0x186>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a1b      	ldr	r3, [r3, #32]
 800e146:	429a      	cmp	r2, r3
 800e148:	d923      	bls.n	800e192 <_nx_tcp_socket_state_ack_check+0x186>
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	689a      	ldr	r2, [r3, #8]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6e59      	ldr	r1, [r3, #100]	; 0x64
                                                                                          (socket_ptr -> nx_tcp_socket_connect_mss << 2))) < 0))
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a1b      	ldr	r3, [r3, #32]
 800e156:	009b      	lsls	r3, r3, #2
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 800e158:	440b      	add	r3, r1
 800e15a:	1ad3      	subs	r3, r2, r3
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	da18      	bge.n	800e192 <_nx_tcp_socket_state_ack_check+0x186>

                            /* Congestion window is greater than SMSS bytes and
                               the difference between highest_ack and prev_highest_ack is at most 4*SMSS bytes.*/
                            /* Section 4.1, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e166:	2201      	movs	r2, #1
 800e168:	6879      	ldr	r1, [r7, #4]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff fd96 	bl	800dc9c <_nx_tcp_socket_retransmit>
 800e170:	e00f      	b.n	800e192 <_nx_tcp_socket_state_ack_check+0x186>
                        }
                    }
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e176:	2b03      	cmp	r3, #3
 800e178:	d90b      	bls.n	800e192 <_nx_tcp_socket_state_ack_check+0x186>
                             (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800e180:	2b01      	cmp	r3, #1
 800e182:	d106      	bne.n	800e192 <_nx_tcp_socket_state_ack_check+0x186>
                    {

                        /* CWND += MSS  */
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a1b      	ldr	r3, [r3, #32]
 800e18c:	441a      	add	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	659a      	str	r2, [r3, #88]	; 0x58
                    }
                }

                /* Determine if the transmit queue has wrapped.  */
                if (ending_tx_sequence > starting_tx_sequence)
 800e192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	429a      	cmp	r2, r3
 800e198:	d902      	bls.n	800e1a0 <_nx_tcp_socket_state_ack_check+0x194>
                {

                    /* Clear the wrapped flag.  */
                    wrapped_flag =  NX_FALSE;
 800e19a:	2300      	movs	r3, #0
 800e19c:	623b      	str	r3, [r7, #32]
 800e19e:	e001      	b.n	800e1a4 <_nx_tcp_socket_state_ack_check+0x198>
                }
                else
                {

                    /* Set the wrapped flag.  */
                    wrapped_flag =  NX_TRUE;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	623b      	str	r3, [r7, #32]
                }
            }

            /* Initialize the packet release count.  */
            packet_release_count =  0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if we can find the sequence number in the sent queue for this
               socket.  */
            previous_ptr =  NX_NULL;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	637b      	str	r3, [r7, #52]	; 0x34
            while (search_ptr)
 800e1ac:	e063      	b.n	800e276 <_nx_tcp_socket_state_ack_check+0x26a>
            {

                /* Determine if the packet has been transmitted.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b0:	69db      	ldr	r3, [r3, #28]
 800e1b2:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e1b6:	d007      	beq.n	800e1c8 <_nx_tcp_socket_state_ack_check+0x1bc>
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                           search_ptr -> nx_packet_ip_header_length);
 800e1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1be:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800e1c2:	4413      	add	r3, r2
 800e1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1c6:	e002      	b.n	800e1ce <_nx_tcp_socket_state_ack_check+0x1c2>
                else
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Determine the size of the TCP header.  */
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 800e1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	ba1b      	rev	r3, r3
 800e1d8:	633b      	str	r3, [r7, #48]	; 0x30
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1dc:	0f1b      	lsrs	r3, r3, #28
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	61bb      	str	r3, [r7, #24]

                /* Determine the sequence number in the TCP header.  */
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 800e1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	617b      	str	r3, [r7, #20]
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	ba1b      	rev	r3, r3
 800e1ec:	617b      	str	r3, [r7, #20]

                /* Calculate the payload length of TCP. */
                tcp_payload_length = (search_ptr -> nx_packet_length -
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 800e1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1fa:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (search_ptr -> nx_packet_length -
 800e200:	4413      	add	r3, r2
 800e202:	613b      	str	r3, [r7, #16]

                /* Calculate the ending packet sequence.  */
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 800e204:	697a      	ldr	r2, [r7, #20]
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	4413      	add	r3, r2
 800e20a:	60fb      	str	r3, [r7, #12]

                /* Determine if the transmit window is wrapped.  */
                if (wrapped_flag == NX_FALSE)
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10a      	bne.n	800e228 <_nx_tcp_socket_state_ack_check+0x21c>

                    /* No, the transmit window is not wrapped. Perform a simple compare to determine if the ACK
                       covers the current search packet.  */

                    /* Is this ACK before the current search packet or after the transmit sequence?  */
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d833      	bhi.n	800e284 <_nx_tcp_socket_state_ack_check+0x278>
                        (tcp_header_ptr -> nx_tcp_acknowledgment_number > ending_tx_sequence))
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	689b      	ldr	r3, [r3, #8]
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 800e220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e222:	429a      	cmp	r2, r3
 800e224:	d32e      	bcc.n	800e284 <_nx_tcp_socket_state_ack_check+0x278>
 800e226:	e018      	b.n	800e25a <_nx_tcp_socket_state_ack_check+0x24e>

                    /* Yes, the transmit window has wrapped.  We need to now check for all the wrap conditions to
                       determine if ACK covers the current search packet.  */

                    /* Is the search packet's ending sequence number in the wrapped part of the window.  */
                    if (ending_packet_sequence < starting_tx_sequence)
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d20a      	bcs.n	800e246 <_nx_tcp_socket_state_ack_check+0x23a>
                    {

                        /* The search packet ends in the wrapped portion of the window.  Determine if the ACK
                           sequence in the wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number < starting_tx_sequence)
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	689b      	ldr	r3, [r3, #8]
 800e234:	69fa      	ldr	r2, [r7, #28]
 800e236:	429a      	cmp	r2, r3
 800e238:	d921      	bls.n	800e27e <_nx_tcp_socket_state_ack_check+0x272>
                        {

                            /* Yes, the ACK sequence is in the wrapped portion as well. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	429a      	cmp	r2, r3
 800e242:	d90a      	bls.n	800e25a <_nx_tcp_socket_state_ack_check+0x24e>
                            {

                                /* ACK does not cover the search packet. Break out of the loop.  */
                                break;
 800e244:	e01e      	b.n	800e284 <_nx_tcp_socket_state_ack_check+0x278>
                    else
                    {

                        /* The search packet is in the non-wrapped portion of the window.  Determine if the ACK
                           sequence is in the non-wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number >= starting_tx_sequence)
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	69fa      	ldr	r2, [r7, #28]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d804      	bhi.n	800e25a <_nx_tcp_socket_state_ack_check+0x24e>
                        {

                            /* Yes, the ACK sequence is in the non-wrapped portion of the window. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	429a      	cmp	r2, r3
 800e258:	d813      	bhi.n	800e282 <_nx_tcp_socket_state_ack_check+0x276>
                }

                /* At this point we know that the ACK received covers the search packet.  */

                /* Increase the packet release count.  */
                packet_release_count++;
 800e25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25c:	3301      	adds	r3, #1
 800e25e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Move the search and previous pointers forward.  */
                previous_ptr =  search_ptr;
 800e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e262:	637b      	str	r3, [r7, #52]	; 0x34
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e266:	6a1b      	ldr	r3, [r3, #32]
 800e268:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Determine if we are at the end of the TCP queue.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800e26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26c:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800e270:	d101      	bne.n	800e276 <_nx_tcp_socket_state_ack_check+0x26a>
                {

                    /* Yes, set the search pointer to NULL.  */
                    search_ptr =  NX_NULL;
 800e272:	2300      	movs	r3, #0
 800e274:	63bb      	str	r3, [r7, #56]	; 0x38
            while (search_ptr)
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d198      	bne.n	800e1ae <_nx_tcp_socket_state_ack_check+0x1a2>
 800e27c:	e002      	b.n	800e284 <_nx_tcp_socket_state_ack_check+0x278>
                            break;
 800e27e:	bf00      	nop
 800e280:	e000      	b.n	800e284 <_nx_tcp_socket_state_ack_check+0x278>
                                break;
 800e282:	bf00      	nop
                }
            }
        }

        /* Determine if anything needs to be released.  */
        if (!packet_release_count)
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	2b00      	cmp	r3, #0
 800e288:	d123      	bne.n	800e2d2 <_nx_tcp_socket_state_ack_check+0x2c6>
        {

            /* No, check and see if the ACK is valid.  */
            /* If the ACK acks something not yet sent (SEG.ACK > SND.NXT) then send an ACK, drop the segment */
            /* Page 72, section 3.9, RFC 793.*/
            if (tcp_header_ptr -> nx_tcp_acknowledgment_number != ending_tx_sequence)
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e290:	429a      	cmp	r2, r3
 800e292:	d00d      	beq.n	800e2b0 <_nx_tcp_socket_state_ack_check+0x2a4>
            {

                /* If the ACK is a duplicate, it can be ignored. */
                if ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence > 0)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	461a      	mov	r2, r3
 800e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f340 809f 	ble.w	800e3e2 <_nx_tcp_socket_state_ack_check+0x3d6>
                {

                    /* The ACK sequence is invalid. Respond with an ACK to let the other
                       side of the connection figure out if everything is still okay.  */
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 800e2a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7fe ffaa 	bl	800d200 <_nx_tcp_packet_send_ack>
                    return(NX_FALSE);
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	e19a      	b.n	800e5e6 <_nx_tcp_socket_state_ack_check+0x5da>
                }
            }
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f040 8094 	bne.w	800e3e2 <_nx_tcp_socket_state_ack_check+0x3d6>
                     (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	f040 808d 	bne.w	800e3e2 <_nx_tcp_socket_state_ack_check+0x3d6>
            {

                /* Response to zero window probe.  */
                _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 800e2c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7fe ff98 	bl	800d200 <_nx_tcp_packet_send_ack>
 800e2d0:	e087      	b.n	800e3e2 <_nx_tcp_socket_state_ack_check+0x3d6>

            /* Congestion window adjustment during slow start and congestion avoidance is executed
               on every incoming ACK that acknowledges new data. RFC5681, Section3.1, Page4-8.  */

            /* Check whether the socket is in fast recovery procedure. */
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d10e      	bne.n	800e2fa <_nx_tcp_socket_state_ack_check+0x2ee>
            {

                /* Yes. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	689a      	ldr	r2, [r3, #8]
                          socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 800e2e4:	1ad3      	subs	r3, r2, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	dd07      	ble.n	800e2fa <_nx_tcp_socket_state_ack_check+0x2ee>
                {

                    /* All packets sent before entering fast recovery are ACKed. */
                    /* Exit fast recovery procedure. */
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	659a      	str	r2, [r3, #88]	; 0x58
                }
            }

            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
                      (tcp_header_ptr -> nx_tcp_acknowledgment_number - 2)) < 0)
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	689b      	ldr	r3, [r3, #8]
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	3302      	adds	r3, #2
 800e306:	2b00      	cmp	r3, #0
 800e308:	da04      	bge.n	800e314 <_nx_tcp_socket_state_ack_check+0x308>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	1e9a      	subs	r2, r3, #2
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	661a      	str	r2, [r3, #96]	; 0x60
            }

            /* Reset the duplicated ACK counter. */
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Determine if the packet has been transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e320:	69db      	ldr	r3, [r3, #28]
 800e322:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e326:	d00b      	beq.n	800e340 <_nx_tcp_socket_state_ack_check+0x334>
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                search_header_ptr =  (NX_TCP_HEADER *)(socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header +
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                       socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header_length);
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 800e336:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                search_header_ptr =  (NX_TCP_HEADER *)(socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header +
 800e33a:	4413      	add	r3, r2
 800e33c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e33e:	e004      	b.n	800e34a <_nx_tcp_socket_state_ack_check+0x33e>
            else
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_prepend_ptr;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	63fb      	str	r3, [r7, #60]	; 0x3c
            }

            /* Set previous cumulative acknowlesgement. */
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	69fa      	ldr	r2, [r7, #28]
 800e34e:	665a      	str	r2, [r3, #100]	; 0x64

            /* Calculate ACKed length. */
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	689a      	ldr	r2, [r3, #8]
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	1ad3      	subs	r3, r2, r3
 800e358:	60bb      	str	r3, [r7, #8]

            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e360:	2b01      	cmp	r3, #1
 800e362:	d112      	bne.n	800e38a <_nx_tcp_socket_state_ack_check+0x37e>
            {

                /* Process cwnd in fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	1ad2      	subs	r2, r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	659a      	str	r2, [r3, #88]	; 0x58
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a1b      	ldr	r3, [r3, #32]
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	429a      	cmp	r2, r3
 800e378:	d933      	bls.n	800e3e2 <_nx_tcp_socket_state_ack_check+0x3d6>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6a1b      	ldr	r3, [r3, #32]
 800e382:	441a      	add	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	659a      	str	r2, [r3, #88]	; 0x58
 800e388:	e02b      	b.n	800e3e2 <_nx_tcp_socket_state_ack_check+0x3d6>
            else
            {

                /* Adjust the transmit window.  In slow start phase, the transmit window is incremented for every ACK.
                   In Congestion Avoidance phase, the window is incremented for every RTT. Section 3.1, Page 4-7, RFC5681.  */
                if (socket_ptr -> nx_tcp_socket_tx_window_congestion >= socket_ptr -> nx_tcp_socket_tx_slow_start_threshold)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e392:	429a      	cmp	r2, r3
 800e394:	d312      	bcc.n	800e3bc <_nx_tcp_socket_state_ack_check+0x3b0>
                {

                    /* In Congestion avoidance phase, for every ACK it receives, increase the window size using the
                       following approximation:
                       cwnd = cwnd + MSS * MSS / cwnd;  */
                    temp = socket_ptr -> nx_tcp_socket_connect_mss2 / socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e39e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3a2:	633b      	str	r3, [r7, #48]	; 0x30

                    /* If the above formula yields 0, the result SHOULD be rounded up to 1 byte.  */
                    if (temp == 0)
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d101      	bne.n	800e3ae <_nx_tcp_socket_state_ack_check+0x3a2>
                    {
                        temp = 1;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_window_congestion + temp;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b4:	441a      	add	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	659a      	str	r2, [r3, #88]	; 0x58
 800e3ba:	e012      	b.n	800e3e2 <_nx_tcp_socket_state_ack_check+0x3d6>
                {

                    /* In Slow start phase:
                       cwnd += min (N, SMSS),
                       where N is the number of ACKed bytes. */
                    if (acked_bytes < socket_ptr -> nx_tcp_socket_connect_mss)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d206      	bcs.n	800e3d4 <_nx_tcp_socket_state_ack_check+0x3c8>
                    {

                        /* In Slow start phase. Increase the cwnd by acked bytes.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += acked_bytes;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	441a      	add	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	659a      	str	r2, [r3, #88]	; 0x58
 800e3d2:	e006      	b.n	800e3e2 <_nx_tcp_socket_state_ack_check+0x3d6>
                    }
                    else
                    {

                        /* In Slow start phase. Increase the cwnd by full MSS for every ack.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a1b      	ldr	r3, [r3, #32]
 800e3dc:	441a      	add	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	659a      	str	r2, [r3, #88]	; 0x58
        /* Update the window only when
         * 1. SND.UNA < SEG.ACK =< SND.NXT or
         * 2. SND.WL1 < SEG.SEQ or
         * 3. SND.WL1 = SEG.SEQ and SND.WL2 =< SEG.ACK
         * RFC793, Section 3.9, Page72. */
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	1ad3      	subs	r3, r2, r3
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	dd06      	ble.n	800e3fe <_nx_tcp_socket_state_ack_check+0x3f2>
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	1ad3      	subs	r3, r2, r3
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	dd12      	ble.n	800e424 <_nx_tcp_socket_state_ack_check+0x418>
            ((INT)tcp_header_ptr -> nx_tcp_sequence_number - (INT)ending_rx_sequence > 0) ||
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	461a      	mov	r2, r3
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	1ad3      	subs	r3, r2, r3
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dc0b      	bgt.n	800e424 <_nx_tcp_socket_state_ack_check+0x418>
            (((INT)tcp_header_ptr -> nx_tcp_sequence_number == (INT)ending_rx_sequence) &&
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	685b      	ldr	r3, [r3, #4]
            ((INT)tcp_header_ptr -> nx_tcp_sequence_number - (INT)ending_rx_sequence > 0) ||
 800e410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e412:	429a      	cmp	r2, r3
 800e414:	d10b      	bne.n	800e42e <_nx_tcp_socket_state_ack_check+0x422>
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence >= 0)))
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	461a      	mov	r2, r3
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	1ad3      	subs	r3, r2, r3
            (((INT)tcp_header_ptr -> nx_tcp_sequence_number == (INT)ending_rx_sequence) &&
 800e420:	2b00      	cmp	r3, #0
 800e422:	db04      	blt.n	800e42e <_nx_tcp_socket_state_ack_check+0x422>
        {

            /* Update this socket's transmit window with the advertised window size in the ACK message.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =  (tcp_header_ptr -> nx_tcp_header_word_3) & NX_LOWER_16_MASK;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	b29a      	uxth	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	655a      	str	r2, [r3, #84]	; 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
        }

        /* Check advertised window. */
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e436:	429a      	cmp	r2, r3
 800e438:	d80a      	bhi.n	800e450 <_nx_tcp_socket_state_ack_check+0x444>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number >= socket_ptr -> nx_tcp_socket_zero_window_probe_sequence))
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	689a      	ldr	r2, [r3, #8]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 800e444:	429a      	cmp	r2, r3
 800e446:	d303      	bcc.n	800e450 <_nx_tcp_socket_state_ack_check+0x444>
        {

            /* It is an ACK to Zero Window Probe. Reset the zero window probe failure. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }

        if (!packet_release_count)
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <_nx_tcp_socket_state_ack_check+0x44e>
        {
            /* Done, return to caller. */
            return(NX_TRUE);
 800e456:	2301      	movs	r3, #1
 800e458:	e0c5      	b.n	800e5e6 <_nx_tcp_socket_state_ack_check+0x5da>
            }
        }
#endif

        /* Save the front of the of the transmit queue.  */
        search_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e460:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Okay so now the packet after the previous pointer needs to be the front of the
           queue.  */
        if (previous_ptr != socket_ptr -> nx_tcp_socket_transmit_sent_tail)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d017      	beq.n	800e49e <_nx_tcp_socket_state_ack_check+0x492>
        {

            /* Just update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800e46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e470:	6a1a      	ldr	r2, [r3, #32]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

            /* And decrease the transmit queue count accordingly.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	1ad2      	subs	r2, r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Setup a new transmit timeout.  */
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800e49c:	e08e      	b.n	800e5bc <_nx_tcp_socket_state_ack_check+0x5b0>
        else
        {

            /* The transmit list is now cleared, just set the head and tail pointers to
               NULL.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  NX_NULL;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

            /* Clear the transmit queue count.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Determine if a disconnect FIN has been sent from this side of the connection.  */
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ba:	2b07      	cmp	r3, #7
 800e4bc:	d007      	beq.n	800e4ce <_nx_tcp_socket_state_ack_check+0x4c2>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800e4c2:	2b09      	cmp	r3, #9
 800e4c4:	d003      	beq.n	800e4ce <_nx_tcp_socket_state_ack_check+0x4c2>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800e4ca:	2b0b      	cmp	r3, #11
 800e4cc:	d10a      	bne.n	800e4e4 <_nx_tcp_socket_state_ack_check+0x4d8>
            {

                /* Yes, setup timeout such that the FIN can be retried if it is lost.  */
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800e4e2:	e007      	b.n	800e4f4 <_nx_tcp_socket_state_ack_check+0x4e8>
            }
            else if (socket_ptr -> nx_tcp_socket_tx_window_advertised != 0)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d067      	beq.n	800e5bc <_nx_tcp_socket_state_ack_check+0x5b0>
            {

                /* Otherwise, a FIN has not been sent, simply clear the transmit timeout.  */
                socket_ptr -> nx_tcp_socket_timeout =  0;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        }

        /* Now walk through the packets to release and set them
           free.  */
        while (packet_release_count--)
 800e4f4:	e062      	b.n	800e5bc <_nx_tcp_socket_state_ack_check+0x5b0>
        {

            /* Use the previous pointer as the release pointer.  */
            previous_ptr =  search_ptr;
 800e4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Move to the next packet in the queue before we clip the
               next pointer.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	6a1b      	ldr	r3, [r3, #32]
 800e4fe:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Set the packet to allocated to indicate it is no longer part of the TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 800e500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e502:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800e506:	621a      	str	r2, [r3, #32]
               the packet occurred prior to receiving the ACK. If so, the packet could be
               in an ARP queue or in a driver queue waiting for transmission so we can't
               release it directly at this point.  The driver or the ARP processing will
               release it when finished.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (previous_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800e508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50a:	69db      	ldr	r3, [r3, #28]
 800e50c:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e510:	d125      	bne.n	800e55e <_nx_tcp_socket_state_ack_check+0x552>

                /* Yes, the driver has already released the packet.  */

                /* Open up the transmit window. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr = (NX_TCP_HEADER *)previous_ptr -> nx_packet_prepend_ptr;
 800e512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e514:	689b      	ldr	r3, [r3, #8]
 800e516:	63fb      	str	r3, [r7, #60]	; 0x3c

                temp = search_header_ptr -> nx_tcp_header_word_3;
 800e518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	ba1b      	rev	r3, r3
 800e522:	633b      	str	r3, [r7, #48]	; 0x30
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e526:	0f1b      	lsrs	r3, r3, #28
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	61bb      	str	r3, [r7, #24]
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > (previous_ptr -> nx_packet_length - header_length))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e532:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	1acb      	subs	r3, r1, r3
 800e538:	429a      	cmp	r2, r3
 800e53a:	d909      	bls.n	800e550 <_nx_tcp_socket_state_ack_check+0x544>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= previous_ptr -> nx_packet_length - header_length;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e544:	69b9      	ldr	r1, [r7, #24]
 800e546:	1acb      	subs	r3, r1, r3
 800e548:	441a      	add	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	65da      	str	r2, [r3, #92]	; 0x5c
 800e54e:	e002      	b.n	800e556 <_nx_tcp_socket_state_ack_check+0x54a>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	65da      	str	r2, [r3, #92]	; 0x5c
                }
                /* Release the packet.  */
                _nx_packet_release(previous_ptr);
 800e556:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e558:	f7fd fc80 	bl	800be5c <_nx_packet_release>
 800e55c:	e02e      	b.n	800e5bc <_nx_tcp_socket_state_ack_check+0x5b0>
            else
            {

                /* No, the driver has not released the packet.  */
                /* Open up the transmit window. */
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 800e55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                       previous_ptr -> nx_packet_ip_header_length);
 800e562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e564:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 800e568:	4413      	add	r3, r2
 800e56a:	63fb      	str	r3, [r7, #60]	; 0x3c

                temp = search_header_ptr -> nx_tcp_header_word_3;
 800e56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e574:	ba1b      	rev	r3, r3
 800e576:	633b      	str	r3, [r7, #48]	; 0x30
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	0f1b      	lsrs	r3, r3, #28
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	61bb      	str	r3, [r7, #24]
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800e580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)(previous_ptr -> nx_packet_prepend_ptr))));
 800e584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 800e58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58c:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800e592:	4413      	add	r3, r2
 800e594:	613b      	str	r3, [r7, #16]
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > tcp_payload_length)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e59a:	693a      	ldr	r2, [r7, #16]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d206      	bcs.n	800e5ae <_nx_tcp_socket_state_ack_check+0x5a2>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= tcp_payload_length;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	1ad2      	subs	r2, r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	65da      	str	r2, [r3, #92]	; 0x5c
 800e5ac:	e002      	b.n	800e5b4 <_nx_tcp_socket_state_ack_check+0x5a8>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	65da      	str	r2, [r3, #92]	; 0x5c
                }

                /* Let driver release the packet.  */
                previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = ((NX_PACKET *)NX_PACKET_ALLOCATED);
 800e5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b6:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800e5ba:	621a      	str	r2, [r3, #32]
        while (packet_release_count--)
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	1e5a      	subs	r2, r3, #1
 800e5c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d197      	bne.n	800e4f6 <_nx_tcp_socket_state_ack_check+0x4ea>
            }
        }

        if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d107      	bne.n	800e5e0 <_nx_tcp_socket_state_ack_check+0x5d4>
        {

            /* Only partial data are ACKed. Retransmit packet immediately. */
            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_FALSE);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff fb5e 	bl	800dc9c <_nx_tcp_socket_retransmit>
        }

        return(NX_TRUE);
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e000      	b.n	800e5e6 <_nx_tcp_socket_state_ack_check+0x5da>
    else
    {

        /* The ACK bit is off drop the segment and return.  */
        /* RFC793, Section3.9, Page72.  */
        return(NX_FALSE);
 800e5e4:	2300      	movs	r3, #0
    }
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3740      	adds	r7, #64	; 0x40
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
	...

0800e5f0 <_nx_tcp_socket_state_closing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_closing(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e602:	2b00      	cmp	r3, #0
 800e604:	d029      	beq.n	800e65a <_nx_tcp_socket_state_closing+0x6a>
    {

        /* If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	689a      	ldr	r2, [r3, #8]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60e:	429a      	cmp	r2, r3
 800e610:	d123      	bne.n	800e65a <_nx_tcp_socket_state_closing+0x6a>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	685a      	ldr	r2, [r3, #4]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d11d      	bne.n	800e65a <_nx_tcp_socket_state_closing+0x6a>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Set the socket state to TIMED WAIT now.  */
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	220a      	movs	r2, #10
 800e622:	639a      	str	r2, [r3, #56]	; 0x38

            /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800e624:	4b0f      	ldr	r3, [pc, #60]	; (800e664 <_nx_tcp_socket_state_closing+0x74>)
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e634:	2b00      	cmp	r3, #0
 800e636:	d006      	beq.n	800e646 <_nx_tcp_socket_state_closing+0x56>
            {

                /* Resume the thread suspended for the disconnect.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e63e:	2100      	movs	r1, #0
 800e640:	4618      	mov	r0, r3
 800e642:	f000 fec7 	bl	800f3d4 <_nx_tcp_socket_thread_resume>
            }

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d004      	beq.n	800e65a <_nx_tcp_socket_state_closing+0x6a>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	4798      	blx	r3
#endif
        }

        /* Ignore the segment.  According to RFC 793, Section 3.9, Page 73.  */
    }
}
 800e65a:	bf00      	nop
 800e65c:	3708      	adds	r7, #8
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	240022f8 	.word	0x240022f8

0800e668 <_nx_tcp_socket_state_data_trim>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim(NX_PACKET *packet_ptr, ULONG amount)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
ULONG      bytes_to_keep;
NX_PACKET *work_ptr;

    if (amount >= packet_ptr -> nx_packet_length)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e676:	683a      	ldr	r2, [r7, #0]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d23c      	bcs.n	800e6f6 <_nx_tcp_socket_state_data_trim+0x8e>
    {
        /* Invalid input. */
        return;
    }

    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	617b      	str	r3, [r7, #20]

    packet_ptr -> nx_packet_length = bytes_to_keep;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	697a      	ldr	r2, [r7, #20]
 800e68a:	625a      	str	r2, [r3, #36]	; 0x24

    work_ptr = packet_ptr;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the "bytes_to_keep" amount. */
    while (work_ptr)
 800e690:	e02d      	b.n	800e6ee <_nx_tcp_socket_state_data_trim+0x86>
    {

    NX_PACKET *tmp_ptr;

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	68da      	ldr	r2, [r3, #12]
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	1ad2      	subs	r2, r2, r3
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	da0c      	bge.n	800e6bc <_nx_tcp_socket_state_data_trim+0x54>
        {

            /*lint -e{923} suppress cast of pointer to ULONG.  */
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	689b      	ldr	r3, [r3, #8]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	1ad3      	subs	r3, r2, r3
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	617b      	str	r3, [r7, #20]

            work_ptr = work_ptr -> nx_packet_next;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	613b      	str	r3, [r7, #16]

            continue;
 800e6ba:	e018      	b.n	800e6ee <_nx_tcp_socket_state_data_trim+0x86>
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* This is the last packet. */
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	689a      	ldr	r2, [r3, #8]
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	441a      	add	r2, r3
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Free the rest of the packet chain. */
        tmp_ptr = work_ptr -> nx_packet_next;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	60fb      	str	r3, [r7, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	605a      	str	r2, [r3, #4]
        work_ptr = tmp_ptr;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	613b      	str	r3, [r7, #16]

        if (work_ptr)
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d007      	beq.n	800e6ee <_nx_tcp_socket_state_data_trim+0x86>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800e6e4:	621a      	str	r2, [r3, #32]

            _nx_packet_release(work_ptr);
 800e6e6:	6938      	ldr	r0, [r7, #16]
 800e6e8:	f7fd fbb8 	bl	800be5c <_nx_packet_release>

            /* All done. Break out of the while loop and return. */
            break;
 800e6ec:	e004      	b.n	800e6f8 <_nx_tcp_socket_state_data_trim+0x90>
    while (work_ptr)
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d1ce      	bne.n	800e692 <_nx_tcp_socket_state_data_trim+0x2a>
 800e6f4:	e000      	b.n	800e6f8 <_nx_tcp_socket_state_data_trim+0x90>
        return;
 800e6f6:	bf00      	nop
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */
}
 800e6f8:	3718      	adds	r7, #24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <_nx_tcp_socket_state_data_trim_front>:
/*                                            verified memmove use cases, */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim_front(NX_PACKET *packet_ptr, ULONG amount)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b084      	sub	sp, #16
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	6039      	str	r1, [r7, #0]
NX_PACKET *work_ptr = packet_ptr;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	60fb      	str	r3, [r7, #12]
ULONG      work_length;

    if (amount >= packet_ptr -> nx_packet_length || amount == 0)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	429a      	cmp	r2, r3
 800e714:	d263      	bcs.n	800e7de <_nx_tcp_socket_state_data_trim_front+0xe0>
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d060      	beq.n	800e7de <_nx_tcp_socket_state_data_trim_front+0xe0>
        /* Invalid input. */
        return;
    }

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= amount;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	1ad2      	subs	r2, r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	625a      	str	r2, [r3, #36]	; 0x24

    /* Move prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	f103 0214 	add.w	r2, r3, #20
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	609a      	str	r2, [r3, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the amount. */
    while (amount)
 800e734:	e049      	b.n	800e7ca <_nx_tcp_socket_state_data_trim_front+0xcc>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Compute the size of the data portion work_ptr.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	461a      	mov	r2, r3
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	60bb      	str	r3, [r7, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
        if (amount > work_length)
 800e744:	683a      	ldr	r2, [r7, #0]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d91e      	bls.n	800e78a <_nx_tcp_socket_state_data_trim_front+0x8c>
        {

            /* All data in work_ptr need to be trimmed.  */
            if (work_ptr == packet_ptr)
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	429a      	cmp	r2, r3
 800e752:	d104      	bne.n	800e75e <_nx_tcp_socket_state_data_trim_front+0x60>
            {

                /* This packet is the header of packet chain.  */
                /* Clear TCP data in this packet.  */
                work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	689a      	ldr	r2, [r3, #8]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	60da      	str	r2, [r3, #12]
 800e75c:	e00d      	b.n	800e77a <_nx_tcp_socket_state_data_trim_front+0x7c>
            else
            {

                /* This packet is not the first packet.  */
                /* Remove work_ptr from packet chain.  */
                packet_ptr -> nx_packet_next = work_ptr -> nx_packet_next;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	685a      	ldr	r2, [r3, #4]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	605a      	str	r2, [r3, #4]

                /* Disconnect work_ptr from the rest of the packet chain. */
                work_ptr -> nx_packet_next = NX_NULL;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	605a      	str	r2, [r3, #4]

                /* Mark the packet as ALLOCATED. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800e772:	621a      	str	r2, [r3, #32]

                _nx_packet_release(work_ptr);
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f7fd fb71 	bl	800be5c <_nx_packet_release>
            }
            /* Reduce the amount being trimmed.  */
            amount -= work_length;
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	603b      	str	r3, [r7, #0]

            /* Move to the next packet. */
            work_ptr = packet_ptr -> nx_packet_next;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	60fb      	str	r3, [r7, #12]
 800e788:	e01f      	b.n	800e7ca <_nx_tcp_socket_state_data_trim_front+0xcc>
        else
        {

            /* This is the last packet to trim.  */

            if (work_ptr == packet_ptr)
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d113      	bne.n	800e7ba <_nx_tcp_socket_state_data_trim_front+0xbc>
            {
#endif /* NX_DISABLE_PACKET_CHAIN */

                /* For the first packet, move data towards the beginning
                   of the packet, right after TCP header.  */
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6898      	ldr	r0, [r3, #8]
                        packet_ptr -> nx_packet_prepend_ptr + amount,
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	689a      	ldr	r2, [r3, #8]
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	18d1      	adds	r1, r2, r3
                        work_length - amount);
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	1ad3      	subs	r3, r2, r3
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	f006 ff17 	bl	80155d8 <memmove>
                packet_ptr -> nx_packet_append_ptr -= amount;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	68da      	ldr	r2, [r3, #12]
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	425b      	negs	r3, r3
 800e7b2:	441a      	add	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	60da      	str	r2, [r3, #12]
 800e7b8:	e005      	b.n	800e7c6 <_nx_tcp_socket_state_data_trim_front+0xc8>
            }
            else
            {

                /* Advance nx_packet_prepend_ptr to where the usable data starts. */
                work_ptr -> nx_packet_prepend_ptr += amount;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	689a      	ldr	r2, [r3, #8]
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	441a      	add	r2, r3
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	609a      	str	r2, [r3, #8]
            }

            /* Cut down amount*/
            amount = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	603b      	str	r3, [r7, #0]
    while (amount)
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d1b2      	bne.n	800e736 <_nx_tcp_socket_state_data_trim_front+0x38>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Restore prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr -= sizeof(NX_TCP_HEADER);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	f1a3 0214 	sub.w	r2, r3, #20
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	609a      	str	r2, [r3, #8]
 800e7dc:	e000      	b.n	800e7e0 <_nx_tcp_socket_state_data_trim_front+0xe2>
        return;
 800e7de:	bf00      	nop
}
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
	...

0800e7e8 <_nx_tcp_socket_state_data_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_data_check(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b096      	sub	sp, #88	; 0x58
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
ULONG          search_begin_sequence;
ULONG          search_end_sequence;
ULONG          original_rx_sequence;
ULONG          trim_data_length;
TX_THREAD     *thread_ptr;
ULONG          acked_packets = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	63bb      	str	r3, [r7, #56]	; 0x38
UINT           need_ack = NX_FALSE;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* NX_ENABLE_LOW_WATERMARK */
#if ((!defined(NX_DISABLE_TCP_INFO)) || defined(TX_ENABLE_EVENT_TRACE))
NX_IP         *ip_ptr;

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e800:	633b      	str	r3, [r7, #48]	; 0x30
#endif


    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine the size of the TCP header.  */
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	0f1b      	lsrs	r3, r3, #28
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Record the original rx_sequence. */
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e816:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the begin sequence of this packet. */
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;
 800e818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Calculate the data length in the packet.  */
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the end sequence of this packet. The end sequence is one byte to the last byte in this packet. */
    packet_end_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e82e:	4413      	add	r3, r2
 800e830:	647b      	str	r3, [r7, #68]	; 0x44

    /* Trim the data that out of the receive window, make sure all data are in receive window.  */
    if (packet_data_length)
 800e832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e834:	2b00      	cmp	r3, #0
 800e836:	d03a      	beq.n	800e8ae <_nx_tcp_socket_state_data_check+0xc6>
    {

        /* Step1. trim the data on the left side of the receive window.  */
        if (((INT)socket_ptr -> nx_tcp_socket_rx_sequence - (INT)packet_begin_sequence) > 0)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e83c:	461a      	mov	r2, r3
 800e83e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	2b00      	cmp	r3, #0
 800e844:	dd16      	ble.n	800e874 <_nx_tcp_socket_state_data_check+0x8c>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e84c:	1ad3      	subs	r3, r2, r3
 800e84e:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim_front(packet_ptr, trim_data_length);
 800e850:	6a39      	ldr	r1, [r7, #32]
 800e852:	6838      	ldr	r0, [r7, #0]
 800e854:	f7ff ff53 	bl	800e6fe <_nx_tcp_socket_state_data_trim_front>

            /* Fix the sequence of this packet. */
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	685a      	ldr	r2, [r3, #4]
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	441a      	add	r2, r3
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	605a      	str	r2, [r3, #4]

            /* Update the data length and begin sequence.  */
            packet_data_length -= trim_data_length;
 800e864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e866:	6a3b      	ldr	r3, [r7, #32]
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	643b      	str	r3, [r7, #64]	; 0x40
            packet_begin_sequence += trim_data_length;
 800e86c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e86e:	6a3b      	ldr	r3, [r7, #32]
 800e870:	4413      	add	r3, r2
 800e872:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Step2. trim the data on the right side of the receive window.  */
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 800e874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e87a:	1a9b      	subs	r3, r3, r2
             (INT)socket_ptr -> nx_tcp_socket_rx_window_current) > 0)
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	6f52      	ldr	r2, [r2, #116]	; 0x74
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 800e880:	1a9b      	subs	r3, r3, r2
 800e882:	2b00      	cmp	r3, #0
 800e884:	dd13      	ble.n	800e8ae <_nx_tcp_socket_state_data_check+0xc6>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e88e:	4413      	add	r3, r2
 800e890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e892:	1ad3      	subs	r3, r2, r3
 800e894:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim(packet_ptr, trim_data_length);
 800e896:	6a39      	ldr	r1, [r7, #32]
 800e898:	6838      	ldr	r0, [r7, #0]
 800e89a:	f7ff fee5 	bl	800e668 <_nx_tcp_socket_state_data_trim>

            /* Update the data length and end sequence.  */
            packet_data_length -= trim_data_length;
 800e89e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8a0:	6a3b      	ldr	r3, [r7, #32]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	643b      	str	r3, [r7, #64]	; 0x40
            packet_end_sequence -= trim_data_length;
 800e8a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	1ad3      	subs	r3, r2, r3
 800e8ac:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Determine if the packet has the FIN bit set to signal a disconnect.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 800e8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d009      	beq.n	800e8ce <_nx_tcp_socket_state_data_check+0xe6>
    {

        /* Setup the FIN sequence number that we need to look at.  */
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8bc:	685a      	ldr	r2, [r3, #4]
 800e8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c0:	441a      	add	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Indicate that the FIN sequence is now valid.  Once the receive chain is complete
           we will process (ACK) the FIN command which is part of a disconnect started by the
           other side of the connection.  */
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_FIN_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
    }

    /* Compute the amount of payload data in this packet. */
    if (packet_data_length == 0)
 800e8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d11d      	bne.n	800e910 <_nx_tcp_socket_state_data_check+0x128>
    {
        /* This packet does not contain TCP data payload.  */

        /* Check for invalid sequence number.  */
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d8:	2b05      	cmp	r3, #5
 800e8da:	d117      	bne.n	800e90c <_nx_tcp_socket_state_data_check+0x124>
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d112      	bne.n	800e90c <_nx_tcp_socket_state_data_check+0x124>
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ec:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d00c      	beq.n	800e90c <_nx_tcp_socket_state_data_check+0x124>
            ((socket_ptr -> nx_tcp_socket_rx_sequence - 1) != tcp_header_ptr -> nx_tcp_sequence_number))
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f6:	1e5a      	subs	r2, r3, #1
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d005      	beq.n	800e90c <_nx_tcp_socket_state_data_check+0x124>
        {

            /* Send an immediate ACK.  */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e904:	4619      	mov	r1, r3
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7fe fc7a 	bl	800d200 <_nx_tcp_packet_send_ack>
        }

        /* This packet does not have data, so return false. */
        return(NX_FALSE);
 800e90c:	2300      	movs	r3, #0
 800e90e:	e29e      	b.n	800ee4e <_nx_tcp_socket_state_data_check+0x666>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Ensure the next pointer in the packet is set to NULL, which will indicate to the
       receive logic that it is not yet part of a contiguous stream.  */
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2200      	movs	r2, #0
 800e914:	61da      	str	r2, [r3, #28]

    /* Otherwise, the packet is within the receive window so continue processing
       the incoming TCP data.  */

    /* Pickup the tail pointer of the receive queue.  */
    search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e91c:	657b      	str	r3, [r7, #84]	; 0x54

    /* Check to see if the tail pointer is part of a contiguous stream.  */
    if (search_ptr)
 800e91e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e920:	2b00      	cmp	r3, #0
 800e922:	d010      	beq.n	800e946 <_nx_tcp_socket_state_data_check+0x15e>
    {

        /* Setup a pointer to header of this packet in the sent list.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800e924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	61fb      	str	r3, [r7, #28]

        /* Determine the size of the search TCP header.  */
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	0f1b      	lsrs	r3, r3, #28
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	61bb      	str	r3, [r7, #24]

        /* Now see if the current sequence number accounts for the last packet.  */
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	685a      	ldr	r2, [r3, #4]
 800e938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93c:	441a      	add	r2, r3
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	1ad3      	subs	r3, r2, r3
 800e942:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e944:	e002      	b.n	800e94c <_nx_tcp_socket_state_data_check+0x164>
    else
    {

        /* Set the sequence number to the socket's receive sequence if there isn't a receive
           packet on the queue.  */
        search_end_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e94a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_ENABLE_LOW_WATERMARK */

    /* Determine if we have a simple case of TCP data coming in the correct order.  This means
       the socket's sequence number matches the incoming packet sequence number and the last packet's
       data on the socket's receive queue (if any) matches the current sequence number.  */
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	685a      	ldr	r2, [r3, #4]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e954:	429a      	cmp	r2, r3
 800e956:	d132      	bne.n	800e9be <_nx_tcp_socket_state_data_check+0x1d6>
        (search_end_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 800e95c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e95e:	429a      	cmp	r2, r3
 800e960:	d12d      	bne.n	800e9be <_nx_tcp_socket_state_data_check+0x1d6>
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Mark the packet as ready. This is done to simplify the logic in socket receive.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800e968:	61da      	str	r2, [r3, #28]
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* Place the packet on the receive queue.  Search pointer still points to the tail packet on
               the queue.  */
            if (search_ptr)
 800e96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d007      	beq.n	800e980 <_nx_tcp_socket_state_data_check+0x198>
            {

                /* Nonempty receive queue, add packet to the end of the receive queue.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  packet_ptr;
 800e970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	621a      	str	r2, [r3, #32]

                /* Update the tail of the receive queue.  */
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800e97e:	e00b      	b.n	800e998 <_nx_tcp_socket_state_data_check+0x1b0>
            }
            else
            {

                /* Empty receive queue.  Set both the head and the tail pointers this packet.  */
                socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Setup a new delayed ACK timeout.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800e990:	4b8a      	ldr	r3, [pc, #552]	; (800ebbc <_nx_tcp_socket_state_data_check+0x3d4>)
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Increment the receive TCP packet count.  */
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e99e:	1c5a      	adds	r2, r3, #1
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800e9ac:	621a      	str	r2, [r3, #32]

            /* Calculate the next sequence number.  */
            socket_ptr -> nx_tcp_socket_rx_sequence =  packet_end_sequence;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9b2:	641a      	str	r2, [r3, #64]	; 0x40

            /* All packets can be acked. */
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e9ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9bc:	e147      	b.n	800ec4e <_nx_tcp_socket_state_data_check+0x466>
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* End of the simple case: add new packet towards the end of the recv queue.
           All packets in the receive queue are in sequence. */
    }
    else if (socket_ptr -> nx_tcp_socket_receive_queue_head == NX_NULL)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d11a      	bne.n	800e9fe <_nx_tcp_socket_state_data_check+0x216>
        if (drop_packet == NX_FALSE)
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f7fe fc16 	bl	800d200 <_nx_tcp_packet_send_ack>
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* There are no packets chained on the receive queue.  Simply add the
               new packet to the receive queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	683a      	ldr	r2, [r7, #0]
 800e9d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Increase the receive queue count. */
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Setup a new delayed ACK timeout.  */
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800e9ec:	4b73      	ldr	r3, [pc, #460]	; (800ebbc <_nx_tcp_socket_state_data_check+0x3d4>)
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	649a      	str	r2, [r3, #72]	; 0x48

            /* Mark the packet as being part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800e9fa:	621a      	str	r2, [r3, #32]
 800e9fc:	e127      	b.n	800ec4e <_nx_tcp_socket_state_data_check+0x466>

        /* Go through the received packet chain, and locate the first packet that the
           packet_begin_sequence is to the right of the end of it. */

        /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
        if (((INT)packet_begin_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) > 0)
 800e9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ea04:	1a9b      	subs	r3, r3, r2
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	dd05      	ble.n	800ea16 <_nx_tcp_socket_state_data_check+0x22e>
        {
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0e:	4619      	mov	r1, r3
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7fe fbf5 	bl	800d200 <_nx_tcp_packet_send_ack>
        }

        /* At this point, it is guaranteed that the receive queue contains packets. */
        search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ea1c:	657b      	str	r3, [r7, #84]	; 0x54

        previous_ptr = NX_NULL;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	653b      	str	r3, [r7, #80]	; 0x50

        while (search_ptr)
 800ea22:	e0ae      	b.n	800eb82 <_nx_tcp_socket_state_data_check+0x39a>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 800ea24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea26:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800ea2a:	d102      	bne.n	800ea32 <_nx_tcp_socket_state_data_check+0x24a>
            {
                /* We hit the end of the receive queue. */
                search_ptr = NX_NULL;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	657b      	str	r3, [r7, #84]	; 0x54

                /* Terminate the out-of-order search.  */
                break;
 800ea30:	e0ad      	b.n	800eb8e <_nx_tcp_socket_state_data_check+0x3a6>
            }

            /* Setup a pointer to header of this packet in the receive list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800ea32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	61fb      	str	r3, [r7, #28]

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	617b      	str	r3, [r7, #20]

            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	0f1b      	lsrs	r3, r3, #28
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	62bb      	str	r3, [r7, #40]	; 0x28

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 800ea48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	441a      	add	r2, r3
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	63fb      	str	r3, [r7, #60]	; 0x3c
             *        In this configuration, the incoming packet is completely to the right of      *
             *        search_ptr.  Move to the next search packet.                                  *
             *                                                                                      *
             ****************************************************************************************/
            /* packet_ptr is to the right of search_ptr */
            if (((INT)(packet_begin_sequence - search_end_sequence)) >= 0)
 800ea56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	db05      	blt.n	800ea6c <_nx_tcp_socket_state_data_check+0x284>
            {
                /* Move on to the next packet. */
                previous_ptr = search_ptr;
 800ea60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea62:	653b      	str	r3, [r7, #80]	; 0x50

                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ea64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea66:	6a1b      	ldr	r3, [r3, #32]
 800ea68:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search */
                continue;
 800ea6a:	e08a      	b.n	800eb82 <_nx_tcp_socket_state_data_check+0x39a>
             *              SSSSSSSSS                                                               *
             *        In this configuration, the incoming packet is completely to the left of       *
             *        search_ptr.  Incoming packet needs to be inserted in front of search ptr.     *
             *                                                                                      *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_end_sequence)) >= 0)
 800ea6c:	697a      	ldr	r2, [r7, #20]
 800ea6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f280 808a 	bge.w	800eb8c <_nx_tcp_socket_state_data_check+0x3a4>
             *        to search for contigous data, therefore no need to wake up user thread.       *
             *        Howerver may need to send out ACK if new packet is to the right of the seq    *
             *        number.                                                                       *
             *                                                                                      *
             ****************************************************************************************/
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 800ea78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	db0c      	blt.n	800ea9c <_nx_tcp_socket_state_data_check+0x2b4>
                (((INT)(search_end_sequence - packet_end_sequence)) >= 0))
 800ea82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea86:	1ad3      	subs	r3, r2, r3
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	db07      	blt.n	800ea9c <_nx_tcp_socket_state_data_check+0x2b4>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7fe fbb4 	bl	800d200 <_nx_tcp_packet_send_ack>

                /* Since packet is not queued, return NX_FALSE so the caller releases the packet. */
                return(NX_FALSE);
 800ea98:	2300      	movs	r3, #0
 800ea9a:	e1d8      	b.n	800ee4e <_nx_tcp_socket_state_data_check+0x666>
             *         Release existing packet, and insert new packet, then check for the next      *
             *         packet on the chain.  The next search may yield case (5).  Need to check     *
             *         for contingous data, may need to send ACK.                                   *
             *                                                                                      *
            ****************************************************************************************/
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	db3a      	blt.n	800eb1c <_nx_tcp_socket_state_data_check+0x334>
                (((INT)(packet_end_sequence - search_end_sequence) >= 0)))
 800eaa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaaa:	1ad3      	subs	r3, r2, r3
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	db35      	blt.n	800eb1c <_nx_tcp_socket_state_data_check+0x334>
            {
            NX_PACKET *tmp_ptr;
                /* Release the search_ptr, and move to the next packet on the chain. */
                tmp_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800eab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eab2:	6a1b      	ldr	r3, [r3, #32]
 800eab4:	613b      	str	r3, [r7, #16]

                /* Mark the packet as no longer being part of the TCP queue. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800eab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eab8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800eabc:	621a      	str	r2, [r3, #32]

                /* Decrease the packet queue count */
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800eac4:	1e5a      	subs	r2, r3, #1
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Adjust the receive window. */

                /* Release the search packet. */
                _nx_packet_release(search_ptr);
 800eacc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800eace:	f7fd f9c5 	bl	800be5c <_nx_packet_release>

#ifndef NX_DISABLE_TCP_INFO
                /* The new packet has been admitted to the receive queue. */

                /* Increment the TCP packet receive count and bytes received count.  */
                ip_ptr -> nx_ip_tcp_packets_received--;
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ead8:	1e5a      	subs	r2, r3, #1
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - search_begin_sequence);
 800eae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800eae6:	6979      	ldr	r1, [r7, #20]
 800eae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaea:	1acb      	subs	r3, r1, r3
 800eaec:	441a      	add	r2, r3
 800eaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

                /* Increment the TCP packet receive count and bytes received count for the socket.  */
                socket_ptr -> nx_tcp_socket_packets_received--;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eafa:	1e5a      	subs	r2, r3, #1
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - search_begin_sequence);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800eb08:	6979      	ldr	r1, [r7, #20]
 800eb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0c:	1acb      	subs	r3, r1, r3
 800eb0e:	441a      	add	r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#endif /* NX_DISABLE_TCP_INFO */

                /* Move to the next packet.  (note: no need to update previous_ptr. */
                search_ptr = tmp_ptr;
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search. */
                continue;
 800eb1a:	e032      	b.n	800eb82 <_nx_tcp_socket_state_data_check+0x39a>
             *                   SSSSSSSSSSSS                                                       *
             *        In this configuration, remove data from the back of the new packet,  insert   *
             *        packet into the chain, and terminate the search.  Need to search for          *
             *        contigous data, may need to send out ACK.                                     *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_begin_sequence)) >= 0)
 800eb1c:	697a      	ldr	r2, [r7, #20]
 800eb1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	db0d      	blt.n	800eb42 <_nx_tcp_socket_state_data_check+0x35a>
            {

                _nx_tcp_socket_state_data_trim(packet_ptr, (packet_end_sequence - search_begin_sequence));
 800eb26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	6838      	ldr	r0, [r7, #0]
 800eb30:	f7ff fd9a 	bl	800e668 <_nx_tcp_socket_state_data_trim>

                /* Update packet_data_length. */
                packet_data_length -= (packet_end_sequence - search_begin_sequence);
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb3c:	4413      	add	r3, r2
 800eb3e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Now the packet should be chained before search_ptr. */

                break;
 800eb40:	e025      	b.n	800eb8e <_nx_tcp_socket_state_data_check+0x3a6>
             *        insert the packet after the search packet and continue the search.  This may  *
             *        lead to case (2) and (3).                                                     *
             *                                                                                      *
             *                                                                                      *
             ***************************************************************************************/
            _nx_tcp_socket_state_data_trim(search_ptr, (ULONG)(search_end_sequence - packet_begin_sequence));
 800eb42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb46:	1ad3      	subs	r3, r2, r3
 800eb48:	4619      	mov	r1, r3
 800eb4a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800eb4c:	f7ff fd8c 	bl	800e668 <_nx_tcp_socket_state_data_trim>

#ifndef NX_DISABLE_TCP_INFO
            /* The new packet has been admitted to the receive queue. */

            /* Reduce the TCP bytes received count.  */
            ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - packet_begin_sequence);
 800eb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb52:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800eb56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb5a:	1acb      	subs	r3, r1, r3
 800eb5c:	441a      	add	r2, r3
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

            /* Reduce the TCP bytes received count for the socket.  */
            socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - packet_begin_sequence);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800eb6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb6e:	1acb      	subs	r3, r1, r3
 800eb70:	441a      	add	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#endif /* NX_DISABLE_TCP_INFO */

            /* Move to the next packet and continue; */
            previous_ptr = search_ptr;
 800eb78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb7a:	653b      	str	r3, [r7, #80]	; 0x50
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800eb7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb7e:	6a1b      	ldr	r3, [r3, #32]
 800eb80:	657b      	str	r3, [r7, #84]	; 0x54
        while (search_ptr)
 800eb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f47f af4d 	bne.w	800ea24 <_nx_tcp_socket_state_data_check+0x23c>
 800eb8a:	e000      	b.n	800eb8e <_nx_tcp_socket_state_data_check+0x3a6>
                break;
 800eb8c:	bf00      	nop
        }   /* End of while (search_ptr) */

        /* At this point, the logic (within the while loop) finds a location where this packet should be inserted. */
        if (previous_ptr == NX_NULL)
 800eb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d104      	bne.n	800eb9e <_nx_tcp_socket_state_data_check+0x3b6>
        {

            /* The packet needs to be inserted at the beginning of the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800eb9c:	e002      	b.n	800eba4 <_nx_tcp_socket_state_data_check+0x3bc>
        }
        else
        {

            /* The packet needs to be inserted after previous_ptr. */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = packet_ptr;
 800eb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	621a      	str	r2, [r3, #32]
        }

        if (search_ptr == NX_NULL)
 800eba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10a      	bne.n	800ebc0 <_nx_tcp_socket_state_data_check+0x3d8>
        {

            /* This packet is on the last one on the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	683a      	ldr	r2, [r7, #0]
 800ebae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800ebb8:	621a      	str	r2, [r3, #32]
 800ebba:	e004      	b.n	800ebc6 <_nx_tcp_socket_state_data_check+0x3de>
 800ebbc:	240022fc 	.word	0x240022fc
        }
        else
        {

            /* Chain search_ptr onto packet_ptr. */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = search_ptr;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ebc4:	621a      	str	r2, [r3, #32]

        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

        /* Increment the receive TCP packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ebcc:	1c5a      	adds	r2, r3, #1
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* End of the out-of-order search.  At this point, the packet has been inserted. */

        /* Now we need to figure out how much, if any, we can ACK.  */
        search_ptr =    socket_ptr -> nx_tcp_socket_receive_queue_head;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ebda:	657b      	str	r3, [r7, #84]	; 0x54

        /* Get the sequence number expected by the TCP receive socket. */
        expected_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe0:	64fb      	str	r3, [r7, #76]	; 0x4c
        do
        {

            /* Setup a pointer to header of this packet in the sent list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800ebe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	61fb      	str	r3, [r7, #28]


            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	0f1b      	lsrs	r3, r3, #28
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	62bb      	str	r3, [r7, #40]	; 0x28

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	617b      	str	r3, [r7, #20]

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 800ebf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	441a      	add	r2, r3
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	63fb      	str	r3, [r7, #60]	; 0x3c

            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 800ec06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	db1d      	blt.n	800ec4c <_nx_tcp_socket_state_data_check+0x464>
            {

                if ((INT)(search_end_sequence - expected_sequence) > 0)
 800ec10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec14:	1ad3      	subs	r3, r2, r3
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	dd0b      	ble.n	800ec32 <_nx_tcp_socket_state_data_check+0x44a>
                {
                    /* Sequence number is within this packet.  Advance sequence number. */
                    expected_sequence = search_end_sequence;
 800ec1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec1c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    socket_ptr -> nx_tcp_socket_rx_sequence = expected_sequence;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec22:	641a      	str	r2, [r3, #64]	; 0x40

                    acked_packets++;
 800ec24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec26:	3301      	adds	r3, #1
 800ec28:	63bb      	str	r3, [r7, #56]	; 0x38

                    /* Mark this packet as ready for retrieval.  */
                    /*lint -e{923} suppress cast of ULONG to pointer.  */
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 800ec2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec2c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800ec30:	61da      	str	r2, [r3, #28]
                /* Expected number is to the left of search_ptr.   Get out of the do-while loop!  */
                break;
            }

            /* Move the search pointer to the next queued receive packet.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ec32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec34:	6a1b      	ldr	r3, [r3, #32]
 800ec36:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if we are at the end of the queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800ec38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec3a:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800ec3e:	d101      	bne.n	800ec44 <_nx_tcp_socket_state_data_check+0x45c>
            {

                /* At the end, set the search pointer to NULL.  */
                search_ptr =  NX_NULL;
 800ec40:	2300      	movs	r3, #0
 800ec42:	657b      	str	r3, [r7, #84]	; 0x54

                /* Get out of the loop!  */
                break;
            }
#endif /* NX_ENABLE_LOW_WATERMARK */
        } while (search_ptr);
 800ec44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1cb      	bne.n	800ebe2 <_nx_tcp_socket_state_data_check+0x3fa>
 800ec4a:	e000      	b.n	800ec4e <_nx_tcp_socket_state_data_check+0x466>
                break;
 800ec4c:	bf00      	nop

#ifndef NX_DISABLE_TCP_INFO
    /* The new packet has been admitted to the receive queue. */

    /* Increment the TCP packet receive count and bytes received count.  */
    ip_ptr -> nx_ip_tcp_packets_received++;
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ec54:	1c5a      	adds	r2, r3, #1
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    ip_ptr -> nx_ip_tcp_bytes_received += packet_data_length;
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ec62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec64:	441a      	add	r2, r3
 800ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* Increment the TCP packet receive count and bytes received count for the socket.  */
    socket_ptr -> nx_tcp_socket_packets_received++;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    socket_ptr -> nx_tcp_socket_bytes_received += packet_data_length;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ec80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec82:	441a      	add	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

    /* Check if the rx sequence number has been updated.  */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d011      	beq.n	800ecb8 <_nx_tcp_socket_state_data_check+0x4d0>
    {

        /* Decrease the receive window size since rx_sequence is updated.  */
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec9e:	1acb      	subs	r3, r1, r3
 800eca0:	441a      	add	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	675a      	str	r2, [r3, #116]	; 0x74

        /* Update the rx_window_last_sent for SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98.  */
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ecb0:	1acb      	subs	r3, r1, r3
 800ecb2:	441a      	add	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifdef NX_TCP_MAX_OUT_OF_ORDER_PACKETS
    /* Does the count of out of order packets exceed the defined value? */
    if ((socket_ptr -> nx_tcp_socket_receive_queue_count - acked_packets) >
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ecbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	2b08      	cmp	r3, #8
 800ecc4:	f240 8089 	bls.w	800edda <_nx_tcp_socket_state_data_check+0x5f2>
        NX_TCP_MAX_OUT_OF_ORDER_PACKETS)
    {

        /* Yes it is. Remove the last packet in queue. */
        socket_ptr -> nx_tcp_socket_receive_queue_tail -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ecce:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800ecd2:	621a      	str	r2, [r3, #32]
        if (socket_ptr -> nx_tcp_socket_receive_queue_count > 1)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d91d      	bls.n	800ed1a <_nx_tcp_socket_state_data_check+0x532>
        {

            /* Find the previous packet of tail. */
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ece4:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800ece6:	e002      	b.n	800ecee <_nx_tcp_socket_state_data_check+0x506>
            {
                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ece8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecea:	6a1b      	ldr	r3, [r3, #32]
 800ecec:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800ecee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf0:	6a1a      	ldr	r2, [r3, #32]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d1f5      	bne.n	800ece8 <_nx_tcp_socket_state_data_check+0x500>
            }

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fd f8aa 	bl	800be5c <_nx_packet_release>

            /* Setup the tail packet. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = search_ptr;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed0c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 800ed10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed12:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800ed16:	621a      	str	r2, [r3, #32]
 800ed18:	e00d      	b.n	800ed36 <_nx_tcp_socket_state_data_check+0x54e>
        }
        else
        {

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fd f89b 	bl	800be5c <_nx_packet_release>

            /* Clear the head and tail packets. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = NX_NULL;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = NX_NULL;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        }

        /* Decrease receive queue count. */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ed3c:	1e5a      	subs	r2, r3, #1
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    /* At this point, we can use the packet TCP header pointers since the received
       packet is already queued.  */

    /* Any packets for receving? */
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800ed44:	e049      	b.n	800edda <_nx_tcp_socket_state_data_check+0x5f2>
    {

        /* Setup a pointer to the first queued packet.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ed4c:	603b      	str	r3, [r7, #0]
        /* Remove it from the queue.  */

        /* Simply update the head pointer of the queue.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	6a1a      	ldr	r2, [r3, #32]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Mark the packet as no longer being part of the TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800ed5e:	621a      	str	r2, [r3, #32]

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	2200      	movs	r2, #0
 800ed64:	61da      	str	r2, [r3, #28]

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ed6c:	1e5a      	subs	r2, r3, #1
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Adjust the packet for delivery to the suspended thread.  */

        /* Setup a pointer to the TCP header of this packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Calculate the header size for this packet.  */
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ed7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	0f1b      	lsrs	r3, r3, #28
 800ed80:	009b      	lsls	r3, r3, #2
 800ed82:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Adjust the packet prepend pointer and length to position past the TCP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	689a      	ldr	r2, [r3, #8]
 800ed88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8a:	441a      	add	r2, r3
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	1ad2      	subs	r2, r2, r3
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup a pointer to the first thread suspended on the receive queue.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800eda2:	60fb      	str	r3, [r7, #12]

        /* Place the packet pointer in the return pointer.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eda8:	683a      	ldr	r2, [r7, #0]
 800edaa:	601a      	str	r2, [r3, #0]

        /* Increase the receive window size.  */
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb4:	441a      	add	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	675a      	str	r2, [r3, #116]	; 0x74

        /* Remove the suspended thread from the list.  */

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800edc0:	1e5a      	subs	r2, r3, #1
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Decrement the acked_packets count. */
        acked_packets--;
 800edc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edca:	3b01      	subs	r3, #1
 800edcc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Resume thread.  */
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	33ec      	adds	r3, #236	; 0xec
 800edd2:	2100      	movs	r1, #0
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 fafd 	bl	800f3d4 <_nx_tcp_socket_thread_resume>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800edda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d004      	beq.n	800edea <_nx_tcp_socket_state_data_check+0x602>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1ad      	bne.n	800ed46 <_nx_tcp_socket_state_data_check+0x55e>
    }

    /* Is the queue empty?.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d107      	bne.n	800ee04 <_nx_tcp_socket_state_data_check+0x61c>
    {

        /* Yes. Set both head and tail pointers to NULL.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }

    /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
       RFC1122, Section4.2.3.3, Page97-98. */
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee0c:	1ad2      	subs	r2, r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee12:	085b      	lsrs	r3, r3, #1
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d301      	bcc.n	800ee1c <_nx_tcp_socket_state_data_check+0x634>
    {

        /* Need to send ACK for window update.  */
        need_ack = NX_TRUE;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* If the incoming packet caused the sequence number to move forward,
       indicating the new piece of data is in order, in sequence, and valid for receiving. */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d009      	beq.n	800ee3a <_nx_tcp_socket_state_data_check+0x652>
    {
        /* Determine if there is a socket receive notification function specified.  */
        if (socket_ptr -> nx_tcp_receive_callback)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d004      	beq.n	800ee3a <_nx_tcp_socket_state_data_check+0x652>
        {

            /* Yes, notification is requested.  Call the application's receive notification
               function for this socket.  */
            (socket_ptr -> nx_tcp_receive_callback)(socket_ptr);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	4798      	blx	r3
            }
        }
#endif
    }

    if (need_ack == NX_TRUE)
 800ee3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d105      	bne.n	800ee4c <_nx_tcp_socket_state_data_check+0x664>
    {

        /* Need to send ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee44:	4619      	mov	r1, r3
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f7fe f9da 	bl	800d200 <_nx_tcp_packet_send_ack>
    }

    /* Return true since the packet was queued.  */
    return(NX_TRUE);
 800ee4c:	2301      	movs	r3, #1
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3758      	adds	r7, #88	; 0x58
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop

0800ee58 <_nx_tcp_socket_state_established>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_established(NX_TCP_SOCKET *socket_ptr)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
#if !defined(NX_DISABLE_TCP_INFO) || defined(TX_ENABLE_EVENT_TRACE)
NX_IP *ip_ptr;


    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ee66:	60fb      	str	r3, [r7, #12]
#endif
    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d031      	beq.n	800eed6 <_nx_tcp_socket_state_established+0x7e>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d12b      	bne.n	800eed6 <_nx_tcp_socket_state_established+0x7e>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP disconnections count.  */
        ip_ptr -> nx_ip_tcp_disconnections++;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ee84:	1c5a      	adds	r2, r3, #1
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSE_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* The FIN bit is set, we need to go into the finished state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2206      	movs	r2, #6
 800ee90:	639a      	str	r2, [r3, #56]	; 0x38

        /* Increment the received sequence.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee96:	1c5a      	adds	r2, r3, #1
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Loop to release all threads suspended while trying to receive on the socket.  */
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800ee9c:	e006      	b.n	800eeac <_nx_tcp_socket_state_established+0x54>
        {

            /* Release the head of the receive suspension list. */
            _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800eea4:	2100      	movs	r1, #0
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe fc00 	bl	800d6ac <_nx_tcp_receive_cleanup>
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d1f3      	bne.n	800ee9e <_nx_tcp_socket_state_established+0x46>
        }

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eeba:	4619      	mov	r1, r3
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7fe f99f 	bl	800d200 <_nx_tcp_packet_send_ack>

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d004      	beq.n	800eed6 <_nx_tcp_socket_state_established+0x7e>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	4798      	blx	r3
        }
    }
}
 800eed6:	bf00      	nop
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
	...

0800eee0 <_nx_tcp_socket_state_fin_wait1>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait1(NX_TCP_SOCKET *socket_ptr)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]


    /* Determine if the peer has proper ACK number but FIN is not sent,
       move into the FIN WAIT 2 state and do nothing else.  */
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00c      	beq.n	800ef0c <_nx_tcp_socket_state_fin_wait1+0x2c>
        (socket_ptr -> nx_tcp_socket_fin_received == NX_FALSE))
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d107      	bne.n	800ef0c <_nx_tcp_socket_state_fin_wait1+0x2c>
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_FIN_WAIT_2, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* We have a legitimate ACK message.  Simply move into the WAIT FIN 2 state
           for the other side to finish its processing and disconnect.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2208      	movs	r2, #8
 800ef00:	639a      	str	r2, [r3, #56]	; 0x38

        /* Otherwise, simply clear the FIN timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800ef0a:	e04e      	b.n	800efaa <_nx_tcp_socket_state_fin_wait1+0xca>
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d02f      	beq.n	800ef76 <_nx_tcp_socket_state_fin_wait1+0x96>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d129      	bne.n	800ef76 <_nx_tcp_socket_state_fin_wait1+0x96>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	220a      	movs	r2, #10
 800ef26:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800ef28:	4b22      	ldr	r3, [pc, #136]	; (800efb4 <_nx_tcp_socket_state_fin_wait1+0xd4>)
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef40:	4619      	mov	r1, r3
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7fe f95c 	bl	800d200 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d006      	beq.n	800ef60 <_nx_tcp_socket_state_fin_wait1+0x80>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ef58:	2100      	movs	r1, #0
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f000 fa3a 	bl	800f3d4 <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d01f      	beq.n	800efaa <_nx_tcp_socket_state_fin_wait1+0xca>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	4798      	blx	r3
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800ef74:	e019      	b.n	800efaa <_nx_tcp_socket_state_fin_wait1+0xca>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d014      	beq.n	800efaa <_nx_tcp_socket_state_fin_wait1+0xca>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d10e      	bne.n	800efaa <_nx_tcp_socket_state_fin_wait1+0xca>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSING, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the CLOSING state for simultaneous close situation.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2209      	movs	r2, #9
 800ef90:	639a      	str	r2, [r3, #56]	; 0x38

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef96:	1c5a      	adds	r2, r3, #1
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa0:	4619      	mov	r1, r3
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f7fe f92c 	bl	800d200 <_nx_tcp_packet_send_ack>
    }
}
 800efa8:	e7ff      	b.n	800efaa <_nx_tcp_socket_state_fin_wait1+0xca>
 800efaa:	bf00      	nop
 800efac:	3708      	adds	r7, #8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	240022f8 	.word	0x240022f8

0800efb8 <_nx_tcp_socket_state_fin_wait2>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait2(NX_TCP_SOCKET *socket_ptr)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]


    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d02e      	beq.n	800f028 <_nx_tcp_socket_state_fin_wait2+0x70>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d128      	bne.n	800f028 <_nx_tcp_socket_state_fin_wait2+0x70>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	220a      	movs	r2, #10
 800efda:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime).  */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800efdc:	4b14      	ldr	r3, [pc, #80]	; (800f030 <_nx_tcp_socket_state_fin_wait2+0x78>)
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efea:	1c5a      	adds	r2, r3, #1
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eff4:	4619      	mov	r1, r3
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7fe f902 	bl	800d200 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f002:	2b00      	cmp	r3, #0
 800f004:	d006      	beq.n	800f014 <_nx_tcp_socket_state_fin_wait2+0x5c>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f00c:	2100      	movs	r1, #0
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 f9e0 	bl	800f3d4 <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d004      	beq.n	800f028 <_nx_tcp_socket_state_fin_wait2+0x70>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	4798      	blx	r3
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
}
 800f028:	bf00      	nop
 800f02a:	3708      	adds	r7, #8
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	240022f8 	.word	0x240022f8

0800f034 <_nx_tcp_socket_state_last_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_last_ack(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]

    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f046:	2b00      	cmp	r3, #0
 800f048:	d01a      	beq.n	800f080 <_nx_tcp_socket_state_last_ack+0x4c>
    {

        /*   If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	689a      	ldr	r2, [r3, #8]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f052:	429a      	cmp	r2, r3
 800f054:	d114      	bne.n	800f080 <_nx_tcp_socket_state_last_ack+0x4c>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	685a      	ldr	r2, [r3, #4]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800f05e:	429a      	cmp	r2, r3
 800f060:	d10e      	bne.n	800f080 <_nx_tcp_socket_state_last_ack+0x4c>
        {

            /* Cleanup the transmission control block.  */
            _nx_tcp_socket_block_cleanup(socket_ptr);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7fe fbca 	bl	800d7fc <_nx_tcp_socket_block_cleanup>

            /* Determine if we need to wake a thread suspended on the disconnection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d006      	beq.n	800f080 <_nx_tcp_socket_state_last_ack+0x4c>
            {

                /* Resume suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f078:	2100      	movs	r1, #0
 800f07a:	4618      	mov	r0, r3
 800f07c:	f000 f9aa 	bl	800f3d4 <_nx_tcp_socket_thread_resume>
                (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
            }
#endif
        }
    }
}
 800f080:	bf00      	nop
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <_nx_tcp_socket_state_syn_received>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_received(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  If it is and
       if it is proper, move into the ESTABLISHED state.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d04d      	beq.n	800f13a <_nx_tcp_socket_state_syn_received+0xb2>
    {

        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence)
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	689a      	ldr	r2, [r3, #8]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d143      	bne.n	800f132 <_nx_tcp_socket_state_syn_received+0xaa>
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Save the window size.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
                tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	b29a      	uxth	r2, r3
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	655a      	str	r2, [r3, #84]	; 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;

#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

            /* Set the initial slow start threshold to be the advertised window size. */
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	635a      	str	r2, [r3, #52]	; 0x34

            /* Set the initial congestion control window size. */
            /* Section 3.1, Page 5, RFC5681. */
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d004      	beq.n	800f0d0 <_nx_tcp_socket_state_syn_received+0x48>
            {

                /* Set the initial congestion control window size to be the mss. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6a1a      	ldr	r2, [r3, #32]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	659a      	str	r2, [r3, #88]	; 0x58
 800f0ce:	e01d      	b.n	800f10c <_nx_tcp_socket_state_syn_received+0x84>
            }
            else
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a1b      	ldr	r3, [r3, #32]
 800f0d4:	009a      	lsls	r2, r3, #2
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	659a      	str	r2, [r3, #88]	; 0x58
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6a1b      	ldr	r3, [r3, #32]
 800f0de:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800f0e2:	d306      	bcc.n	800f0f2 <_nx_tcp_socket_state_syn_received+0x6a>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6a1b      	ldr	r3, [r3, #32]
 800f0ec:	1ad2      	subs	r2, r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	659a      	str	r2, [r3, #88]	; 0x58
                }
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6a1b      	ldr	r3, [r3, #32]
 800f0f6:	f640 028e 	movw	r2, #2190	; 0x88e
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d906      	bls.n	800f10c <_nx_tcp_socket_state_syn_received+0x84>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a1b      	ldr	r3, [r3, #32]
 800f106:	1ad2      	subs	r2, r2, r3
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	659a      	str	r2, [r3, #88]	; 0x58
                }
            }

            /* Move into the ESTABLISHED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2205      	movs	r2, #5
 800f110:	639a      	str	r2, [r3, #56]	; 0x38
                socket_ptr -> nx_tcp_socket_keepalive_timeout =  NX_TCP_KEEPALIVE_INITIAL;
                socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
            }
#endif
            /* Update the value of nx_tcp_socket_rx_sequence_acked */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	645a      	str	r2, [r3, #68]	; 0x44

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800f120:	2b00      	cmp	r3, #0
 800f122:	d00a      	beq.n	800f13a <_nx_tcp_socket_state_syn_received+0xb2>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	33fc      	adds	r3, #252	; 0xfc
 800f128:	2100      	movs	r1, #0
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 f952 	bl	800f3d4 <_nx_tcp_socket_thread_resume>

            /* Send the RST packet.  */
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
        }
    }
}
 800f130:	e003      	b.n	800f13a <_nx_tcp_socket_state_syn_received+0xb2>
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7fe f9d3 	bl	800d4e0 <_nx_tcp_packet_send_rst>
}
 800f13a:	bf00      	nop
 800f13c:	3708      	adds	r7, #8
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}

0800f142 <_nx_tcp_socket_state_syn_sent>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_sent(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr, NX_PACKET *packet_ptr)
{
 800f142:	b580      	push	{r7, lr}
 800f144:	b084      	sub	sp, #16
 800f146:	af00      	add	r7, sp, #0
 800f148:	60f8      	str	r0, [r7, #12]
 800f14a:	60b9      	str	r1, [r7, #8]
 800f14c:	607a      	str	r2, [r7, #4]
#ifndef TX_ENABLE_EVENT_TRACE
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Check if a RST is present. */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f156:	2b00      	cmp	r3, #0
 800f158:	d019      	beq.n	800f18e <_nx_tcp_socket_state_syn_sent+0x4c>
    {

        /* Check if the ACK was acceptable. According to RFC 793, Section 3.9, Page 67.  */
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 80d2 	beq.w	800f30c <_nx_tcp_socket_state_syn_sent+0x1ca>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	689a      	ldr	r2, [r3, #8]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f170:	429a      	cmp	r2, r3
 800f172:	f040 80cb 	bne.w	800f30c <_nx_tcp_socket_state_syn_sent+0x1ca>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f17c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800f180:	3201      	adds	r2, #1
 800f182:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f7fe fb65 	bl	800d856 <_nx_tcp_socket_connection_reset>
        }

        /* Finished processing, simply return!  */
        return;
 800f18c:	e0be      	b.n	800f30c <_nx_tcp_socket_state_syn_sent+0x1ca>
    }
    /* Determine if a valid SYN/ACK is present.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f196:	2b00      	cmp	r3, #0
 800f198:	d05d      	beq.n	800f256 <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d057      	beq.n	800f256 <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	689a      	ldr	r2, [r3, #8]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d151      	bne.n	800f256 <_nx_tcp_socket_state_syn_sent+0x114>
        /* Yes, this is a proper SYN/ACK message.  We need to send an ACK
           back the other direction before we go into the ESTABLISHED
           state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	1c5a      	adds	r2, r3, #1
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	655a      	str	r2, [r3, #84]	; 0x54
        }

#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d004      	beq.n	800f1e8 <_nx_tcp_socket_state_syn_sent+0xa6>
        {

            /* Set the initial congestion control window size to be the mss. */
            socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6a1a      	ldr	r2, [r3, #32]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	659a      	str	r2, [r3, #88]	; 0x58
 800f1e6:	e01d      	b.n	800f224 <_nx_tcp_socket_state_syn_sent+0xe2>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	6a1b      	ldr	r3, [r3, #32]
 800f1ec:	009a      	lsls	r2, r3, #2
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	659a      	str	r2, [r3, #88]	; 0x58
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6a1b      	ldr	r3, [r3, #32]
 800f1f6:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800f1fa:	d306      	bcc.n	800f20a <_nx_tcp_socket_state_syn_sent+0xc8>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6a1b      	ldr	r3, [r3, #32]
 800f204:	1ad2      	subs	r2, r2, r3
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	659a      	str	r2, [r3, #88]	; 0x58
            }
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	f640 028e 	movw	r2, #2190	; 0x88e
 800f212:	4293      	cmp	r3, r2
 800f214:	d906      	bls.n	800f224 <_nx_tcp_socket_state_syn_sent+0xe2>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	1ad2      	subs	r2, r2, r3
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	659a      	str	r2, [r3, #88]	; 0x58
            }
        }

        /* Send the ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f228:	4619      	mov	r1, r3
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f7fd ffe8 	bl	800d200 <_nx_tcp_packet_send_ack>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the ESTABLISHED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2205      	movs	r2, #5
 800f234:	639a      	str	r2, [r3, #56]	; 0x38

        /* Clear the socket timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
        }
#endif

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800f244:	2b00      	cmp	r3, #0
 800f246:	d062      	beq.n	800f30e <_nx_tcp_socket_state_syn_sent+0x1cc>
        {

            /* Resume the suspended thread.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	33fc      	adds	r3, #252	; 0xfc
 800f24c:	2100      	movs	r1, #0
 800f24e:	4618      	mov	r0, r3
 800f250:	f000 f8c0 	bl	800f3d4 <_nx_tcp_socket_thread_resume>
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800f254:	e05b      	b.n	800f30e <_nx_tcp_socket_state_syn_sent+0x1cc>
        }
    }
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d043      	beq.n	800f2ea <_nx_tcp_socket_state_syn_sent+0x1a8>
             (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)))
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d13d      	bne.n	800f2ea <_nx_tcp_socket_state_syn_sent+0x1a8>

        /* Simultaneous Connection Synchronization,
           A SYN message was received.  We need to send both a SYN and ACK and move to the SYN RECEIVED state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	1c5a      	adds	r2, r3, #1
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	641a      	str	r2, [r3, #64]	; 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_rcv_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6a1b      	ldr	r3, [r3, #32]
 800f28e:	009a      	lsls	r2, r3, #2
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	659a      	str	r2, [r3, #88]	; 0x58
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6a1b      	ldr	r3, [r3, #32]
 800f298:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800f29c:	d306      	bcc.n	800f2ac <_nx_tcp_socket_state_syn_sent+0x16a>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	6a1b      	ldr	r3, [r3, #32]
 800f2a6:	1ad2      	subs	r2, r2, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	659a      	str	r2, [r3, #88]	; 0x58
        }
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	6a1b      	ldr	r3, [r3, #32]
 800f2b0:	f640 028e 	movw	r2, #2190	; 0x88e
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d906      	bls.n	800f2c6 <_nx_tcp_socket_state_syn_sent+0x184>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6a1b      	ldr	r3, [r3, #32]
 800f2c0:	1ad2      	subs	r2, r2, r3
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	65da      	str	r2, [r3, #92]	; 0x5c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_SYN_RECEIVED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the SYN RECEIVED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2204      	movs	r2, #4
 800f2d0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send the SYN packet.  */
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f7fe f930 	bl	800d548 <_nx_tcp_packet_send_syn>
 800f2e8:	e011      	b.n	800f30e <_nx_tcp_socket_state_syn_sent+0x1cc>
    }
    /* Check for an invalid response to an attempted connection.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d00b      	beq.n	800f30e <_nx_tcp_socket_state_syn_sent+0x1cc>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number != socket_ptr -> nx_tcp_socket_tx_sequence))
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	689a      	ldr	r2, [r3, #8]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d005      	beq.n	800f30e <_nx_tcp_socket_state_syn_sent+0x1cc>
        /* Invalid response was received, it is likely that the other side still
           thinks a previous connection is active.  Send a reset (RST) message to
           the other side to clear any previous connection.  */

        /* Send the RST packet.  */
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 800f302:	68b9      	ldr	r1, [r7, #8]
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	f7fe f8eb 	bl	800d4e0 <_nx_tcp_packet_send_rst>
 800f30a:	e000      	b.n	800f30e <_nx_tcp_socket_state_syn_sent+0x1cc>
        return;
 800f30c:	bf00      	nop
    }
}
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <_nx_tcp_socket_state_transmit_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_transmit_check(NX_TCP_SOCKET *socket_ptr)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]

ULONG tx_window_current;

    /* Now check to see if there is a thread suspended attempting to transmit.  */
    if (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f322:	2b00      	cmp	r3, #0
 800f324:	d051      	beq.n	800f3ca <_nx_tcp_socket_state_transmit_check+0xb6>
        /* Yes, a thread is suspended attempting to transmit when the transmit window
           is lower than its request size.  Determine if the current transmit window
           size can now accommodate the request.  */

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f32e:	429a      	cmp	r2, r3
 800f330:	d919      	bls.n	800f366 <_nx_tcp_socket_state_transmit_check+0x52>
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f336:	60fb      	str	r3, [r7, #12]

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d003      	beq.n	800f348 <_nx_tcp_socket_state_transmit_check+0x34>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800f344:	2b02      	cmp	r3, #2
 800f346:	d105      	bne.n	800f354 <_nx_tcp_socket_state_transmit_check+0x40>
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a1b      	ldr	r3, [r3, #32]
 800f34c:	005b      	lsls	r3, r3, #1
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	4413      	add	r3, r2
 800f352:	60fb      	str	r3, [r7, #12]
            }

            /* Make sure the tx_window_current is less or equal to swnd. */
            if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_window_advertised)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d906      	bls.n	800f36c <_nx_tcp_socket_state_transmit_check+0x58>
            {
                tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f362:	60fb      	str	r3, [r7, #12]
 800f364:	e002      	b.n	800f36c <_nx_tcp_socket_state_transmit_check+0x58>
            }
        }
        else
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f36a:	60fb      	str	r3, [r7, #12]
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	429a      	cmp	r2, r3
 800f374:	d905      	bls.n	800f382 <_nx_tcp_socket_state_transmit_check+0x6e>
        {
            tx_window_current -= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f37a:	68fa      	ldr	r2, [r7, #12]
 800f37c:	1ad3      	subs	r3, r2, r3
 800f37e:	60fb      	str	r3, [r7, #12]
 800f380:	e001      	b.n	800f386 <_nx_tcp_socket_state_transmit_check+0x72>
        }
        else    /* Set tx_window_current to zero. */
        {
            tx_window_current = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	60fb      	str	r3, [r7, #12]
        }


        /* Determine if the current transmit window (received from the connected socket)
           is large enough to handle the transmit.  */
        if ((tx_window_current) &&
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d01e      	beq.n	800f3ca <_nx_tcp_socket_state_transmit_check+0xb6>
            (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        if ((tx_window_current) &&
 800f398:	429a      	cmp	r2, r3
 800f39a:	d216      	bcs.n	800f3ca <_nx_tcp_socket_state_transmit_check+0xb6>
        {

            /* Is NetX set up with a windows update callback? */
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d004      	beq.n	800f3b0 <_nx_tcp_socket_state_transmit_check+0x9c>
            {

                /* Yes; Call this function when there is a change in transmit windows size. */
                (socket_ptr -> nx_tcp_socket_window_update_notify)(socket_ptr);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	4798      	blx	r3
            }


            /* Decrement the suspension count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800f3b6:	1e5a      	subs	r2, r3, #1
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

            /* Remove the suspended thread from the list.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	33f4      	adds	r3, #244	; 0xf4
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 f805 	bl	800f3d4 <_nx_tcp_socket_thread_resume>
        }
    }
}
 800f3ca:	bf00      	nop
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
	...

0800f3d4 <_nx_tcp_socket_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_resume(TX_THREAD **suspension_list_head, UINT status)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b088      	sub	sp, #32
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f3de:	f3ef 8310 	mrs	r3, PRIMASK
 800f3e2:	617b      	str	r3, [r7, #20]
    return(posture);
 800f3e4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f3e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f3e8:	b672      	cpsid	i
    return(int_posture);
 800f3ea:	693b      	ldr	r3, [r7, #16]

TX_THREAD *thread_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800f3ec:	61fb      	str	r3, [r7, #28]

    /* Pickup the thread pointer.  */
    thread_ptr =  *suspension_list_head;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	61bb      	str	r3, [r7, #24]

    /* Determine if there still is a thread suspended.  */
    if (thread_ptr)
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d02c      	beq.n	800f454 <_nx_tcp_socket_thread_resume+0x80>
    {

        /* Determine if there are anymore threads on the suspension list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3fe:	69ba      	ldr	r2, [r7, #24]
 800f400:	429a      	cmp	r2, r3
 800f402:	d103      	bne.n	800f40c <_nx_tcp_socket_thread_resume+0x38>
        {

            /* Only this thread is on the suspension list.  Simply set the
               list head to NULL to reflect an empty suspension list.  */
            *suspension_list_head =  TX_NULL;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	601a      	str	r2, [r3, #0]
 800f40a:	e00d      	b.n	800f428 <_nx_tcp_socket_thread_resume+0x54>
        {

            /* More than one thread is on the suspension list, we need to
               adjust the link pointers and move the next entry to the
               front of the list.  */
            *suspension_list_head =  thread_ptr -> tx_thread_suspended_next;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	601a      	str	r2, [r3, #0]

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800f418:	69ba      	ldr	r2, [r7, #24]
 800f41a:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f41c:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800f422:	69ba      	ldr	r2, [r7, #24]
 800f424:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f426:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Prepare for resumption of the thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	2200      	movs	r2, #0
 800f42c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800f42e:	4b0e      	ldr	r3, [pc, #56]	; (800f468 <_nx_tcp_socket_thread_resume+0x94>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	3301      	adds	r3, #1
 800f434:	4a0c      	ldr	r2, [pc, #48]	; (800f468 <_nx_tcp_socket_thread_resume+0x94>)
 800f436:	6013      	str	r3, [r2, #0]
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f383 8810 	msr	PRIMASK, r3
}
 800f442:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  status;
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f44c:	69b8      	ldr	r0, [r7, #24]
 800f44e:	f004 fa09 	bl	8013864 <_tx_thread_system_resume>
    {

        /* Nothing was suspended.  Simply restore interrupts.  */
        TX_RESTORE
    }
}
 800f452:	e005      	b.n	800f460 <_nx_tcp_socket_thread_resume+0x8c>
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	f383 8810 	msr	PRIMASK, r3
}
 800f45e:	bf00      	nop
 800f460:	bf00      	nop
 800f462:	3720      	adds	r7, #32
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	240023cc 	.word	0x240023cc

0800f46c <_nx_tcp_socket_transmit_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_transmit_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08a      	sub	sp, #40	; 0x28
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f47a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2200      	movs	r2, #0
 800f480:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    socket_ptr -> nx_tcp_socket_transmit_sent_tail =  NX_NULL;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800f48c:	e02c      	b.n	800f4e8 <_nx_tcp_socket_transmit_queue_flush+0x7c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f48e:	f3ef 8310 	mrs	r3, PRIMASK
 800f492:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f494:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f496:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f498:	b672      	cpsid	i
    return(int_posture);
 800f49a:	697b      	ldr	r3, [r7, #20]
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f49c:	623b      	str	r3, [r7, #32]

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a0:	6a1b      	ldr	r3, [r3, #32]
 800f4a2:	61fb      	str	r3, [r7, #28]

        /* Mark the packet as no longer being in a TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f4aa:	621a      	str	r2, [r3, #32]

        /* Has the packet been transmitted?  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	69db      	ldr	r3, [r3, #28]
 800f4b0:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800f4b4:	d109      	bne.n	800f4ca <_nx_tcp_socket_transmit_queue_flush+0x5e>
 800f4b6:	6a3b      	ldr	r3, [r7, #32]
 800f4b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	f383 8810 	msr	PRIMASK, r3
}
 800f4c0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800f4c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4c4:	f7fc fcca 	bl	800be5c <_nx_packet_release>
 800f4c8:	e005      	b.n	800f4d6 <_nx_tcp_socket_transmit_queue_flush+0x6a>
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
 800f4cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f383 8810 	msr	PRIMASK, r3
}
 800f4d4:	bf00      	nop
            /* Just restore interrupts.  */
            TX_RESTORE
        }

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f4e0:	1e5a      	subs	r2, r3, #1
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1cd      	bne.n	800f48e <_nx_tcp_socket_transmit_queue_flush+0x22>
    }
}
 800f4f2:	bf00      	nop
 800f4f4:	bf00      	nop
 800f4f6:	3728      	adds	r7, #40	; 0x28
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <_nx_tcp_transmit_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_transmit_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b08e      	sub	sp, #56	; 0x38
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f506:	f3ef 8310 	mrs	r3, PRIMASK
 800f50a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800f50e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800f510:	b672      	cpsid	i
    return(int_posture);
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_IP         *ip_ptr;

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800f514:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f51a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800f51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d004      	beq.n	800f52c <_nx_tcp_transmit_cleanup+0x30>
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4a49      	ldr	r2, [pc, #292]	; (800f64c <_nx_tcp_transmit_cleanup+0x150>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d006      	beq.n	800f53a <_nx_tcp_transmit_cleanup+0x3e>
 800f52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f530:	6a3b      	ldr	r3, [r7, #32]
 800f532:	f383 8810 	msr	PRIMASK, r3
}
 800f536:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800f538:	e085      	b.n	800f646 <_nx_tcp_transmit_cleanup+0x14a>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <_nx_tcp_transmit_cleanup+0x54>
 800f542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f544:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	f383 8810 	msr	PRIMASK, r3
}
 800f54c:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800f54e:	e07a      	b.n	800f646 <_nx_tcp_transmit_cleanup+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f550:	f3ef 8305 	mrs	r3, IPSR
 800f554:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f556:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800f558:	4b3d      	ldr	r3, [pc, #244]	; (800f650 <_nx_tcp_transmit_cleanup+0x154>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4313      	orrs	r3, r2
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d104      	bne.n	800f56c <_nx_tcp_transmit_cleanup+0x70>
 800f562:	4b3c      	ldr	r3, [pc, #240]	; (800f654 <_nx_tcp_transmit_cleanup+0x158>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4a3c      	ldr	r2, [pc, #240]	; (800f658 <_nx_tcp_transmit_cleanup+0x15c>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d116      	bne.n	800f59a <_nx_tcp_transmit_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a3b      	ldr	r2, [pc, #236]	; (800f65c <_nx_tcp_transmit_cleanup+0x160>)
 800f570:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800f572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	f383 8810 	msr	PRIMASK, r3
}
 800f584:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800f586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f588:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f58c:	2200      	movs	r2, #0
 800f58e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f592:	4618      	mov	r0, r3
 800f594:	f002 fae2 	bl	8011b5c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800f598:	e055      	b.n	800f646 <_nx_tcp_transmit_cleanup+0x14a>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d104      	bne.n	800f5b4 <_nx_tcp_transmit_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  NX_NULL;
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800f5b2:	e00e      	b.n	800f5d2 <_nx_tcp_transmit_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f5c6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f5d0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800f5d8:	1e5a      	subs	r2, r3, #1
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5e4:	2b0c      	cmp	r3, #12
 800f5e6:	d128      	bne.n	800f63a <_nx_tcp_transmit_cleanup+0x13e>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which transmit error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 800f5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ec:	2b05      	cmp	r3, #5
 800f5ee:	d004      	beq.n	800f5fa <_nx_tcp_transmit_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2238      	movs	r2, #56	; 0x38
 800f5f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800f5f8:	e010      	b.n	800f61c <_nx_tcp_transmit_cleanup+0x120>
            }
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800f600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f602:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f606:	429a      	cmp	r2, r3
 800f608:	d204      	bcs.n	800f614 <_nx_tcp_transmit_cleanup+0x118>
            {

                /* Not a queue depth problem, return a window overflow error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_WINDOW_OVERFLOW;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2239      	movs	r2, #57	; 0x39
 800f60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800f612:	e003      	b.n	800f61c <_nx_tcp_transmit_cleanup+0x120>
            }
            else
            {

                /* Return a transmit queue exceeded error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_TX_QUEUE_DEPTH;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2249      	movs	r2, #73	; 0x49
 800f618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f61c:	4b10      	ldr	r3, [pc, #64]	; (800f660 <_nx_tcp_transmit_cleanup+0x164>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3301      	adds	r3, #1
 800f622:	4a0f      	ldr	r2, [pc, #60]	; (800f660 <_nx_tcp_transmit_cleanup+0x164>)
 800f624:	6013      	str	r3, [r2, #0]
 800f626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f628:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	f383 8810 	msr	PRIMASK, r3
}
 800f630:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread!  */
            _tx_thread_system_resume(thread_ptr);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f004 f916 	bl	8013864 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800f638:	e005      	b.n	800f646 <_nx_tcp_transmit_cleanup+0x14a>
 800f63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f383 8810 	msr	PRIMASK, r3
}
 800f644:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f646:	3738      	adds	r7, #56	; 0x38
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	54435020 	.word	0x54435020
 800f650:	2400008c 	.word	0x2400008c
 800f654:	240023d0 	.word	0x240023d0
 800f658:	24002470 	.word	0x24002470
 800f65c:	0800c105 	.word	0x0800c105
 800f660:	240023cc 	.word	0x240023cc

0800f664 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b08a      	sub	sp, #40	; 0x28
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f672:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f674:	f3ef 8310 	mrs	r3, PRIMASK
 800f678:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f67a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f67c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f67e:	b672      	cpsid	i
    return(int_posture);
 800f680:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800f682:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d043      	beq.n	800f714 <_nx_udp_bind_cleanup+0xb0>
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d040      	beq.n	800f714 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800f692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f694:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800f696:	4a24      	ldr	r2, [pc, #144]	; (800f728 <_nx_udp_bind_cleanup+0xc4>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d13b      	bne.n	800f714 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69e:	2200      	movs	r2, #0
 800f6a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6ac:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d103      	bne.n	800f6c0 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	661a      	str	r2, [r3, #96]	; 0x60
 800f6be:	e00d      	b.n	800f6dc <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800f6d0:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800f6da:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6e0:	1e5a      	subs	r2, r3, #1
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ea:	2b0c      	cmp	r3, #12
 800f6ec:	d112      	bne.n	800f714 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2223      	movs	r2, #35	; 0x23
 800f6f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f6f6:	4b0d      	ldr	r3, [pc, #52]	; (800f72c <_nx_udp_bind_cleanup+0xc8>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	4a0b      	ldr	r2, [pc, #44]	; (800f72c <_nx_udp_bind_cleanup+0xc8>)
 800f6fe:	6013      	str	r3, [r2, #0]
 800f700:	6a3b      	ldr	r3, [r7, #32]
 800f702:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	f383 8810 	msr	PRIMASK, r3
}
 800f70a:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f004 f8a9 	bl	8013864 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800f712:	e005      	b.n	800f720 <_nx_udp_bind_cleanup+0xbc>
 800f714:	6a3b      	ldr	r3, [r7, #32]
 800f716:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f383 8810 	msr	PRIMASK, r3
}
 800f71e:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f720:	3728      	adds	r7, #40	; 0x28
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	55445020 	.word	0x55445020
 800f72c:	240023cc 	.word	0x240023cc

0800f730 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a05      	ldr	r2, [pc, #20]	; (800f750 <_nx_udp_enable+0x20>)
 800f73c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	370c      	adds	r7, #12
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	0800f849 	.word	0x0800f849

0800f754 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b08a      	sub	sp, #40	; 0x28
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	0a1a      	lsrs	r2, r3, #8
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	4413      	add	r3, r2
 800f76c:	f003 031f 	and.w	r3, r3, #31
 800f770:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f778:	f04f 31ff 	mov.w	r1, #4294967295
 800f77c:	4618      	mov	r0, r3
 800f77e:	f002 fe31 	bl	80123e4 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	69bb      	ldr	r3, [r7, #24]
 800f786:	33de      	adds	r3, #222	; 0xde
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	4413      	add	r3, r2
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 800f790:	2300      	movs	r3, #0
 800f792:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d010      	beq.n	800f7bc <_nx_udp_free_port_find+0x68>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 800f79e:	6a3b      	ldr	r3, [r7, #32]
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d102      	bne.n	800f7ae <_nx_udp_free_port_find+0x5a>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 800f7ac:	e006      	b.n	800f7bc <_nx_udp_free_port_find+0x68>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800f7ae:	6a3b      	ldr	r3, [r7, #32]
 800f7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7b2:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 800f7b4:	6a3a      	ldr	r2, [r7, #32]
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d1f0      	bne.n	800f79e <_nx_udp_free_port_find+0x4a>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f003 f886 	bl	80128d4 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d104      	bne.n	800f7d8 <_nx_udp_free_port_find+0x84>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	e00e      	b.n	800f7f6 <_nx_udp_free_port_find+0xa2>
        }

        /* Move to the next port.  */
        port++;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7e4:	d302      	bcc.n	800f7ec <_nx_udp_free_port_find+0x98>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800f7e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800f7ea:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800f7ec:	69fa      	ldr	r2, [r7, #28]
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d1b7      	bne.n	800f764 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 800f7f4:	2345      	movs	r3, #69	; 0x45
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3728      	adds	r7, #40	; 0x28
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <_nx_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_packet_info_extract(NX_PACKET *packet_ptr, ULONG *ip_address,
                                  UINT *protocol, UINT *port, UINT *interface_index)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b08a      	sub	sp, #40	; 0x28
 800f802:	af02      	add	r7, sp, #8
 800f804:	60f8      	str	r0, [r7, #12]
 800f806:	60b9      	str	r1, [r7, #8]
 800f808:	607a      	str	r2, [r7, #4]
 800f80a:	603b      	str	r3, [r7, #0]
NXD_ADDRESS nxd_ip_address;
UINT        status;


    /* Call the NXD version of the service. */
    status = _nxd_udp_packet_info_extract(packet_ptr, &nxd_ip_address, protocol, port, interface_index);
 800f80c:	f107 0114 	add.w	r1, r7, #20
 800f810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f000 ffe3 	bl	80107e4 <_nxd_udp_packet_info_extract>
 800f81e:	61f8      	str	r0, [r7, #28]

    if (status == NX_SUCCESS)
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10b      	bne.n	800f83e <_nx_udp_packet_info_extract+0x40>
    {
        if (ip_address)
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d008      	beq.n	800f83e <_nx_udp_packet_info_extract+0x40>
        {

            /*lint -e{644} suppress variable might not be initialized, since "nxd_ip_address" was initialized in _nxd_udp_packet_info_extract. */
            if (nxd_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	2b04      	cmp	r3, #4
 800f830:	d103      	bne.n	800f83a <_nx_udp_packet_info_extract+0x3c>
            {
                *ip_address = nxd_ip_address.nxd_ip_address.v4;
 800f832:	69ba      	ldr	r2, [r7, #24]
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	601a      	str	r2, [r3, #0]
 800f838:	e001      	b.n	800f83e <_nx_udp_packet_info_extract+0x40>
            }
            else
            {
                return(NX_INVALID_PACKET);
 800f83a:	2312      	movs	r3, #18
 800f83c:	e000      	b.n	800f840 <_nx_udp_packet_info_extract+0x42>
            }
        }
    }

    return(status);
 800f83e:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(port);
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800f840:	4618      	mov	r0, r3
 800f842:	3720      	adds	r7, #32
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b094      	sub	sp, #80	; 0x50
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f864:	2b07      	cmp	r3, #7
 800f866:	d80a      	bhi.n	800f87e <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f86e:	1c5a      	adds	r2, r3, #1
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800f876:	6838      	ldr	r0, [r7, #0]
 800f878:	f7fc faf0 	bl	800be5c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800f87c:	e1d8      	b.n	800fc30 <_nx_udp_packet_receive+0x3e8>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	689b      	ldr	r3, [r3, #8]
 800f882:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800f884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	ba1a      	rev	r2, r3
 800f88a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f88c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800f88e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	ba1a      	rev	r2, r3
 800f894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f896:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f89c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	0c1b      	lsrs	r3, r3, #16
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d20a      	bcs.n	800f8bc <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f8ac:	1c5a      	adds	r2, r3, #1
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800f8b4:	6838      	ldr	r0, [r7, #0]
 800f8b6:	f7fc fad1 	bl	800be5c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800f8ba:	e1b9      	b.n	800fc30 <_nx_udp_packet_receive+0x3e8>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800f8bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800f8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8c6:	0a1a      	lsrs	r2, r3, #8
 800f8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8ca:	4413      	add	r3, r2
 800f8cc:	f003 031f 	and.w	r3, r3, #31
 800f8d0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800f8d2:	4b8f      	ldr	r3, [pc, #572]	; (800fb10 <_nx_udp_packet_receive+0x2c8>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d010      	beq.n	800f8fc <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f8da:	f3ef 8305 	mrs	r3, IPSR
 800f8de:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800f8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e2:	4b8c      	ldr	r3, [pc, #560]	; (800fb14 <_nx_udp_packet_receive+0x2cc>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d107      	bne.n	800f8fc <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f8f2:	f04f 31ff 	mov.w	r1, #4294967295
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f002 fd74 	bl	80123e4 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f900:	33de      	adds	r3, #222	; 0xde
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	4413      	add	r3, r2
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 800f90a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d13e      	bne.n	800f98e <_nx_udp_packet_receive+0x146>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f916:	2b04      	cmp	r3, #4
 800f918:	d114      	bne.n	800f944 <_nx_udp_packet_receive+0xfc>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800f920:	2b00      	cmp	r3, #0
 800f922:	d00f      	beq.n	800f944 <_nx_udp_packet_receive+0xfc>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800f924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	ba1a      	rev	r2, r3
 800f92a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f92c:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800f92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	ba1a      	rev	r2, r3
 800f934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f936:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800f938:	2300      	movs	r3, #0
 800f93a:	4a77      	ldr	r2, [pc, #476]	; (800fb18 <_nx_udp_packet_receive+0x2d0>)
 800f93c:	6839      	ldr	r1, [r7, #0]
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f7f9 fb06 	bl	8008f50 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f94a:	1c5a      	adds	r2, r3, #1
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800f960:	4b6b      	ldr	r3, [pc, #428]	; (800fb10 <_nx_udp_packet_receive+0x2c8>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d00e      	beq.n	800f986 <_nx_udp_packet_receive+0x13e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f968:	f3ef 8305 	mrs	r3, IPSR
 800f96c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800f96e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f970:	4b68      	ldr	r3, [pc, #416]	; (800fb14 <_nx_udp_packet_receive+0x2cc>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4313      	orrs	r3, r2
 800f976:	2b00      	cmp	r3, #0
 800f978:	d105      	bne.n	800f986 <_nx_udp_packet_receive+0x13e>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800f980:	4618      	mov	r0, r3
 800f982:	f002 ffa7 	bl	80128d4 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800f986:	6838      	ldr	r0, [r7, #0]
 800f988:	f7fc fa68 	bl	800be5c <_nx_packet_release>

        /* Just return.  */
        return;
 800f98c:	e150      	b.n	800fc30 <_nx_udp_packet_receive+0x3e8>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 800f98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f990:	689b      	ldr	r3, [r3, #8]
 800f992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f994:	429a      	cmp	r2, r3
 800f996:	d119      	bne.n	800f9cc <_nx_udp_packet_receive+0x184>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 800f998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f99a:	699b      	ldr	r3, [r3, #24]
 800f99c:	1c5a      	adds	r2, r3, #1
 800f99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a0:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ac:	4413      	add	r3, r2
 800f9ae:	f1a3 0208 	sub.w	r2, r3, #8
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800f9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ba:	69da      	ldr	r2, [r3, #28]
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c0:	4413      	add	r3, r2
 800f9c2:	f1a3 0208 	sub.w	r2, r3, #8
 800f9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9c8:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 800f9ca:	e00b      	b.n	800f9e4 <_nx_udp_packet_receive+0x19c>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 800f9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9d6:	33de      	adds	r3, #222	; 0xde
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d1d4      	bne.n	800f98e <_nx_udp_packet_receive+0x146>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800f9e4:	4b4a      	ldr	r3, [pc, #296]	; (800fb10 <_nx_udp_packet_receive+0x2c8>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00e      	beq.n	800fa0a <_nx_udp_packet_receive+0x1c2>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f9ec:	f3ef 8305 	mrs	r3, IPSR
 800f9f0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800f9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9f4:	4b47      	ldr	r3, [pc, #284]	; (800fb14 <_nx_udp_packet_receive+0x2cc>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d105      	bne.n	800fa0a <_nx_udp_packet_receive+0x1c2>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fa04:	4618      	mov	r0, r3
 800fa06:	f002 ff65 	bl	80128d4 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 800fa0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa0c:	689b      	ldr	r3, [r3, #8]
 800fa0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d02b      	beq.n	800fa6c <_nx_udp_packet_receive+0x224>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fa1a:	1c5a      	adds	r2, r3, #1
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fa28:	1c5a      	adds	r2, r3, #1
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fa36:	2b04      	cmp	r3, #4
 800fa38:	d114      	bne.n	800fa64 <_nx_udp_packet_receive+0x21c>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00f      	beq.n	800fa64 <_nx_udp_packet_receive+0x21c>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800fa44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	ba1a      	rev	r2, r3
 800fa4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa4c:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800fa4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	ba1a      	rev	r2, r3
 800fa54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa56:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800fa58:	2300      	movs	r3, #0
 800fa5a:	4a2f      	ldr	r2, [pc, #188]	; (800fb18 <_nx_udp_packet_receive+0x2d0>)
 800fa5c:	6839      	ldr	r1, [r7, #0]
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7f9 fa76 	bl	8008f50 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800fa64:	6838      	ldr	r0, [r7, #0]
 800fa66:	f7fc f9f9 	bl	800be5c <_nx_packet_release>
        return;
 800fa6a:	e0e1      	b.n	800fc30 <_nx_udp_packet_receive+0x3e8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa6c:	f3ef 8310 	mrs	r3, PRIMASK
 800fa70:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fa74:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa76:	b672      	cpsid	i
    return(int_posture);
 800fa78:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800fa7a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 800fa7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a26      	ldr	r2, [pc, #152]	; (800fb1c <_nx_udp_packet_receive+0x2d4>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d01c      	beq.n	800fac0 <_nx_udp_packet_receive+0x278>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fa8c:	1c5a      	adds	r2, r3, #1
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fa9a:	1c5a      	adds	r2, r3, #1
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 800faa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faaa:	625a      	str	r2, [r3, #36]	; 0x24
 800faac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	f383 8810 	msr	PRIMASK, r3
}
 800fab6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800fab8:	6838      	ldr	r0, [r7, #0]
 800faba:	f7fc f9cf 	bl	800be5c <_nx_packet_release>

        /* Return to caller.  */
        return;
 800fabe:	e0b7      	b.n	800fc30 <_nx_udp_packet_receive+0x3e8>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 800fac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fac4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faca:	33de      	adds	r3, #222	; 0xde
 800facc:	009b      	lsls	r3, r3, #2
 800face:	4413      	add	r3, r2
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d00b      	beq.n	800faf0 <_nx_udp_packet_receive+0x2a8>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <_nx_udp_packet_receive+0x2a8>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fae6:	33de      	adds	r3, #222	; 0xde
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	4413      	add	r3, r2
 800faec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800faee:	605a      	str	r2, [r3, #4]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800faf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faf4:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 800faf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d03e      	beq.n	800fb7a <_nx_udp_packet_receive+0x332>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800fafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d10c      	bne.n	800fb20 <_nx_udp_packet_receive+0x2d8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800fb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb08:	2200      	movs	r2, #0
 800fb0a:	659a      	str	r2, [r3, #88]	; 0x58
 800fb0c:	e016      	b.n	800fb3c <_nx_udp_packet_receive+0x2f4>
 800fb0e:	bf00      	nop
 800fb10:	240023d0 	.word	0x240023d0
 800fb14:	2400008c 	.word	0x2400008c
 800fb18:	03030000 	.word	0x03030000
 800fb1c:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800fb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fb24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb26:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800fb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800fb2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800fb30:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800fb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800fb36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb38:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800fb3a:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800fb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb40:	1e5a      	subs	r2, r3, #1
 800fb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb44:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb48:	2200      	movs	r2, #0
 800fb4a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800fb4c:	4b3a      	ldr	r3, [pc, #232]	; (800fc38 <_nx_udp_packet_receive+0x3f0>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3301      	adds	r3, #1
 800fb52:	4a39      	ldr	r2, [pc, #228]	; (800fc38 <_nx_udp_packet_receive+0x3f0>)
 800fb54:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800fb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb5a:	683a      	ldr	r2, [r7, #0]
 800fb5c:	601a      	str	r2, [r3, #0]
 800fb5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb60:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	f383 8810 	msr	PRIMASK, r3
}
 800fb68:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800fb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800fb72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb74:	f003 fe76 	bl	8013864 <_tx_thread_system_resume>
 800fb78:	e054      	b.n	800fc24 <_nx_udp_packet_receive+0x3dc>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800fb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d03c      	beq.n	800fbfc <_nx_udp_packet_receive+0x3b4>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 800fb82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb86:	683a      	ldr	r2, [r7, #0]
 800fb88:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800fb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	2200      	movs	r2, #0
 800fb94:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800fb96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb9a:	1c5a      	adds	r2, r3, #1
 800fb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb9e:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 800fba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 800fba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d921      	bls.n	800fbf0 <_nx_udp_packet_receive+0x3a8>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800fbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbb0:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	69da      	ldr	r2, [r3, #28]
 800fbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb8:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 800fbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbbe:	1e5a      	subs	r2, r3, #1
 800fbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbc2:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fbca:	1c5a      	adds	r2, r3, #1
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 800fbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd6:	1c5a      	adds	r2, r3, #1
 800fbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbda:	625a      	str	r2, [r3, #36]	; 0x24
 800fbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbde:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	f383 8810 	msr	PRIMASK, r3
}
 800fbe6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800fbe8:	6838      	ldr	r0, [r7, #0]
 800fbea:	f7fc f937 	bl	800be5c <_nx_packet_release>
 800fbee:	e019      	b.n	800fc24 <_nx_udp_packet_receive+0x3dc>
 800fbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	f383 8810 	msr	PRIMASK, r3
}
 800fbfa:	e013      	b.n	800fc24 <_nx_udp_packet_receive+0x3dc>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 800fbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbfe:	683a      	ldr	r2, [r7, #0]
 800fc00:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800fc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc04:	683a      	ldr	r2, [r7, #0]
 800fc06:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800fc0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc12:	1c5a      	adds	r2, r3, #1
 800fc14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc16:	63da      	str	r2, [r3, #60]	; 0x3c
 800fc18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc1a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f383 8810 	msr	PRIMASK, r3
}
 800fc22:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 800fc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d002      	beq.n	800fc30 <_nx_udp_packet_receive+0x3e8>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 800fc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fc2e:	4798      	blx	r3
    }
}
 800fc30:	3750      	adds	r7, #80	; 0x50
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	240023cc 	.word	0x240023cc

0800fc3c <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b088      	sub	sp, #32
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc4a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc4c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc50:	617b      	str	r3, [r7, #20]
    return(posture);
 800fc52:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800fc54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc56:	b672      	cpsid	i
    return(int_posture);
 800fc58:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800fc5a:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d03d      	beq.n	800fce0 <_nx_udp_receive_cleanup+0xa4>
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d03a      	beq.n	800fce0 <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800fc6e:	4a21      	ldr	r2, [pc, #132]	; (800fcf4 <_nx_udp_receive_cleanup+0xb8>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d135      	bne.n	800fce0 <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d103      	bne.n	800fc8c <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	2200      	movs	r2, #0
 800fc88:	659a      	str	r2, [r3, #88]	; 0x58
 800fc8a:	e00d      	b.n	800fca8 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800fc9c:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800fca6:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcac:	1e5a      	subs	r2, r3, #1
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb6:	2b0c      	cmp	r3, #12
 800fcb8:	d112      	bne.n	800fce0 <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800fcc2:	4b0d      	ldr	r3, [pc, #52]	; (800fcf8 <_nx_udp_receive_cleanup+0xbc>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	4a0b      	ldr	r2, [pc, #44]	; (800fcf8 <_nx_udp_receive_cleanup+0xbc>)
 800fcca:	6013      	str	r3, [r2, #0]
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f383 8810 	msr	PRIMASK, r3
}
 800fcd6:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f003 fdc3 	bl	8013864 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800fcde:	e005      	b.n	800fcec <_nx_udp_receive_cleanup+0xb0>
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	f383 8810 	msr	PRIMASK, r3
}
 800fcea:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800fcec:	3720      	adds	r7, #32
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	55445020 	.word	0x55445020
 800fcf8:	240023cc 	.word	0x240023cc

0800fcfc <_nx_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b090      	sub	sp, #64	; 0x40
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	68db      	ldr	r3, [r3, #12]
 800fd0c:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fd14:	f04f 31ff 	mov.w	r1, #4294967295
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f002 fb63 	bl	80123e4 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d103      	bne.n	800fd2e <_nx_udp_socket_bind+0x32>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d007      	beq.n	800fd3e <_nx_udp_socket_bind+0x42>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd30:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fd34:	4618      	mov	r0, r3
 800fd36:	f002 fdcd 	bl	80128d4 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800fd3a:	2322      	movs	r3, #34	; 0x22
 800fd3c:	e0fd      	b.n	800ff3a <_nx_udp_socket_bind+0x23e>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d11e      	bne.n	800fd82 <_nx_udp_socket_bind+0x86>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 800fd44:	f005 fcf8 	bl	8015738 <rand>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	425a      	negs	r2, r3
 800fd4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fd50:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800fd54:	bf58      	it	pl
 800fd56:	4253      	negpl	r3, r2
 800fd58:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800fd5c:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	f107 0208 	add.w	r2, r7, #8
 800fd64:	4619      	mov	r1, r3
 800fd66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd68:	f7ff fcf4 	bl	800f754 <_nx_udp_free_port_find>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d007      	beq.n	800fd82 <_nx_udp_socket_bind+0x86>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800fd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f002 fdab 	bl	80128d4 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 800fd7e:	2345      	movs	r3, #69	; 0x45
 800fd80:	e0db      	b.n	800ff3a <_nx_udp_socket_bind+0x23e>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	0a1a      	lsrs	r2, r3, #8
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	4413      	add	r3, r2
 800fd90:	f003 031f 	and.w	r3, r3, #31
 800fd94:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800fd96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd9a:	33de      	adds	r3, #222	; 0xde
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4413      	add	r3, r2
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800fda4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d00f      	beq.n	800fdca <_nx_udp_socket_bind+0xce>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 800fdaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdac:	633b      	str	r3, [r7, #48]	; 0x30
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 800fdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb0:	689a      	ldr	r2, [r3, #8]
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d007      	beq.n	800fdc8 <_nx_udp_socket_bind+0xcc>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800fdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        } while (search_ptr != end_ptr);
 800fdbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d1f3      	bne.n	800fdae <_nx_udp_socket_bind+0xb2>
 800fdc6:	e000      	b.n	800fdca <_nx_udp_socket_bind+0xce>
                break;
 800fdc8:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 800fdca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d004      	beq.n	800fdda <_nx_udp_socket_bind+0xde>
 800fdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdd2:	689a      	ldr	r2, [r3, #8]
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d048      	beq.n	800fe6c <_nx_udp_socket_bind+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fdda:	f3ef 8310 	mrs	r3, PRIMASK
 800fdde:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800fde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fde2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fde4:	b672      	cpsid	i
    return(int_posture);
 800fde6:	6a3b      	ldr	r3, [r7, #32]
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800fde8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the list is NULL.  */
        if (search_ptr)
 800fdea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d022      	beq.n	800fe36 <_nx_udp_socket_bind+0x13a>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 800fdf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf4:	33de      	adds	r3, #222	; 0xde
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	4413      	add	r3, r2
 800fdfa:	685a      	ldr	r2, [r3, #4]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800fe00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe04:	33de      	adds	r3, #222	; 0xde
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	4413      	add	r3, r2
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 800fe12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe16:	33de      	adds	r3, #222	; 0xde
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4413      	add	r3, r2
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 800fe24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe28:	33de      	adds	r3, #222	; 0xde
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	4413      	add	r3, r2
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	651a      	str	r2, [r3, #80]	; 0x50
 800fe34:	e00c      	b.n	800fe50 <_nx_udp_socket_bind+0x154>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 800fe42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe46:	33de      	adds	r3, #222	; 0xde
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	4413      	add	r3, r2
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	605a      	str	r2, [r3, #4]
 800fe50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe52:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe54:	69fb      	ldr	r3, [r7, #28]
 800fe56:	f383 8810 	msr	PRIMASK, r3
}
 800fe5a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800fe62:	4618      	mov	r0, r3
 800fe64:	f002 fd36 	bl	80128d4 <_tx_mutex_put>

        /* Return success to the caller.  */
        return(NX_SUCCESS);
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e066      	b.n	800ff3a <_nx_udp_socket_bind+0x23e>
    }
    else if (wait_option)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d05c      	beq.n	800ff2c <_nx_udp_socket_bind+0x230>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe72:	f3ef 8310 	mrs	r3, PRIMASK
 800fe76:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fe78:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fe7a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe7c:	b672      	cpsid	i
    return(int_posture);
 800fe7e:	697b      	ldr	r3, [r7, #20]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800fe80:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 800fe82:	4b30      	ldr	r3, [pc, #192]	; (800ff44 <_nx_udp_socket_bind+0x248>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 800fe88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8a:	4a2f      	ldr	r2, [pc, #188]	; (800ff48 <_nx_udp_socket_bind+0x24c>)
 800fe8c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe9e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800fea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d012      	beq.n	800fece <_nx_udp_socket_bind+0x1d2>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 800fea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800feac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feae:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 800feb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800feb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb8:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 800feba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800febc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800febe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fec2:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800fec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feca:	675a      	str	r2, [r3, #116]	; 0x74
 800fecc:	e008      	b.n	800fee0 <_nx_udp_socket_bind+0x1e4>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800fece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed2:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 800fed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed8:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fede:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 800fee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fee4:	1c5a      	adds	r2, r3, #1
 800fee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee8:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800feea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feec:	220c      	movs	r2, #12
 800feee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef2:	2201      	movs	r2, #1
 800fef4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800fef6:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <_nx_udp_socket_bind+0x250>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	3301      	adds	r3, #1
 800fefc:	4a13      	ldr	r2, [pc, #76]	; (800ff4c <_nx_udp_socket_bind+0x250>)
 800fefe:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ff00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	64da      	str	r2, [r3, #76]	; 0x4c
 800ff06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff08:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	f383 8810 	msr	PRIMASK, r3
}
 800ff10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ff12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff14:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f002 fcdb 	bl	80128d4 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 800ff1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff20:	f003 fda0 	bl	8013a64 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        return(thread_ptr -> tx_thread_suspend_status);
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff2a:	e006      	b.n	800ff3a <_nx_udp_socket_bind+0x23e>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ff32:	4618      	mov	r0, r3
 800ff34:	f002 fcce 	bl	80128d4 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        return(NX_PORT_UNAVAILABLE);
 800ff38:	2323      	movs	r3, #35	; 0x23
    }
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3740      	adds	r7, #64	; 0x40
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	240023d0 	.word	0x240023d0
 800ff48:	0800f665 	.word	0x0800f665
 800ff4c:	240023cc 	.word	0x240023cc

0800ff50 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b08a      	sub	sp, #40	; 0x28
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
 800ff5c:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800ff5e:	2278      	movs	r2, #120	; 0x78
 800ff60:	2100      	movs	r1, #0
 800ff62:	68b8      	ldr	r0, [r7, #8]
 800ff64:	f005 fb52 	bl	801560c <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800ff7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff88:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2200      	movs	r2, #0
 800ff94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffb8:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ffd2:	f04f 31ff 	mov.w	r1, #4294967295
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f002 fa04 	bl	80123e4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ffdc:	f3ef 8310 	mrs	r3, PRIMASK
 800ffe0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ffe2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ffe4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ffe6:	b672      	cpsid	i
    return(int_posture);
 800ffe8:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 800ffea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	4a1f      	ldr	r2, [pc, #124]	; (801006c <_nx_udp_socket_create+0x11c>)
 800fff0:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d015      	beq.n	8010028 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8010002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010004:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801000c:	68ba      	ldr	r2, [r7, #8]
 801000e:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 8010010:	6a3b      	ldr	r3, [r7, #32]
 8010012:	68ba      	ldr	r2, [r7, #8]
 8010014:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	6a3a      	ldr	r2, [r7, #32]
 801001a:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	669a      	str	r2, [r3, #104]	; 0x68
 8010026:	e009      	b.n	801003c <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	68ba      	ldr	r2, [r7, #8]
 8010034:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	f383 8810 	msr	PRIMASK, r3
}
 8010054:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801005c:	4618      	mov	r0, r3
 801005e:	f002 fc39 	bl	80128d4 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8010062:	2300      	movs	r3, #0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3728      	adds	r7, #40	; 0x28
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	55445020 	.word	0x55445020

08010070 <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b088      	sub	sp, #32
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010084:	f04f 31ff 	mov.w	r1, #4294967295
 8010088:	4618      	mov	r0, r3
 801008a:	f002 f9ab 	bl	80123e4 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010092:	2b00      	cmp	r3, #0
 8010094:	d007      	beq.n	80100a6 <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801009c:	4618      	mov	r0, r3
 801009e:	f002 fc19 	bl	80128d4 <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 80100a2:	2342      	movs	r3, #66	; 0x42
 80100a4:	e03f      	b.n	8010126 <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80100a6:	f3ef 8310 	mrs	r3, PRIMASK
 80100aa:	617b      	str	r3, [r7, #20]
    return(posture);
 80100ac:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80100ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80100b0:	b672      	cpsid	i
    return(int_posture);
 80100b2:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80100b4:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d104      	bne.n	80100d0 <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 80100ce:	e014      	b.n	80100fa <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 80100d8:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 80100e2:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d104      	bne.n	80100fa <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010100:	1e5a      	subs	r2, r3, #1
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f383 8810 	msr	PRIMASK, r3
}
 8010112:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801011a:	4618      	mov	r0, r3
 801011c:	f002 fbda 	bl	80128d4 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010120:	f003 fb66 	bl	80137f0 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8010124:	2300      	movs	r3, #0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3720      	adds	r7, #32
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
	...

08010130 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b09a      	sub	sp, #104	; 0x68
 8010134:	af02      	add	r7, sp, #8
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

ULONG                 *temp_ptr;
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
NX_INTERFACE          *interface_ptr = NX_NULL;
 801013c:	2300      	movs	r3, #0
 801013e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                   compute_checksum = 1;
 8010140:	2301      	movs	r3, #1
 8010142:	65bb      	str	r3, [r7, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	2200      	movs	r2, #0
 8010148:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801014a:	f3ef 8310 	mrs	r3, PRIMASK
 801014e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8010150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8010152:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8010154:	b672      	cpsid	i
    return(int_posture);
 8010156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 8010158:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801015e:	2b00      	cmp	r3, #0
 8010160:	d107      	bne.n	8010172 <_nx_udp_socket_receive+0x42>
 8010162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010164:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010168:	f383 8810 	msr	PRIMASK, r3
}
 801016c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 801016e:	2324      	movs	r3, #36	; 0x24
 8010170:	e142      	b.n	80103f8 <_nx_udp_socket_receive+0x2c8>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010176:	2b00      	cmp	r3, #0
 8010178:	d01a      	beq.n	80101b0 <_nx_udp_socket_receive+0x80>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	69da      	ldr	r2, [r3, #28]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010190:	2b00      	cmp	r3, #0
 8010192:	d102      	bne.n	801019a <_nx_udp_socket_receive+0x6a>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2200      	movs	r2, #0
 8010198:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801019e:	1e5a      	subs	r2, r3, #1
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80101a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	f383 8810 	msr	PRIMASK, r3
}
 80101ae:	e05e      	b.n	801026e <_nx_udp_socket_receive+0x13e>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d050      	beq.n	8010258 <_nx_udp_socket_receive+0x128>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 80101b6:	4b92      	ldr	r3, [pc, #584]	; (8010400 <_nx_udp_socket_receive+0x2d0>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 80101bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101be:	4a91      	ldr	r2, [pc, #580]	; (8010404 <_nx_udp_socket_receive+0x2d4>)
 80101c0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 80101c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101c4:	68fa      	ldr	r2, [r7, #12]
 80101c6:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 80101c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d012      	beq.n	80101fc <_nx_udp_socket_receive+0xcc>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 80101da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101dc:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 80101e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101e6:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101f0:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101f8:	675a      	str	r2, [r3, #116]	; 0x74
 80101fa:	e008      	b.n	801020e <_nx_udp_socket_receive+0xde>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010200:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 8010202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010206:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 8010208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801020a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801020c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8010218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801021a:	220c      	movs	r2, #12
 801021c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801021e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010220:	2201      	movs	r2, #1
 8010222:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010224:	4b78      	ldr	r3, [pc, #480]	; (8010408 <_nx_udp_socket_receive+0x2d8>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3301      	adds	r3, #1
 801022a:	4a77      	ldr	r2, [pc, #476]	; (8010408 <_nx_udp_socket_receive+0x2d8>)
 801022c:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801022e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	64da      	str	r2, [r3, #76]	; 0x4c
 8010234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010236:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010238:	6a3b      	ldr	r3, [r7, #32]
 801023a:	f383 8810 	msr	PRIMASK, r3
}
 801023e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010240:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010242:	f003 fc0f 	bl	8013a64 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 8010246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801024c:	2b00      	cmp	r3, #0
 801024e:	d00e      	beq.n	801026e <_nx_udp_socket_receive+0x13e>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 8010250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010256:	e0cf      	b.n	80103f8 <_nx_udp_socket_receive+0x2c8>
 8010258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801025a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	f383 8810 	msr	PRIMASK, r3
}
 8010262:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	2200      	movs	r2, #0
 8010268:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 801026a:	2301      	movs	r3, #1
 801026c:	e0c4      	b.n	80103f8 <_nx_udp_socket_receive+0x2c8>
            }
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        /* Get the packet interface. */
#ifndef NX_DISABLE_IPV4
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010276:	2b04      	cmp	r3, #4
 8010278:	d103      	bne.n	8010282 <_nx_udp_socket_receive+0x152>
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010280:	65fb      	str	r3, [r7, #92]	; 0x5c
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
        }
#endif /* FEATURE_NX_IPV6 */

        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 8010282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010286:	f003 0320 	and.w	r3, r3, #32
 801028a:	2b00      	cmp	r3, #0
 801028c:	d001      	beq.n	8010292 <_nx_udp_socket_receive+0x162>
        {
            compute_checksum = 0;
 801028e:	2300      	movs	r3, #0
 8010290:	65bb      	str	r3, [r7, #88]	; 0x58
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 8010292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010294:	2b00      	cmp	r3, #0
 8010296:	f000 809d 	beq.w	80103d4 <_nx_udp_socket_receive+0x2a4>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d105      	bne.n	80102b6 <_nx_udp_socket_receive+0x186>
 80102aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102ac:	3304      	adds	r3, #4
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d106      	bne.n	80102c4 <_nx_udp_socket_receive+0x194>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 80102be:	2b06      	cmp	r3, #6
 80102c0:	f040 808b 	bne.w	80103da <_nx_udp_socket_receive+0x2aa>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	657b      	str	r3, [r7, #84]	; 0x54
 80102c8:	2300      	movs	r3, #0
 80102ca:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 80102d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80102d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102de:	2b04      	cmp	r3, #4
 80102e0:	d108      	bne.n	80102f4 <_nx_udp_socket_receive+0x1c4>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 80102e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102e6:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 80102e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ea:	330c      	adds	r3, #12
 80102ec:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 80102ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f0:	3310      	adds	r3, #16
 80102f2:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80102f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	ba1a      	rev	r2, r3
 80102fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102fc:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80102fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	ba1a      	rev	r2, r3
 8010304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010306:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 8010308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801030a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 801030c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010312:	2111      	movs	r1, #17
 8010314:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010316:	f7f8 ffe7 	bl	80092e8 <_nx_ip_checksum_compute>
 801031a:	4603      	mov	r3, r0
 801031c:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 801031e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	ba1a      	rev	r2, r3
 8010324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010326:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8010328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	ba1a      	rev	r2, r3
 801032e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010330:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 8010332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010334:	43db      	mvns	r3, r3
 8010336:	b29b      	uxth	r3, r3
 8010338:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 801033a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033c:	2b00      	cmp	r3, #0
 801033e:	d04b      	beq.n	80103d8 <_nx_udp_socket_receive+0x2a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010340:	f3ef 8310 	mrs	r3, PRIMASK
 8010344:	617b      	str	r3, [r7, #20]
    return(posture);
 8010346:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010348:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801034a:	b672      	cpsid	i
    return(int_posture);
 801034c:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 801034e:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010358:	3201      	adds	r2, #1
 801035a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010366:	3201      	adds	r2, #1
 8010368:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010370:	1c5a      	adds	r2, r3, #1
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801037e:	3a01      	subs	r2, #1
 8010380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010392:	1ad2      	subs	r2, r2, r3
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	3208      	adds	r2, #8
 801039a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	699b      	ldr	r3, [r3, #24]
 80103a2:	1e5a      	subs	r2, r3, #1
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	69da      	ldr	r2, [r3, #28]
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	f103 0208 	add.w	r2, r3, #8
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	61da      	str	r2, [r3, #28]
 80103bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	f383 8810 	msr	PRIMASK, r3
}
 80103c6:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fb fd45 	bl	800be5c <_nx_packet_release>
        TX_DISABLE
 80103d2:	e6ba      	b.n	801014a <_nx_udp_socket_receive+0x1a>
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        else
        {

            /* Simply break - checksum logic is conditionally disabled.  */
            break;
 80103d4:	bf00      	nop
 80103d6:	e000      	b.n	80103da <_nx_udp_socket_receive+0x2aa>
                    break;
 80103d8:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	3a08      	subs	r2, #8
 80103e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	689a      	ldr	r2, [r3, #8]
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	3208      	adds	r2, #8
 80103f4:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 80103f6:	2300      	movs	r3, #0
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3760      	adds	r7, #96	; 0x60
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	240023d0 	.word	0x240023d0
 8010404:	0800fc3d 	.word	0x0800fc3d
 8010408:	240023cc 	.word	0x240023cc

0801040c <_nx_udp_socket_receive_notify>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive_notify(NX_UDP_SOCKET *socket_ptr,
                                    VOID (*udp_receive_notify)(NX_UDP_SOCKET *socket_ptr))
{
 801040c:	b480      	push	{r7}
 801040e:	b087      	sub	sp, #28
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010416:	f3ef 8310 	mrs	r3, PRIMASK
 801041a:	60fb      	str	r3, [r7, #12]
    return(posture);
 801041c:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801041e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010420:	b672      	cpsid	i
    return(int_posture);
 8010422:	68bb      	ldr	r3, [r7, #8]
TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8010424:	617b      	str	r3, [r7, #20]

    /* Setup the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =  udp_receive_notify;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	683a      	ldr	r2, [r7, #0]
 801042a:	671a      	str	r2, [r3, #112]	; 0x70
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	f383 8810 	msr	PRIMASK, r3
}
 8010436:	bf00      	nop

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE_NOTIFY, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, udp_receive_notify, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	371c      	adds	r7, #28
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr

08010446 <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b088      	sub	sp, #32
 801044a:	af00      	add	r7, sp, #0
 801044c:	60f8      	str	r0, [r7, #12]
 801044e:	60b9      	str	r1, [r7, #8]
 8010450:	607a      	str	r2, [r7, #4]
 8010452:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 8010454:	2304      	movs	r3, #4
 8010456:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 801045c:	f107 0214 	add.w	r2, r7, #20
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	68b9      	ldr	r1, [r7, #8]
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f000 fa12 	bl	801088e <_nxd_udp_socket_send>
 801046a:	61f8      	str	r0, [r7, #28]

    return(status);
 801046c:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 801046e:	4618      	mov	r0, r3
 8010470:	3720      	adds	r7, #32
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <_nx_udp_socket_source_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_source_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                                 ULONG ip_address, UINT port, UINT address_index)
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b086      	sub	sp, #24
 801047a:	af00      	add	r7, sp, #0
 801047c:	60f8      	str	r0, [r7, #12]
 801047e:	60b9      	str	r1, [r7, #8]
 8010480:	607a      	str	r2, [r7, #4]
 8010482:	603b      	str	r3, [r7, #0]
UINT   status;
NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	617b      	str	r3, [r7, #20]

    /* Store interface information into the packet structure. */
    packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[address_index]);
 801048a:	6a3a      	ldr	r2, [r7, #32]
 801048c:	4613      	mov	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	4413      	add	r3, r2
 8010492:	011b      	lsls	r3, r3, #4
 8010494:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8010498:	697a      	ldr	r2, [r7, #20]
 801049a:	4413      	add	r3, r2
 801049c:	1d1a      	adds	r2, r3, #4
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Call udp_socket_send service */
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	687a      	ldr	r2, [r7, #4]
 80104a6:	68b9      	ldr	r1, [r7, #8]
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f7ff ffcc 	bl	8010446 <_nx_udp_socket_send>
 80104ae:	6138      	str	r0, [r7, #16]

    return(status);
 80104b0:	693b      	ldr	r3, [r7, #16]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3718      	adds	r7, #24
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
	...

080104bc <_nx_udp_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b094      	sub	sp, #80	; 0x50
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80104ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104cc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80104d0:	f04f 31ff 	mov.w	r1, #4294967295
 80104d4:	4618      	mov	r0, r3
 80104d6:	f001 ff85 	bl	80123e4 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d119      	bne.n	8010516 <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00d      	beq.n	8010506 <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104ee:	2100      	movs	r1, #0
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7ff f8b7 	bl	800f664 <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80104f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104f8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80104fc:	4618      	mov	r0, r3
 80104fe:	f002 f9e9 	bl	80128d4 <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 8010502:	2300      	movs	r3, #0
 8010504:	e13e      	b.n	8010784 <_nx_udp_socket_unbind+0x2c8>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010508:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801050c:	4618      	mov	r0, r3
 801050e:	f002 f9e1 	bl	80128d4 <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 8010512:	2324      	movs	r3, #36	; 0x24
 8010514:	e136      	b.n	8010784 <_nx_udp_socket_unbind+0x2c8>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 801051c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801051e:	0a1a      	lsrs	r2, r3, #8
 8010520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010522:	4413      	add	r3, r2
 8010524:	f003 031f 	and.w	r3, r3, #31
 8010528:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801052a:	f3ef 8310 	mrs	r3, PRIMASK
 801052e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8010530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8010532:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8010534:	b672      	cpsid	i
    return(int_posture);
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 8010538:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	429a      	cmp	r2, r3
 8010542:	d10a      	bne.n	801055a <_nx_udp_socket_unbind+0x9e>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 8010544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010548:	33de      	adds	r3, #222	; 0xde
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	4413      	add	r3, r2
 801054e:	2200      	movs	r2, #0
 8010550:	605a      	str	r2, [r3, #4]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	64da      	str	r2, [r3, #76]	; 0x4c
 8010558:	e01d      	b.n	8010596 <_nx_udp_socket_unbind+0xda>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 8010562:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 801056c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 801056e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010572:	33de      	adds	r3, #222	; 0xde
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	4413      	add	r3, r2
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	429a      	cmp	r2, r3
 801057e:	d107      	bne.n	8010590 <_nx_udp_socket_unbind+0xd4>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010584:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010588:	33de      	adds	r3, #222	; 0xde
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	440b      	add	r3, r1
 801058e:	605a      	str	r2, [r3, #4]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	64da      	str	r2, [r3, #76]	; 0x4c
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059c:	f383 8810 	msr	PRIMASK, r3
}
 80105a0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d01b      	beq.n	80105e2 <_nx_udp_socket_unbind+0x126>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ae:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2200      	movs	r2, #0
 80105ba:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 80105bc:	e00c      	b.n	80105d8 <_nx_udp_socket_unbind+0x11c>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 80105be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105c0:	69db      	ldr	r3, [r3, #28]
 80105c2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 80105c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80105c6:	f7fb fc49 	bl	800be5c <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 80105ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105cc:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105d2:	1e5a      	subs	r2, r3, #1
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1ee      	bne.n	80105be <_nx_udp_socket_unbind+0x102>
 80105e0:	e035      	b.n	801064e <_nx_udp_socket_unbind+0x192>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d031      	beq.n	801064e <_nx_udp_socket_unbind+0x192>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ee:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 80105f6:	e026      	b.n	8010646 <_nx_udp_socket_unbind+0x18a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80105f8:	f3ef 8310 	mrs	r3, PRIMASK
 80105fc:	61fb      	str	r3, [r7, #28]
    return(posture);
 80105fe:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010600:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010602:	b672      	cpsid	i
    return(int_posture);
 8010604:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 8010606:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801060a:	2200      	movs	r2, #0
 801060c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 801060e:	4b5f      	ldr	r3, [pc, #380]	; (801078c <_nx_udp_socket_unbind+0x2d0>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3301      	adds	r3, #1
 8010614:	4a5d      	ldr	r2, [pc, #372]	; (801078c <_nx_udp_socket_unbind+0x2d0>)
 8010616:	6013      	str	r3, [r2, #0]
 8010618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801061c:	6a3b      	ldr	r3, [r7, #32]
 801061e:	f383 8810 	msr	PRIMASK, r3
}
 8010622:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 8010624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010626:	2226      	movs	r2, #38	; 0x26
 8010628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801062c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801062e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010630:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 8010632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010636:	4618      	mov	r0, r3
 8010638:	f003 f914 	bl	8013864 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010640:	1e5a      	subs	r2, r3, #1
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1d4      	bne.n	80105f8 <_nx_udp_socket_unbind+0x13c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801064e:	f3ef 8310 	mrs	r3, PRIMASK
 8010652:	617b      	str	r3, [r7, #20]
    return(posture);
 8010654:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010656:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010658:	b672      	cpsid	i
    return(int_posture);
 801065a:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 801065c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010662:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 8010664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010666:	2b00      	cmp	r3, #0
 8010668:	d07f      	beq.n	801076a <_nx_udp_socket_unbind+0x2ae>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801066a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801066c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801066e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010670:	429a      	cmp	r2, r3
 8010672:	d103      	bne.n	801067c <_nx_udp_socket_unbind+0x1c0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2200      	movs	r2, #0
 8010678:	661a      	str	r2, [r3, #96]	; 0x60
 801067a:	e00d      	b.n	8010698 <_nx_udp_socket_unbind+0x1dc>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 801067c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8010688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801068a:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 801068c:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 801068e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8010692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010694:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010696:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801069c:	1e5a      	subs	r2, r3, #1
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80106a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 80106a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106aa:	2200      	movs	r2, #0
 80106ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 80106b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b4:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 80106bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c0:	33de      	adds	r3, #222	; 0xde
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	4413      	add	r3, r2
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d022      	beq.n	8010712 <_nx_udp_socket_unbind+0x256>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 80106cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d0:	33de      	adds	r3, #222	; 0xde
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	4413      	add	r3, r2
 80106d6:	685a      	ldr	r2, [r3, #4]
            new_socket_ptr -> nx_udp_socket_bound_next =
 80106d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106da:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 80106dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106e0:	33de      	adds	r3, #222	; 0xde
 80106e2:	009b      	lsls	r3, r3, #2
 80106e4:	4413      	add	r3, r2
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 80106ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ec:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 80106ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106f2:	33de      	adds	r3, #222	; 0xde
 80106f4:	009b      	lsls	r3, r3, #2
 80106f6:	4413      	add	r3, r2
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106fe:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 8010700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010704:	33de      	adds	r3, #222	; 0xde
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	4413      	add	r3, r2
 801070a:	685b      	ldr	r3, [r3, #4]
 801070c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801070e:	651a      	str	r2, [r3, #80]	; 0x50
 8010710:	e00c      	b.n	801072c <_nx_udp_socket_unbind+0x270>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 8010712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010716:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 8010718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801071c:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 801071e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010722:	33de      	adds	r3, #222	; 0xde
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	4413      	add	r3, r2
 8010728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801072a:	605a      	str	r2, [r3, #4]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801072c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801072e:	2200      	movs	r2, #0
 8010730:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8010732:	4b16      	ldr	r3, [pc, #88]	; (801078c <_nx_udp_socket_unbind+0x2d0>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3301      	adds	r3, #1
 8010738:	4a14      	ldr	r2, [pc, #80]	; (801078c <_nx_udp_socket_unbind+0x2d0>)
 801073a:	6013      	str	r3, [r2, #0]
 801073c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f383 8810 	msr	PRIMASK, r3
}
 8010746:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8010748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801074a:	2200      	movs	r2, #0
 801074c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010752:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010756:	4618      	mov	r0, r3
 8010758:	f002 f8bc 	bl	80128d4 <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 801075c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801075e:	f003 f881 	bl	8013864 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010762:	f003 f845 	bl	80137f0 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8010766:	2300      	movs	r3, #0
 8010768:	e00c      	b.n	8010784 <_nx_udp_socket_unbind+0x2c8>
 801076a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	f383 8810 	msr	PRIMASK, r3
}
 8010774:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010778:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801077c:	4618      	mov	r0, r3
 801077e:	f002 f8a9 	bl	80128d4 <_tx_mutex_put>
        return(NX_SUCCESS);
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3750      	adds	r7, #80	; 0x50
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	240023cc 	.word	0x240023cc

08010790 <_nx_utility_string_length_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_utility_string_length_check(CHAR *input_string, UINT *string_length, UINT max_string_length)
{
 8010790:	b480      	push	{r7}
 8010792:	b087      	sub	sp, #28
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]

UINT    i;


    /* Check for invalid input pointers.  */
    if (input_string == NX_NULL)
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d101      	bne.n	80107a6 <_nx_utility_string_length_check+0x16>
    {
        return(NX_PTR_ERROR);
 80107a2:	2307      	movs	r3, #7
 80107a4:	e018      	b.n	80107d8 <_nx_utility_string_length_check+0x48>
    }

    /* Traverse the string.  */
    for (i = 0; input_string[i]; i++)
 80107a6:	2300      	movs	r3, #0
 80107a8:	617b      	str	r3, [r7, #20]
 80107aa:	e008      	b.n	80107be <_nx_utility_string_length_check+0x2e>
    {

        /* Check if the string length is bigger than the max string length.  */
        if (i >= max_string_length)
 80107ac:	697a      	ldr	r2, [r7, #20]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d301      	bcc.n	80107b8 <_nx_utility_string_length_check+0x28>
        {
            return(NX_SIZE_ERROR);
 80107b4:	2309      	movs	r3, #9
 80107b6:	e00f      	b.n	80107d8 <_nx_utility_string_length_check+0x48>
    for (i = 0; input_string[i]; i++)
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	3301      	adds	r3, #1
 80107bc:	617b      	str	r3, [r7, #20]
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	4413      	add	r3, r2
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1f0      	bne.n	80107ac <_nx_utility_string_length_check+0x1c>
    }

    /* Return the string length if string_length is not NULL.
       String_length being NULL indicates the caller needs to check for string 
       length within the max_string_length. */
    if (string_length)
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d002      	beq.n	80107d6 <_nx_utility_string_length_check+0x46>
    {
        *string_length = i;
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	697a      	ldr	r2, [r7, #20]
 80107d4:	601a      	str	r2, [r3, #0]
    }

    /* Return success.  */
    return(NX_SUCCESS);
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	371c      	adds	r7, #28
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr

080107e4 <_nxd_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_packet_info_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address,
                                   UINT *protocol, UINT *port, UINT *interface_index)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b089      	sub	sp, #36	; 0x24
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	60f8      	str	r0, [r7, #12]
 80107ec:	60b9      	str	r1, [r7, #8]
 80107ee:	607a      	str	r2, [r7, #4]
 80107f0:	603b      	str	r3, [r7, #0]
#ifdef FEATURE_NX_IPV6
NX_IPV6_HEADER *ipv6_header;
#endif /* FEATURE_NX_IPV6 */


    if (ip_address)
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d011      	beq.n	801081c <_nxd_udp_packet_info_extract+0x38>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80107fe:	2b04      	cmp	r3, #4
 8010800:	d10a      	bne.n	8010818 <_nxd_udp_packet_info_extract+0x34>
        {

            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010806:	61fb      	str	r3, [r7, #28]

            ip_address -> nxd_ip_version = NX_IP_VERSION_V4;
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2204      	movs	r2, #4
 801080c:	601a      	str	r2, [r3, #0]

            /* At this point, the IP address in the IPv4 header is in host byte order. */
            ip_address -> nxd_ip_address.v4 = ipv4_header -> nx_ip_header_source_ip;
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	68da      	ldr	r2, [r3, #12]
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	605a      	str	r2, [r3, #4]
 8010816:	e001      	b.n	801081c <_nxd_udp_packet_info_extract+0x38>
        else
#endif /* FEATURE_NX_IPV6 */
        {

            /* Invalid IP version . */
            return(NX_INVALID_PACKET);
 8010818:	2312      	movs	r3, #18
 801081a:	e032      	b.n	8010882 <_nxd_udp_packet_info_extract+0x9e>
        }
    }

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	689b      	ldr	r3, [r3, #8]
 8010820:	61bb      	str	r3, [r7, #24]

    /* Pickup the source port.  */
    source_port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	3b08      	subs	r3, #8
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	0c1b      	lsrs	r3, r3, #16
 801082a:	617b      	str	r3, [r7, #20]
    if (port != NX_NULL)
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <_nxd_udp_packet_info_extract+0x54>
    {
        *port = source_port;
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	697a      	ldr	r2, [r7, #20]
 8010836:	601a      	str	r2, [r3, #0]
    }

    if (protocol != NX_NULL)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d002      	beq.n	8010844 <_nxd_udp_packet_info_extract+0x60>
    {
        *protocol = 0x11;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2211      	movs	r2, #17
 8010842:	601a      	str	r2, [r3, #0]
    }

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, address, source_port, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    if (interface_index == NX_NULL)
 8010844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <_nxd_udp_packet_info_extract+0x6a>
    {
        return(NX_SUCCESS);
 801084a:	2300      	movs	r3, #0
 801084c:	e019      	b.n	8010882 <_nxd_udp_packet_info_extract+0x9e>
    }

    /* Search for interface index number.  Initialize interface value as
       invalid (0xFFFFFFFF).  Once we find valid interface, we will update
       the returned value. */
    *interface_index = 0xFFFFFFFF;
 801084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010850:	f04f 32ff 	mov.w	r2, #4294967295
 8010854:	601a      	str	r2, [r3, #0]

    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801085c:	2b04      	cmp	r3, #4
 801085e:	d106      	bne.n	801086e <_nxd_udp_packet_info_extract+0x8a>
    {
        nx_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010864:	613b      	str	r3, [r7, #16]
    else
    {
        return(NX_SUCCESS);
    }

    if (nx_interface == NX_NULL)
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d104      	bne.n	8010876 <_nxd_udp_packet_info_extract+0x92>
 801086c:	e001      	b.n	8010872 <_nxd_udp_packet_info_extract+0x8e>
        return(NX_SUCCESS);
 801086e:	2300      	movs	r3, #0
 8010870:	e007      	b.n	8010882 <_nxd_udp_packet_info_extract+0x9e>
    {

        /* No interface attached.  Done here, and return success. */
        return(NX_SUCCESS);
 8010872:	2300      	movs	r3, #0
 8010874:	e005      	b.n	8010882 <_nxd_udp_packet_info_extract+0x9e>
    }

    *interface_index = (UINT)nx_interface -> nx_interface_index;
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	79db      	ldrb	r3, [r3, #7]
 801087a:	461a      	mov	r2, r3
 801087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087e:	601a      	str	r2, [r3, #0]

    return(NX_SUCCESS);
 8010880:	2300      	movs	r3, #0
}
 8010882:	4618      	mov	r0, r3
 8010884:	3724      	adds	r7, #36	; 0x24
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr

0801088e <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 801088e:	b590      	push	{r4, r7, lr}
 8010890:	b097      	sub	sp, #92	; 0x5c
 8010892:	af04      	add	r7, sp, #16
 8010894:	60f8      	str	r0, [r7, #12]
 8010896:	60b9      	str	r1, [r7, #8]
 8010898:	607a      	str	r2, [r7, #4]
 801089a:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 801089c:	2300      	movs	r3, #0
 801089e:	647b      	str	r3, [r7, #68]	; 0x44
 80108a0:	2300      	movs	r3, #0
 80108a2:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 80108a4:	2300      	movs	r3, #0
 80108a6:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 80108a8:	2300      	movs	r3, #0
 80108aa:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 80108ac:	2301      	movs	r3, #1
 80108ae:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108b0:	f3ef 8310 	mrs	r3, PRIMASK
 80108b4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80108b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80108b8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80108ba:	b672      	cpsid	i
    return(int_posture);
 80108bc:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 80108be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d107      	bne.n	80108d8 <_nxd_udp_socket_send+0x4a>
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	f383 8810 	msr	PRIMASK, r3
}
 80108d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 80108d4:	2324      	movs	r3, #36	; 0x24
 80108d6:	e0d3      	b.n	8010a80 <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	f383 8810 	msr	PRIMASK, r3
}
 80108e8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b04      	cmp	r3, #4
 80108f0:	d118      	bne.n	8010924 <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6859      	ldr	r1, [r3, #4]
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108fc:	f107 0314 	add.w	r3, r7, #20
 8010900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010902:	f7f9 ff89 	bl	800a818 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801090a:	2b00      	cmp	r3, #0
 801090c:	d101      	bne.n	8010912 <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 801090e:	2321      	movs	r3, #33	; 0x21
 8010910:	e0b6      	b.n	8010a80 <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010916:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	3304      	adds	r3, #4
 801091c:	643b      	str	r3, [r7, #64]	; 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 801091e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010920:	3314      	adds	r3, #20
 8010922:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	f1a3 0208 	sub.w	r2, r3, #8
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	b2da      	uxtb	r2, r3
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010942:	1c5a      	adds	r2, r3, #1
 8010944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 801094a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010954:	441a      	add	r2, r3
 8010956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	691b      	ldr	r3, [r3, #16]
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	695a      	ldr	r2, [r3, #20]
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096e:	441a      	add	r2, r3
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010978:	f103 0208 	add.w	r2, r3, #8
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	041a      	lsls	r2, r3, #16
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 8010990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010992:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010998:	041a      	lsls	r2, r3, #16
 801099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099c:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 801099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	ba1a      	rev	r2, r3
 80109a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a6:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	ba1a      	rev	r2, r3
 80109ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b0:	605a      	str	r2, [r3, #4]
       Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
       driver is able to compute UDP checksum in hardware, let the driver handle the checksum
       computation.
     */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d003      	beq.n	80109c2 <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 80109be:	2b06      	cmp	r3, #6
 80109c0:	d136      	bne.n	8010a30 <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 80109c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c6:	f003 0310 	and.w	r3, r3, #16
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d001      	beq.n	80109d2 <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 80109ce:	2300      	movs	r3, #0
 80109d0:	63bb      	str	r3, [r7, #56]	; 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d025      	beq.n	8010a24 <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 80109dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109e2:	2111      	movs	r1, #17
 80109e4:	68b8      	ldr	r0, [r7, #8]
 80109e6:	f7f8 fc7f 	bl	80092e8 <_nx_ip_checksum_compute>
 80109ea:	4603      	mov	r3, r0
 80109ec:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 80109ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f0:	43db      	mvns	r3, r3
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 80109f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d102      	bne.n	8010a02 <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 80109fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a00:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8010a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	ba1a      	rev	r2, r3
 8010a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0a:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8010a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0e:	685a      	ldr	r2, [r3, #4]
 8010a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a12:	431a      	orrs	r2, r3
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8010a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	ba1a      	rev	r2, r3
 8010a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a20:	605a      	str	r2, [r3, #4]
 8010a22:	e005      	b.n	8010a30 <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a28:	f043 0210 	orr.w	r2, r3, #16
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8010a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a32:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010a36:	f04f 31ff 	mov.w	r1, #4294967295
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f001 fcd2 	bl	80123e4 <_tx_mutex_get>

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2b04      	cmp	r3, #4
 8010a46:	d114      	bne.n	8010a72 <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6858      	ldr	r0, [r3, #4]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010a58:	6979      	ldr	r1, [r7, #20]
 8010a5a:	9103      	str	r1, [sp, #12]
 8010a5c:	9202      	str	r2, [sp, #8]
 8010a5e:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8010a62:	9201      	str	r2, [sp, #4]
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	4623      	mov	r3, r4
 8010a68:	4602      	mov	r2, r0
 8010a6a:	68b9      	ldr	r1, [r7, #8]
 8010a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a6e:	f7f9 fe61 	bl	800a734 <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f001 ff2b 	bl	80128d4 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8010a7e:	2300      	movs	r3, #0
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	374c      	adds	r7, #76	; 0x4c
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd90      	pop	{r4, r7, pc}

08010a88 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b088      	sub	sp, #32
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d007      	beq.n	8010aaa <_nxe_arp_enable+0x22>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4a1c      	ldr	r2, [pc, #112]	; (8010b10 <_nxe_arp_enable+0x88>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d102      	bne.n	8010aaa <_nxe_arp_enable+0x22>
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d101      	bne.n	8010aae <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 8010aaa:	2307      	movs	r3, #7
 8010aac:	e02c      	b.n	8010b08 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d001      	beq.n	8010abc <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 8010ab8:	2315      	movs	r3, #21
 8010aba:	e025      	b.n	8010b08 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b33      	cmp	r3, #51	; 0x33
 8010ac0:	d801      	bhi.n	8010ac6 <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 8010ac2:	2309      	movs	r3, #9
 8010ac4:	e020      	b.n	8010b08 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010ac6:	f3ef 8305 	mrs	r3, IPSR
 8010aca:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010acc:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010ace:	4b11      	ldr	r3, [pc, #68]	; (8010b14 <_nxe_arp_enable+0x8c>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d009      	beq.n	8010aec <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010ad8:	f3ef 8305 	mrs	r3, IPSR
 8010adc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010ade:	697a      	ldr	r2, [r7, #20]
 8010ae0:	4b0c      	ldr	r3, [pc, #48]	; (8010b14 <_nxe_arp_enable+0x8c>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010aea:	d304      	bcc.n	8010af6 <_nxe_arp_enable+0x6e>
 8010aec:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <_nxe_arp_enable+0x90>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4a0a      	ldr	r2, [pc, #40]	; (8010b1c <_nxe_arp_enable+0x94>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d101      	bne.n	8010afa <_nxe_arp_enable+0x72>
 8010af6:	2311      	movs	r3, #17
 8010af8:	e006      	b.n	8010b08 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	68b9      	ldr	r1, [r7, #8]
 8010afe:	68f8      	ldr	r0, [r7, #12]
 8010b00:	f7f7 f9ba 	bl	8007e78 <_nx_arp_enable>
 8010b04:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8010b06:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3720      	adds	r7, #32
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	49502020 	.word	0x49502020
 8010b14:	2400008c 	.word	0x2400008c
 8010b18:	240023d0 	.word	0x240023d0
 8010b1c:	24002470 	.word	0x24002470

08010b20 <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b086      	sub	sp, #24
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d004      	beq.n	8010b38 <_nxe_icmp_enable+0x18>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4a17      	ldr	r2, [pc, #92]	; (8010b90 <_nxe_icmp_enable+0x70>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d001      	beq.n	8010b3c <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8010b38:	2307      	movs	r3, #7
 8010b3a:	e025      	b.n	8010b88 <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d001      	beq.n	8010b4a <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8010b46:	2315      	movs	r3, #21
 8010b48:	e01e      	b.n	8010b88 <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010b4a:	f3ef 8305 	mrs	r3, IPSR
 8010b4e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010b50:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010b52:	4b10      	ldr	r3, [pc, #64]	; (8010b94 <_nxe_icmp_enable+0x74>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	4313      	orrs	r3, r2
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d009      	beq.n	8010b70 <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010b5c:	f3ef 8305 	mrs	r3, IPSR
 8010b60:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <_nxe_icmp_enable+0x74>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4313      	orrs	r3, r2
 8010b6a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010b6e:	d304      	bcc.n	8010b7a <_nxe_icmp_enable+0x5a>
 8010b70:	4b09      	ldr	r3, [pc, #36]	; (8010b98 <_nxe_icmp_enable+0x78>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a09      	ldr	r2, [pc, #36]	; (8010b9c <_nxe_icmp_enable+0x7c>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d101      	bne.n	8010b7e <_nxe_icmp_enable+0x5e>
 8010b7a:	2311      	movs	r3, #17
 8010b7c:	e004      	b.n	8010b88 <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f7f7 ff84 	bl	8008a8c <_nx_icmp_enable>
 8010b84:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8010b86:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	49502020 	.word	0x49502020
 8010b94:	2400008c 	.word	0x2400008c
 8010b98:	240023d0 	.word	0x240023d0
 8010b9c:	24002470 	.word	0x24002470

08010ba0 <_nxe_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b088      	sub	sp, #32
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d004      	beq.n	8010bbc <_nxe_ip_address_change_notify+0x1c>
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a15      	ldr	r2, [pc, #84]	; (8010c0c <_nxe_ip_address_change_notify+0x6c>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d001      	beq.n	8010bc0 <_nxe_ip_address_change_notify+0x20>
    {
        return(NX_PTR_ERROR);
 8010bbc:	2307      	movs	r3, #7
 8010bbe:	e020      	b.n	8010c02 <_nxe_ip_address_change_notify+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010bc0:	f3ef 8305 	mrs	r3, IPSR
 8010bc4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010bc6:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010bc8:	4b11      	ldr	r3, [pc, #68]	; (8010c10 <_nxe_ip_address_change_notify+0x70>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4313      	orrs	r3, r2
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d009      	beq.n	8010be6 <_nxe_ip_address_change_notify+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010bd2:	f3ef 8305 	mrs	r3, IPSR
 8010bd6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010bd8:	697a      	ldr	r2, [r7, #20]
 8010bda:	4b0d      	ldr	r3, [pc, #52]	; (8010c10 <_nxe_ip_address_change_notify+0x70>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	4313      	orrs	r3, r2
 8010be0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010be4:	d304      	bcc.n	8010bf0 <_nxe_ip_address_change_notify+0x50>
 8010be6:	4b0b      	ldr	r3, [pc, #44]	; (8010c14 <_nxe_ip_address_change_notify+0x74>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a0b      	ldr	r2, [pc, #44]	; (8010c18 <_nxe_ip_address_change_notify+0x78>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d101      	bne.n	8010bf4 <_nxe_ip_address_change_notify+0x54>
 8010bf0:	2311      	movs	r3, #17
 8010bf2:	e006      	b.n	8010c02 <_nxe_ip_address_change_notify+0x62>

    /* Call actual IP address change notify function.  */
    status =  _nx_ip_address_change_notify(ip_ptr, ip_address_change_notify, additional_info);
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	68b9      	ldr	r1, [r7, #8]
 8010bf8:	68f8      	ldr	r0, [r7, #12]
 8010bfa:	f7f8 fb15 	bl	8009228 <_nx_ip_address_change_notify>
 8010bfe:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8010c00:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3720      	adds	r7, #32
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	49502020 	.word	0x49502020
 8010c10:	2400008c 	.word	0x2400008c
 8010c14:	240023d0 	.word	0x240023d0
 8010c18:	24002470 	.word	0x24002470

08010c1c <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b088      	sub	sp, #32
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00a      	beq.n	8010c44 <_nxe_ip_address_get+0x28>
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	4a18      	ldr	r2, [pc, #96]	; (8010c94 <_nxe_ip_address_get+0x78>)
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d105      	bne.n	8010c44 <_nxe_ip_address_get+0x28>
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d002      	beq.n	8010c44 <_nxe_ip_address_get+0x28>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d101      	bne.n	8010c48 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 8010c44:	2307      	movs	r3, #7
 8010c46:	e020      	b.n	8010c8a <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010c48:	f3ef 8305 	mrs	r3, IPSR
 8010c4c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010c4e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010c50:	4b11      	ldr	r3, [pc, #68]	; (8010c98 <_nxe_ip_address_get+0x7c>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4313      	orrs	r3, r2
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d009      	beq.n	8010c6e <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010c5a:	f3ef 8305 	mrs	r3, IPSR
 8010c5e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	4b0d      	ldr	r3, [pc, #52]	; (8010c98 <_nxe_ip_address_get+0x7c>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4313      	orrs	r3, r2
 8010c68:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010c6c:	d304      	bcc.n	8010c78 <_nxe_ip_address_get+0x5c>
 8010c6e:	4b0b      	ldr	r3, [pc, #44]	; (8010c9c <_nxe_ip_address_get+0x80>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	4a0b      	ldr	r2, [pc, #44]	; (8010ca0 <_nxe_ip_address_get+0x84>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d101      	bne.n	8010c7c <_nxe_ip_address_get+0x60>
 8010c78:	2311      	movs	r3, #17
 8010c7a:	e006      	b.n	8010c8a <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	68b9      	ldr	r1, [r7, #8]
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f7f8 fb00 	bl	8009286 <_nx_ip_address_get>
 8010c86:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8010c88:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3720      	adds	r7, #32
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	49502020 	.word	0x49502020
 8010c98:	2400008c 	.word	0x2400008c
 8010c9c:	240023d0 	.word	0x240023d0
 8010ca0:	24002470 	.word	0x24002470

08010ca4 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b092      	sub	sp, #72	; 0x48
 8010ca8:	af06      	add	r7, sp, #24
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	607a      	str	r2, [r7, #4]
 8010cb0:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d012      	beq.n	8010ce2 <_nxe_ip_create+0x3e>
 8010cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00f      	beq.n	8010ce2 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 8010cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc4:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8010cc6:	4a59      	ldr	r2, [pc, #356]	; (8010e2c <_nxe_ip_create+0x188>)
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d10a      	bne.n	8010ce2 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 8010ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d007      	beq.n	8010ce2 <_nxe_ip_create+0x3e>
 8010cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d004      	beq.n	8010ce2 <_nxe_ip_create+0x3e>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 8010cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cda:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d001      	beq.n	8010ce6 <_nxe_ip_create+0x42>
    {
        return(NX_PTR_ERROR);
 8010ce2:	2307      	movs	r3, #7
 8010ce4:	e09d      	b.n	8010e22 <_nxe_ip_create+0x17e>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 8010ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ce8:	2bc7      	cmp	r3, #199	; 0xc7
 8010cea:	d801      	bhi.n	8010cf0 <_nxe_ip_create+0x4c>
    {
        return(NX_SIZE_ERROR);
 8010cec:	2309      	movs	r3, #9
 8010cee:	e098      	b.n	8010e22 <_nxe_ip_create+0x17e>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 8010cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cf2:	2b1f      	cmp	r3, #31
 8010cf4:	d901      	bls.n	8010cfa <_nxe_ip_create+0x56>
    {
        return(NX_OPTION_ERROR);
 8010cf6:	230a      	movs	r3, #10
 8010cf8:	e093      	b.n	8010e22 <_nxe_ip_create+0x17e>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 8010cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d00:	4413      	add	r3, r2
 8010d02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8010d04:	f002 fb14 	bl	8013330 <_tx_thread_identify>
 8010d08:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 8010d0a:	6a3b      	ldr	r3, [r7, #32]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d006      	beq.n	8010d1e <_nxe_ip_create+0x7a>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8010d10:	f107 0310 	add.w	r3, r7, #16
 8010d14:	461a      	mov	r2, r3
 8010d16:	2100      	movs	r1, #0
 8010d18:	6a38      	ldr	r0, [r7, #32]
 8010d1a:	f002 fb63 	bl	80133e4 <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 8010d1e:	4b44      	ldr	r3, [pc, #272]	; (8010e30 <_nxe_ip_create+0x18c>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 8010d24:	4b43      	ldr	r3, [pc, #268]	; (8010e34 <_nxe_ip_create+0x190>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 8010d2a:	e02b      	b.n	8010d84 <_nxe_ip_create+0xe0>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 8010d2c:	68fa      	ldr	r2, [r7, #12]
 8010d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d017      	beq.n	8010d64 <_nxe_ip_create+0xc0>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8010d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d36:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 8010d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d305      	bcc.n	8010d4c <_nxe_ip_create+0xa8>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8010d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d42:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8010d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d30b      	bcc.n	8010d64 <_nxe_ip_create+0xc0>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 8010d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8010d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d311      	bcc.n	8010d7c <_nxe_ip_create+0xd8>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 8010d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8010d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d20b      	bcs.n	8010d7c <_nxe_ip_create+0xd8>
        {

            /* Restore preemption.  */
            if (current_thread)
 8010d64:	6a3b      	ldr	r3, [r7, #32]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d006      	beq.n	8010d78 <_nxe_ip_create+0xd4>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	f107 0210 	add.w	r2, r7, #16
 8010d70:	4619      	mov	r1, r3
 8010d72:	6a38      	ldr	r0, [r7, #32]
 8010d74:	f002 fb36 	bl	80133e4 <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 8010d78:	2307      	movs	r3, #7
 8010d7a:	e052      	b.n	8010e22 <_nxe_ip_create+0x17e>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 8010d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7e:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8010d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 8010d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d86:	1e5a      	subs	r2, r3, #1
 8010d88:	62ba      	str	r2, [r7, #40]	; 0x28
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1ce      	bne.n	8010d2c <_nxe_ip_create+0x88>
    }

    /* Restore preemption.  */
    if (current_thread)
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d006      	beq.n	8010da2 <_nxe_ip_create+0xfe>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	f107 0210 	add.w	r2, r7, #16
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	6a38      	ldr	r0, [r7, #32]
 8010d9e:	f002 fb21 	bl	80133e4 <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d010      	beq.n	8010dca <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8010da8:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	da0d      	bge.n	8010dca <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8010db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010db8:	d007      	beq.n	8010dca <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8010dc0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8010dc4:	d001      	beq.n	8010dca <_nxe_ip_create+0x126>
    {
        return(NX_IP_ADDRESS_ERROR);
 8010dc6:	2321      	movs	r3, #33	; 0x21
 8010dc8:	e02b      	b.n	8010e22 <_nxe_ip_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010dca:	f3ef 8305 	mrs	r3, IPSR
 8010dce:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010dd0:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8010dd2:	4b19      	ldr	r3, [pc, #100]	; (8010e38 <_nxe_ip_create+0x194>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d009      	beq.n	8010df0 <_nxe_ip_create+0x14c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010ddc:	f3ef 8305 	mrs	r3, IPSR
 8010de0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010de2:	697a      	ldr	r2, [r7, #20]
 8010de4:	4b14      	ldr	r3, [pc, #80]	; (8010e38 <_nxe_ip_create+0x194>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4313      	orrs	r3, r2
 8010dea:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010dee:	d304      	bcc.n	8010dfa <_nxe_ip_create+0x156>
 8010df0:	4b12      	ldr	r3, [pc, #72]	; (8010e3c <_nxe_ip_create+0x198>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	4a12      	ldr	r2, [pc, #72]	; (8010e40 <_nxe_ip_create+0x19c>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d101      	bne.n	8010dfe <_nxe_ip_create+0x15a>
 8010dfa:	2311      	movs	r3, #17
 8010dfc:	e011      	b.n	8010e22 <_nxe_ip_create+0x17e>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 8010dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e00:	9304      	str	r3, [sp, #16]
 8010e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e04:	9303      	str	r3, [sp, #12]
 8010e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e08:	9302      	str	r3, [sp, #8]
 8010e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e0c:	9301      	str	r3, [sp, #4]
 8010e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	68b9      	ldr	r1, [r7, #8]
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f7f8 fb51 	bl	80094c0 <_nx_ip_create>
 8010e1e:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 8010e20:	69fb      	ldr	r3, [r7, #28]
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3730      	adds	r7, #48	; 0x30
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	5041434b 	.word	0x5041434b
 8010e30:	240022d0 	.word	0x240022d0
 8010e34:	240022cc 	.word	0x240022cc
 8010e38:	2400008c 	.word	0x2400008c
 8010e3c:	240023d0 	.word	0x240023d0
 8010e40:	24002470 	.word	0x24002470

08010e44 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b086      	sub	sp, #24
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	60b9      	str	r1, [r7, #8]
 8010e4e:	607a      	str	r2, [r7, #4]
 8010e50:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d007      	beq.n	8010e68 <_nxe_packet_allocate+0x24>
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4a18      	ldr	r2, [pc, #96]	; (8010ec0 <_nxe_packet_allocate+0x7c>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d102      	bne.n	8010e68 <_nxe_packet_allocate+0x24>
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d101      	bne.n	8010e6c <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 8010e68:	2307      	movs	r3, #7
 8010e6a:	e025      	b.n	8010eb8 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f003 0303 	and.w	r3, r3, #3
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d001      	beq.n	8010e7a <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 8010e76:	230a      	movs	r3, #10
 8010e78:	e01e      	b.n	8010eb8 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d013      	beq.n	8010ea8 <_nxe_packet_allocate+0x64>
 8010e80:	4b10      	ldr	r3, [pc, #64]	; (8010ec4 <_nxe_packet_allocate+0x80>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d00d      	beq.n	8010ea4 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010e88:	f3ef 8305 	mrs	r3, IPSR
 8010e8c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010e8e:	693a      	ldr	r2, [r7, #16]
 8010e90:	4b0d      	ldr	r3, [pc, #52]	; (8010ec8 <_nxe_packet_allocate+0x84>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4313      	orrs	r3, r2
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d104      	bne.n	8010ea4 <_nxe_packet_allocate+0x60>
 8010e9a:	4b0a      	ldr	r3, [pc, #40]	; (8010ec4 <_nxe_packet_allocate+0x80>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4a0b      	ldr	r2, [pc, #44]	; (8010ecc <_nxe_packet_allocate+0x88>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d101      	bne.n	8010ea8 <_nxe_packet_allocate+0x64>
 8010ea4:	2311      	movs	r3, #17
 8010ea6:	e007      	b.n	8010eb8 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	68b9      	ldr	r1, [r7, #8]
 8010eae:	68f8      	ldr	r0, [r7, #12]
 8010eb0:	f7fa fb7c 	bl	800b5ac <_nx_packet_allocate>
 8010eb4:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8010eb6:	697b      	ldr	r3, [r7, #20]
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3718      	adds	r7, #24
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	5041434b 	.word	0x5041434b
 8010ec4:	240023d0 	.word	0x240023d0
 8010ec8:	2400008c 	.word	0x2400008c
 8010ecc:	24002470 	.word	0x24002470

08010ed0 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b094      	sub	sp, #80	; 0x50
 8010ed4:	af02      	add	r7, sp, #8
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
 8010edc:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d005      	beq.n	8010ef4 <_nxe_packet_pool_create+0x24>
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d002      	beq.n	8010ef4 <_nxe_packet_pool_create+0x24>
 8010eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ef0:	2b3c      	cmp	r3, #60	; 0x3c
 8010ef2:	d001      	beq.n	8010ef8 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 8010ef4:	2307      	movs	r3, #7
 8010ef6:	e0a7      	b.n	8011048 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	3303      	adds	r3, #3
 8010efc:	f023 0303 	bic.w	r3, r3, #3
 8010f00:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8010f02:	683a      	ldr	r2, [r7, #0]
 8010f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f06:	1ad2      	subs	r2, r2, r3
 8010f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f0a:	4413      	add	r3, r2
 8010f0c:	f023 0303 	bic.w	r3, r3, #3
 8010f10:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8010f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f14:	333c      	adds	r3, #60	; 0x3c
 8010f16:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8010f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f1a:	3303      	adds	r3, #3
 8010f1c:	f023 0303 	bic.w	r3, r3, #3
 8010f20:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8010f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f26:	1ad3      	subs	r3, r2, r3
 8010f28:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8010f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	4413      	add	r3, r2
 8010f30:	3303      	adds	r3, #3
 8010f32:	f023 0203 	bic.w	r2, r3, #3
 8010f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f38:	1ad3      	subs	r3, r2, r3
 8010f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 8010f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f3e:	2b04      	cmp	r3, #4
 8010f40:	d908      	bls.n	8010f54 <_nxe_packet_pool_create+0x84>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d005      	beq.n	8010f54 <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 8010f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4c:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 8010f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d201      	bcs.n	8010f58 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 8010f54:	2309      	movs	r3, #9
 8010f56:	e077      	b.n	8011048 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 8010f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	683a      	ldr	r2, [r7, #0]
 8010f5e:	4413      	add	r3, r2
 8010f60:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8010f62:	f002 f9e5 	bl	8013330 <_tx_thread_identify>
 8010f66:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 8010f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d006      	beq.n	8010f7c <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8010f6e:	f107 0310 	add.w	r3, r7, #16
 8010f72:	461a      	mov	r2, r3
 8010f74:	2100      	movs	r1, #0
 8010f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f78:	f002 fa34 	bl	80133e4 <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 8010f7c:	4b34      	ldr	r3, [pc, #208]	; (8011050 <_nxe_packet_pool_create+0x180>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 8010f82:	4b34      	ldr	r3, [pc, #208]	; (8011054 <_nxe_packet_pool_create+0x184>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 8010f88:	e02b      	b.n	8010fe2 <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 8010f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f8c:	6a1a      	ldr	r2, [r3, #32]
 8010f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f92:	3b01      	subs	r3, #1
 8010f94:	4413      	add	r3, r2
 8010f96:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 8010f98:	68fa      	ldr	r2, [r7, #12]
 8010f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d011      	beq.n	8010fc4 <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8010fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fa2:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d303      	bcc.n	8010fb2 <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8010faa:	683a      	ldr	r2, [r7, #0]
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d308      	bcc.n	8010fc4 <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 8010fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fb4:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8010fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d30f      	bcc.n	8010fdc <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 8010fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d20b      	bcs.n	8010fdc <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d006      	beq.n	8010fd8 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	f107 0210 	add.w	r2, r7, #16
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fd4:	f002 fa06 	bl	80133e4 <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 8010fd8:	2307      	movs	r3, #7
 8010fda:	e035      	b.n	8011048 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 8010fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe0:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 8010fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fe4:	1e5a      	subs	r2, r3, #1
 8010fe6:	643a      	str	r2, [r7, #64]	; 0x40
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d1ce      	bne.n	8010f8a <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 8010fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d006      	beq.n	8011000 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	f107 0210 	add.w	r2, r7, #16
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ffc:	f002 f9f2 	bl	80133e4 <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011000:	f3ef 8305 	mrs	r3, IPSR
 8011004:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011006:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8011008:	4b13      	ldr	r3, [pc, #76]	; (8011058 <_nxe_packet_pool_create+0x188>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4313      	orrs	r3, r2
 801100e:	2b00      	cmp	r3, #0
 8011010:	d009      	beq.n	8011026 <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011012:	f3ef 8305 	mrs	r3, IPSR
 8011016:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011018:	697a      	ldr	r2, [r7, #20]
 801101a:	4b0f      	ldr	r3, [pc, #60]	; (8011058 <_nxe_packet_pool_create+0x188>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4313      	orrs	r3, r2
 8011020:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011024:	d304      	bcc.n	8011030 <_nxe_packet_pool_create+0x160>
 8011026:	4b0d      	ldr	r3, [pc, #52]	; (801105c <_nxe_packet_pool_create+0x18c>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a0d      	ldr	r2, [pc, #52]	; (8011060 <_nxe_packet_pool_create+0x190>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d101      	bne.n	8011034 <_nxe_packet_pool_create+0x164>
 8011030:	2311      	movs	r3, #17
 8011032:	e009      	b.n	8011048 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 8011034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011036:	9300      	str	r3, [sp, #0]
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	68b9      	ldr	r1, [r7, #8]
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f7fa fdb2 	bl	800bba8 <_nx_packet_pool_create>
 8011044:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 8011046:	6a3b      	ldr	r3, [r7, #32]
}
 8011048:	4618      	mov	r0, r3
 801104a:	3748      	adds	r7, #72	; 0x48
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}
 8011050:	240022d8 	.word	0x240022d8
 8011054:	240022d4 	.word	0x240022d4
 8011058:	2400008c 	.word	0x2400008c
 801105c:	240023d0 	.word	0x240023d0
 8011060:	24002470 	.word	0x24002470

08011064 <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d009      	beq.n	801108c <_nxe_packet_release+0x28>
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d005      	beq.n	801108c <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 8011086:	4a12      	ldr	r2, [pc, #72]	; (80110d0 <_nxe_packet_release+0x6c>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d001      	beq.n	8011090 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 801108c:	2307      	movs	r3, #7
 801108e:	e01a      	b.n	80110c6 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	689a      	ldr	r2, [r3, #8]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	691b      	ldr	r3, [r3, #16]
 8011098:	429a      	cmp	r2, r3
 801109a:	d201      	bcs.n	80110a0 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 801109c:	2302      	movs	r3, #2
 801109e:	e012      	b.n	80110c6 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	68da      	ldr	r2, [r3, #12]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	695b      	ldr	r3, [r3, #20]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d901      	bls.n	80110b0 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 80110ac:	2303      	movs	r3, #3
 80110ae:	e00a      	b.n	80110c6 <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f7fa fed3 	bl	800be5c <_nx_packet_release>
 80110b6:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d102      	bne.n	80110c4 <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 80110c4:	68bb      	ldr	r3, [r7, #8]
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	5041434b 	.word	0x5041434b

080110d4 <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d009      	beq.n	80110fc <_nxe_packet_transmit_release+0x28>
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d005      	beq.n	80110fc <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 80110f6:	4a12      	ldr	r2, [pc, #72]	; (8011140 <_nxe_packet_transmit_release+0x6c>)
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d001      	beq.n	8011100 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 80110fc:	2307      	movs	r3, #7
 80110fe:	e01a      	b.n	8011136 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	689a      	ldr	r2, [r3, #8]
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	691b      	ldr	r3, [r3, #16]
 8011108:	429a      	cmp	r2, r3
 801110a:	d201      	bcs.n	8011110 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 801110c:	2302      	movs	r3, #2
 801110e:	e012      	b.n	8011136 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	68da      	ldr	r2, [r3, #12]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	695b      	ldr	r3, [r3, #20]
 8011118:	429a      	cmp	r2, r3
 801111a:	d901      	bls.n	8011120 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 801111c:	2303      	movs	r3, #3
 801111e:	e00a      	b.n	8011136 <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f7fa ff53 	bl	800bfcc <_nx_packet_transmit_release>
 8011126:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d102      	bne.n	8011134 <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 8011134:	68bb      	ldr	r3, [r7, #8]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	5041434b 	.word	0x5041434b

08011144 <_nxe_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_enable(NX_IP *ip_ptr)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d004      	beq.n	801115c <_nxe_tcp_enable+0x18>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4a15      	ldr	r2, [pc, #84]	; (80111ac <_nxe_tcp_enable+0x68>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d001      	beq.n	8011160 <_nxe_tcp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 801115c:	2307      	movs	r3, #7
 801115e:	e020      	b.n	80111a2 <_nxe_tcp_enable+0x5e>
    }

    /* Check to see if TCP is already enabled.  */
    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8011166:	2b00      	cmp	r3, #0
 8011168:	d001      	beq.n	801116e <_nxe_tcp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 801116a:	2315      	movs	r3, #21
 801116c:	e019      	b.n	80111a2 <_nxe_tcp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801116e:	f3ef 8305 	mrs	r3, IPSR
 8011172:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011174:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 8011176:	4b0e      	ldr	r3, [pc, #56]	; (80111b0 <_nxe_tcp_enable+0x6c>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	4313      	orrs	r3, r2
 801117c:	2b00      	cmp	r3, #0
 801117e:	d00b      	beq.n	8011198 <_nxe_tcp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011180:	f3ef 8305 	mrs	r3, IPSR
 8011184:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011186:	68fa      	ldr	r2, [r7, #12]
 8011188:	4b09      	ldr	r3, [pc, #36]	; (80111b0 <_nxe_tcp_enable+0x6c>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4313      	orrs	r3, r2
 801118e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011192:	d201      	bcs.n	8011198 <_nxe_tcp_enable+0x54>
 8011194:	2311      	movs	r3, #17
 8011196:	e004      	b.n	80111a2 <_nxe_tcp_enable+0x5e>

    /* Call actual TCP enable function.  */
    status =  _nx_tcp_enable(ip_ptr);
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f7fb fa13 	bl	800c5c4 <_nx_tcp_enable>
 801119e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 80111a0:	697b      	ldr	r3, [r7, #20]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3718      	adds	r7, #24
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	49502020 	.word	0x49502020
 80111b0:	2400008c 	.word	0x2400008c

080111b4 <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b086      	sub	sp, #24
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d004      	beq.n	80111cc <_nxe_udp_enable+0x18>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a15      	ldr	r2, [pc, #84]	; (801121c <_nxe_udp_enable+0x68>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d001      	beq.n	80111d0 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 80111cc:	2307      	movs	r3, #7
 80111ce:	e020      	b.n	8011212 <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d001      	beq.n	80111de <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 80111da:	2315      	movs	r3, #21
 80111dc:	e019      	b.n	8011212 <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80111de:	f3ef 8305 	mrs	r3, IPSR
 80111e2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80111e4:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 80111e6:	4b0e      	ldr	r3, [pc, #56]	; (8011220 <_nxe_udp_enable+0x6c>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4313      	orrs	r3, r2
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00b      	beq.n	8011208 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80111f0:	f3ef 8305 	mrs	r3, IPSR
 80111f4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80111f6:	68fa      	ldr	r2, [r7, #12]
 80111f8:	4b09      	ldr	r3, [pc, #36]	; (8011220 <_nxe_udp_enable+0x6c>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4313      	orrs	r3, r2
 80111fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011202:	d201      	bcs.n	8011208 <_nxe_udp_enable+0x54>
 8011204:	2311      	movs	r3, #17
 8011206:	e004      	b.n	8011212 <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f7fe fa91 	bl	800f730 <_nx_udp_enable>
 801120e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8011210:	697b      	ldr	r3, [r7, #20]
}
 8011212:	4618      	mov	r0, r3
 8011214:	3718      	adds	r7, #24
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
 801121a:	bf00      	nop
 801121c:	49502020 	.word	0x49502020
 8011220:	2400008c 	.word	0x2400008c

08011224 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b096      	sub	sp, #88	; 0x58
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
 8011230:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	3303      	adds	r3, #3
 8011236:	f023 0303 	bic.w	r3, r3, #3
 801123a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801123c:	f3ef 8310 	mrs	r3, PRIMASK
 8011240:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8011242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8011244:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011246:	b672      	cpsid	i
    return(int_posture);
 8011248:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 801124a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801124c:	4b55      	ldr	r3, [pc, #340]	; (80113a4 <_tx_byte_allocate+0x180>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8011252:	2300      	movs	r3, #0
 8011254:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801125a:	621a      	str	r2, [r3, #32]
 801125c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801125e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011262:	f383 8810 	msr	PRIMASK, r3
}
 8011266:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8011268:	6879      	ldr	r1, [r7, #4]
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f000 f9b2 	bl	80115d4 <_tx_byte_pool_search>
 8011270:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011272:	f3ef 8310 	mrs	r3, PRIMASK
 8011276:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801127a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801127c:	b672      	cpsid	i
    return(int_posture);
 801127e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8011280:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8011282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011284:	2b00      	cmp	r3, #0
 8011286:	d002      	beq.n	801128e <_tx_byte_allocate+0x6a>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8011288:	2301      	movs	r3, #1
 801128a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801128c:	e006      	b.n	801129c <_tx_byte_allocate+0x78>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	6a1b      	ldr	r3, [r3, #32]
 8011292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011294:	429a      	cmp	r2, r3
 8011296:	d101      	bne.n	801129c <_tx_byte_allocate+0x78>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8011298:	2301      	movs	r3, #1
 801129a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 801129c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d0d9      	beq.n	8011256 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112a6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80112a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d008      	beq.n	80112c0 <_tx_byte_allocate+0x9c>
 80112ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112b0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112b2:	6a3b      	ldr	r3, [r7, #32]
 80112b4:	f383 8810 	msr	PRIMASK, r3
}
 80112b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80112ba:	2300      	movs	r3, #0
 80112bc:	653b      	str	r3, [r7, #80]	; 0x50
 80112be:	e06c      	b.n	801139a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d061      	beq.n	801138a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80112c6:	4b38      	ldr	r3, [pc, #224]	; (80113a8 <_tx_byte_allocate+0x184>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d007      	beq.n	80112de <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80112ce:	2310      	movs	r3, #16
 80112d0:	653b      	str	r3, [r7, #80]	; 0x50
 80112d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	f383 8810 	msr	PRIMASK, r3
}
 80112dc:	e05d      	b.n	801139a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80112de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112e0:	4a32      	ldr	r2, [pc, #200]	; (80113ac <_tx_byte_allocate+0x188>)
 80112e2:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80112e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112e6:	68fa      	ldr	r2, [r7, #12]
 80112e8:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80112ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112ec:	68ba      	ldr	r2, [r7, #8]
 80112ee:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80112f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112f2:	687a      	ldr	r2, [r7, #4]
 80112f4:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80112f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80112fc:	1c5a      	adds	r2, r3, #1
 80112fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011300:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011308:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801130e:	1c5a      	adds	r2, r3, #1
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011316:	2b00      	cmp	r3, #0
 8011318:	d109      	bne.n	801132e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801131e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011324:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801132a:	675a      	str	r2, [r3, #116]	; 0x74
 801132c:	e011      	b.n	8011352 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011332:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011338:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801133a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801133e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011344:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801134a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801134c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801134e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011350:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8011352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011354:	2209      	movs	r2, #9
 8011356:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801135a:	2201      	movs	r2, #1
 801135c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801135e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011360:	683a      	ldr	r2, [r7, #0]
 8011362:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011364:	4b10      	ldr	r3, [pc, #64]	; (80113a8 <_tx_byte_allocate+0x184>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	3301      	adds	r3, #1
 801136a:	4a0f      	ldr	r2, [pc, #60]	; (80113a8 <_tx_byte_allocate+0x184>)
 801136c:	6013      	str	r3, [r2, #0]
 801136e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011370:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	f383 8810 	msr	PRIMASK, r3
}
 8011378:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801137a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801137c:	f002 fb72 	bl	8013a64 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011386:	653b      	str	r3, [r7, #80]	; 0x50
 8011388:	e007      	b.n	801139a <_tx_byte_allocate+0x176>
 801138a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801138c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	f383 8810 	msr	PRIMASK, r3
}
 8011394:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8011396:	2310      	movs	r3, #16
 8011398:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 801139a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801139c:	4618      	mov	r0, r3
 801139e:	3758      	adds	r7, #88	; 0x58
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	240023d0 	.word	0x240023d0
 80113a8:	240023cc 	.word	0x240023cc
 80113ac:	080113b1 	.word	0x080113b1

080113b0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08e      	sub	sp, #56	; 0x38
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80113ba:	f3ef 8310 	mrs	r3, PRIMASK
 80113be:	623b      	str	r3, [r7, #32]
    return(posture);
 80113c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80113c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80113c4:	b672      	cpsid	i
    return(int_posture);
 80113c6:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80113c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113ce:	4a33      	ldr	r2, [pc, #204]	; (801149c <_tx_byte_pool_cleanup+0xec>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d158      	bne.n	8011486 <_tx_byte_pool_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	429a      	cmp	r2, r3
 80113de:	d152      	bne.n	8011486 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113e4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80113e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d04c      	beq.n	8011486 <_tx_byte_pool_cleanup+0xd6>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80113ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4a2b      	ldr	r2, [pc, #172]	; (80114a0 <_tx_byte_pool_cleanup+0xf0>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d147      	bne.n	8011486 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80113f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d043      	beq.n	8011486 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2200      	movs	r2, #0
 8011402:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8011404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011408:	1e5a      	subs	r2, r3, #1
 801140a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140c:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011412:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011416:	2b00      	cmp	r3, #0
 8011418:	d103      	bne.n	8011422 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141c:	2200      	movs	r2, #0
 801141e:	625a      	str	r2, [r3, #36]	; 0x24
 8011420:	e013      	b.n	801144a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011426:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801142c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011432:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011438:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	429a      	cmp	r2, r3
 8011442:	d102      	bne.n	801144a <_tx_byte_pool_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011448:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801144e:	2b09      	cmp	r3, #9
 8011450:	d119      	bne.n	8011486 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2210      	movs	r2, #16
 8011456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801145a:	4b12      	ldr	r3, [pc, #72]	; (80114a4 <_tx_byte_pool_cleanup+0xf4>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	3301      	adds	r3, #1
 8011460:	4a10      	ldr	r2, [pc, #64]	; (80114a4 <_tx_byte_pool_cleanup+0xf4>)
 8011462:	6013      	str	r3, [r2, #0]
 8011464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011466:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	f383 8810 	msr	PRIMASK, r3
}
 801146e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f002 f9f7 	bl	8013864 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011476:	f3ef 8310 	mrs	r3, PRIMASK
 801147a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801147c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801147e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011480:	b672      	cpsid	i
    return(int_posture);
 8011482:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011484:	637b      	str	r3, [r7, #52]	; 0x34
 8011486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011488:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f383 8810 	msr	PRIMASK, r3
}
 8011490:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011492:	bf00      	nop
 8011494:	3738      	adds	r7, #56	; 0x38
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	080113b1 	.word	0x080113b1
 80114a0:	42595445 	.word	0x42595445
 80114a4:	240023cc 	.word	0x240023cc

080114a8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b08e      	sub	sp, #56	; 0x38
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	60f8      	str	r0, [r7, #12]
 80114b0:	60b9      	str	r1, [r7, #8]
 80114b2:	607a      	str	r2, [r7, #4]
 80114b4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80114b6:	2234      	movs	r2, #52	; 0x34
 80114b8:	2100      	movs	r1, #0
 80114ba:	68f8      	ldr	r0, [r7, #12]
 80114bc:	f004 f8a6 	bl	801560c <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	f023 0303 	bic.w	r3, r3, #3
 80114c6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	68ba      	ldr	r2, [r7, #8]
 80114cc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	683a      	ldr	r2, [r7, #0]
 80114d8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	687a      	ldr	r2, [r7, #4]
 80114de:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	f1a3 0208 	sub.w	r2, r3, #8
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2202      	movs	r2, #2
 80114f4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80114fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	4413      	add	r3, r2
 8011500:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8011502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011504:	3b04      	subs	r3, #4
 8011506:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801150e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8011510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011514:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8011516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011518:	3b04      	subs	r3, #4
 801151a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801152a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011532:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8011538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801153a:	3304      	adds	r3, #4
 801153c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801153e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011540:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8011542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011544:	4a1f      	ldr	r2, [pc, #124]	; (80115c4 <_tx_byte_pool_create+0x11c>)
 8011546:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2200      	movs	r2, #0
 801154c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801154e:	f3ef 8310 	mrs	r3, PRIMASK
 8011552:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011554:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011556:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011558:	b672      	cpsid	i
    return(int_posture);
 801155a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 801155c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	4a19      	ldr	r2, [pc, #100]	; (80115c8 <_tx_byte_pool_create+0x120>)
 8011562:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8011564:	4b19      	ldr	r3, [pc, #100]	; (80115cc <_tx_byte_pool_create+0x124>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d109      	bne.n	8011580 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 801156c:	4a18      	ldr	r2, [pc, #96]	; (80115d0 <_tx_byte_pool_create+0x128>)
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	631a      	str	r2, [r3, #48]	; 0x30
 801157e:	e011      	b.n	80115a4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8011580:	4b13      	ldr	r3, [pc, #76]	; (80115d0 <_tx_byte_pool_create+0x128>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8011586:	6a3b      	ldr	r3, [r7, #32]
 8011588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801158a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 801158c:	6a3b      	ldr	r3, [r7, #32]
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	69fa      	ldr	r2, [r7, #28]
 801159c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	6a3a      	ldr	r2, [r7, #32]
 80115a2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80115a4:	4b09      	ldr	r3, [pc, #36]	; (80115cc <_tx_byte_pool_create+0x124>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	3301      	adds	r3, #1
 80115aa:	4a08      	ldr	r2, [pc, #32]	; (80115cc <_tx_byte_pool_create+0x124>)
 80115ac:	6013      	str	r3, [r2, #0]
 80115ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	f383 8810 	msr	PRIMASK, r3
}
 80115b8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80115ba:	2300      	movs	r3, #0
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3738      	adds	r7, #56	; 0x38
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	ffffeeee 	.word	0xffffeeee
 80115c8:	42595445 	.word	0x42595445
 80115cc:	24002330 	.word	0x24002330
 80115d0:	24002314 	.word	0x24002314

080115d4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b097      	sub	sp, #92	; 0x5c
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80115de:	2300      	movs	r3, #0
 80115e0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115e2:	f3ef 8310 	mrs	r3, PRIMASK
 80115e6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80115ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80115ec:	b672      	cpsid	i
    return(int_posture);
 80115ee:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80115f0:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	689a      	ldr	r2, [r3, #8]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	3b02      	subs	r3, #2
 80115fc:	00db      	lsls	r3, r3, #3
 80115fe:	4413      	add	r3, r2
 8011600:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8011602:	683a      	ldr	r2, [r7, #0]
 8011604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011606:	429a      	cmp	r2, r3
 8011608:	d308      	bcc.n	801161c <_tx_byte_pool_search+0x48>
 801160a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801160c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	f383 8810 	msr	PRIMASK, r3
}
 8011614:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8011616:	2300      	movs	r3, #0
 8011618:	653b      	str	r3, [r7, #80]	; 0x50
 801161a:	e0dd      	b.n	80117d8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801161c:	4b72      	ldr	r3, [pc, #456]	; (80117e8 <_tx_byte_pool_search+0x214>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011626:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	695b      	ldr	r3, [r3, #20]
 801162c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	68db      	ldr	r3, [r3, #12]
 8011632:	3301      	adds	r3, #1
 8011634:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8011636:	2300      	movs	r3, #0
 8011638:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801163a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801163c:	3304      	adds	r3, #4
 801163e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011642:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8011644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	4a68      	ldr	r2, [pc, #416]	; (80117ec <_tx_byte_pool_search+0x218>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d143      	bne.n	80116d6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801164e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011650:	2b00      	cmp	r3, #0
 8011652:	d104      	bne.n	801165e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011658:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801165a:	2301      	movs	r3, #1
 801165c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801165e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011660:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8011662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8011668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801166a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801166c:	1ad3      	subs	r3, r2, r3
 801166e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8011670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011672:	3b08      	subs	r3, #8
 8011674:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8011676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	429a      	cmp	r2, r3
 801167c:	d257      	bcs.n	801172e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801167e:	2300      	movs	r3, #0
 8011680:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8011682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011684:	3304      	adds	r3, #4
 8011686:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4a56      	ldr	r2, [pc, #344]	; (80117ec <_tx_byte_pool_search+0x218>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d113      	bne.n	80116be <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8011696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011698:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	1e5a      	subs	r2, r3, #1
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	695b      	ldr	r3, [r3, #20]
 80116b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d114      	bne.n	80116e0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80116ba:	615a      	str	r2, [r3, #20]
 80116bc:	e010      	b.n	80116e0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80116be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c0:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80116c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80116c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d008      	beq.n	80116e0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80116ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116d0:	3b01      	subs	r3, #1
 80116d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80116d4:	e004      	b.n	80116e0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80116d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d8:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80116da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80116e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d002      	beq.n	80116ec <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80116e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116e8:	3b01      	subs	r3, #1
 80116ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80116ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	f383 8810 	msr	PRIMASK, r3
}
 80116f6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116f8:	f3ef 8310 	mrs	r3, PRIMASK
 80116fc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80116fe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011700:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011702:	b672      	cpsid	i
    return(int_posture);
 8011704:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8011706:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6a1b      	ldr	r3, [r3, #32]
 801170c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801170e:	429a      	cmp	r2, r3
 8011710:	d009      	beq.n	8011726 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	695b      	ldr	r3, [r3, #20]
 8011716:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	3301      	adds	r3, #1
 801171e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011724:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8011726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011728:	2b00      	cmp	r3, #0
 801172a:	d186      	bne.n	801163a <_tx_byte_pool_search+0x66>
 801172c:	e000      	b.n	8011730 <_tx_byte_pool_search+0x15c>
                    break;
 801172e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8011730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011732:	2b00      	cmp	r3, #0
 8011734:	d048      	beq.n	80117c8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8011736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	1ad3      	subs	r3, r2, r3
 801173c:	2b13      	cmp	r3, #19
 801173e:	d91e      	bls.n	801177e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	3308      	adds	r3, #8
 8011744:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011746:	4413      	add	r3, r2
 8011748:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801174e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011750:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8011752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011758:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175c:	3304      	adds	r3, #4
 801175e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011762:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8011764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011766:	4a21      	ldr	r2, [pc, #132]	; (80117ec <_tx_byte_pool_search+0x218>)
 8011768:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	1c5a      	adds	r2, r3, #1
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8011774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011778:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801177e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011780:	3304      	adds	r3, #4
 8011782:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8011784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011786:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	689a      	ldr	r2, [r3, #8]
 8011792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011794:	1ad3      	subs	r3, r2, r3
 8011796:	f1a3 0208 	sub.w	r2, r3, #8
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	695b      	ldr	r3, [r3, #20]
 80117a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d105      	bne.n	80117b4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80117a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117aa:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80117ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	615a      	str	r2, [r3, #20]
 80117b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f383 8810 	msr	PRIMASK, r3
}
 80117be:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80117c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117c2:	3308      	adds	r3, #8
 80117c4:	653b      	str	r3, [r7, #80]	; 0x50
 80117c6:	e007      	b.n	80117d8 <_tx_byte_pool_search+0x204>
 80117c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	f383 8810 	msr	PRIMASK, r3
}
 80117d2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80117d4:	2300      	movs	r3, #0
 80117d6:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80117d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80117da:	4618      	mov	r0, r3
 80117dc:	375c      	adds	r7, #92	; 0x5c
 80117de:	46bd      	mov	sp, r7
 80117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop
 80117e8:	240023d0 	.word	0x240023d0
 80117ec:	ffffeeee 	.word	0xffffeeee

080117f0 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b08e      	sub	sp, #56	; 0x38
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117fa:	f3ef 8310 	mrs	r3, PRIMASK
 80117fe:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011800:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011802:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011804:	b672      	cpsid	i
    return(int_posture);
 8011806:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8011808:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801180e:	4a38      	ldr	r2, [pc, #224]	; (80118f0 <_tx_event_flags_cleanup+0x100>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d162      	bne.n	80118da <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801181a:	683a      	ldr	r2, [r7, #0]
 801181c:	429a      	cmp	r2, r3
 801181e:	d15c      	bne.n	80118da <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011824:	633b      	str	r3, [r7, #48]	; 0x30
    
            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 8011826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011828:	2b00      	cmp	r3, #0
 801182a:	d056      	beq.n	80118da <_tx_event_flags_cleanup+0xea>
            {
                
                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 801182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a30      	ldr	r2, [pc, #192]	; (80118f4 <_tx_event_flags_cleanup+0x104>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d151      	bne.n	80118da <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8011836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011838:	695b      	ldr	r3, [r3, #20]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d04d      	beq.n	80118da <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2200      	movs	r2, #0
 8011842:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8011844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011846:	695b      	ldr	r3, [r3, #20]
 8011848:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 801184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184c:	691b      	ldr	r3, [r3, #16]
 801184e:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the 
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place 
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8011850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011852:	2b00      	cmp	r3, #0
 8011854:	d020      	beq.n	8011898 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8011856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011858:	3b01      	subs	r3, #1
 801185a:	62fb      	str	r3, [r7, #44]	; 0x2c
              
                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 801185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011860:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8011862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011864:	2b00      	cmp	r3, #0
 8011866:	d103      	bne.n	8011870 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */
        
                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8011868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186a:	2200      	movs	r2, #0
 801186c:	611a      	str	r2, [r3, #16]
 801186e:	e016      	b.n	801189e <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */
    
                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011874:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801187a:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187e:	6a3a      	ldr	r2, [r7, #32]
 8011880:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8011882:	6a3b      	ldr	r3, [r7, #32]
 8011884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011886:	671a      	str	r2, [r3, #112]	; 0x70
                
                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8011888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	429a      	cmp	r2, r3
 801188e:	d106      	bne.n	801189e <_tx_event_flags_cleanup+0xae>
                                {
                
                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8011890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011894:	611a      	str	r2, [r3, #16]
 8011896:	e002      	b.n	801189e <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {
                        
                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8011898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801189a:	2201      	movs	r2, #1
 801189c:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a2:	2b07      	cmp	r3, #7
 80118a4:	d119      	bne.n	80118da <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2207      	movs	r2, #7
 80118aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80118ae:	4b12      	ldr	r3, [pc, #72]	; (80118f8 <_tx_event_flags_cleanup+0x108>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	3301      	adds	r3, #1
 80118b4:	4a10      	ldr	r2, [pc, #64]	; (80118f8 <_tx_event_flags_cleanup+0x108>)
 80118b6:	6013      	str	r3, [r2, #0]
 80118b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f383 8810 	msr	PRIMASK, r3
}
 80118c2:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing 
                               from the system timer thread right now which normally executes at the 
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f001 ffcd 	bl	8013864 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80118ca:	f3ef 8310 	mrs	r3, PRIMASK
 80118ce:	617b      	str	r3, [r7, #20]
    return(posture);
 80118d0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80118d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80118d4:	b672      	cpsid	i
    return(int_posture);
 80118d6:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80118d8:	637b      	str	r3, [r7, #52]	; 0x34
 80118da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118dc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	f383 8810 	msr	PRIMASK, r3
}
 80118e4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80118e6:	bf00      	nop
 80118e8:	3738      	adds	r7, #56	; 0x38
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	080117f1 	.word	0x080117f1
 80118f4:	4456444e 	.word	0x4456444e
 80118f8:	240023cc 	.word	0x240023cc

080118fc <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b088      	sub	sp, #32
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8011906:	2224      	movs	r2, #36	; 0x24
 8011908:	2100      	movs	r1, #0
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f003 fe7e 	bl	801560c <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	683a      	ldr	r2, [r7, #0]
 8011914:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011916:	f3ef 8310 	mrs	r3, PRIMASK
 801191a:	613b      	str	r3, [r7, #16]
    return(posture);
 801191c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 801191e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011920:	b672      	cpsid	i
    return(int_posture);
 8011922:	68fb      	ldr	r3, [r7, #12]
    
    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8011924:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	4a18      	ldr	r2, [pc, #96]	; (801198c <_tx_event_flags_create+0x90>)
 801192a:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 801192c:	4b18      	ldr	r3, [pc, #96]	; (8011990 <_tx_event_flags_create+0x94>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d109      	bne.n	8011948 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8011934:	4a17      	ldr	r2, [pc, #92]	; (8011994 <_tx_event_flags_create+0x98>)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	61da      	str	r2, [r3, #28]
 8011946:	e011      	b.n	801196c <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8011948:	4b12      	ldr	r3, [pc, #72]	; (8011994 <_tx_event_flags_create+0x98>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 801194e:	69bb      	ldr	r3, [r7, #24]
 8011950:	69db      	ldr	r3, [r3, #28]
 8011952:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8011954:	69bb      	ldr	r3, [r7, #24]
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	697a      	ldr	r2, [r7, #20]
 8011964:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	69ba      	ldr	r2, [r7, #24]
 801196a:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 801196c:	4b08      	ldr	r3, [pc, #32]	; (8011990 <_tx_event_flags_create+0x94>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	3301      	adds	r3, #1
 8011972:	4a07      	ldr	r2, [pc, #28]	; (8011990 <_tx_event_flags_create+0x94>)
 8011974:	6013      	str	r3, [r2, #0]
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	f383 8810 	msr	PRIMASK, r3
}
 8011980:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011982:	2300      	movs	r3, #0
}
 8011984:	4618      	mov	r0, r3
 8011986:	3720      	adds	r7, #32
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	4456444e 	.word	0x4456444e
 8011990:	24002324 	.word	0x24002324
 8011994:	24002300 	.word	0x24002300

08011998 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b096      	sub	sp, #88	; 0x58
 801199c:	af00      	add	r7, sp, #0
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	607a      	str	r2, [r7, #4]
 80119a4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80119a6:	f3ef 8310 	mrs	r3, PRIMASK
 80119aa:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80119ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80119ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80119b0:	b672      	cpsid	i
    return(int_posture);
 80119b2:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 80119b4:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	689b      	ldr	r3, [r3, #8]
 80119ba:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f003 0302 	and.w	r3, r3, #2
 80119c2:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	6a1b      	ldr	r3, [r3, #32]
 80119c8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 80119ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d004      	beq.n	80119da <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 80119d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d2:	43db      	mvns	r3, r3
 80119d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119d6:	4013      	ands	r3, r2
 80119d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 80119da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119dc:	2b02      	cmp	r3, #2
 80119de:	d10a      	bne.n	80119f6 <_tx_event_flags_get+0x5e>
    {
    
        /* AND request is present.  */
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 80119e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	4013      	ands	r3, r2
 80119e6:	64bb      	str	r3, [r7, #72]	; 0x48
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 80119e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d006      	beq.n	80119fe <_tx_event_flags_get+0x66>
        {
        
            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 80119f0:	2300      	movs	r3, #0
 80119f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80119f4:	e003      	b.n	80119fe <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 80119f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	4013      	ands	r3, r2
 80119fc:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    
    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 80119fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d029      	beq.n	8011a58 <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a08:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f003 0301 	and.w	r3, r3, #1
 8011a10:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 8011a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d11c      	bne.n	8011a52 <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	695b      	ldr	r3, [r3, #20]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d005      	beq.n	8011a30 <_tx_event_flags_get+0x98>
            {
            
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	691b      	ldr	r3, [r3, #16]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d101      	bne.n	8011a30 <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8011a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d106      	bne.n	8011a44 <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6a1a      	ldr	r2, [r3, #32]
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	621a      	str	r2, [r3, #32]
 8011a42:	e006      	b.n	8011a52 <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	689a      	ldr	r2, [r3, #8]
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	43db      	mvns	r3, r3
 8011a4c:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8011a52:	2300      	movs	r3, #0
 8011a54:	653b      	str	r3, [r7, #80]	; 0x50
 8011a56:	e070      	b.n	8011b3a <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d06b      	beq.n	8011b36 <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8011a5e:	4b3c      	ldr	r3, [pc, #240]	; (8011b50 <_tx_event_flags_get+0x1b8>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d002      	beq.n	8011a6c <_tx_event_flags_get+0xd4>
            {
            
                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 8011a66:	2307      	movs	r3, #7
 8011a68:	653b      	str	r3, [r7, #80]	; 0x50
 8011a6a:	e066      	b.n	8011b3a <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8011a6c:	4b39      	ldr	r3, [pc, #228]	; (8011b54 <_tx_event_flags_get+0x1bc>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8011a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a74:	4a38      	ldr	r2, [pc, #224]	; (8011b58 <_tx_event_flags_get+0x1c0>)
 8011a76:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 8011a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 8011a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8011a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a88:	683a      	ldr	r2, [r7, #0]
 8011a8a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 8011a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8011a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011a98:	1c5a      	adds	r2, r3, #1
 8011a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	695b      	ldr	r3, [r3, #20]
 8011aa4:	637b      	str	r3, [r7, #52]	; 0x34
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d109      	bne.n	8011ac0 <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ab0:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8011ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ab6:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8011ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011abc:	675a      	str	r2, [r3, #116]	; 0x74
 8011abe:	e011      	b.n	8011ae4 <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	691b      	ldr	r3, [r3, #16]
 8011ac4:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aca:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ad6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011adc:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ae2:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	695b      	ldr	r3, [r3, #20]
 8011ae8:	1c5a      	adds	r2, r3, #1
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	615a      	str	r2, [r3, #20]
            
                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8011aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af0:	2207      	movs	r2, #7
 8011af2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af6:	2201      	movs	r2, #1
 8011af8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011afe:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011b00:	4b13      	ldr	r3, [pc, #76]	; (8011b50 <_tx_event_flags_get+0x1b8>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	3301      	adds	r3, #1
 8011b06:	4a12      	ldr	r2, [pc, #72]	; (8011b50 <_tx_event_flags_get+0x1b8>)
 8011b08:	6013      	str	r3, [r2, #0]
 8011b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b0c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	f383 8810 	msr	PRIMASK, r3
}
 8011b14:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011b16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b18:	f001 ffa4 	bl	8013a64 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8011b20:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011b22:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011b24:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b26:	b672      	cpsid	i
    return(int_posture);
 8011b28:	69bb      	ldr	r3, [r7, #24]
    
                /* Disable interrupts.  */
                TX_DISABLE
 8011b2a:	657b      	str	r3, [r7, #84]	; 0x54
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b32:	653b      	str	r3, [r7, #80]	; 0x50
 8011b34:	e001      	b.n	8011b3a <_tx_event_flags_get+0x1a2>
        }
        else
        {
            
            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8011b36:	2307      	movs	r3, #7
 8011b38:	653b      	str	r3, [r7, #80]	; 0x50
 8011b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	f383 8810 	msr	PRIMASK, r3
}
 8011b44:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8011b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3758      	adds	r7, #88	; 0x58
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}
 8011b50:	240023cc 	.word	0x240023cc
 8011b54:	240023d0 	.word	0x240023d0
 8011b58:	080117f1 	.word	0x080117f1

08011b5c <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b0a6      	sub	sp, #152	; 0x98
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b68:	f3ef 8310 	mrs	r3, PRIMASK
 8011b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8011b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8011b70:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b72:	b672      	cpsid	i
    return(int_posture);
 8011b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8011b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f003 0302 	and.w	r3, r3, #2
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d023      	beq.n	8011bcc <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 8011b84:	2300      	movs	r3, #0
 8011b86:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	695b      	ldr	r3, [r3, #20]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d005      	beq.n	8011b9c <_tx_event_flags_set+0x40>
        {
            
            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	691b      	ldr	r3, [r3, #16]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d101      	bne.n	8011b9c <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8011b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	d107      	bne.n	8011bb2 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	6a1a      	ldr	r2, [r3, #32]
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	43db      	mvns	r3, r3
 8011baa:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	621a      	str	r2, [r3, #32]
 8011bb0:	e005      	b.n	8011bbe <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the 
               specified flags by "ANDing" the flags into the current events 
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	689a      	ldr	r2, [r3, #8]
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	609a      	str	r2, [r3, #8]
 8011bbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011bc2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bc6:	f383 8810 	msr	PRIMASK, r3
}
 8011bca:	e1d4      	b.n	8011f76 <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	689a      	ldr	r2, [r3, #8]
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	6a1b      	ldr	r3, [r3, #32]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d006      	beq.n	8011bee <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	6a1a      	ldr	r2, [r3, #32]
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	43db      	mvns	r3, r3
 8011be8:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	695b      	ldr	r3, [r3, #20]
 8011bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	691b      	ldr	r3, [r3, #16]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	f000 81a6 	beq.w	8011f50 <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event 
               flag group.  */
            if (suspended_count == ((UINT) 1))
 8011c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d169      	bne.n	8011ce0 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	691b      	ldr	r3, [r3, #16]
 8011c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	67fb      	str	r3, [r7, #124]	; 0x7c
            
                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8011c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c20:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 8011c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c2a:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8011c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c2e:	f003 0302 	and.w	r3, r3, #2
 8011c32:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8011c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c36:	2b02      	cmp	r3, #2
 8011c38:	d10a      	bne.n	8011c50 <_tx_event_flags_set+0xf4>
                {
    
                    /* AND request is present.  */
        
                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8011c3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c3e:	4013      	ands	r3, r2
 8011c40:	67bb      	str	r3, [r7, #120]	; 0x78
        
                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 8011c42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d006      	beq.n	8011c58 <_tx_event_flags_set+0xfc>
                    {
        
                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8011c4e:	e003      	b.n	8011c58 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8011c50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c54:	4013      	ands	r3, r2
 8011c56:	67bb      	str	r3, [r7, #120]	; 0x78
                }
    
                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8011c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	f000 817f 	beq.w	8011f5e <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 8011c60:	2301      	movs	r3, #1
 8011c62:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 8011c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011c70:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8011c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c74:	f003 0301 	and.w	r3, r3, #1
 8011c78:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8011c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d106      	bne.n	8011c8e <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	689a      	ldr	r2, [r3, #8]
 8011c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c86:	43db      	mvns	r3, r3
 8011c88:	401a      	ands	r2, r3
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2200      	movs	r2, #0
 8011c98:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8011cac:	4ba7      	ldr	r3, [pc, #668]	; (8011f4c <_tx_event_flags_set+0x3f0>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	4aa6      	ldr	r2, [pc, #664]	; (8011f4c <_tx_event_flags_set+0x3f0>)
 8011cb4:	6013      	str	r3, [r2, #0]
 8011cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011cba:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cbe:	f383 8810 	msr	PRIMASK, r3
}
 8011cc2:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8011cc4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011cc8:	f001 fdcc 	bl	8013864 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8011cd0:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8011cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8011cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011cd6:	b672      	cpsid	i
    return(int_posture);
 8011cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8011cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011cde:	e13e      	b.n	8011f5e <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be 
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	691b      	ldr	r3, [r3, #16]
 8011ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 8011ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	611a      	str	r2, [r3, #16]
        
                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8011d08:	4b90      	ldr	r3, [pc, #576]	; (8011f4c <_tx_event_flags_set+0x3f0>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	4a8f      	ldr	r2, [pc, #572]	; (8011f4c <_tx_event_flags_set+0x3f0>)
 8011d10:	6013      	str	r3, [r2, #0]
 8011d12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	f383 8810 	msr	PRIMASK, r3
}
 8011d1e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d20:	f3ef 8310 	mrs	r3, PRIMASK
 8011d24:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8011d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8011d28:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d2a:	b672      	cpsid	i
    return(int_posture);
 8011d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 8011d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d00f      	beq.n	8011d5a <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 8011d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	695b      	ldr	r3, [r3, #20]
 8011d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d56:	4313      	orrs	r3, r2
 8011d58:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8011d5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d60:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8011d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d68:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 8011d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011d72:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8011d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d76:	f003 0302 	and.w	r3, r3, #2
 8011d7a:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 8011d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d7e:	2b02      	cmp	r3, #2
 8011d80:	d10a      	bne.n	8011d98 <_tx_event_flags_set+0x23c>
                    {
    
                        /* AND request is present.  */
        
                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8011d82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d86:	4013      	ands	r3, r2
 8011d88:	67bb      	str	r3, [r7, #120]	; 0x78
        
                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 8011d8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d006      	beq.n	8011da0 <_tx_event_flags_set+0x244>
                        {
        
                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8011d92:	2300      	movs	r3, #0
 8011d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d96:	e003      	b.n	8011da0 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8011d98:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d9c:	4013      	ands	r3, r2
 8011d9e:	67bb      	str	r3, [r7, #120]	; 0x78
                    }
    
                    /* Check to see if the thread had a timeout or wait abort during the event search processing.  
                       If so, just set the flags satisfied to ensure the processing here removes the thread from 
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8011da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011da6:	2b07      	cmp	r3, #7
 8011da8:	d001      	beq.n	8011dae <_tx_event_flags_set+0x252>
                    {
            
                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8011daa:	2301      	movs	r3, #1
 8011dac:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8011dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d06b      	beq.n	8011e8c <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 8011db4:	2301      	movs	r3, #1
 8011db6:	677b      	str	r3, [r7, #116]	; 0x74
    
                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8011db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dbe:	2b07      	cmp	r3, #7
 8011dc0:	d11d      	bne.n	8011dfe <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 8011dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dcc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011dce:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8011dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dd2:	f003 0301 	and.w	r3, r3, #1
 8011dd6:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8011dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d106      	bne.n	8011dec <_tx_event_flags_set+0x290>
                            {
                
                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	689a      	ldr	r2, [r3, #8]
 8011de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011de4:	43db      	mvns	r3, r3
 8011de6:	401a      	ands	r2, r3
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	609a      	str	r2, [r3, #8]
                            }
            
                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011df0:	2200      	movs	r2, #0
 8011df2:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011df8:	2200      	movs	r2, #0
 8011dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8011dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e04:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d103      	bne.n	8011e14 <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011e12:	e018      	b.n	8011e46 <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8011e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e1a:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e22:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011e28:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8011e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e2e:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8011e30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d104      	bne.n	8011e46 <_tx_event_flags_set+0x2ea>
                            {
                                
                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8011e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	695b      	ldr	r3, [r3, #20]
 8011e4a:	1e5a      	subs	r2, r3, #1
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8011e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d10c      	bne.n	8011e72 <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 8011e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 8011e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    
                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8011e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	671a      	str	r2, [r3, #112]	; 0x70
 8011e70:	e00c      	b.n	8011e8c <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */
                
                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8011e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011e76:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011e7a:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8011e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e80:	2200      	movs	r2, #0
 8011e82:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 8011e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8011e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8011e92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e96:	3b01      	subs	r3, #1
 8011e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            
                } while (suspended_count != TX_NO_SUSPENSIONS);
 8011e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f47f af36 	bne.w	8011d12 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011eac:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	6a1b      	ldr	r3, [r3, #32]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d00a      	beq.n	8011ecc <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	689a      	ldr	r2, [r3, #8]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	6a1b      	ldr	r3, [r3, #32]
 8011ebe:	43db      	mvns	r3, r3
 8011ec0:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	621a      	str	r2, [r3, #32]
 8011ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed4:	f383 8810 	msr	PRIMASK, r3
}
 8011ed8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8011eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8011ee2:	e01f      	b.n	8011f24 <_tx_event_flags_set+0x3c8>
                {
    
                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8011ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eea:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011eec:	f3ef 8310 	mrs	r3, PRIMASK
 8011ef0:	623b      	str	r3, [r7, #32]
    return(posture);
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011ef4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ef6:	b672      	cpsid	i
    return(int_posture);
 8011ef8:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8011efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8011efe:	4b13      	ldr	r3, [pc, #76]	; (8011f4c <_tx_event_flags_set+0x3f0>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	3301      	adds	r3, #1
 8011f04:	4a11      	ldr	r2, [pc, #68]	; (8011f4c <_tx_event_flags_set+0x3f0>)
 8011f06:	6013      	str	r3, [r2, #0]
 8011f08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011f0c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f10:	f383 8810 	msr	PRIMASK, r3
}
 8011f14:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8011f16:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011f1a:	f001 fca3 	bl	8013864 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8011f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8011f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1db      	bne.n	8011ee4 <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8011f30:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011f32:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011f34:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f36:	b672      	cpsid	i
    return(int_posture);
 8011f38:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 8011f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 8011f3e:	4b03      	ldr	r3, [pc, #12]	; (8011f4c <_tx_event_flags_set+0x3f0>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	3b01      	subs	r3, #1
 8011f44:	4a01      	ldr	r2, [pc, #4]	; (8011f4c <_tx_event_flags_set+0x3f0>)
 8011f46:	6013      	str	r3, [r2, #0]
 8011f48:	e009      	b.n	8011f5e <_tx_event_flags_set+0x402>
 8011f4a:	bf00      	nop
 8011f4c:	240023cc 	.word	0x240023cc
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	695b      	ldr	r3, [r3, #20]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d002      	beq.n	8011f5e <_tx_event_flags_set+0x402>
            {
                    
                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	60da      	str	r2, [r3, #12]
 8011f5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011f62:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	f383 8810 	msr	PRIMASK, r3
}
 8011f6a:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 8011f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d101      	bne.n	8011f76 <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 8011f72:	f001 fc3d 	bl	80137f0 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8011f76:	2300      	movs	r3, #0
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3798      	adds	r7, #152	; 0x98
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}

08011f80 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8011f84:	f001 f9f2 	bl	801336c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8011f88:	f002 f80c 	bl	8013fa4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8011f8c:	4b12      	ldr	r3, [pc, #72]	; (8011fd8 <_tx_initialize_high_level+0x58>)
 8011f8e:	2200      	movs	r2, #0
 8011f90:	601a      	str	r2, [r3, #0]
 8011f92:	4b12      	ldr	r3, [pc, #72]	; (8011fdc <_tx_initialize_high_level+0x5c>)
 8011f94:	2200      	movs	r2, #0
 8011f96:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8011f98:	4b11      	ldr	r3, [pc, #68]	; (8011fe0 <_tx_initialize_high_level+0x60>)
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	601a      	str	r2, [r3, #0]
 8011f9e:	4b11      	ldr	r3, [pc, #68]	; (8011fe4 <_tx_initialize_high_level+0x64>)
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8011fa4:	4b10      	ldr	r3, [pc, #64]	; (8011fe8 <_tx_initialize_high_level+0x68>)
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	601a      	str	r2, [r3, #0]
 8011faa:	4b10      	ldr	r3, [pc, #64]	; (8011fec <_tx_initialize_high_level+0x6c>)
 8011fac:	2200      	movs	r2, #0
 8011fae:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8011fb0:	4b0f      	ldr	r3, [pc, #60]	; (8011ff0 <_tx_initialize_high_level+0x70>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	601a      	str	r2, [r3, #0]
 8011fb6:	4b0f      	ldr	r3, [pc, #60]	; (8011ff4 <_tx_initialize_high_level+0x74>)
 8011fb8:	2200      	movs	r2, #0
 8011fba:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8011fbc:	4b0e      	ldr	r3, [pc, #56]	; (8011ff8 <_tx_initialize_high_level+0x78>)
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	601a      	str	r2, [r3, #0]
 8011fc2:	4b0e      	ldr	r3, [pc, #56]	; (8011ffc <_tx_initialize_high_level+0x7c>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8011fc8:	4b0d      	ldr	r3, [pc, #52]	; (8012000 <_tx_initialize_high_level+0x80>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	601a      	str	r2, [r3, #0]
 8011fce:	4b0d      	ldr	r3, [pc, #52]	; (8012004 <_tx_initialize_high_level+0x84>)
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	601a      	str	r2, [r3, #0]
#endif
}
 8011fd4:	bf00      	nop
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	24002310 	.word	0x24002310
 8011fdc:	24002320 	.word	0x24002320
 8011fe0:	2400232c 	.word	0x2400232c
 8011fe4:	2400230c 	.word	0x2400230c
 8011fe8:	24002300 	.word	0x24002300
 8011fec:	24002324 	.word	0x24002324
 8011ff0:	24002328 	.word	0x24002328
 8011ff4:	2400231c 	.word	0x2400231c
 8011ff8:	24002314 	.word	0x24002314
 8011ffc:	24002330 	.word	0x24002330
 8012000:	24002308 	.word	0x24002308
 8012004:	24002304 	.word	0x24002304

08012008 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801200c:	4b10      	ldr	r3, [pc, #64]	; (8012050 <_tx_initialize_kernel_enter+0x48>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8012014:	d00c      	beq.n	8012030 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8012016:	4b0e      	ldr	r3, [pc, #56]	; (8012050 <_tx_initialize_kernel_enter+0x48>)
 8012018:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801201c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801201e:	f7ee f95f 	bl	80002e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 8012022:	f7ff ffad 	bl	8011f80 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8012026:	4b0b      	ldr	r3, [pc, #44]	; (8012054 <_tx_initialize_kernel_enter+0x4c>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	3301      	adds	r3, #1
 801202c:	4a09      	ldr	r2, [pc, #36]	; (8012054 <_tx_initialize_kernel_enter+0x4c>)
 801202e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8012030:	4b07      	ldr	r3, [pc, #28]	; (8012050 <_tx_initialize_kernel_enter+0x48>)
 8012032:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8012036:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8012038:	4b07      	ldr	r3, [pc, #28]	; (8012058 <_tx_initialize_kernel_enter+0x50>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4618      	mov	r0, r3
 801203e:	f7ee fabf 	bl	80005c0 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8012042:	4b03      	ldr	r3, [pc, #12]	; (8012050 <_tx_initialize_kernel_enter+0x48>)
 8012044:	2200      	movs	r2, #0
 8012046:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8012048:	f7ee f98a 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801204c:	bf00      	nop
 801204e:	bd80      	pop	{r7, pc}
 8012050:	2400008c 	.word	0x2400008c
 8012054:	240023cc 	.word	0x240023cc
 8012058:	24002318 	.word	0x24002318

0801205c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b08e      	sub	sp, #56	; 0x38
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012066:	f3ef 8310 	mrs	r3, PRIMASK
 801206a:	623b      	str	r3, [r7, #32]
    return(posture);
 801206c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801206e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012070:	b672      	cpsid	i
    return(int_posture);
 8012072:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8012074:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801207a:	4a33      	ldr	r2, [pc, #204]	; (8012148 <_tx_mutex_cleanup+0xec>)
 801207c:	4293      	cmp	r3, r2
 801207e:	d158      	bne.n	8012132 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012086:	683a      	ldr	r2, [r7, #0]
 8012088:	429a      	cmp	r2, r3
 801208a:	d152      	bne.n	8012132 <_tx_mutex_cleanup+0xd6>
        {
   
            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012090:	633b      	str	r3, [r7, #48]	; 0x30
    
            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8012092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012094:	2b00      	cmp	r3, #0
 8012096:	d04c      	beq.n	8012132 <_tx_mutex_cleanup+0xd6>
            {
    
                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8012098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4a2b      	ldr	r2, [pc, #172]	; (801214c <_tx_mutex_cleanup+0xf0>)
 801209e:	4293      	cmp	r3, r2
 80120a0:	d147      	bne.n	8012132 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80120a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a4:	69db      	ldr	r3, [r3, #28]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d043      	beq.n	8012132 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2200      	movs	r2, #0
 80120ae:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 80120b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b2:	69db      	ldr	r3, [r3, #28]
 80120b4:	1e5a      	subs	r2, r3, #1
 80120b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b8:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80120ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120bc:	69db      	ldr	r3, [r3, #28]
 80120be:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80120c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d103      	bne.n	80120ce <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80120c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c8:	2200      	movs	r2, #0
 80120ca:	619a      	str	r2, [r3, #24]
 80120cc:	e013      	b.n	80120f6 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */
    
                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120d2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120d8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120de:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80120e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120e4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80120e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e8:	699b      	ldr	r3, [r3, #24]
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d102      	bne.n	80120f6 <_tx_mutex_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 80120f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120f4:	619a      	str	r2, [r3, #24]
                            }
                        }
 
                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120fa:	2b0d      	cmp	r3, #13
 80120fc:	d119      	bne.n	8012132 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	221d      	movs	r2, #29
 8012102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012106:	4b12      	ldr	r3, [pc, #72]	; (8012150 <_tx_mutex_cleanup+0xf4>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	3301      	adds	r3, #1
 801210c:	4a10      	ldr	r2, [pc, #64]	; (8012150 <_tx_mutex_cleanup+0xf4>)
 801210e:	6013      	str	r3, [r2, #0]
 8012110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012112:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	f383 8810 	msr	PRIMASK, r3
}
 801211a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE
    
                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f001 fba1 	bl	8013864 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012122:	f3ef 8310 	mrs	r3, PRIMASK
 8012126:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012128:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801212a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801212c:	b672      	cpsid	i
    return(int_posture);
 801212e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012130:	637b      	str	r3, [r7, #52]	; 0x34
 8012132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012134:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f383 8810 	msr	PRIMASK, r3
}
 801213c:	bf00      	nop
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801213e:	bf00      	nop
 8012140:	3738      	adds	r7, #56	; 0x38
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	0801205d 	.word	0x0801205d
 801214c:	4d555445 	.word	0x4d555445
 8012150:	240023cc 	.word	0x240023cc

08012154 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b08a      	sub	sp, #40	; 0x28
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801215c:	f3ef 8310 	mrs	r3, PRIMASK
 8012160:	61fb      	str	r3, [r7, #28]
    return(posture);
 8012162:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012164:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012166:	b672      	cpsid	i
    return(int_posture);
 8012168:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801216a:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801216c:	4b1a      	ldr	r3, [pc, #104]	; (80121d8 <_tx_mutex_thread_release+0x84>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	3301      	adds	r3, #1
 8012172:	4a19      	ldr	r2, [pc, #100]	; (80121d8 <_tx_mutex_thread_release+0x84>)
 8012174:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {
    
        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801217c:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 801217e:	6a3b      	ldr	r3, [r7, #32]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d017      	beq.n	80121b4 <_tx_mutex_thread_release+0x60>
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8012184:	6a3b      	ldr	r3, [r7, #32]
 8012186:	2201      	movs	r2, #1
 8012188:	609a      	str	r2, [r3, #8]
 801218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f383 8810 	msr	PRIMASK, r3
}
 8012194:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8012196:	6a38      	ldr	r0, [r7, #32]
 8012198:	f000 fb9c 	bl	80128d4 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801219c:	f3ef 8310 	mrs	r3, PRIMASK
 80121a0:	617b      	str	r3, [r7, #20]
    return(posture);
 80121a2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80121a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80121a6:	b672      	cpsid	i
    return(int_posture);
 80121a8:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80121aa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80121b2:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 80121b4:	6a3b      	ldr	r3, [r7, #32]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d1dd      	bne.n	8012176 <_tx_mutex_thread_release+0x22>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 80121ba:	4b07      	ldr	r3, [pc, #28]	; (80121d8 <_tx_mutex_thread_release+0x84>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	3b01      	subs	r3, #1
 80121c0:	4a05      	ldr	r2, [pc, #20]	; (80121d8 <_tx_mutex_thread_release+0x84>)
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	f383 8810 	msr	PRIMASK, r3
}
 80121ce:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 80121d0:	bf00      	nop
 80121d2:	3728      	adds	r7, #40	; 0x28
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	240023cc 	.word	0x240023cc

080121dc <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b08a      	sub	sp, #40	; 0x28
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	60f8      	str	r0, [r7, #12]
 80121e4:	60b9      	str	r1, [r7, #8]
 80121e6:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80121e8:	2234      	movs	r2, #52	; 0x34
 80121ea:	2100      	movs	r1, #0
 80121ec:	68f8      	ldr	r0, [r7, #12]
 80121ee:	f003 fa0d 	bl	801560c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	68ba      	ldr	r2, [r7, #8]
 80121f6:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	687a      	ldr	r2, [r7, #4]
 80121fc:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121fe:	f3ef 8310 	mrs	r3, PRIMASK
 8012202:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012204:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012206:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012208:	b672      	cpsid	i
    return(int_posture);
 801220a:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 801220c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	4a1a      	ldr	r2, [pc, #104]	; (801227c <_tx_mutex_create+0xa0>)
 8012212:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8012214:	4b1a      	ldr	r3, [pc, #104]	; (8012280 <_tx_mutex_create+0xa4>)
 8012216:	4a1b      	ldr	r2, [pc, #108]	; (8012284 <_tx_mutex_create+0xa8>)
 8012218:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801221a:	4b1b      	ldr	r3, [pc, #108]	; (8012288 <_tx_mutex_create+0xac>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d109      	bne.n	8012236 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8012222:	4a1a      	ldr	r2, [pc, #104]	; (801228c <_tx_mutex_create+0xb0>)
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	625a      	str	r2, [r3, #36]	; 0x24
 8012234:	e011      	b.n	801225a <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8012236:	4b15      	ldr	r3, [pc, #84]	; (801228c <_tx_mutex_create+0xb0>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 801223c:	6a3b      	ldr	r3, [r7, #32]
 801223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012240:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8012242:	6a3b      	ldr	r3, [r7, #32]
 8012244:	68fa      	ldr	r2, [r7, #12]
 8012246:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	68fa      	ldr	r2, [r7, #12]
 801224c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	69fa      	ldr	r2, [r7, #28]
 8012252:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	6a3a      	ldr	r2, [r7, #32]
 8012258:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 801225a:	4b0b      	ldr	r3, [pc, #44]	; (8012288 <_tx_mutex_create+0xac>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	3301      	adds	r3, #1
 8012260:	4a09      	ldr	r2, [pc, #36]	; (8012288 <_tx_mutex_create+0xac>)
 8012262:	6013      	str	r3, [r2, #0]
 8012264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012266:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	f383 8810 	msr	PRIMASK, r3
}
 801226e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012270:	2300      	movs	r3, #0
}
 8012272:	4618      	mov	r0, r3
 8012274:	3728      	adds	r7, #40	; 0x28
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	4d555445 	.word	0x4d555445
 8012280:	240023b4 	.word	0x240023b4
 8012284:	08012155 	.word	0x08012155
 8012288:	24002304 	.word	0x24002304
 801228c:	24002308 	.word	0x24002308

08012290 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b096      	sub	sp, #88	; 0x58
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012298:	f3ef 8310 	mrs	r3, PRIMASK
 801229c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80122a0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80122a2:	b672      	cpsid	i
    return(int_posture);
 80122a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 80122a6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2200      	movs	r2, #0
 80122ac:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 80122ae:	4b4a      	ldr	r3, [pc, #296]	; (80123d8 <_tx_mutex_delete+0x148>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	3b01      	subs	r3, #1
 80122b4:	4a48      	ldr	r2, [pc, #288]	; (80123d8 <_tx_mutex_delete+0x148>)
 80122b6:	6013      	str	r3, [r2, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80122b8:	4b47      	ldr	r3, [pc, #284]	; (80123d8 <_tx_mutex_delete+0x148>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d103      	bne.n	80122c8 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 80122c0:	4b46      	ldr	r3, [pc, #280]	; (80123dc <_tx_mutex_delete+0x14c>)
 80122c2:	2200      	movs	r2, #0
 80122c4:	601a      	str	r2, [r3, #0]
 80122c6:	e013      	b.n	80122f0 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6a1b      	ldr	r3, [r3, #32]
 80122cc:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d2:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 80122d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122d8:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 80122da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122de:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 80122e0:	4b3e      	ldr	r3, [pc, #248]	; (80123dc <_tx_mutex_delete+0x14c>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d102      	bne.n	80122f0 <_tx_mutex_delete+0x60>
        {
        
            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 80122ea:	4a3c      	ldr	r2, [pc, #240]	; (80123dc <_tx_mutex_delete+0x14c>)
 80122ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122ee:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80122f0:	4b3b      	ldr	r3, [pc, #236]	; (80123e0 <_tx_mutex_delete+0x150>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	3301      	adds	r3, #1
 80122f6:	4a3a      	ldr	r2, [pc, #232]	; (80123e0 <_tx_mutex_delete+0x150>)
 80122f8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	699b      	ldr	r3, [r3, #24]
 80122fe:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2200      	movs	r2, #0
 8012304:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	69db      	ldr	r3, [r3, #28]
 801230a:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2200      	movs	r2, #0
 8012310:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8012318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801231a:	2b00      	cmp	r3, #0
 801231c:	d013      	beq.n	8012346 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2201      	movs	r2, #1
 8012322:	609a      	str	r2, [r3, #8]
 8012324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012326:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232a:	f383 8810 	msr	PRIMASK, r3
}
 801232e:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 facf 	bl	80128d4 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012336:	f3ef 8310 	mrs	r3, PRIMASK
 801233a:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 801233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 801233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012340:	b672      	cpsid	i
    return(int_posture);
 8012342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8012344:	657b      	str	r3, [r7, #84]	; 0x54
 8012346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012348:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234c:	f383 8810 	msr	PRIMASK, r3
}
 8012350:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8012352:	e024      	b.n	801239e <_tx_mutex_delete+0x10e>
    {
      
        /* Decrement the suspension count.  */
        suspended_count--;
 8012354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012356:	3b01      	subs	r3, #1
 8012358:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801235a:	f3ef 8310 	mrs	r3, PRIMASK
 801235e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8012360:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012362:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012364:	b672      	cpsid	i
    return(int_posture);
 8012366:	69bb      	ldr	r3, [r7, #24]
      
        /* Lockout interrupts.  */
        TX_DISABLE
 8012368:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801236a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801236c:	2200      	movs	r2, #0
 801236e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8012370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012372:	2201      	movs	r2, #1
 8012374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8012378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801237c:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801237e:	4b18      	ldr	r3, [pc, #96]	; (80123e0 <_tx_mutex_delete+0x150>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	3301      	adds	r3, #1
 8012384:	4a16      	ldr	r2, [pc, #88]	; (80123e0 <_tx_mutex_delete+0x150>)
 8012386:	6013      	str	r3, [r2, #0]
 8012388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801238a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	f383 8810 	msr	PRIMASK, r3
}
 8012392:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012394:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012396:	f001 fa65 	bl	8013864 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801239c:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 801239e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1d7      	bne.n	8012354 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123a4:	f3ef 8310 	mrs	r3, PRIMASK
 80123a8:	613b      	str	r3, [r7, #16]
    return(posture);
 80123aa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80123ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80123ae:	b672      	cpsid	i
    return(int_posture);
 80123b0:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80123b2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80123b4:	4b0a      	ldr	r3, [pc, #40]	; (80123e0 <_tx_mutex_delete+0x150>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	3b01      	subs	r3, #1
 80123ba:	4a09      	ldr	r2, [pc, #36]	; (80123e0 <_tx_mutex_delete+0x150>)
 80123bc:	6013      	str	r3, [r2, #0]
 80123be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	f383 8810 	msr	PRIMASK, r3
}
 80123c8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80123ca:	f001 fa11 	bl	80137f0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3758      	adds	r7, #88	; 0x58
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	24002304 	.word	0x24002304
 80123dc:	24002308 	.word	0x24002308
 80123e0:	240023cc 	.word	0x240023cc

080123e4 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b092      	sub	sp, #72	; 0x48
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123ee:	f3ef 8310 	mrs	r3, PRIMASK
 80123f2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80123f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80123f8:	b672      	cpsid	i
    return(int_posture);
 80123fa:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80123fc:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80123fe:	4b7a      	ldr	r3, [pc, #488]	; (80125e8 <_tx_mutex_get+0x204>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d144      	bne.n	8012496 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2201      	movs	r2, #1
 8012410:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012416:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8012418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801241a:	2b00      	cmp	r3, #0
 801241c:	d032      	beq.n	8012484 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	2b01      	cmp	r3, #1
 8012424:	d106      	bne.n	8012434 <_tx_mutex_get+0x50>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8012426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2220      	movs	r2, #32
 8012432:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8012434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801243a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 801243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00f      	beq.n	8012462 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8012442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012446:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8012448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012458:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801245e:	62da      	str	r2, [r3, #44]	; 0x2c
 8012460:	e009      	b.n	8012476 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8012462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012464:	687a      	ldr	r2, [r7, #4]
 8012466:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8012476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012478:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801247c:	1c5a      	adds	r2, r3, #1
 801247e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012480:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8012484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012486:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	f383 8810 	msr	PRIMASK, r3
}
 801248e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8012490:	2300      	movs	r3, #0
 8012492:	647b      	str	r3, [r7, #68]	; 0x44
 8012494:	e0a2      	b.n	80125dc <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801249c:	429a      	cmp	r2, r3
 801249e:	d10d      	bne.n	80124bc <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just 
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	689b      	ldr	r3, [r3, #8]
 80124a4:	1c5a      	adds	r2, r3, #1
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	609a      	str	r2, [r3, #8]
 80124aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	f383 8810 	msr	PRIMASK, r3
}
 80124b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80124b6:	2300      	movs	r3, #0
 80124b8:	647b      	str	r3, [r7, #68]	; 0x44
 80124ba:	e08f      	b.n	80125dc <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f000 8084 	beq.w	80125cc <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80124c4:	4b49      	ldr	r3, [pc, #292]	; (80125ec <_tx_mutex_get+0x208>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d008      	beq.n	80124de <_tx_mutex_get+0xfa>
 80124cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124ce:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	f383 8810 	msr	PRIMASK, r3
}
 80124d6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 80124d8:	231d      	movs	r3, #29
 80124da:	647b      	str	r3, [r7, #68]	; 0x44
 80124dc:	e07e      	b.n	80125dc <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	68db      	ldr	r3, [r3, #12]
 80124e2:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80124e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124e6:	4a42      	ldr	r2, [pc, #264]	; (80125f0 <_tx_mutex_get+0x20c>)
 80124e8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80124ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80124f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80124f6:	1c5a      	adds	r2, r3, #1
 80124f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124fa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	69db      	ldr	r3, [r3, #28]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d109      	bne.n	801251a <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801250a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801250c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801250e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012510:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012516:	675a      	str	r2, [r3, #116]	; 0x74
 8012518:	e011      	b.n	801253e <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	699b      	ldr	r3, [r3, #24]
 801251e:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012524:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801252a:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801252e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012530:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012536:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801253a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801253c:	675a      	str	r2, [r3, #116]	; 0x74
                }
            
                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	69db      	ldr	r3, [r3, #28]
 8012542:	1c5a      	adds	r2, r3, #1
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8012548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801254a:	220d      	movs	r2, #13
 801254c:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801254e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012550:	2201      	movs	r2, #1
 8012552:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012556:	683a      	ldr	r2, [r7, #0]
 8012558:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801255a:	4b24      	ldr	r3, [pc, #144]	; (80125ec <_tx_mutex_get+0x208>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	3301      	adds	r3, #1
 8012560:	4a22      	ldr	r2, [pc, #136]	; (80125ec <_tx_mutex_get+0x208>)
 8012562:	6013      	str	r3, [r2, #0]
 8012564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012566:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	f383 8810 	msr	PRIMASK, r3
}
 801256e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread 
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	691b      	ldr	r3, [r3, #16]
 8012574:	2b01      	cmp	r3, #1
 8012576:	d121      	bne.n	80125bc <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801257c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012580:	429a      	cmp	r2, r3
 8012582:	d903      	bls.n	801258c <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8012584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 801258c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801258e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012596:	429a      	cmp	r2, r3
 8012598:	d204      	bcs.n	80125a4 <_tx_mutex_get+0x1c0>
                    {
                    
                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 801259a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801259c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80125a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d905      	bls.n	80125bc <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80125b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b4:	4619      	mov	r1, r3
 80125b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125b8:	f000 f8ce 	bl	8012758 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80125bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80125be:	f001 fa51 	bl	8013a64 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80125c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125c8:	647b      	str	r3, [r7, #68]	; 0x44
 80125ca:	e007      	b.n	80125dc <_tx_mutex_get+0x1f8>
 80125cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f383 8810 	msr	PRIMASK, r3
}
 80125d6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80125d8:	231d      	movs	r3, #29
 80125da:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 80125dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3748      	adds	r7, #72	; 0x48
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	240023d0 	.word	0x240023d0
 80125ec:	240023cc 	.word	0x240023cc
 80125f0:	0801205d 	.word	0x0801205d

080125f4 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b092      	sub	sp, #72	; 0x48
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125fc:	f3ef 8310 	mrs	r3, PRIMASK
 8012600:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012604:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012606:	b672      	cpsid	i
    return(int_posture);
 8012608:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801260a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	69db      	ldr	r3, [r3, #28]
 8012610:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8012612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012614:	2b01      	cmp	r3, #1
 8012616:	d805      	bhi.n	8012624 <_tx_mutex_prioritize+0x30>
 8012618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801261a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801261c:	69fb      	ldr	r3, [r7, #28]
 801261e:	f383 8810 	msr	PRIMASK, r3
}
 8012622:	e092      	b.n	801274a <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8012624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012626:	2b02      	cmp	r3, #2
 8012628:	d114      	bne.n	8012654 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	699b      	ldr	r3, [r3, #24]
 801262e:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8012630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012634:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8012636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801263e:	429a      	cmp	r2, r3
 8012640:	d202      	bcs.n	8012648 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012646:	619a      	str	r2, [r3, #24]
 8012648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801264a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801264c:	69bb      	ldr	r3, [r7, #24]
 801264e:	f383 8810 	msr	PRIMASK, r3
}
 8012652:	e07a      	b.n	801274a <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	699b      	ldr	r3, [r3, #24]
 8012658:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 801265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012662:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8012664:	4b3b      	ldr	r3, [pc, #236]	; (8012754 <_tx_mutex_prioritize+0x160>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	3301      	adds	r3, #1
 801266a:	4a3a      	ldr	r2, [pc, #232]	; (8012754 <_tx_mutex_prioritize+0x160>)
 801266c:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 801266e:	2300      	movs	r3, #0
 8012670:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8012672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801267a:	429a      	cmp	r2, r3
 801267c:	d201      	bcs.n	8012682 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 801267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012684:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	f383 8810 	msr	PRIMASK, r3
}
 801268c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801268e:	f3ef 8310 	mrs	r3, PRIMASK
 8012692:	617b      	str	r3, [r7, #20]
    return(posture);
 8012694:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012696:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012698:	b672      	cpsid	i
    return(int_posture);
 801269a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801269c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	699b      	ldr	r3, [r3, #24]
 80126a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d002      	beq.n	80126ae <_tx_mutex_prioritize+0xba>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80126a8:	2301      	movs	r3, #1
 80126aa:	633b      	str	r3, [r7, #48]	; 0x30
 80126ac:	e006      	b.n	80126bc <_tx_mutex_prioritize+0xc8>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	69db      	ldr	r3, [r3, #28]
 80126b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d001      	beq.n	80126bc <_tx_mutex_prioritize+0xc8>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80126b8:	2301      	movs	r3, #1
 80126ba:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80126bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d103      	bne.n	80126ca <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80126c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126c6:	643b      	str	r3, [r7, #64]	; 0x40
 80126c8:	e00c      	b.n	80126e4 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	699b      	ldr	r3, [r3, #24]
 80126ce:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	69db      	ldr	r3, [r3, #28]
 80126d4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80126d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d8:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80126da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126de:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80126e0:	2300      	movs	r3, #0
 80126e2:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 80126e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d1c2      	bne.n	8012672 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80126ec:	4b19      	ldr	r3, [pc, #100]	; (8012754 <_tx_mutex_prioritize+0x160>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	3b01      	subs	r3, #1
 80126f2:	4a18      	ldr	r2, [pc, #96]	; (8012754 <_tx_mutex_prioritize+0x160>)
 80126f4:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 80126f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d01d      	beq.n	801273a <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80126fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012702:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8012704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012708:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801270e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8012710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012714:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8012716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801271a:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 801271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801271e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012720:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8012722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012726:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8012728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801272c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 801272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012732:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012738:	619a      	str	r2, [r3, #24]
 801273a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801273c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	f383 8810 	msr	PRIMASK, r3
}
 8012744:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012746:	f001 f853 	bl	80137f0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801274a:	2300      	movs	r3, #0
#endif
}
 801274c:	4618      	mov	r0, r3
 801274e:	3748      	adds	r7, #72	; 0x48
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	240023cc 	.word	0x240023cc

08012758 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b090      	sub	sp, #64	; 0x40
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012762:	f3ef 8310 	mrs	r3, PRIMASK
 8012766:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801276a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801276c:	b672      	cpsid	i
    return(int_posture);
 801276e:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012770:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012776:	2b00      	cmp	r3, #0
 8012778:	d017      	beq.n	80127aa <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	683a      	ldr	r2, [r7, #0]
 801277e:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012786:	683a      	ldr	r2, [r7, #0]
 8012788:	429a      	cmp	r2, r3
 801278a:	d905      	bls.n	8012798 <_tx_mutex_priority_change+0x40>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	63da      	str	r2, [r3, #60]	; 0x3c
 8012796:	e002      	b.n	801279e <_tx_mutex_priority_change+0x46>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	683a      	ldr	r2, [r7, #0]
 801279c:	63da      	str	r2, [r3, #60]	; 0x3c
 801279e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a4:	f383 8810 	msr	PRIMASK, r3
}
 80127a8:	e089      	b.n	80128be <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80127aa:	4b47      	ldr	r3, [pc, #284]	; (80128c8 <_tx_mutex_priority_change+0x170>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127b4:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80127b6:	4b45      	ldr	r3, [pc, #276]	; (80128cc <_tx_mutex_priority_change+0x174>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	3302      	adds	r3, #2
 80127bc:	4a43      	ldr	r2, [pc, #268]	; (80128cc <_tx_mutex_priority_change+0x174>)
 80127be:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	220e      	movs	r2, #14
 80127c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2201      	movs	r2, #1
 80127ca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2200      	movs	r2, #0
 80127d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80127d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127d6:	69bb      	ldr	r3, [r7, #24]
 80127d8:	f383 8810 	msr	PRIMASK, r3
}
 80127dc:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the 
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f001 f940 	bl	8013a64 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127e4:	f3ef 8310 	mrs	r3, PRIMASK
 80127e8:	623b      	str	r3, [r7, #32]
    return(posture);
 80127ea:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80127ec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127ee:	b672      	cpsid	i
    return(int_posture);
 80127f0:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 80127f2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have 
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012800:	683a      	ldr	r2, [r7, #0]
 8012802:	429a      	cmp	r2, r3
 8012804:	d905      	bls.n	8012812 <_tx_mutex_priority_change+0xba>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	63da      	str	r2, [r3, #60]	; 0x3c
 8012810:	e002      	b.n	8012818 <_tx_mutex_priority_change+0xc0>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	683a      	ldr	r2, [r7, #0]
 8012816:	63da      	str	r2, [r3, #60]	; 0x3c
 8012818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801281a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	f383 8810 	msr	PRIMASK, r3
}
 8012822:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f001 f81d 	bl	8013864 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801282a:	f3ef 8310 	mrs	r3, PRIMASK
 801282e:	617b      	str	r3, [r7, #20]
    return(posture);
 8012830:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012832:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012834:	b672      	cpsid	i
    return(int_posture);
 8012836:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8012838:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
        
        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 801283a:	4b23      	ldr	r3, [pc, #140]	; (80128c8 <_tx_mutex_priority_change+0x170>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012844:	429a      	cmp	r2, r3
 8012846:	d034      	beq.n	80128b2 <_tx_mutex_priority_change+0x15a>
        {
        
            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801284c:	2b00      	cmp	r3, #0
 801284e:	d130      	bne.n	80128b2 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012858:	429a      	cmp	r2, r3
 801285a:	d811      	bhi.n	8012880 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012860:	429a      	cmp	r2, r3
 8012862:	d126      	bne.n	80128b2 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8012864:	4a18      	ldr	r2, [pc, #96]	; (80128c8 <_tx_mutex_priority_change+0x170>)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 801286a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	429a      	cmp	r2, r3
 8012870:	d21f      	bcs.n	80128b2 <_tx_mutex_priority_change+0x15a>
                        {
                        
                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012876:	4916      	ldr	r1, [pc, #88]	; (80128d0 <_tx_mutex_priority_change+0x178>)
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801287e:	e018      	b.n	80128b2 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012888:	429a      	cmp	r2, r3
 801288a:	d212      	bcs.n	80128b2 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012894:	429a      	cmp	r2, r3
 8012896:	d80c      	bhi.n	80128b2 <_tx_mutex_priority_change+0x15a>
                        {
                
                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012898:	4a0b      	ldr	r2, [pc, #44]	; (80128c8 <_tx_mutex_priority_change+0x170>)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 801289e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d205      	bcs.n	80128b2 <_tx_mutex_priority_change+0x15a>
                            {
                        
                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128aa:	4909      	ldr	r1, [pc, #36]	; (80128d0 <_tx_mutex_priority_change+0x178>)
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80128b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128b4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	f383 8810 	msr	PRIMASK, r3
}
 80128bc:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80128be:	bf00      	nop
 80128c0:	3740      	adds	r7, #64	; 0x40
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	240023d4 	.word	0x240023d4
 80128cc:	240023cc 	.word	0x240023cc
 80128d0:	24002334 	.word	0x24002334

080128d4 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b0a6      	sub	sp, #152	; 0x98
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80128dc:	2320      	movs	r3, #32
 80128de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80128e2:	f3ef 8310 	mrs	r3, PRIMASK
 80128e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 80128e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 80128ea:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 80128ec:	b672      	cpsid	i
    return(int_posture);
 80128ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 80128f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	689b      	ldr	r3, [r3, #8]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	f000 81ff 	beq.w	8012cfc <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8012904:	4ba3      	ldr	r3, [pc, #652]	; (8012b94 <_tx_mutex_put+0x2c0>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012910:	429a      	cmp	r2, r3
 8012912:	d00d      	beq.n	8012930 <_tx_mutex_put+0x5c>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8012914:	4ba0      	ldr	r3, [pc, #640]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d109      	bne.n	8012930 <_tx_mutex_put+0x5c>
 801291c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012920:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012924:	f383 8810 	msr	PRIMASK, r3
}
 8012928:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 801292a:	231e      	movs	r3, #30
 801292c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }
        
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8012930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012934:	2b20      	cmp	r3, #32
 8012936:	f040 81eb 	bne.w	8012d10 <_tx_mutex_put+0x43c>
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	689b      	ldr	r3, [r3, #8]
 801293e:	1e5a      	subs	r2, r3, #1
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	689b      	ldr	r3, [r3, #8]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d00a      	beq.n	8012962 <_tx_mutex_put+0x8e>
 801294c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012950:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012954:	f383 8810 	msr	PRIMASK, r3
}
 8012958:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 801295a:	2300      	movs	r3, #0
 801295c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012960:	e1d6      	b.n	8012d10 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8012962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012964:	2b00      	cmp	r3, #0
 8012966:	d10a      	bne.n	801297e <_tx_mutex_put+0xaa>
 8012968:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801296c:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801296e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012970:	f383 8810 	msr	PRIMASK, r3
}
 8012974:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8012976:	2300      	movs	r3, #0
 8012978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801297c:	e1c8      	b.n	8012d10 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 801297e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012980:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012984:	1e5a      	subs	r2, r3, #1
 8012986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012988:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 801298c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801298e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012992:	2b00      	cmp	r3, #0
 8012994:	d104      	bne.n	80129a0 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8012996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012998:	2200      	movs	r2, #0
 801299a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 801299e:	e019      	b.n	80129d4 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129ac:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80129ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80129b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80129b4:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80129b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80129bc:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80129be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80129c4:	687a      	ldr	r2, [r7, #4]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d104      	bne.n	80129d4 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 80129ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80129d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	699b      	ldr	r3, [r3, #24]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d110      	bne.n	80129fe <_tx_mutex_put+0x12a>
                    {
                    
                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	691b      	ldr	r3, [r3, #16]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d10c      	bne.n	80129fe <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2200      	movs	r2, #0
 80129e8:	60da      	str	r2, [r3, #12]
 80129ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129ee:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129f2:	f383 8810 	msr	PRIMASK, r3
}
 80129f6:	bf00      	nop
                            
                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 80129f8:	2300      	movs	r3, #0
 80129fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }
                     
                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80129fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012a02:	2b20      	cmp	r3, #32
 8012a04:	f040 8184 	bne.w	8012d10 <_tx_mutex_put+0x43c>
                    {
   
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8012a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012a14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	691b      	ldr	r3, [r3, #16]
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d155      	bne.n	8012acc <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012a20:	4b5d      	ldr	r3, [pc, #372]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	3301      	adds	r3, #1
 8012a26:	4a5c      	ldr	r2, [pc, #368]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012a28:	6013      	str	r3, [r2, #0]
 8012a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012a2e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a32:	f383 8810 	msr	PRIMASK, r3
}
 8012a36:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012a38:	2320      	movs	r3, #32
 8012a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            
                            /* Search the owned mutexes for this thread to determine the highest priority for this 
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8012a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8012a48:	e01f      	b.n	8012a8a <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8012a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a4e:	691b      	ldr	r3, [r3, #16]
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	d10b      	bne.n	8012a6c <_tx_mutex_put+0x198>
                                {
                            
                                    /* Determine if highest priority field of the mutex is higher than the priority to 
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8012a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d904      	bls.n	8012a6c <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8012a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8012a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8012a76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012a7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d102      	bne.n	8012a8a <_tx_mutex_put+0x1b6>
                                {
                            
                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8012a84:	2300      	movs	r3, #0
 8012a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8012a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d1db      	bne.n	8012a4a <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012a92:	f3ef 8310 	mrs	r3, PRIMASK
 8012a96:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8012a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8012a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012a9c:	b672      	cpsid	i
    return(int_posture);
 8012a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012aa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012aa4:	4b3c      	ldr	r3, [pc, #240]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	4a3b      	ldr	r2, [pc, #236]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012aac:	6013      	str	r3, [r2, #0]
#endif
                       
                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8012aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ab0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012ab4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                                
                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8012ab8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d203      	bcs.n	8012acc <_tx_mutex_put+0x1f8>
                            {
                            
                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8012ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	69db      	ldr	r3, [r3, #28]
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d920      	bls.n	8012b16 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	691b      	ldr	r3, [r3, #16]
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d11c      	bne.n	8012b16 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8012adc:	4b2e      	ldr	r3, [pc, #184]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	4a2d      	ldr	r2, [pc, #180]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012ae4:	6013      	str	r3, [r2, #0]
 8012ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012aea:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aee:	f383 8810 	msr	PRIMASK, r3
}
 8012af2:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f7ff fd7d 	bl	80125f4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012afa:	f3ef 8310 	mrs	r3, PRIMASK
 8012afe:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012b02:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b04:	b672      	cpsid	i
    return(int_posture);
 8012b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8012b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8012b0c:	4b22      	ldr	r3, [pc, #136]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	3b01      	subs	r3, #1
 8012b12:	4a21      	ldr	r2, [pc, #132]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012b14:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	699b      	ldr	r3, [r3, #24]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d13e      	bne.n	8012b9c <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012b1e:	4b1e      	ldr	r3, [pc, #120]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	3301      	adds	r3, #1
 8012b24:	4a1c      	ldr	r2, [pc, #112]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012b26:	6013      	str	r3, [r2, #0]
 8012b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b30:	f383 8810 	msr	PRIMASK, r3
}
 8012b34:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that 
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2220      	movs	r2, #32
 8012b3a:	629a      	str	r2, [r3, #40]	; 0x28
  
                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	68db      	ldr	r3, [r3, #12]
 8012b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d006      	beq.n	8012b58 <_tx_mutex_put+0x284>
                            {
                      
                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ff fe00 	bl	8012758 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b58:	f3ef 8310 	mrs	r3, PRIMASK
 8012b5c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012b60:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b62:	b672      	cpsid	i
    return(int_posture);
 8012b64:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8012b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012b6a:	4b0b      	ldr	r3, [pc, #44]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	3b01      	subs	r3, #1
 8012b70:	4a09      	ldr	r2, [pc, #36]	; (8012b98 <_tx_mutex_put+0x2c4>)
 8012b72:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	60da      	str	r2, [r3, #12]
 8012b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b82:	f383 8810 	msr	PRIMASK, r3
}
 8012b86:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8012b88:	f000 fe32 	bl	80137f0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012b92:	e0bd      	b.n	8012d10 <_tx_mutex_put+0x43c>
 8012b94:	240023d0 	.word	0x240023d0
 8012b98:	240023cc 	.word	0x240023cc
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	699b      	ldr	r3, [r3, #24]
 8012ba0:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	691b      	ldr	r3, [r3, #16]
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	d10a      	bne.n	8012bc0 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        
                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8012bb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2220      	movs	r2, #32
 8012bbe:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8012bc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012bc6:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8012bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d10a      	bne.n	8012be4 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8012bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	631a      	str	r2, [r3, #48]	; 0x30
 8012be2:	e016      	b.n	8012c12 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8012be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012be6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8012bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bf4:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8012bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8012bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012c08:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012c10:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8012c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c14:	1c5a      	adds	r2, r3, #1
 8012c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2201      	movs	r2, #1
 8012c20:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c26:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	69db      	ldr	r3, [r3, #28]
 8012c2c:	1e5a      	subs	r2, r3, #1
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	61da      	str	r2, [r3, #28]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	69db      	ldr	r3, [r3, #28]
 8012c36:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8012c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d103      	bne.n	8012c46 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2200      	movs	r2, #0
 8012c42:	619a      	str	r2, [r3, #24]
 8012c44:	e00e      	b.n	8012c64 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8012c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c4a:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012c50:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8012c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c56:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8012c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012c5c:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8012c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012c62:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c66:	2200      	movs	r2, #0
 8012c68:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012c72:	4b2a      	ldr	r3, [pc, #168]	; (8012d1c <_tx_mutex_put+0x448>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	3301      	adds	r3, #1
 8012c78:	4a28      	ldr	r2, [pc, #160]	; (8012d1c <_tx_mutex_put+0x448>)
 8012c7a:	6013      	str	r3, [r2, #0]
 8012c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012c80:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	f383 8810 	msr	PRIMASK, r3
}
 8012c88:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	691b      	ldr	r3, [r3, #16]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d12d      	bne.n	8012cee <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */
        
                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	69db      	ldr	r3, [r3, #28]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d01c      	beq.n	8012cd4 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f7ff fcaa 	bl	80125f4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8012ca4:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012ca6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012ca8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012caa:	b672      	cpsid	i
    return(int_posture);
 8012cac:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8012cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	699b      	ldr	r3, [r3, #24]
 8012cb6:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8012cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d003      	beq.n	8012cc6 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8012cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	629a      	str	r2, [r3, #40]	; 0x28
 8012cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012cca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	f383 8810 	msr	PRIMASK, r3
}
 8012cd2:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */
                    
                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8012cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cda:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d005      	beq.n	8012cee <_tx_mutex_put+0x41a>
                                {
        
                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8012ce2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012ce6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8012cea:	f7ff fd35 	bl	8012758 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8012cee:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012cf0:	f000 fdb8 	bl	8013864 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012cfa:	e009      	b.n	8012d10 <_tx_mutex_put+0x43c>
 8012cfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d00:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	f383 8810 	msr	PRIMASK, r3
}
 8012d08:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8012d0a:	231e      	movs	r3, #30
 8012d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8012d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3798      	adds	r7, #152	; 0x98
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	240023cc 	.word	0x240023cc

08012d20 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b08e      	sub	sp, #56	; 0x38
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8012d2e:	623b      	str	r3, [r7, #32]
    return(posture);
 8012d30:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012d32:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d34:	b672      	cpsid	i
    return(int_posture);
 8012d36:	69fb      	ldr	r3, [r7, #28]
    

#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8012d38:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012d3e:	4a33      	ldr	r2, [pc, #204]	; (8012e0c <_tx_semaphore_cleanup+0xec>)
 8012d40:	4293      	cmp	r3, r2
 8012d42:	d158      	bne.n	8012df6 <_tx_semaphore_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012d4a:	683a      	ldr	r2, [r7, #0]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d152      	bne.n	8012df6 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d54:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8012d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d04c      	beq.n	8012df6 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8012d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	4a2b      	ldr	r2, [pc, #172]	; (8012e10 <_tx_semaphore_cleanup+0xf0>)
 8012d62:	4293      	cmp	r3, r2
 8012d64:	d147      	bne.n	8012df6 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	691b      	ldr	r3, [r3, #16]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d043      	beq.n	8012df6 <_tx_semaphore_cleanup+0xd6>
#endif
                
                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2200      	movs	r2, #0
 8012d72:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8012d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d76:	691b      	ldr	r3, [r3, #16]
 8012d78:	1e5a      	subs	r2, r3, #1
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	691b      	ldr	r3, [r3, #16]
 8012d82:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d103      	bne.n	8012d92 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	60da      	str	r2, [r3, #12]
 8012d90:	e013      	b.n	8012dba <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d96:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d9c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012da2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012da8:	671a      	str	r2, [r3, #112]	; 0x70
            
                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d102      	bne.n	8012dba <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8012db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012db8:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dbe:	2b06      	cmp	r3, #6
 8012dc0:	d119      	bne.n	8012df6 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	220d      	movs	r2, #13
 8012dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012dca:	4b12      	ldr	r3, [pc, #72]	; (8012e14 <_tx_semaphore_cleanup+0xf4>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	3301      	adds	r3, #1
 8012dd0:	4a10      	ldr	r2, [pc, #64]	; (8012e14 <_tx_semaphore_cleanup+0xf4>)
 8012dd2:	6013      	str	r3, [r2, #0]
 8012dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	f383 8810 	msr	PRIMASK, r3
}
 8012dde:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012de0:	6878      	ldr	r0, [r7, #4]
 8012de2:	f000 fd3f 	bl	8013864 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012de6:	f3ef 8310 	mrs	r3, PRIMASK
 8012dea:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012dec:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012dee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012df0:	b672      	cpsid	i
    return(int_posture);
 8012df2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012df4:	637b      	str	r3, [r7, #52]	; 0x34
 8012df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012df8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	f383 8810 	msr	PRIMASK, r3
}
 8012e00:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012e02:	bf00      	nop
 8012e04:	3738      	adds	r7, #56	; 0x38
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	08012d21 	.word	0x08012d21
 8012e10:	53454d41 	.word	0x53454d41
 8012e14:	240023cc 	.word	0x240023cc

08012e18 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b08a      	sub	sp, #40	; 0x28
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	60f8      	str	r0, [r7, #12]
 8012e20:	60b9      	str	r1, [r7, #8]
 8012e22:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8012e24:	221c      	movs	r2, #28
 8012e26:	2100      	movs	r1, #0
 8012e28:	68f8      	ldr	r0, [r7, #12]
 8012e2a:	f002 fbef 	bl	801560c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	68ba      	ldr	r2, [r7, #8]
 8012e32:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	687a      	ldr	r2, [r7, #4]
 8012e38:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8012e3e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012e40:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012e42:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e44:	b672      	cpsid	i
    return(int_posture);
 8012e46:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8012e48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	4a18      	ldr	r2, [pc, #96]	; (8012eb0 <_tx_semaphore_create+0x98>)
 8012e4e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8012e50:	4b18      	ldr	r3, [pc, #96]	; (8012eb4 <_tx_semaphore_create+0x9c>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d109      	bne.n	8012e6c <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8012e58:	4a17      	ldr	r2, [pc, #92]	; (8012eb8 <_tx_semaphore_create+0xa0>)
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	68fa      	ldr	r2, [r7, #12]
 8012e68:	619a      	str	r2, [r3, #24]
 8012e6a:	e011      	b.n	8012e90 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8012e6c:	4b12      	ldr	r3, [pc, #72]	; (8012eb8 <_tx_semaphore_create+0xa0>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8012e72:	6a3b      	ldr	r3, [r7, #32]
 8012e74:	699b      	ldr	r3, [r3, #24]
 8012e76:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8012e78:	6a3b      	ldr	r3, [r7, #32]
 8012e7a:	68fa      	ldr	r2, [r7, #12]
 8012e7c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8012e7e:	69fb      	ldr	r3, [r7, #28]
 8012e80:	68fa      	ldr	r2, [r7, #12]
 8012e82:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	69fa      	ldr	r2, [r7, #28]
 8012e88:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	6a3a      	ldr	r2, [r7, #32]
 8012e8e:	615a      	str	r2, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8012e90:	4b08      	ldr	r3, [pc, #32]	; (8012eb4 <_tx_semaphore_create+0x9c>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	3301      	adds	r3, #1
 8012e96:	4a07      	ldr	r2, [pc, #28]	; (8012eb4 <_tx_semaphore_create+0x9c>)
 8012e98:	6013      	str	r3, [r2, #0]
 8012e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	f383 8810 	msr	PRIMASK, r3
}
 8012ea4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012ea6:	2300      	movs	r3, #0
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3728      	adds	r7, #40	; 0x28
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}
 8012eb0:	53454d41 	.word	0x53454d41
 8012eb4:	24002320 	.word	0x24002320
 8012eb8:	24002310 	.word	0x24002310

08012ebc <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b08e      	sub	sp, #56	; 0x38
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012eca:	f3ef 8310 	mrs	r3, PRIMASK
 8012ece:	623b      	str	r3, [r7, #32]
    return(posture);
 8012ed0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012ed2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ed4:	b672      	cpsid	i
    return(int_posture);
 8012ed6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8012ed8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	689b      	ldr	r3, [r3, #8]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d00a      	beq.n	8012ef8 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	1e5a      	subs	r2, r3, #1
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	609a      	str	r2, [r3, #8]
 8012eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	f383 8810 	msr	PRIMASK, r3
}
 8012ef6:	e068      	b.n	8012fca <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d05d      	beq.n	8012fba <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8012efe:	4b35      	ldr	r3, [pc, #212]	; (8012fd4 <_tx_semaphore_get+0x118>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d008      	beq.n	8012f18 <_tx_semaphore_get+0x5c>
 8012f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f08:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	f383 8810 	msr	PRIMASK, r3
}
 8012f10:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8012f12:	230d      	movs	r3, #13
 8012f14:	637b      	str	r3, [r7, #52]	; 0x34
 8012f16:	e058      	b.n	8012fca <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012f18:	4b2f      	ldr	r3, [pc, #188]	; (8012fd8 <_tx_semaphore_get+0x11c>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8012f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f20:	4a2e      	ldr	r2, [pc, #184]	; (8012fdc <_tx_semaphore_get+0x120>)
 8012f22:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8012f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8012f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012f30:	1c5a      	adds	r2, r3, #1
 8012f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f34:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	691b      	ldr	r3, [r3, #16]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d109      	bne.n	8012f54 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f44:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8012f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f4a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8012f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f50:	675a      	str	r2, [r3, #116]	; 0x74
 8012f52:	e011      	b.n	8012f78 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f5e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f64:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f6a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f70:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f76:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	691b      	ldr	r3, [r3, #16]
 8012f7c:	1c5a      	adds	r2, r3, #1
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8012f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f84:	2206      	movs	r2, #6
 8012f86:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f90:	683a      	ldr	r2, [r7, #0]
 8012f92:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012f94:	4b0f      	ldr	r3, [pc, #60]	; (8012fd4 <_tx_semaphore_get+0x118>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	4a0e      	ldr	r2, [pc, #56]	; (8012fd4 <_tx_semaphore_get+0x118>)
 8012f9c:	6013      	str	r3, [r2, #0]
 8012f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	f383 8810 	msr	PRIMASK, r3
}
 8012fa8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fac:	f000 fd5a 	bl	8013a64 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8012fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8012fb8:	e007      	b.n	8012fca <_tx_semaphore_get+0x10e>
 8012fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fbc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f383 8810 	msr	PRIMASK, r3
}
 8012fc4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8012fc6:	230d      	movs	r3, #13
 8012fc8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8012fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3738      	adds	r7, #56	; 0x38
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}
 8012fd4:	240023cc 	.word	0x240023cc
 8012fd8:	240023d0 	.word	0x240023d0
 8012fdc:	08012d21 	.word	0x08012d21

08012fe0 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b08c      	sub	sp, #48	; 0x30
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8012fec:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012fee:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012ff0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ff2:	b672      	cpsid	i
    return(int_posture);
 8012ff4:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8012ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8012ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013000:	2b00      	cmp	r3, #0
 8013002:	d10a      	bne.n	801301a <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	689b      	ldr	r3, [r3, #8]
 8013008:	1c5a      	adds	r2, r3, #1
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	609a      	str	r2, [r3, #8]
 801300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013010:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	f383 8810 	msr	PRIMASK, r3
}
 8013018:	e033      	b.n	8013082 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	68db      	ldr	r3, [r3, #12]
 801301e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8013020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013022:	3b01      	subs	r3, #1
 8013024:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013028:	2b00      	cmp	r3, #0
 801302a:	d103      	bne.n	8013034 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2200      	movs	r2, #0
 8013030:	60da      	str	r2, [r3, #12]
 8013032:	e00e      	b.n	8013052 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8013034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013038:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6a3a      	ldr	r2, [r7, #32]
 801303e:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013044:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013046:	6a3b      	ldr	r3, [r7, #32]
 8013048:	69fa      	ldr	r2, [r7, #28]
 801304a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 801304c:	69fb      	ldr	r3, [r7, #28]
 801304e:	6a3a      	ldr	r2, [r7, #32]
 8013050:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013056:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305a:	2200      	movs	r2, #0
 801305c:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013060:	2200      	movs	r2, #0
 8013062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8013066:	4b09      	ldr	r3, [pc, #36]	; (801308c <_tx_semaphore_put+0xac>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	3301      	adds	r3, #1
 801306c:	4a07      	ldr	r2, [pc, #28]	; (801308c <_tx_semaphore_put+0xac>)
 801306e:	6013      	str	r3, [r2, #0]
 8013070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013072:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	f383 8810 	msr	PRIMASK, r3
}
 801307a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 801307c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801307e:	f000 fbf1 	bl	8013864 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8013082:	2300      	movs	r3, #0
}
 8013084:	4618      	mov	r0, r3
 8013086:	3730      	adds	r7, #48	; 0x30
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	240023cc 	.word	0x240023cc

08013090 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b092      	sub	sp, #72	; 0x48
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	607a      	str	r2, [r7, #4]
 801309c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801309e:	2300      	movs	r3, #0
 80130a0:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80130a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80130a4:	21ef      	movs	r1, #239	; 0xef
 80130a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80130a8:	f002 fab0 	bl	801560c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80130ac:	22b0      	movs	r2, #176	; 0xb0
 80130ae:	2100      	movs	r1, #0
 80130b0:	68f8      	ldr	r0, [r7, #12]
 80130b2:	f002 faab 	bl	801560c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	68ba      	ldr	r2, [r7, #8]
 80130ba:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	683a      	ldr	r2, [r7, #0]
 80130c6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130cc:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80130d2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80130d8:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80130de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80130e6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80130ec:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2220      	movs	r2, #32
 80130f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80130f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80130fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130fc:	3b01      	subs	r3, #1
 80130fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013100:	4413      	add	r3, r2
 8013102:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013108:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801310a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801310c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801310e:	429a      	cmp	r2, r3
 8013110:	d007      	beq.n	8013122 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2200      	movs	r2, #0
 8013116:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2200      	movs	r2, #0
 801311c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8013120:	e006      	b.n	8013130 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013126:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801312c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2203      	movs	r2, #3
 8013134:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	4a48      	ldr	r2, [pc, #288]	; (801325c <_tx_thread_create+0x1cc>)
 801313a:	655a      	str	r2, [r3, #84]	; 0x54
 801313c:	68fa      	ldr	r2, [r7, #12]
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8013142:	4947      	ldr	r1, [pc, #284]	; (8013260 <_tx_thread_create+0x1d0>)
 8013144:	68f8      	ldr	r0, [r7, #12]
 8013146:	f7ed f96b 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801314a:	f3ef 8310 	mrs	r3, PRIMASK
 801314e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8013152:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013154:	b672      	cpsid	i
    return(int_posture);
 8013156:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8013158:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	4a41      	ldr	r2, [pc, #260]	; (8013264 <_tx_thread_create+0x1d4>)
 801315e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8013160:	4b41      	ldr	r3, [pc, #260]	; (8013268 <_tx_thread_create+0x1d8>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d10b      	bne.n	8013180 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8013168:	4a40      	ldr	r2, [pc, #256]	; (801326c <_tx_thread_create+0x1dc>)
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	68fa      	ldr	r2, [r7, #12]
 8013172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	68fa      	ldr	r2, [r7, #12]
 801317a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801317e:	e016      	b.n	80131ae <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8013180:	4b3a      	ldr	r3, [pc, #232]	; (801326c <_tx_thread_create+0x1dc>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8013186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801318c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013190:	68fa      	ldr	r2, [r7, #12]
 8013192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8013196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013198:	68fa      	ldr	r2, [r7, #12]
 801319a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80131ae:	4b2e      	ldr	r3, [pc, #184]	; (8013268 <_tx_thread_create+0x1d8>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	3301      	adds	r3, #1
 80131b4:	4a2c      	ldr	r2, [pc, #176]	; (8013268 <_tx_thread_create+0x1d8>)
 80131b6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80131b8:	4b2d      	ldr	r3, [pc, #180]	; (8013270 <_tx_thread_create+0x1e0>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	3301      	adds	r3, #1
 80131be:	4a2c      	ldr	r2, [pc, #176]	; (8013270 <_tx_thread_create+0x1e0>)
 80131c0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80131c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	d129      	bne.n	801321c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80131c8:	f3ef 8305 	mrs	r3, IPSR
 80131cc:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80131ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80131d0:	4b28      	ldr	r3, [pc, #160]	; (8013274 <_tx_thread_create+0x1e4>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4313      	orrs	r3, r2
 80131d6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80131da:	d30d      	bcc.n	80131f8 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80131dc:	4b26      	ldr	r3, [pc, #152]	; (8013278 <_tx_thread_create+0x1e8>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80131e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d009      	beq.n	80131fc <_tx_thread_create+0x16c>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80131e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131ec:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80131ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80131f6:	e001      	b.n	80131fc <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80131f8:	2300      	movs	r3, #0
 80131fa:	647b      	str	r3, [r7, #68]	; 0x44
 80131fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013200:	6a3b      	ldr	r3, [r7, #32]
 8013202:	f383 8810 	msr	PRIMASK, r3
}
 8013206:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8013208:	68f8      	ldr	r0, [r7, #12]
 801320a:	f000 fb2b 	bl	8013864 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801320e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013210:	2b00      	cmp	r3, #0
 8013212:	d01e      	beq.n	8013252 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8013214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013218:	63da      	str	r2, [r3, #60]	; 0x3c
 801321a:	e01a      	b.n	8013252 <_tx_thread_create+0x1c2>
 801321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	f383 8810 	msr	PRIMASK, r3
}
 8013226:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013228:	f3ef 8310 	mrs	r3, PRIMASK
 801322c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801322e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013230:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013232:	b672      	cpsid	i
    return(int_posture);
 8013234:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8013236:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8013238:	4b0d      	ldr	r3, [pc, #52]	; (8013270 <_tx_thread_create+0x1e0>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	3b01      	subs	r3, #1
 801323e:	4a0c      	ldr	r2, [pc, #48]	; (8013270 <_tx_thread_create+0x1e0>)
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013244:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	f383 8810 	msr	PRIMASK, r3
}
 801324c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801324e:	f000 facf 	bl	80137f0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8013252:	2300      	movs	r3, #0
}
 8013254:	4618      	mov	r0, r3
 8013256:	3748      	adds	r7, #72	; 0x48
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	08013d39 	.word	0x08013d39
 8013260:	08013659 	.word	0x08013659
 8013264:	54485244 	.word	0x54485244
 8013268:	240023c4 	.word	0x240023c4
 801326c:	240023bc 	.word	0x240023bc
 8013270:	240023cc 	.word	0x240023cc
 8013274:	2400008c 	.word	0x2400008c
 8013278:	240023d4 	.word	0x240023d4

0801327c <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 801327c:	b480      	push	{r7}
 801327e:	b08b      	sub	sp, #44	; 0x2c
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013284:	2300      	movs	r3, #0
 8013286:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013288:	f3ef 8310 	mrs	r3, PRIMASK
 801328c:	617b      	str	r3, [r7, #20]
    return(posture);
 801328e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013290:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013292:	b672      	cpsid	i
    return(int_posture);
 8013294:	693b      	ldr	r3, [r7, #16]
    
    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8013296:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801329c:	2b01      	cmp	r3, #1
 801329e:	d00b      	beq.n	80132b8 <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132a4:	2b02      	cmp	r3, #2
 80132a6:	d007      	beq.n	80132b8 <_tx_thread_delete+0x3c>
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	f383 8810 	msr	PRIMASK, r3
}
 80132b2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 80132b4:	2311      	movs	r3, #17
 80132b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 80132b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d12d      	bne.n	801331a <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2200      	movs	r2, #0
 80132c2:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 80132c4:	4b18      	ldr	r3, [pc, #96]	; (8013328 <_tx_thread_delete+0xac>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	3b01      	subs	r3, #1
 80132ca:	4a17      	ldr	r2, [pc, #92]	; (8013328 <_tx_thread_delete+0xac>)
 80132cc:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 80132ce:	4b16      	ldr	r3, [pc, #88]	; (8013328 <_tx_thread_delete+0xac>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d103      	bne.n	80132de <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 80132d6:	4b15      	ldr	r3, [pc, #84]	; (801332c <_tx_thread_delete+0xb0>)
 80132d8:	2200      	movs	r2, #0
 80132da:	601a      	str	r2, [r3, #0]
 80132dc:	e017      	b.n	801330e <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132e4:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132ec:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	69ba      	ldr	r2, [r7, #24]
 80132f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	69fa      	ldr	r2, [r7, #28]
 80132fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 80132fe:	4b0b      	ldr	r3, [pc, #44]	; (801332c <_tx_thread_delete+0xb0>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	429a      	cmp	r2, r3
 8013306:	d102      	bne.n	801330e <_tx_thread_delete+0x92>
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8013308:	4a08      	ldr	r2, [pc, #32]	; (801332c <_tx_thread_delete+0xb0>)
 801330a:	69fb      	ldr	r3, [r7, #28]
 801330c:	6013      	str	r3, [r2, #0]
 801330e:	6a3b      	ldr	r3, [r7, #32]
 8013310:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	f383 8810 	msr	PRIMASK, r3
}
 8013318:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 801331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801331c:	4618      	mov	r0, r3
 801331e:	372c      	adds	r7, #44	; 0x2c
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr
 8013328:	240023c4 	.word	0x240023c4
 801332c:	240023bc 	.word	0x240023bc

08013330 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8013330:	b480      	push	{r7}
 8013332:	b087      	sub	sp, #28
 8013334:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013336:	f3ef 8310 	mrs	r3, PRIMASK
 801333a:	60bb      	str	r3, [r7, #8]
    return(posture);
 801333c:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 801333e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013340:	b672      	cpsid	i
    return(int_posture);
 8013342:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA

    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013344:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013346:	4b08      	ldr	r3, [pc, #32]	; (8013368 <_tx_thread_identify+0x38>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	613b      	str	r3, [r7, #16]
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f383 8810 	msr	PRIMASK, r3
}
 8013356:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8013358:	693b      	ldr	r3, [r7, #16]
}
 801335a:	4618      	mov	r0, r3
 801335c:	371c      	adds	r7, #28
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr
 8013366:	bf00      	nop
 8013368:	240023d0 	.word	0x240023d0

0801336c <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8013370:	4b12      	ldr	r3, [pc, #72]	; (80133bc <_tx_thread_initialize+0x50>)
 8013372:	2200      	movs	r2, #0
 8013374:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8013376:	4b12      	ldr	r3, [pc, #72]	; (80133c0 <_tx_thread_initialize+0x54>)
 8013378:	2200      	movs	r2, #0
 801337a:	601a      	str	r2, [r3, #0]
 801337c:	4b11      	ldr	r3, [pc, #68]	; (80133c4 <_tx_thread_initialize+0x58>)
 801337e:	2200      	movs	r2, #0
 8013380:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013382:	4b11      	ldr	r3, [pc, #68]	; (80133c8 <_tx_thread_initialize+0x5c>)
 8013384:	2220      	movs	r2, #32
 8013386:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8013388:	2280      	movs	r2, #128	; 0x80
 801338a:	2100      	movs	r1, #0
 801338c:	480f      	ldr	r0, [pc, #60]	; (80133cc <_tx_thread_initialize+0x60>)
 801338e:	f002 f93d 	bl	801560c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8013392:	4b0f      	ldr	r3, [pc, #60]	; (80133d0 <_tx_thread_initialize+0x64>)
 8013394:	2200      	movs	r2, #0
 8013396:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8013398:	4b0e      	ldr	r3, [pc, #56]	; (80133d4 <_tx_thread_initialize+0x68>)
 801339a:	2200      	movs	r2, #0
 801339c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801339e:	4b0e      	ldr	r3, [pc, #56]	; (80133d8 <_tx_thread_initialize+0x6c>)
 80133a0:	2200      	movs	r2, #0
 80133a2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80133a4:	4b0d      	ldr	r3, [pc, #52]	; (80133dc <_tx_thread_initialize+0x70>)
 80133a6:	2200      	movs	r2, #0
 80133a8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80133aa:	4b0d      	ldr	r3, [pc, #52]	; (80133e0 <_tx_thread_initialize+0x74>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80133b2:	4a0b      	ldr	r2, [pc, #44]	; (80133e0 <_tx_thread_initialize+0x74>)
 80133b4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80133b6:	bf00      	nop
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	240023d0 	.word	0x240023d0
 80133c0:	240023d4 	.word	0x240023d4
 80133c4:	240023b8 	.word	0x240023b8
 80133c8:	240023d8 	.word	0x240023d8
 80133cc:	24002334 	.word	0x24002334
 80133d0:	240023bc 	.word	0x240023bc
 80133d4:	240023c4 	.word	0x240023c4
 80133d8:	240023cc 	.word	0x240023cc
 80133dc:	240023b4 	.word	0x240023b4
 80133e0:	240023c0 	.word	0x240023c0

080133e4 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b08c      	sub	sp, #48	; 0x30
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80133f0:	2300      	movs	r3, #0
 80133f2:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the 
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80133fa:	68ba      	ldr	r2, [r7, #8]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d004      	beq.n	801340a <_tx_thread_preemption_change+0x26>
    {
    
        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d001      	beq.n	801340a <_tx_thread_preemption_change+0x26>
        {
        
            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8013406:	2300      	movs	r3, #0
 8013408:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801340a:	f3ef 8310 	mrs	r3, PRIMASK
 801340e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013412:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013414:	b672      	cpsid	i
    return(int_posture);
 8013416:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8013418:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013420:	68ba      	ldr	r2, [r7, #8]
 8013422:	429a      	cmp	r2, r3
 8013424:	d902      	bls.n	801342c <_tx_thread_preemption_change+0x48>
    {
            
        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8013426:	2318      	movs	r3, #24
 8013428:	62bb      	str	r3, [r7, #40]	; 0x28
 801342a:	e03e      	b.n	80134aa <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	68ba      	ldr	r2, [r7, #8]
 801343a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013444:	68ba      	ldr	r2, [r7, #8]
 8013446:	429a      	cmp	r2, r3
 8013448:	d203      	bcs.n	8013452 <_tx_thread_preemption_change+0x6e>
        {
    
            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	68ba      	ldr	r2, [r7, #8]
 801344e:	63da      	str	r2, [r3, #60]	; 0x3c
 8013450:	e004      	b.n	801345c <_tx_thread_preemption_change+0x78>
        }
        else
        {
    
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013460:	4b17      	ldr	r3, [pc, #92]	; (80134c0 <_tx_thread_preemption_change+0xdc>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	429a      	cmp	r2, r3
 8013466:	d920      	bls.n	80134aa <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8013468:	4b15      	ldr	r3, [pc, #84]	; (80134c0 <_tx_thread_preemption_change+0xdc>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	68ba      	ldr	r2, [r7, #8]
 801346e:	429a      	cmp	r2, r3
 8013470:	d91b      	bls.n	80134aa <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8013472:	4b14      	ldr	r3, [pc, #80]	; (80134c4 <_tx_thread_preemption_change+0xe0>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	429a      	cmp	r2, r3
 801347a:	d116      	bne.n	80134aa <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801347c:	4b10      	ldr	r3, [pc, #64]	; (80134c0 <_tx_thread_preemption_change+0xdc>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	4a11      	ldr	r2, [pc, #68]	; (80134c8 <_tx_thread_preemption_change+0xe4>)
 8013482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013486:	4a0f      	ldr	r2, [pc, #60]	; (80134c4 <_tx_thread_preemption_change+0xe0>)
 8013488:	6013      	str	r3, [r2, #0]
 801348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801348c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	f383 8810 	msr	PRIMASK, r3
}
 8013494:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8013496:	f000 f9ab 	bl	80137f0 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801349a:	f3ef 8310 	mrs	r3, PRIMASK
 801349e:	61fb      	str	r3, [r7, #28]
    return(posture);
 80134a0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80134a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80134a4:	b672      	cpsid	i
    return(int_posture);
 80134a6:	69bb      	ldr	r3, [r7, #24]
                    
                    /* Disable interrupts.  */
                    TX_DISABLE
 80134a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80134aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	f383 8810 	msr	PRIMASK, r3
}
 80134b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
 80134b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3730      	adds	r7, #48	; 0x30
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	240023d8 	.word	0x240023d8
 80134c4:	240023d4 	.word	0x240023d4
 80134c8:	24002334 	.word	0x24002334

080134cc <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 80134cc:	b480      	push	{r7}
 80134ce:	b08b      	sub	sp, #44	; 0x2c
 80134d0:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80134d2:	4b2b      	ldr	r3, [pc, #172]	; (8013580 <_tx_thread_relinquish+0xb4>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134d8:	f3ef 8310 	mrs	r3, PRIMASK
 80134dc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80134de:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80134e0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80134e2:	b672      	cpsid	i
    return(int_posture);
 80134e4:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 80134e6:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80134e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ea:	69db      	ldr	r3, [r3, #28]
 80134ec:	4a25      	ldr	r2, [pc, #148]	; (8013584 <_tx_thread_relinquish+0xb8>)
 80134ee:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 80134f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134f4:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80134f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f8:	6a1b      	ldr	r3, [r3, #32]
 80134fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d009      	beq.n	8013514 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 8013500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013502:	6a1a      	ldr	r2, [r3, #32]
 8013504:	4920      	ldr	r1, [pc, #128]	; (8013588 <_tx_thread_relinquish+0xbc>)
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 801350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350e:	6a1b      	ldr	r3, [r3, #32]
 8013510:	4a1e      	ldr	r2, [pc, #120]	; (801358c <_tx_thread_relinquish+0xc0>)
 8013512:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 8013514:	4b1e      	ldr	r3, [pc, #120]	; (8013590 <_tx_thread_relinquish+0xc4>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	69fa      	ldr	r2, [r7, #28]
 801351a:	429a      	cmp	r2, r3
 801351c:	d906      	bls.n	801352c <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801351e:	4b1c      	ldr	r3, [pc, #112]	; (8013590 <_tx_thread_relinquish+0xc4>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	4a19      	ldr	r2, [pc, #100]	; (8013588 <_tx_thread_relinquish+0xbc>)
 8013524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013528:	4a18      	ldr	r2, [pc, #96]	; (801358c <_tx_thread_relinquish+0xc0>)
 801352a:	6013      	str	r3, [r2, #0]
 801352c:	6a3b      	ldr	r3, [r7, #32]
 801352e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	f383 8810 	msr	PRIMASK, r3
}
 8013536:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 8013538:	4b14      	ldr	r3, [pc, #80]	; (801358c <_tx_thread_relinquish+0xc0>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801353e:	429a      	cmp	r2, r3
 8013540:	d017      	beq.n	8013572 <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013542:	4b14      	ldr	r3, [pc, #80]	; (8013594 <_tx_thread_relinquish+0xc8>)
 8013544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013548:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801354a:	f3ef 8305 	mrs	r3, IPSR
 801354e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013550:	68fb      	ldr	r3, [r7, #12]
    if (__get_ipsr_value() == 0)
 8013552:	2b00      	cmp	r3, #0
 8013554:	d10c      	bne.n	8013570 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013556:	f3ef 8310 	mrs	r3, PRIMASK
 801355a:	60bb      	str	r3, [r7, #8]
    return(posture);
 801355c:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 801355e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013560:	b662      	cpsie	i
}
 8013562:	bf00      	nop
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	f383 8810 	msr	PRIMASK, r3
}
 801356e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8013570:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 8013572:	bf00      	nop
 8013574:	372c      	adds	r7, #44	; 0x2c
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop
 8013580:	240023d0 	.word	0x240023d0
 8013584:	24002464 	.word	0x24002464
 8013588:	24002334 	.word	0x24002334
 801358c:	240023d4 	.word	0x240023d4
 8013590:	240023d8 	.word	0x240023d8
 8013594:	e000ed04 	.word	0xe000ed04

08013598 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b08c      	sub	sp, #48	; 0x30
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80135a0:	2300      	movs	r3, #0
 80135a2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135a4:	f3ef 8310 	mrs	r3, PRIMASK
 80135a8:	61fb      	str	r3, [r7, #28]
    return(posture);
 80135aa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80135ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80135ae:	b672      	cpsid	i
    return(int_posture);
 80135b0:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80135b2:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135b8:	2b03      	cmp	r3, #3
 80135ba:	d12f      	bne.n	801361c <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80135bc:	f3ef 8305 	mrs	r3, IPSR
 80135c0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80135c2:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80135c4:	4b21      	ldr	r3, [pc, #132]	; (801364c <_tx_thread_resume+0xb4>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	4313      	orrs	r3, r2
 80135ca:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80135ce:	d30d      	bcc.n	80135ec <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80135d0:	4b1f      	ldr	r3, [pc, #124]	; (8013650 <_tx_thread_resume+0xb8>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80135d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d009      	beq.n	80135f0 <_tx_thread_resume+0x58>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80135dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135e0:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80135e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80135ea:	e001      	b.n	80135f0 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80135ec:	2300      	movs	r3, #0
 80135ee:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80135f0:	4b18      	ldr	r3, [pc, #96]	; (8013654 <_tx_thread_resume+0xbc>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	3301      	adds	r3, #1
 80135f6:	4a17      	ldr	r2, [pc, #92]	; (8013654 <_tx_thread_resume+0xbc>)
 80135f8:	6013      	str	r3, [r2, #0]
 80135fa:	6a3b      	ldr	r3, [r7, #32]
 80135fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	f383 8810 	msr	PRIMASK, r3
}
 8013604:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f000 f92c 	bl	8013864 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360e:	2b00      	cmp	r3, #0
 8013610:	d002      	beq.n	8013618 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8013612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013616:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8013618:	2300      	movs	r3, #0
 801361a:	e012      	b.n	8013642 <_tx_thread_resume+0xaa>
        
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013620:	2b01      	cmp	r3, #1
 8013622:	d105      	bne.n	8013630 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2200      	movs	r2, #0
 8013628:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 801362a:	2319      	movs	r3, #25
 801362c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801362e:	e001      	b.n	8013634 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8013630:	2312      	movs	r3, #18
 8013632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013634:	6a3b      	ldr	r3, [r7, #32]
 8013636:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f383 8810 	msr	PRIMASK, r3
}
 801363e:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8013640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013642:	4618      	mov	r0, r3
 8013644:	3730      	adds	r7, #48	; 0x30
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	2400008c 	.word	0x2400008c
 8013650:	240023d4 	.word	0x240023d4
 8013654:	240023cc 	.word	0x240023cc

08013658 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b088      	sub	sp, #32
 801365c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801365e:	4b21      	ldr	r3, [pc, #132]	; (80136e4 <_tx_thread_shell_entry+0x8c>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013668:	69fa      	ldr	r2, [r7, #28]
 801366a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801366c:	4610      	mov	r0, r2
 801366e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8013670:	4b1d      	ldr	r3, [pc, #116]	; (80136e8 <_tx_thread_shell_entry+0x90>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d003      	beq.n	8013680 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8013678:	4b1b      	ldr	r3, [pc, #108]	; (80136e8 <_tx_thread_shell_entry+0x90>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	69f8      	ldr	r0, [r7, #28]
 801367e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013680:	f3ef 8310 	mrs	r3, PRIMASK
 8013684:	607b      	str	r3, [r7, #4]
    return(posture);
 8013686:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8013688:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801368a:	b672      	cpsid	i
    return(int_posture);
 801368c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801368e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8013690:	69fb      	ldr	r3, [r7, #28]
 8013692:	2201      	movs	r2, #1
 8013694:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013696:	69fb      	ldr	r3, [r7, #28]
 8013698:	2201      	movs	r2, #1
 801369a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	2200      	movs	r2, #0
 80136a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80136a2:	4b12      	ldr	r3, [pc, #72]	; (80136ec <_tx_thread_shell_entry+0x94>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	3301      	adds	r3, #1
 80136a8:	4a10      	ldr	r2, [pc, #64]	; (80136ec <_tx_thread_shell_entry+0x94>)
 80136aa:	6013      	str	r3, [r2, #0]
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	f383 8810 	msr	PRIMASK, r3
}
 80136b6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80136b8:	f3ef 8314 	mrs	r3, CONTROL
 80136bc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80136be:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80136c0:	617b      	str	r3, [r7, #20]
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	f023 0304 	bic.w	r3, r3, #4
 80136c8:	617b      	str	r3, [r7, #20]
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	f383 8814 	msr	CONTROL, r3
}
 80136d4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80136d6:	69f8      	ldr	r0, [r7, #28]
 80136d8:	f000 f9c4 	bl	8013a64 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80136dc:	bf00      	nop
 80136de:	3720      	adds	r7, #32
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}
 80136e4:	240023d0 	.word	0x240023d0
 80136e8:	240023b4 	.word	0x240023b4
 80136ec:	240023cc 	.word	0x240023cc

080136f0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b08e      	sub	sp, #56	; 0x38
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136f8:	f3ef 8310 	mrs	r3, PRIMASK
 80136fc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80136fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013700:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013702:	b672      	cpsid	i
    return(int_posture);
 8013704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8013706:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013708:	4b35      	ldr	r3, [pc, #212]	; (80137e0 <_tx_thread_sleep+0xf0>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 801370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013710:	2b00      	cmp	r3, #0
 8013712:	d108      	bne.n	8013726 <_tx_thread_sleep+0x36>
 8013714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013716:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013718:	6a3b      	ldr	r3, [r7, #32]
 801371a:	f383 8810 	msr	PRIMASK, r3
}
 801371e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013720:	2313      	movs	r3, #19
 8013722:	637b      	str	r3, [r7, #52]	; 0x34
 8013724:	e056      	b.n	80137d4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013726:	f3ef 8305 	mrs	r3, IPSR
 801372a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801372c:	69fa      	ldr	r2, [r7, #28]
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801372e:	4b2d      	ldr	r3, [pc, #180]	; (80137e4 <_tx_thread_sleep+0xf4>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	4313      	orrs	r3, r2
 8013734:	2b00      	cmp	r3, #0
 8013736:	d008      	beq.n	801374a <_tx_thread_sleep+0x5a>
 8013738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	f383 8810 	msr	PRIMASK, r3
}
 8013742:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013744:	2313      	movs	r3, #19
 8013746:	637b      	str	r3, [r7, #52]	; 0x34
 8013748:	e044      	b.n	80137d4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801374c:	4a26      	ldr	r2, [pc, #152]	; (80137e8 <_tx_thread_sleep+0xf8>)
 801374e:	4293      	cmp	r3, r2
 8013750:	d108      	bne.n	8013764 <_tx_thread_sleep+0x74>
 8013752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013754:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	f383 8810 	msr	PRIMASK, r3
}
 801375c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801375e:	2313      	movs	r3, #19
 8013760:	637b      	str	r3, [r7, #52]	; 0x34
 8013762:	e037      	b.n	80137d4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d108      	bne.n	801377c <_tx_thread_sleep+0x8c>
 801376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801376c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	f383 8810 	msr	PRIMASK, r3
}
 8013774:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8013776:	2300      	movs	r3, #0
 8013778:	637b      	str	r3, [r7, #52]	; 0x34
 801377a:	e02b      	b.n	80137d4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801377c:	4b1b      	ldr	r3, [pc, #108]	; (80137ec <_tx_thread_sleep+0xfc>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d008      	beq.n	8013796 <_tx_thread_sleep+0xa6>
 8013784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013786:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	f383 8810 	msr	PRIMASK, r3
}
 801378e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8013790:	2313      	movs	r3, #19
 8013792:	637b      	str	r3, [r7, #52]	; 0x34
 8013794:	e01e      	b.n	80137d4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8013796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013798:	2204      	movs	r2, #4
 801379a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379e:	2201      	movs	r2, #1
 80137a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80137a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a4:	2200      	movs	r2, #0
 80137a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80137aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80137b0:	4b0e      	ldr	r3, [pc, #56]	; (80137ec <_tx_thread_sleep+0xfc>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	3301      	adds	r3, #1
 80137b6:	4a0d      	ldr	r2, [pc, #52]	; (80137ec <_tx_thread_sleep+0xfc>)
 80137b8:	6013      	str	r3, [r2, #0]
 80137ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137bc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	f383 8810 	msr	PRIMASK, r3
}
 80137c4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80137c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137c8:	f000 f94c 	bl	8013a64 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80137cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80137d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    
    /* Return completion status.  */
    return(status);
 80137d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3738      	adds	r7, #56	; 0x38
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	240023d0 	.word	0x240023d0
 80137e4:	2400008c 	.word	0x2400008c
 80137e8:	24002470 	.word	0x24002470
 80137ec:	240023cc 	.word	0x240023cc

080137f0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b089      	sub	sp, #36	; 0x24
 80137f4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80137f6:	4b17      	ldr	r3, [pc, #92]	; (8013854 <_tx_thread_system_preempt_check+0x64>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d121      	bne.n	8013846 <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8013802:	4b15      	ldr	r3, [pc, #84]	; (8013858 <_tx_thread_system_preempt_check+0x68>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8013808:	4b14      	ldr	r3, [pc, #80]	; (801385c <_tx_thread_system_preempt_check+0x6c>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801380e:	69ba      	ldr	r2, [r7, #24]
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	429a      	cmp	r2, r3
 8013814:	d017      	beq.n	8013846 <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013816:	4b12      	ldr	r3, [pc, #72]	; (8013860 <_tx_thread_system_preempt_check+0x70>)
 8013818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801381c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801381e:	f3ef 8305 	mrs	r3, IPSR
 8013822:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013824:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8013826:	2b00      	cmp	r3, #0
 8013828:	d10c      	bne.n	8013844 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801382a:	f3ef 8310 	mrs	r3, PRIMASK
 801382e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8013830:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 8013832:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013834:	b662      	cpsie	i
}
 8013836:	bf00      	nop
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f383 8810 	msr	PRIMASK, r3
}
 8013842:	bf00      	nop
}
 8013844:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8013846:	bf00      	nop
 8013848:	3724      	adds	r7, #36	; 0x24
 801384a:	46bd      	mov	sp, r7
 801384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013850:	4770      	bx	lr
 8013852:	bf00      	nop
 8013854:	240023cc 	.word	0x240023cc
 8013858:	240023d0 	.word	0x240023d0
 801385c:	240023d4 	.word	0x240023d4
 8013860:	e000ed04 	.word	0xe000ed04

08013864 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b096      	sub	sp, #88	; 0x58
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801386c:	f3ef 8310 	mrs	r3, PRIMASK
 8013870:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8013872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8013874:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8013876:	b672      	cpsid	i
    return(int_posture);
 8013878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801387a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013880:	2b00      	cmp	r3, #0
 8013882:	d005      	beq.n	8013890 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	334c      	adds	r3, #76	; 0x4c
 8013888:	4618      	mov	r0, r3
 801388a:	f000 fc69 	bl	8014160 <_tx_timer_system_deactivate>
 801388e:	e002      	b.n	8013896 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2200      	movs	r2, #0
 8013894:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8013896:	4b6c      	ldr	r3, [pc, #432]	; (8013a48 <_tx_thread_system_resume+0x1e4>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	3b01      	subs	r3, #1
 801389c:	4a6a      	ldr	r2, [pc, #424]	; (8013a48 <_tx_thread_system_resume+0x1e4>)
 801389e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	f040 8083 	bne.w	80139b0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	f000 8097 	beq.w	80139e2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d172      	bne.n	80139a2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80138c8:	4a60      	ldr	r2, [pc, #384]	; (8013a4c <_tx_thread_system_resume+0x1e8>)
 80138ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138d0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80138d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d154      	bne.n	8013982 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80138d8:	495c      	ldr	r1, [pc, #368]	; (8013a4c <_tx_thread_system_resume+0x1e8>)
 80138da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	687a      	ldr	r2, [r7, #4]
 80138ec:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80138ee:	2201      	movs	r2, #1
 80138f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138f2:	fa02 f303 	lsl.w	r3, r2, r3
 80138f6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80138f8:	4b55      	ldr	r3, [pc, #340]	; (8013a50 <_tx_thread_system_resume+0x1ec>)
 80138fa:	681a      	ldr	r2, [r3, #0]
 80138fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138fe:	4313      	orrs	r3, r2
 8013900:	4a53      	ldr	r2, [pc, #332]	; (8013a50 <_tx_thread_system_resume+0x1ec>)
 8013902:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8013904:	4b53      	ldr	r3, [pc, #332]	; (8013a54 <_tx_thread_system_resume+0x1f0>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801390a:	429a      	cmp	r2, r3
 801390c:	d269      	bcs.n	80139e2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801390e:	4a51      	ldr	r2, [pc, #324]	; (8013a54 <_tx_thread_system_resume+0x1f0>)
 8013910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013912:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8013914:	4b50      	ldr	r3, [pc, #320]	; (8013a58 <_tx_thread_system_resume+0x1f4>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801391a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801391c:	2b00      	cmp	r3, #0
 801391e:	d103      	bne.n	8013928 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8013920:	4a4d      	ldr	r2, [pc, #308]	; (8013a58 <_tx_thread_system_resume+0x1f4>)
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6013      	str	r3, [r2, #0]
 8013926:	e05c      	b.n	80139e2 <_tx_thread_system_resume+0x17e>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8013928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801392c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801392e:	429a      	cmp	r2, r3
 8013930:	d257      	bcs.n	80139e2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8013932:	4a49      	ldr	r2, [pc, #292]	; (8013a58 <_tx_thread_system_resume+0x1f4>)
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6013      	str	r3, [r2, #0]
 8013938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801393a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801393e:	f383 8810 	msr	PRIMASK, r3
}
 8013942:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013944:	4b40      	ldr	r3, [pc, #256]	; (8013a48 <_tx_thread_system_resume+0x1e4>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801394c:	2b00      	cmp	r3, #0
 801394e:	d174      	bne.n	8013a3a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013950:	4b42      	ldr	r3, [pc, #264]	; (8013a5c <_tx_thread_system_resume+0x1f8>)
 8013952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013956:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013958:	f3ef 8305 	mrs	r3, IPSR
 801395c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8013960:	2b00      	cmp	r3, #0
 8013962:	d10c      	bne.n	801397e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013964:	f3ef 8310 	mrs	r3, PRIMASK
 8013968:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 801396c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801396e:	b662      	cpsie	i
}
 8013970:	bf00      	nop
 8013972:	6a3b      	ldr	r3, [r7, #32]
 8013974:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	f383 8810 	msr	PRIMASK, r3
}
 801397c:	bf00      	nop
}
 801397e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8013980:	e05b      	b.n	8013a3a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8013982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013986:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8013988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801398e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013990:	687a      	ldr	r2, [r7, #4]
 8013992:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013998:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801399e:	621a      	str	r2, [r3, #32]
 80139a0:	e01f      	b.n	80139e2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2200      	movs	r2, #0
 80139a6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2203      	movs	r2, #3
 80139ac:	631a      	str	r2, [r3, #48]	; 0x30
 80139ae:	e018      	b.n	80139e2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d014      	beq.n	80139e2 <_tx_thread_system_resume+0x17e>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139bc:	2b02      	cmp	r3, #2
 80139be:	d010      	beq.n	80139e2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d106      	bne.n	80139d6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2200      	movs	r2, #0
 80139cc:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2200      	movs	r2, #0
 80139d2:	631a      	str	r2, [r3, #48]	; 0x30
 80139d4:	e005      	b.n	80139e2 <_tx_thread_system_resume+0x17e>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2200      	movs	r2, #0
 80139da:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2203      	movs	r2, #3
 80139e0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80139e2:	4b1f      	ldr	r3, [pc, #124]	; (8013a60 <_tx_thread_system_resume+0x1fc>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80139e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139ea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	f383 8810 	msr	PRIMASK, r3
}
 80139f2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80139f4:	4b18      	ldr	r3, [pc, #96]	; (8013a58 <_tx_thread_system_resume+0x1f4>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d020      	beq.n	8013a40 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80139fe:	4b12      	ldr	r3, [pc, #72]	; (8013a48 <_tx_thread_system_resume+0x1e4>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8013a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d11a      	bne.n	8013a40 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013a0a:	4b14      	ldr	r3, [pc, #80]	; (8013a5c <_tx_thread_system_resume+0x1f8>)
 8013a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a10:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a12:	f3ef 8305 	mrs	r3, IPSR
 8013a16:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013a18:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d10f      	bne.n	8013a3e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8013a22:	613b      	str	r3, [r7, #16]
    return(posture);
 8013a24:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8013a26:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013a28:	b662      	cpsie	i
}
 8013a2a:	bf00      	nop
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	f383 8810 	msr	PRIMASK, r3
}
 8013a36:	bf00      	nop
}
 8013a38:	e001      	b.n	8013a3e <_tx_thread_system_resume+0x1da>
                                return;
 8013a3a:	bf00      	nop
 8013a3c:	e000      	b.n	8013a40 <_tx_thread_system_resume+0x1dc>
 8013a3e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8013a40:	3758      	adds	r7, #88	; 0x58
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	240023cc 	.word	0x240023cc
 8013a4c:	24002334 	.word	0x24002334
 8013a50:	240023b8 	.word	0x240023b8
 8013a54:	240023d8 	.word	0x240023d8
 8013a58:	240023d4 	.word	0x240023d4
 8013a5c:	e000ed04 	.word	0xe000ed04
 8013a60:	240023d0 	.word	0x240023d0

08013a64 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b09e      	sub	sp, #120	; 0x78
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013a6c:	4b81      	ldr	r3, [pc, #516]	; (8013c74 <_tx_thread_system_suspend+0x210>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a72:	f3ef 8310 	mrs	r3, PRIMASK
 8013a76:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8013a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8013a7a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a7c:	b672      	cpsid	i
    return(int_posture);
 8013a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8013a80:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8013a82:	687a      	ldr	r2, [r7, #4]
 8013a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d112      	bne.n	8013ab0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a8e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8013a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d008      	beq.n	8013aa8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8013a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a9c:	d004      	beq.n	8013aa8 <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	334c      	adds	r3, #76	; 0x4c
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f000 fafa 	bl	801409c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	69db      	ldr	r3, [r3, #28]
 8013aac:	4a72      	ldr	r2, [pc, #456]	; (8013c78 <_tx_thread_system_suspend+0x214>)
 8013aae:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8013ab0:	4b72      	ldr	r3, [pc, #456]	; (8013c7c <_tx_thread_system_suspend+0x218>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	3b01      	subs	r3, #1
 8013ab6:	4a71      	ldr	r2, [pc, #452]	; (8013c7c <_tx_thread_system_suspend+0x218>)
 8013ab8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	f040 80a6 	bne.w	8013c10 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ace:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6a1b      	ldr	r3, [r3, #32]
 8013ad4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8013ad6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d015      	beq.n	8013b0a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ae2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8013ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013ae8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8013aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013aee:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8013af0:	4a63      	ldr	r2, [pc, #396]	; (8013c80 <_tx_thread_system_suspend+0x21c>)
 8013af2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d157      	bne.n	8013bae <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8013afe:	4960      	ldr	r1, [pc, #384]	; (8013c80 <_tx_thread_system_suspend+0x21c>)
 8013b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013b08:	e051      	b.n	8013bae <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8013b0a:	4a5d      	ldr	r2, [pc, #372]	; (8013c80 <_tx_thread_system_suspend+0x21c>)
 8013b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b0e:	2100      	movs	r1, #0
 8013b10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8013b14:	2201      	movs	r2, #1
 8013b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b18:	fa02 f303 	lsl.w	r3, r2, r3
 8013b1c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8013b1e:	4b59      	ldr	r3, [pc, #356]	; (8013c84 <_tx_thread_system_suspend+0x220>)
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013b24:	43db      	mvns	r3, r3
 8013b26:	4013      	ands	r3, r2
 8013b28:	4a56      	ldr	r2, [pc, #344]	; (8013c84 <_tx_thread_system_suspend+0x220>)
 8013b2a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8013b30:	4b54      	ldr	r3, [pc, #336]	; (8013c84 <_tx_thread_system_suspend+0x220>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8013b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d12b      	bne.n	8013b94 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013b3c:	4b52      	ldr	r3, [pc, #328]	; (8013c88 <_tx_thread_system_suspend+0x224>)
 8013b3e:	2220      	movs	r2, #32
 8013b40:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8013b42:	4b52      	ldr	r3, [pc, #328]	; (8013c8c <_tx_thread_system_suspend+0x228>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	601a      	str	r2, [r3, #0]
 8013b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b4a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b4e:	f383 8810 	msr	PRIMASK, r3
}
 8013b52:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013b54:	4b49      	ldr	r3, [pc, #292]	; (8013c7c <_tx_thread_system_suspend+0x218>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8013b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	f040 8081 	bne.w	8013c64 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013b62:	4b4b      	ldr	r3, [pc, #300]	; (8013c90 <_tx_thread_system_suspend+0x22c>)
 8013b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b68:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b6a:	f3ef 8305 	mrs	r3, IPSR
 8013b6e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8013b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d10c      	bne.n	8013b90 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b76:	f3ef 8310 	mrs	r3, PRIMASK
 8013b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8013b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8013b7e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013b80:	b662      	cpsie	i
}
 8013b82:	bf00      	nop
 8013b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b86:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b8a:	f383 8810 	msr	PRIMASK, r3
}
 8013b8e:	bf00      	nop
}
 8013b90:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8013b92:	e067      	b.n	8013c64 <_tx_thread_system_suspend+0x200>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8013b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b96:	fa93 f3a3 	rbit	r3, r3
 8013b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8013b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b9e:	fab3 f383 	clz	r3, r3
 8013ba2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8013ba4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013ba8:	4413      	add	r3, r2
 8013baa:	4a37      	ldr	r2, [pc, #220]	; (8013c88 <_tx_thread_system_suspend+0x224>)
 8013bac:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8013bae:	4b37      	ldr	r3, [pc, #220]	; (8013c8c <_tx_thread_system_suspend+0x228>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d12b      	bne.n	8013c10 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013bb8:	4b33      	ldr	r3, [pc, #204]	; (8013c88 <_tx_thread_system_suspend+0x224>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	4a30      	ldr	r2, [pc, #192]	; (8013c80 <_tx_thread_system_suspend+0x21c>)
 8013bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bc2:	4a32      	ldr	r2, [pc, #200]	; (8013c8c <_tx_thread_system_suspend+0x228>)
 8013bc4:	6013      	str	r3, [r2, #0]
 8013bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013bc8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bcc:	f383 8810 	msr	PRIMASK, r3
}
 8013bd0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013bd2:	4b2a      	ldr	r3, [pc, #168]	; (8013c7c <_tx_thread_system_suspend+0x218>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8013bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d144      	bne.n	8013c68 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013bde:	4b2c      	ldr	r3, [pc, #176]	; (8013c90 <_tx_thread_system_suspend+0x22c>)
 8013be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013be4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013be6:	f3ef 8305 	mrs	r3, IPSR
 8013bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8013bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d10c      	bne.n	8013c0c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8013bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8013bfa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013bfc:	b662      	cpsie	i
}
 8013bfe:	bf00      	nop
 8013c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c02:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c04:	6a3b      	ldr	r3, [r7, #32]
 8013c06:	f383 8810 	msr	PRIMASK, r3
}
 8013c0a:	bf00      	nop
}
 8013c0c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8013c0e:	e02b      	b.n	8013c68 <_tx_thread_system_suspend+0x204>
 8013c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	f383 8810 	msr	PRIMASK, r3
}
 8013c1a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8013c1c:	4b1b      	ldr	r3, [pc, #108]	; (8013c8c <_tx_thread_system_suspend+0x228>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d022      	beq.n	8013c6c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013c26:	4b15      	ldr	r3, [pc, #84]	; (8013c7c <_tx_thread_system_suspend+0x218>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8013c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d11c      	bne.n	8013c6c <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013c32:	4b17      	ldr	r3, [pc, #92]	; (8013c90 <_tx_thread_system_suspend+0x22c>)
 8013c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c38:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c3a:	f3ef 8305 	mrs	r3, IPSR
 8013c3e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013c40:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d10c      	bne.n	8013c60 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c46:	f3ef 8310 	mrs	r3, PRIMASK
 8013c4a:	617b      	str	r3, [r7, #20]
    return(posture);
 8013c4c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8013c4e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013c50:	b662      	cpsie	i
}
 8013c52:	bf00      	nop
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f383 8810 	msr	PRIMASK, r3
}
 8013c5e:	bf00      	nop
}
 8013c60:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8013c62:	e003      	b.n	8013c6c <_tx_thread_system_suspend+0x208>
                return;
 8013c64:	bf00      	nop
 8013c66:	e002      	b.n	8013c6e <_tx_thread_system_suspend+0x20a>
            return;
 8013c68:	bf00      	nop
 8013c6a:	e000      	b.n	8013c6e <_tx_thread_system_suspend+0x20a>
    return;
 8013c6c:	bf00      	nop
}
 8013c6e:	3778      	adds	r7, #120	; 0x78
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	240023d0 	.word	0x240023d0
 8013c78:	24002464 	.word	0x24002464
 8013c7c:	240023cc 	.word	0x240023cc
 8013c80:	24002334 	.word	0x24002334
 8013c84:	240023b8 	.word	0x240023b8
 8013c88:	240023d8 	.word	0x240023d8
 8013c8c:	240023d4 	.word	0x240023d4
 8013c90:	e000ed04 	.word	0xe000ed04

08013c94 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8013c94:	b480      	push	{r7}
 8013c96:	b087      	sub	sp, #28
 8013c98:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013c9a:	4b21      	ldr	r3, [pc, #132]	; (8013d20 <_tx_thread_time_slice+0x8c>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8013ca4:	60fb      	str	r3, [r7, #12]
    return(posture);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8013ca8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013caa:	b672      	cpsid	i
    return(int_posture);
 8013cac:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8013cae:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013cb0:	4b1c      	ldr	r3, [pc, #112]	; (8013d24 <_tx_thread_time_slice+0x90>)
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d024      	beq.n	8013d06 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d120      	bne.n	8013d06 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	69da      	ldr	r2, [r3, #28]
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	699b      	ldr	r3, [r3, #24]
 8013cd0:	4a15      	ldr	r2, [pc, #84]	; (8013d28 <_tx_thread_time_slice+0x94>)
 8013cd2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	6a1b      	ldr	r3, [r3, #32]
 8013cd8:	697a      	ldr	r2, [r7, #20]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d013      	beq.n	8013d06 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d10d      	bne.n	8013d06 <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cee:	697a      	ldr	r2, [r7, #20]
 8013cf0:	6a12      	ldr	r2, [r2, #32]
 8013cf2:	490e      	ldr	r1, [pc, #56]	; (8013d2c <_tx_thread_time_slice+0x98>)
 8013cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013cf8:	4b0d      	ldr	r3, [pc, #52]	; (8013d30 <_tx_thread_time_slice+0x9c>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	4a0b      	ldr	r2, [pc, #44]	; (8013d2c <_tx_thread_time_slice+0x98>)
 8013cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d02:	4a0c      	ldr	r2, [pc, #48]	; (8013d34 <_tx_thread_time_slice+0xa0>)
 8013d04:	6013      	str	r3, [r2, #0]
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f383 8810 	msr	PRIMASK, r3
}
 8013d10:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8013d12:	bf00      	nop
 8013d14:	371c      	adds	r7, #28
 8013d16:	46bd      	mov	sp, r7
 8013d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop
 8013d20:	240023d0 	.word	0x240023d0
 8013d24:	24002938 	.word	0x24002938
 8013d28:	24002464 	.word	0x24002464
 8013d2c:	24002334 	.word	0x24002334
 8013d30:	240023d8 	.word	0x240023d8
 8013d34:	240023d4 	.word	0x240023d4

08013d38 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b08a      	sub	sp, #40	; 0x28
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d44:	f3ef 8310 	mrs	r3, PRIMASK
 8013d48:	617b      	str	r3, [r7, #20]
    return(posture);
 8013d4a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013d4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d4e:	b672      	cpsid	i
    return(int_posture);
 8013d50:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8013d52:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8013d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d58:	2b04      	cmp	r3, #4
 8013d5a:	d10e      	bne.n	8013d7a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8013d5c:	4b13      	ldr	r3, [pc, #76]	; (8013dac <_tx_thread_timeout+0x74>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	3301      	adds	r3, #1
 8013d62:	4a12      	ldr	r2, [pc, #72]	; (8013dac <_tx_thread_timeout+0x74>)
 8013d64:	6013      	str	r3, [r2, #0]
 8013d66:	6a3b      	ldr	r3, [r7, #32]
 8013d68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f383 8810 	msr	PRIMASK, r3
}
 8013d70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d74:	f7ff fd76 	bl	8013864 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8013d78:	e013      	b.n	8013da2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d7e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8013d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013d86:	61bb      	str	r3, [r7, #24]
 8013d88:	6a3b      	ldr	r3, [r7, #32]
 8013d8a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d8c:	68bb      	ldr	r3, [r7, #8]
 8013d8e:	f383 8810 	msr	PRIMASK, r3
}
 8013d92:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d003      	beq.n	8013da2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	69b9      	ldr	r1, [r7, #24]
 8013d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013da0:	4798      	blx	r3
}
 8013da2:	bf00      	nop
 8013da4:	3728      	adds	r7, #40	; 0x28
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	240023cc 	.word	0x240023cc

08013db0 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b088      	sub	sp, #32
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013db8:	f3ef 8310 	mrs	r3, PRIMASK
 8013dbc:	617b      	str	r3, [r7, #20]
    return(posture);
 8013dbe:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013dc0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013dc2:	b672      	cpsid	i
    return(int_posture);
 8013dc4:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013dc6:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6a1b      	ldr	r3, [r3, #32]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d002      	beq.n	8013dd6 <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 8013dd0:	2317      	movs	r3, #23
 8013dd2:	61fb      	str	r3, [r7, #28]
 8013dd4:	e00d      	b.n	8013df2 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	689b      	ldr	r3, [r3, #8]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d102      	bne.n	8013de4 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 8013dde:	2317      	movs	r3, #23
 8013de0:	61fb      	str	r3, [r7, #28]
 8013de2:	e006      	b.n	8013df2 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	3308      	adds	r3, #8
 8013de8:	4618      	mov	r0, r3
 8013dea:	f000 f957 	bl	801409c <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 8013dee:	2300      	movs	r3, #0
 8013df0:	61fb      	str	r3, [r7, #28]
 8013df2:	69bb      	ldr	r3, [r7, #24]
 8013df4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	f383 8810 	msr	PRIMASK, r3
}
 8013dfc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8013dfe:	69fb      	ldr	r3, [r7, #28]
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	3720      	adds	r7, #32
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}

08013e08 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b08a      	sub	sp, #40	; 0x28
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	60f8      	str	r0, [r7, #12]
 8013e10:	60b9      	str	r1, [r7, #8]
 8013e12:	607a      	str	r2, [r7, #4]
 8013e14:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8013e16:	222c      	movs	r2, #44	; 0x2c
 8013e18:	2100      	movs	r1, #0
 8013e1a:	68f8      	ldr	r0, [r7, #12]
 8013e1c:	f001 fbf6 	bl	801560c <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	68ba      	ldr	r2, [r7, #8]
 8013e24:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e2a:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e30:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	683a      	ldr	r2, [r7, #0]
 8013e3c:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8013e42:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013e44:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013e46:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e48:	b672      	cpsid	i
    return(int_posture);
 8013e4a:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013e4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	4a1c      	ldr	r2, [pc, #112]	; (8013ec4 <_tx_timer_create+0xbc>)
 8013e52:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8013e54:	4b1c      	ldr	r3, [pc, #112]	; (8013ec8 <_tx_timer_create+0xc0>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d109      	bne.n	8013e70 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8013e5c:	4a1b      	ldr	r2, [pc, #108]	; (8013ecc <_tx_timer_create+0xc4>)
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	68fa      	ldr	r2, [r7, #12]
 8013e6c:	629a      	str	r2, [r3, #40]	; 0x28
 8013e6e:	e011      	b.n	8013e94 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8013e70:	4b16      	ldr	r3, [pc, #88]	; (8013ecc <_tx_timer_create+0xc4>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8013e76:	6a3b      	ldr	r3, [r7, #32]
 8013e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e7a:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8013e7c:	6a3b      	ldr	r3, [r7, #32]
 8013e7e:	68fa      	ldr	r2, [r7, #12]
 8013e80:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8013e82:	69fb      	ldr	r3, [r7, #28]
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	69fa      	ldr	r2, [r7, #28]
 8013e8c:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	6a3a      	ldr	r2, [r7, #32]
 8013e92:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8013e94:	4b0c      	ldr	r3, [pc, #48]	; (8013ec8 <_tx_timer_create+0xc0>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	3301      	adds	r3, #1
 8013e9a:	4a0b      	ldr	r2, [pc, #44]	; (8013ec8 <_tx_timer_create+0xc0>)
 8013e9c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8013e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	d104      	bne.n	8013eae <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	3308      	adds	r3, #8
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f000 f8f7 	bl	801409c <_tx_timer_system_activate>
 8013eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	f383 8810 	msr	PRIMASK, r3
}
 8013eb8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013eba:	2300      	movs	r3, #0
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3728      	adds	r7, #40	; 0x28
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	4154494d 	.word	0x4154494d
 8013ec8:	24002934 	.word	0x24002934
 8013ecc:	24002528 	.word	0x24002528

08013ed0 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b088      	sub	sp, #32
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8013edc:	613b      	str	r3, [r7, #16]
    return(posture);
 8013ede:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013ee0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ee2:	b672      	cpsid	i
    return(int_posture);
 8013ee4:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 8013ee6:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	6a1b      	ldr	r3, [r3, #32]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d004      	beq.n	8013efa <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	3308      	adds	r3, #8
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 f933 	bl	8014160 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2200      	movs	r2, #0
 8013efe:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 8013f00:	4b15      	ldr	r3, [pc, #84]	; (8013f58 <_tx_timer_delete+0x88>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	3b01      	subs	r3, #1
 8013f06:	4a14      	ldr	r2, [pc, #80]	; (8013f58 <_tx_timer_delete+0x88>)
 8013f08:	6013      	str	r3, [r2, #0]
    
    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8013f0a:	4b13      	ldr	r3, [pc, #76]	; (8013f58 <_tx_timer_delete+0x88>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d103      	bne.n	8013f1a <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 8013f12:	4b12      	ldr	r3, [pc, #72]	; (8013f5c <_tx_timer_delete+0x8c>)
 8013f14:	2200      	movs	r2, #0
 8013f16:	601a      	str	r2, [r3, #0]
 8013f18:	e013      	b.n	8013f42 <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f1e:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f24:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 8013f26:	69bb      	ldr	r3, [r7, #24]
 8013f28:	697a      	ldr	r2, [r7, #20]
 8013f2a:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	69ba      	ldr	r2, [r7, #24]
 8013f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 8013f32:	4b0a      	ldr	r3, [pc, #40]	; (8013f5c <_tx_timer_delete+0x8c>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	687a      	ldr	r2, [r7, #4]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d102      	bne.n	8013f42 <_tx_timer_delete+0x72>
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 8013f3c:	4a07      	ldr	r2, [pc, #28]	; (8013f5c <_tx_timer_delete+0x8c>)
 8013f3e:	69bb      	ldr	r3, [r7, #24]
 8013f40:	6013      	str	r3, [r2, #0]
 8013f42:	69fb      	ldr	r3, [r7, #28]
 8013f44:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	f383 8810 	msr	PRIMASK, r3
}
 8013f4c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013f4e:	2300      	movs	r3, #0
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3720      	adds	r7, #32
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	24002934 	.word	0x24002934
 8013f5c:	24002528 	.word	0x24002528

08013f60 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b084      	sub	sp, #16
 8013f64:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f66:	f3ef 8310 	mrs	r3, PRIMASK
 8013f6a:	607b      	str	r3, [r7, #4]
    return(posture);
 8013f6c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8013f6e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f70:	b672      	cpsid	i
    return(int_posture);
 8013f72:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8013f74:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8013f76:	4b09      	ldr	r3, [pc, #36]	; (8013f9c <_tx_timer_expiration_process+0x3c>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	4a07      	ldr	r2, [pc, #28]	; (8013f9c <_tx_timer_expiration_process+0x3c>)
 8013f7e:	6013      	str	r3, [r2, #0]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	f383 8810 	msr	PRIMASK, r3
}
 8013f8a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8013f8c:	4804      	ldr	r0, [pc, #16]	; (8013fa0 <_tx_timer_expiration_process+0x40>)
 8013f8e:	f7ff fc69 	bl	8013864 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013f92:	bf00      	nop
 8013f94:	3710      	adds	r7, #16
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	240023cc 	.word	0x240023cc
 8013fa0:	24002470 	.word	0x24002470

08013fa4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8013fa4:	b590      	push	{r4, r7, lr}
 8013fa6:	b089      	sub	sp, #36	; 0x24
 8013fa8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8013faa:	4b28      	ldr	r3, [pc, #160]	; (801404c <_tx_timer_initialize+0xa8>)
 8013fac:	2200      	movs	r2, #0
 8013fae:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8013fb0:	4b27      	ldr	r3, [pc, #156]	; (8014050 <_tx_timer_initialize+0xac>)
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013fb6:	4b27      	ldr	r3, [pc, #156]	; (8014054 <_tx_timer_initialize+0xb0>)
 8013fb8:	2200      	movs	r2, #0
 8013fba:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8013fbc:	4b26      	ldr	r3, [pc, #152]	; (8014058 <_tx_timer_initialize+0xb4>)
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8013fc2:	4b26      	ldr	r3, [pc, #152]	; (801405c <_tx_timer_initialize+0xb8>)
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8013fc8:	2280      	movs	r2, #128	; 0x80
 8013fca:	2100      	movs	r1, #0
 8013fcc:	4824      	ldr	r0, [pc, #144]	; (8014060 <_tx_timer_initialize+0xbc>)
 8013fce:	f001 fb1d 	bl	801560c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8013fd2:	4b24      	ldr	r3, [pc, #144]	; (8014064 <_tx_timer_initialize+0xc0>)
 8013fd4:	4a22      	ldr	r2, [pc, #136]	; (8014060 <_tx_timer_initialize+0xbc>)
 8013fd6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8013fd8:	4b23      	ldr	r3, [pc, #140]	; (8014068 <_tx_timer_initialize+0xc4>)
 8013fda:	4a21      	ldr	r2, [pc, #132]	; (8014060 <_tx_timer_initialize+0xbc>)
 8013fdc:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8013fde:	4b23      	ldr	r3, [pc, #140]	; (801406c <_tx_timer_initialize+0xc8>)
 8013fe0:	4a23      	ldr	r2, [pc, #140]	; (8014070 <_tx_timer_initialize+0xcc>)
 8013fe2:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8013fe4:	4b21      	ldr	r3, [pc, #132]	; (801406c <_tx_timer_initialize+0xc8>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	3304      	adds	r3, #4
 8013fea:	4a20      	ldr	r2, [pc, #128]	; (801406c <_tx_timer_initialize+0xc8>)
 8013fec:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8013fee:	4b21      	ldr	r3, [pc, #132]	; (8014074 <_tx_timer_initialize+0xd0>)
 8013ff0:	4a21      	ldr	r2, [pc, #132]	; (8014078 <_tx_timer_initialize+0xd4>)
 8013ff2:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8013ff4:	4b21      	ldr	r3, [pc, #132]	; (801407c <_tx_timer_initialize+0xd8>)
 8013ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013ffa:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8013ffc:	4b20      	ldr	r3, [pc, #128]	; (8014080 <_tx_timer_initialize+0xdc>)
 8013ffe:	2200      	movs	r2, #0
 8014000:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8014002:	4b1c      	ldr	r3, [pc, #112]	; (8014074 <_tx_timer_initialize+0xd0>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	4a1d      	ldr	r2, [pc, #116]	; (801407c <_tx_timer_initialize+0xd8>)
 8014008:	6812      	ldr	r2, [r2, #0]
 801400a:	491d      	ldr	r1, [pc, #116]	; (8014080 <_tx_timer_initialize+0xdc>)
 801400c:	6809      	ldr	r1, [r1, #0]
 801400e:	481c      	ldr	r0, [pc, #112]	; (8014080 <_tx_timer_initialize+0xdc>)
 8014010:	6800      	ldr	r0, [r0, #0]
 8014012:	2400      	movs	r4, #0
 8014014:	9405      	str	r4, [sp, #20]
 8014016:	2400      	movs	r4, #0
 8014018:	9404      	str	r4, [sp, #16]
 801401a:	9003      	str	r0, [sp, #12]
 801401c:	9102      	str	r1, [sp, #8]
 801401e:	9201      	str	r2, [sp, #4]
 8014020:	9300      	str	r3, [sp, #0]
 8014022:	4b18      	ldr	r3, [pc, #96]	; (8014084 <_tx_timer_initialize+0xe0>)
 8014024:	4a18      	ldr	r2, [pc, #96]	; (8014088 <_tx_timer_initialize+0xe4>)
 8014026:	4919      	ldr	r1, [pc, #100]	; (801408c <_tx_timer_initialize+0xe8>)
 8014028:	4819      	ldr	r0, [pc, #100]	; (8014090 <_tx_timer_initialize+0xec>)
 801402a:	f7ff f831 	bl	8013090 <_tx_thread_create>
 801402e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d1e5      	bne.n	8014002 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8014036:	4b17      	ldr	r3, [pc, #92]	; (8014094 <_tx_timer_initialize+0xf0>)
 8014038:	2200      	movs	r2, #0
 801403a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801403c:	4b16      	ldr	r3, [pc, #88]	; (8014098 <_tx_timer_initialize+0xf4>)
 801403e:	2200      	movs	r2, #0
 8014040:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8014042:	bf00      	nop
 8014044:	370c      	adds	r7, #12
 8014046:	46bd      	mov	sp, r7
 8014048:	bd90      	pop	{r4, r7, pc}
 801404a:	bf00      	nop
 801404c:	2400293c 	.word	0x2400293c
 8014050:	24002464 	.word	0x24002464
 8014054:	24002938 	.word	0x24002938
 8014058:	24002460 	.word	0x24002460
 801405c:	24002520 	.word	0x24002520
 8014060:	240023e0 	.word	0x240023e0
 8014064:	24002524 	.word	0x24002524
 8014068:	240023dc 	.word	0x240023dc
 801406c:	2400246c 	.word	0x2400246c
 8014070:	2400245c 	.word	0x2400245c
 8014074:	24002930 	.word	0x24002930
 8014078:	24002530 	.word	0x24002530
 801407c:	2400252c 	.word	0x2400252c
 8014080:	24002468 	.word	0x24002468
 8014084:	4154494d 	.word	0x4154494d
 8014088:	080141d1 	.word	0x080141d1
 801408c:	08016a70 	.word	0x08016a70
 8014090:	24002470 	.word	0x24002470
 8014094:	24002528 	.word	0x24002528
 8014098:	24002934 	.word	0x24002934

0801409c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 801409c:	b480      	push	{r7}
 801409e:	b089      	sub	sp, #36	; 0x24
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d04a      	beq.n	8014146 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b6:	d046      	beq.n	8014146 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	699b      	ldr	r3, [r3, #24]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d142      	bne.n	8014146 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	2b20      	cmp	r3, #32
 80140c4:	d902      	bls.n	80140cc <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80140c6:	231f      	movs	r3, #31
 80140c8:	61bb      	str	r3, [r7, #24]
 80140ca:	e002      	b.n	80140d2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	3b01      	subs	r3, #1
 80140d0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80140d2:	4b20      	ldr	r3, [pc, #128]	; (8014154 <_tx_timer_system_activate+0xb8>)
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	4413      	add	r3, r2
 80140dc:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80140de:	4b1e      	ldr	r3, [pc, #120]	; (8014158 <_tx_timer_system_activate+0xbc>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	69fa      	ldr	r2, [r7, #28]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d30b      	bcc.n	8014100 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80140e8:	4b1b      	ldr	r3, [pc, #108]	; (8014158 <_tx_timer_system_activate+0xbc>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	69fa      	ldr	r2, [r7, #28]
 80140ee:	1ad3      	subs	r3, r2, r3
 80140f0:	109b      	asrs	r3, r3, #2
 80140f2:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80140f4:	4b19      	ldr	r3, [pc, #100]	; (801415c <_tx_timer_system_activate+0xc0>)
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	009b      	lsls	r3, r3, #2
 80140fc:	4413      	add	r3, r2
 80140fe:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d109      	bne.n	801411c <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	687a      	ldr	r2, [r7, #4]
 801410c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	687a      	ldr	r2, [r7, #4]
 8014112:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8014114:	69fb      	ldr	r3, [r7, #28]
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	601a      	str	r2, [r3, #0]
 801411a:	e011      	b.n	8014140 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	695b      	ldr	r3, [r3, #20]
 8014126:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	687a      	ldr	r2, [r7, #4]
 801412c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	68fa      	ldr	r2, [r7, #12]
 8014138:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	68ba      	ldr	r2, [r7, #8]
 801413e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	69fa      	ldr	r2, [r7, #28]
 8014144:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8014146:	bf00      	nop
 8014148:	3724      	adds	r7, #36	; 0x24
 801414a:	46bd      	mov	sp, r7
 801414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014150:	4770      	bx	lr
 8014152:	bf00      	nop
 8014154:	240023dc 	.word	0x240023dc
 8014158:	2400246c 	.word	0x2400246c
 801415c:	24002524 	.word	0x24002524

08014160 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014160:	b480      	push	{r7}
 8014162:	b087      	sub	sp, #28
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	699b      	ldr	r3, [r3, #24]
 801416c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d026      	beq.n	80141c2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	691b      	ldr	r3, [r3, #16]
 8014178:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	693b      	ldr	r3, [r7, #16]
 801417e:	429a      	cmp	r2, r3
 8014180:	d108      	bne.n	8014194 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	429a      	cmp	r2, r3
 801418a:	d117      	bne.n	80141bc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	2200      	movs	r2, #0
 8014190:	601a      	str	r2, [r3, #0]
 8014192:	e013      	b.n	80141bc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	695b      	ldr	r3, [r3, #20]
 8014198:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	68fa      	ldr	r2, [r7, #12]
 801419e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	693a      	ldr	r2, [r7, #16]
 80141a4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d105      	bne.n	80141bc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80141b0:	693b      	ldr	r3, [r7, #16]
 80141b2:	697a      	ldr	r2, [r7, #20]
 80141b4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	693a      	ldr	r2, [r7, #16]
 80141ba:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2200      	movs	r2, #0
 80141c0:	619a      	str	r2, [r3, #24]
    }
}
 80141c2:	bf00      	nop
 80141c4:	371c      	adds	r7, #28
 80141c6:	46bd      	mov	sp, r7
 80141c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141cc:	4770      	bx	lr
	...

080141d0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b098      	sub	sp, #96	; 0x60
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80141d8:	2300      	movs	r3, #0
 80141da:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	4a73      	ldr	r2, [pc, #460]	; (80143ac <_tx_timer_thread_entry+0x1dc>)
 80141e0:	4293      	cmp	r3, r2
 80141e2:	f040 80de 	bne.w	80143a2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80141e6:	f3ef 8310 	mrs	r3, PRIMASK
 80141ea:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80141ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80141ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80141f0:	b672      	cpsid	i
    return(int_posture);
 80141f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80141f4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80141f6:	4b6e      	ldr	r3, [pc, #440]	; (80143b0 <_tx_timer_thread_entry+0x1e0>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d003      	beq.n	801420c <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	f107 020c 	add.w	r2, r7, #12
 801420a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801420c:	4b68      	ldr	r3, [pc, #416]	; (80143b0 <_tx_timer_thread_entry+0x1e0>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2200      	movs	r2, #0
 8014212:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8014214:	4b66      	ldr	r3, [pc, #408]	; (80143b0 <_tx_timer_thread_entry+0x1e0>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	3304      	adds	r3, #4
 801421a:	4a65      	ldr	r2, [pc, #404]	; (80143b0 <_tx_timer_thread_entry+0x1e0>)
 801421c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801421e:	4b64      	ldr	r3, [pc, #400]	; (80143b0 <_tx_timer_thread_entry+0x1e0>)
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	4b64      	ldr	r3, [pc, #400]	; (80143b4 <_tx_timer_thread_entry+0x1e4>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	429a      	cmp	r2, r3
 8014228:	d103      	bne.n	8014232 <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 801422a:	4b63      	ldr	r3, [pc, #396]	; (80143b8 <_tx_timer_thread_entry+0x1e8>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	4a60      	ldr	r2, [pc, #384]	; (80143b0 <_tx_timer_thread_entry+0x1e0>)
 8014230:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8014232:	4b62      	ldr	r3, [pc, #392]	; (80143bc <_tx_timer_thread_entry+0x1ec>)
 8014234:	2200      	movs	r2, #0
 8014236:	601a      	str	r2, [r3, #0]
 8014238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801423a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801423e:	f383 8810 	msr	PRIMASK, r3
}
 8014242:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014244:	f3ef 8310 	mrs	r3, PRIMASK
 8014248:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801424c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801424e:	b672      	cpsid	i
    return(int_posture);
 8014250:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8014252:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8014254:	e07f      	b.n	8014356 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	691b      	ldr	r3, [r3, #16]
 801425e:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8014260:	2300      	movs	r3, #0
 8014262:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8014264:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014268:	429a      	cmp	r2, r3
 801426a:	d102      	bne.n	8014272 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801426c:	2300      	movs	r3, #0
 801426e:	60fb      	str	r3, [r7, #12]
 8014270:	e00e      	b.n	8014290 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8014272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014274:	695b      	ldr	r3, [r3, #20]
 8014276:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801427a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801427c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801427e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014282:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8014284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014286:	f107 020c 	add.w	r2, r7, #12
 801428a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801428c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801428e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8014290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	2b20      	cmp	r3, #32
 8014296:	d911      	bls.n	80142bc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8014298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 80142a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142a2:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80142a4:	2300      	movs	r3, #0
 80142a6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80142a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142aa:	f107 0208 	add.w	r2, r7, #8
 80142ae:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80142b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142b4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80142b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142b8:	60bb      	str	r3, [r7, #8]
 80142ba:	e01a      	b.n	80142f2 <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80142bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142be:	689b      	ldr	r3, [r3, #8]
 80142c0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80142c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142c4:	68db      	ldr	r3, [r3, #12]
 80142c6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80142c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ca:	685a      	ldr	r2, [r3, #4]
 80142cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ce:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80142d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d009      	beq.n	80142ec <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80142d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142da:	f107 0208 	add.w	r2, r7, #8
 80142de:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80142e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142e4:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80142e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142e8:	60bb      	str	r3, [r7, #8]
 80142ea:	e002      	b.n	80142f2 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80142ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ee:	2200      	movs	r2, #0
 80142f0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80142f2:	4a33      	ldr	r2, [pc, #204]	; (80143c0 <_tx_timer_thread_entry+0x1f0>)
 80142f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142f6:	6013      	str	r3, [r2, #0]
 80142f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142fe:	f383 8810 	msr	PRIMASK, r3
}
 8014302:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8014304:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014306:	2b00      	cmp	r3, #0
 8014308:	d002      	beq.n	8014310 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 801430a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801430c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801430e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014310:	f3ef 8310 	mrs	r3, PRIMASK
 8014314:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014316:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014318:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801431a:	b672      	cpsid	i
    return(int_posture);
 801431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 801431e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8014320:	4b27      	ldr	r3, [pc, #156]	; (80143c0 <_tx_timer_thread_entry+0x1f0>)
 8014322:	2200      	movs	r2, #0
 8014324:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801432a:	429a      	cmp	r2, r3
 801432c:	d105      	bne.n	801433a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014330:	2200      	movs	r2, #0
 8014332:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8014334:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014336:	f7ff feb1 	bl	801409c <_tx_timer_system_activate>
 801433a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801433c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	f383 8810 	msr	PRIMASK, r3
}
 8014344:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014346:	f3ef 8310 	mrs	r3, PRIMASK
 801434a:	623b      	str	r3, [r7, #32]
    return(posture);
 801434c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801434e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014350:	b672      	cpsid	i
    return(int_posture);
 8014352:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014354:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	2b00      	cmp	r3, #0
 801435a:	f47f af7c 	bne.w	8014256 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801435e:	4b17      	ldr	r3, [pc, #92]	; (80143bc <_tx_timer_thread_entry+0x1ec>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d116      	bne.n	8014394 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8014366:	4b17      	ldr	r3, [pc, #92]	; (80143c4 <_tx_timer_thread_entry+0x1f4>)
 8014368:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801436a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801436c:	2203      	movs	r2, #3
 801436e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014372:	2201      	movs	r2, #1
 8014374:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8014376:	4b14      	ldr	r3, [pc, #80]	; (80143c8 <_tx_timer_thread_entry+0x1f8>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	3301      	adds	r3, #1
 801437c:	4a12      	ldr	r2, [pc, #72]	; (80143c8 <_tx_timer_thread_entry+0x1f8>)
 801437e:	6013      	str	r3, [r2, #0]
 8014380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014382:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	f383 8810 	msr	PRIMASK, r3
}
 801438a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801438c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801438e:	f7ff fb69 	bl	8013a64 <_tx_thread_system_suspend>
 8014392:	e728      	b.n	80141e6 <_tx_timer_thread_entry+0x16>
 8014394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014396:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	f383 8810 	msr	PRIMASK, r3
}
 801439e:	bf00      	nop
            TX_DISABLE
 80143a0:	e721      	b.n	80141e6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80143a2:	bf00      	nop
 80143a4:	3760      	adds	r7, #96	; 0x60
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	4154494d 	.word	0x4154494d
 80143b0:	240023dc 	.word	0x240023dc
 80143b4:	2400246c 	.word	0x2400246c
 80143b8:	24002524 	.word	0x24002524
 80143bc:	24002460 	.word	0x24002460
 80143c0:	24002520 	.word	0x24002520
 80143c4:	24002470 	.word	0x24002470
 80143c8:	240023cc 	.word	0x240023cc

080143cc <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b08a      	sub	sp, #40	; 0x28
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	60f8      	str	r0, [r7, #12]
 80143d4:	60b9      	str	r1, [r7, #8]
 80143d6:	607a      	str	r2, [r7, #4]
 80143d8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80143da:	2300      	movs	r3, #0
 80143dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d102      	bne.n	80143ea <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80143e4:	2302      	movs	r3, #2
 80143e6:	627b      	str	r3, [r7, #36]	; 0x24
 80143e8:	e029      	b.n	801443e <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4a2d      	ldr	r2, [pc, #180]	; (80144a4 <_txe_byte_allocate+0xd8>)
 80143f0:	4293      	cmp	r3, r2
 80143f2:	d002      	beq.n	80143fa <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80143f4:	2302      	movs	r3, #2
 80143f6:	627b      	str	r3, [r7, #36]	; 0x24
 80143f8:	e021      	b.n	801443e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d102      	bne.n	8014406 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8014400:	2303      	movs	r3, #3
 8014402:	627b      	str	r3, [r7, #36]	; 0x24
 8014404:	e01b      	b.n	801443e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d102      	bne.n	8014412 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801440c:	2305      	movs	r3, #5
 801440e:	627b      	str	r3, [r7, #36]	; 0x24
 8014410:	e015      	b.n	801443e <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	69db      	ldr	r3, [r3, #28]
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	429a      	cmp	r2, r3
 801441a:	d902      	bls.n	8014422 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801441c:	2305      	movs	r3, #5
 801441e:	627b      	str	r3, [r7, #36]	; 0x24
 8014420:	e00d      	b.n	801443e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d00a      	beq.n	801443e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014428:	f3ef 8305 	mrs	r3, IPSR
 801442c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801442e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014430:	4b1d      	ldr	r3, [pc, #116]	; (80144a8 <_txe_byte_allocate+0xdc>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	4313      	orrs	r3, r2
 8014436:	2b00      	cmp	r3, #0
 8014438:	d001      	beq.n	801443e <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801443a:	2304      	movs	r3, #4
 801443c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014440:	2b00      	cmp	r3, #0
 8014442:	d108      	bne.n	8014456 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8014444:	4b19      	ldr	r3, [pc, #100]	; (80144ac <_txe_byte_allocate+0xe0>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801444a:	6a3b      	ldr	r3, [r7, #32]
 801444c:	4a18      	ldr	r2, [pc, #96]	; (80144b0 <_txe_byte_allocate+0xe4>)
 801444e:	4293      	cmp	r3, r2
 8014450:	d101      	bne.n	8014456 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014452:	2313      	movs	r3, #19
 8014454:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8014456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014458:	2b00      	cmp	r3, #0
 801445a:	d114      	bne.n	8014486 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801445c:	f3ef 8305 	mrs	r3, IPSR
 8014460:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014462:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014464:	4b10      	ldr	r3, [pc, #64]	; (80144a8 <_txe_byte_allocate+0xdc>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	4313      	orrs	r3, r2
 801446a:	2b00      	cmp	r3, #0
 801446c:	d00b      	beq.n	8014486 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801446e:	f3ef 8305 	mrs	r3, IPSR
 8014472:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014474:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014476:	4b0c      	ldr	r3, [pc, #48]	; (80144a8 <_txe_byte_allocate+0xdc>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4313      	orrs	r3, r2
 801447c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014480:	d201      	bcs.n	8014486 <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014482:	2313      	movs	r3, #19
 8014484:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014488:	2b00      	cmp	r3, #0
 801448a:	d106      	bne.n	801449a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	68b9      	ldr	r1, [r7, #8]
 8014492:	68f8      	ldr	r0, [r7, #12]
 8014494:	f7fc fec6 	bl	8011224 <_tx_byte_allocate>
 8014498:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 801449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801449c:	4618      	mov	r0, r3
 801449e:	3728      	adds	r7, #40	; 0x28
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	42595445 	.word	0x42595445
 80144a8:	2400008c 	.word	0x2400008c
 80144ac:	240023d0 	.word	0x240023d0
 80144b0:	24002470 	.word	0x24002470

080144b4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b092      	sub	sp, #72	; 0x48
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
 80144c0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80144c2:	2300      	movs	r3, #0
 80144c4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d102      	bne.n	80144d2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80144cc:	2302      	movs	r3, #2
 80144ce:	647b      	str	r3, [r7, #68]	; 0x44
 80144d0:	e075      	b.n	80145be <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80144d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144d4:	2b34      	cmp	r3, #52	; 0x34
 80144d6:	d002      	beq.n	80144de <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80144d8:	2302      	movs	r3, #2
 80144da:	647b      	str	r3, [r7, #68]	; 0x44
 80144dc:	e06f      	b.n	80145be <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80144de:	f3ef 8310 	mrs	r3, PRIMASK
 80144e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80144e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80144e6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80144e8:	b672      	cpsid	i
    return(int_posture);
 80144ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 80144ec:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80144ee:	4b3b      	ldr	r3, [pc, #236]	; (80145dc <_txe_byte_pool_create+0x128>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	3301      	adds	r3, #1
 80144f4:	4a39      	ldr	r2, [pc, #228]	; (80145dc <_txe_byte_pool_create+0x128>)
 80144f6:	6013      	str	r3, [r2, #0]
 80144f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144fa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fe:	f383 8810 	msr	PRIMASK, r3
}
 8014502:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8014504:	4b36      	ldr	r3, [pc, #216]	; (80145e0 <_txe_byte_pool_create+0x12c>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801450a:	2300      	movs	r3, #0
 801450c:	643b      	str	r3, [r7, #64]	; 0x40
 801450e:	e009      	b.n	8014524 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8014510:	68fa      	ldr	r2, [r7, #12]
 8014512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014514:	429a      	cmp	r2, r3
 8014516:	d00b      	beq.n	8014530 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8014518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801451c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801451e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014520:	3301      	adds	r3, #1
 8014522:	643b      	str	r3, [r7, #64]	; 0x40
 8014524:	4b2f      	ldr	r3, [pc, #188]	; (80145e4 <_txe_byte_pool_create+0x130>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801452a:	429a      	cmp	r2, r3
 801452c:	d3f0      	bcc.n	8014510 <_txe_byte_pool_create+0x5c>
 801452e:	e000      	b.n	8014532 <_txe_byte_pool_create+0x7e>
                break;
 8014530:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014532:	f3ef 8310 	mrs	r3, PRIMASK
 8014536:	623b      	str	r3, [r7, #32]
    return(posture);
 8014538:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801453a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801453c:	b672      	cpsid	i
    return(int_posture);
 801453e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014540:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014542:	4b26      	ldr	r3, [pc, #152]	; (80145dc <_txe_byte_pool_create+0x128>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	3b01      	subs	r3, #1
 8014548:	4a24      	ldr	r2, [pc, #144]	; (80145dc <_txe_byte_pool_create+0x128>)
 801454a:	6013      	str	r3, [r2, #0]
 801454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014552:	f383 8810 	msr	PRIMASK, r3
}
 8014556:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014558:	f7ff f94a 	bl	80137f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801455c:	68fa      	ldr	r2, [r7, #12]
 801455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014560:	429a      	cmp	r2, r3
 8014562:	d102      	bne.n	801456a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8014564:	2302      	movs	r3, #2
 8014566:	647b      	str	r3, [r7, #68]	; 0x44
 8014568:	e029      	b.n	80145be <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d102      	bne.n	8014576 <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8014570:	2303      	movs	r3, #3
 8014572:	647b      	str	r3, [r7, #68]	; 0x44
 8014574:	e023      	b.n	80145be <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	2b63      	cmp	r3, #99	; 0x63
 801457a:	d802      	bhi.n	8014582 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801457c:	2305      	movs	r3, #5
 801457e:	647b      	str	r3, [r7, #68]	; 0x44
 8014580:	e01d      	b.n	80145be <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014582:	4b19      	ldr	r3, [pc, #100]	; (80145e8 <_txe_byte_pool_create+0x134>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801458a:	4a18      	ldr	r2, [pc, #96]	; (80145ec <_txe_byte_pool_create+0x138>)
 801458c:	4293      	cmp	r3, r2
 801458e:	d101      	bne.n	8014594 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014590:	2313      	movs	r3, #19
 8014592:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014594:	f3ef 8305 	mrs	r3, IPSR
 8014598:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801459a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801459c:	4b14      	ldr	r3, [pc, #80]	; (80145f0 <_txe_byte_pool_create+0x13c>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4313      	orrs	r3, r2
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d00b      	beq.n	80145be <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80145a6:	f3ef 8305 	mrs	r3, IPSR
 80145aa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80145ac:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80145ae:	4b10      	ldr	r3, [pc, #64]	; (80145f0 <_txe_byte_pool_create+0x13c>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	4313      	orrs	r3, r2
 80145b4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80145b8:	d201      	bcs.n	80145be <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80145ba:	2313      	movs	r3, #19
 80145bc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80145be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d106      	bne.n	80145d2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	68b9      	ldr	r1, [r7, #8]
 80145ca:	68f8      	ldr	r0, [r7, #12]
 80145cc:	f7fc ff6c 	bl	80114a8 <_tx_byte_pool_create>
 80145d0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80145d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3748      	adds	r7, #72	; 0x48
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	240023cc 	.word	0x240023cc
 80145e0:	24002314 	.word	0x24002314
 80145e4:	24002330 	.word	0x24002330
 80145e8:	240023d0 	.word	0x240023d0
 80145ec:	24002470 	.word	0x24002470
 80145f0:	2400008c 	.word	0x2400008c

080145f4 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b092      	sub	sp, #72	; 0x48
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	60f8      	str	r0, [r7, #12]
 80145fc:	60b9      	str	r1, [r7, #8]
 80145fe:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014600:	2300      	movs	r3, #0
 8014602:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d102      	bne.n	8014610 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801460a:	2306      	movs	r3, #6
 801460c:	647b      	str	r3, [r7, #68]	; 0x44
 801460e:	e069      	b.n	80146e4 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b24      	cmp	r3, #36	; 0x24
 8014614:	d002      	beq.n	801461c <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8014616:	2306      	movs	r3, #6
 8014618:	647b      	str	r3, [r7, #68]	; 0x44
 801461a:	e063      	b.n	80146e4 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801461c:	f3ef 8310 	mrs	r3, PRIMASK
 8014620:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014624:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014626:	b672      	cpsid	i
    return(int_posture);
 8014628:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801462a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801462c:	4b34      	ldr	r3, [pc, #208]	; (8014700 <_txe_event_flags_create+0x10c>)
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	3301      	adds	r3, #1
 8014632:	4a33      	ldr	r2, [pc, #204]	; (8014700 <_txe_event_flags_create+0x10c>)
 8014634:	6013      	str	r3, [r2, #0]
 8014636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014638:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463c:	f383 8810 	msr	PRIMASK, r3
}
 8014640:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8014642:	4b30      	ldr	r3, [pc, #192]	; (8014704 <_txe_event_flags_create+0x110>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8014648:	2300      	movs	r3, #0
 801464a:	643b      	str	r3, [r7, #64]	; 0x40
 801464c:	e009      	b.n	8014662 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 801464e:	68fa      	ldr	r2, [r7, #12]
 8014650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014652:	429a      	cmp	r2, r3
 8014654:	d00b      	beq.n	801466e <_txe_event_flags_create+0x7a>
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8014656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014658:	699b      	ldr	r3, [r3, #24]
 801465a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 801465c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801465e:	3301      	adds	r3, #1
 8014660:	643b      	str	r3, [r7, #64]	; 0x40
 8014662:	4b29      	ldr	r3, [pc, #164]	; (8014708 <_txe_event_flags_create+0x114>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014668:	429a      	cmp	r2, r3
 801466a:	d3f0      	bcc.n	801464e <_txe_event_flags_create+0x5a>
 801466c:	e000      	b.n	8014670 <_txe_event_flags_create+0x7c>
                break;
 801466e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014670:	f3ef 8310 	mrs	r3, PRIMASK
 8014674:	623b      	str	r3, [r7, #32]
    return(posture);
 8014676:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014678:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801467a:	b672      	cpsid	i
    return(int_posture);
 801467c:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801467e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014680:	4b1f      	ldr	r3, [pc, #124]	; (8014700 <_txe_event_flags_create+0x10c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	3b01      	subs	r3, #1
 8014686:	4a1e      	ldr	r2, [pc, #120]	; (8014700 <_txe_event_flags_create+0x10c>)
 8014688:	6013      	str	r3, [r2, #0]
 801468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801468c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014690:	f383 8810 	msr	PRIMASK, r3
}
 8014694:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014696:	f7ff f8ab 	bl	80137f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 801469a:	68fa      	ldr	r2, [r7, #12]
 801469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801469e:	429a      	cmp	r2, r3
 80146a0:	d102      	bne.n	80146a8 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 80146a2:	2306      	movs	r3, #6
 80146a4:	647b      	str	r3, [r7, #68]	; 0x44
 80146a6:	e01d      	b.n	80146e4 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80146a8:	4b18      	ldr	r3, [pc, #96]	; (801470c <_txe_event_flags_create+0x118>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80146ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146b0:	4a17      	ldr	r2, [pc, #92]	; (8014710 <_txe_event_flags_create+0x11c>)
 80146b2:	4293      	cmp	r3, r2
 80146b4:	d101      	bne.n	80146ba <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80146b6:	2313      	movs	r3, #19
 80146b8:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146ba:	f3ef 8305 	mrs	r3, IPSR
 80146be:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80146c0:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80146c2:	4b14      	ldr	r3, [pc, #80]	; (8014714 <_txe_event_flags_create+0x120>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	4313      	orrs	r3, r2
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d00b      	beq.n	80146e4 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146cc:	f3ef 8305 	mrs	r3, IPSR
 80146d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80146d2:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80146d4:	4b0f      	ldr	r3, [pc, #60]	; (8014714 <_txe_event_flags_create+0x120>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	4313      	orrs	r3, r2
 80146da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80146de:	d201      	bcs.n	80146e4 <_txe_event_flags_create+0xf0>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80146e0:	2313      	movs	r3, #19
 80146e2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80146e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d104      	bne.n	80146f4 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 80146ea:	68b9      	ldr	r1, [r7, #8]
 80146ec:	68f8      	ldr	r0, [r7, #12]
 80146ee:	f7fd f905 	bl	80118fc <_tx_event_flags_create>
 80146f2:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80146f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3748      	adds	r7, #72	; 0x48
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	240023cc 	.word	0x240023cc
 8014704:	24002300 	.word	0x24002300
 8014708:	24002324 	.word	0x24002324
 801470c:	240023d0 	.word	0x240023d0
 8014710:	24002470 	.word	0x24002470
 8014714:	2400008c 	.word	0x2400008c

08014718 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b08a      	sub	sp, #40	; 0x28
 801471c:	af02      	add	r7, sp, #8
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	60b9      	str	r1, [r7, #8]
 8014722:	607a      	str	r2, [r7, #4]
 8014724:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014726:	2300      	movs	r3, #0
 8014728:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d102      	bne.n	8014736 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8014730:	2306      	movs	r3, #6
 8014732:	61fb      	str	r3, [r7, #28]
 8014734:	e025      	b.n	8014782 <_txe_event_flags_get+0x6a>
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	4a1e      	ldr	r2, [pc, #120]	; (80147b4 <_txe_event_flags_get+0x9c>)
 801473c:	4293      	cmp	r3, r2
 801473e:	d002      	beq.n	8014746 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8014740:	2306      	movs	r3, #6
 8014742:	61fb      	str	r3, [r7, #28]
 8014744:	e01d      	b.n	8014782 <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d102      	bne.n	8014752 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801474c:	2303      	movs	r3, #3
 801474e:	61fb      	str	r3, [r7, #28]
 8014750:	e017      	b.n	8014782 <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014754:	2b00      	cmp	r3, #0
 8014756:	d014      	beq.n	8014782 <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014758:	f3ef 8305 	mrs	r3, IPSR
 801475c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801475e:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014760:	4b15      	ldr	r3, [pc, #84]	; (80147b8 <_txe_event_flags_get+0xa0>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	4313      	orrs	r3, r2
 8014766:	2b00      	cmp	r3, #0
 8014768:	d002      	beq.n	8014770 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801476a:	2304      	movs	r3, #4
 801476c:	61fb      	str	r3, [r7, #28]
 801476e:	e008      	b.n	8014782 <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014770:	4b12      	ldr	r3, [pc, #72]	; (80147bc <_txe_event_flags_get+0xa4>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014776:	69bb      	ldr	r3, [r7, #24]
 8014778:	4a11      	ldr	r2, [pc, #68]	; (80147c0 <_txe_event_flags_get+0xa8>)
 801477a:	4293      	cmp	r3, r2
 801477c:	d101      	bne.n	8014782 <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801477e:	2304      	movs	r3, #4
 8014780:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8014782:	69fb      	ldr	r3, [r7, #28]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d104      	bne.n	8014792 <_txe_event_flags_get+0x7a>
    {
    
        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2b03      	cmp	r3, #3
 801478c:	d901      	bls.n	8014792 <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 801478e:	2308      	movs	r3, #8
 8014790:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014792:	69fb      	ldr	r3, [r7, #28]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d108      	bne.n	80147aa <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8014798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	68b9      	ldr	r1, [r7, #8]
 80147a2:	68f8      	ldr	r0, [r7, #12]
 80147a4:	f7fd f8f8 	bl	8011998 <_tx_event_flags_get>
 80147a8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80147aa:	69fb      	ldr	r3, [r7, #28]
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	3720      	adds	r7, #32
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}
 80147b4:	4456444e 	.word	0x4456444e
 80147b8:	2400008c 	.word	0x2400008c
 80147bc:	240023d0 	.word	0x240023d0
 80147c0:	24002470 	.word	0x24002470

080147c4 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80147d0:	2300      	movs	r3, #0
 80147d2:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d102      	bne.n	80147e0 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80147da:	2306      	movs	r3, #6
 80147dc:	617b      	str	r3, [r7, #20]
 80147de:	e00f      	b.n	8014800 <_txe_event_flags_set+0x3c>
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	4a0d      	ldr	r2, [pc, #52]	; (801481c <_txe_event_flags_set+0x58>)
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d002      	beq.n	80147f0 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80147ea:	2306      	movs	r3, #6
 80147ec:	617b      	str	r3, [r7, #20]
 80147ee:	e007      	b.n	8014800 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2b02      	cmp	r3, #2
 80147f4:	d004      	beq.n	8014800 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d001      	beq.n	8014800 <_txe_event_flags_set+0x3c>
            {
        
                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 80147fc:	2308      	movs	r3, #8
 80147fe:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d105      	bne.n	8014812 <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	68b9      	ldr	r1, [r7, #8]
 801480a:	68f8      	ldr	r0, [r7, #12]
 801480c:	f7fd f9a6 	bl	8011b5c <_tx_event_flags_set>
 8014810:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014812:	697b      	ldr	r3, [r7, #20]
}
 8014814:	4618      	mov	r0, r3
 8014816:	3718      	adds	r7, #24
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	4456444e 	.word	0x4456444e

08014820 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b092      	sub	sp, #72	; 0x48
 8014824:	af00      	add	r7, sp, #0
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	60b9      	str	r1, [r7, #8]
 801482a:	607a      	str	r2, [r7, #4]
 801482c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801482e:	2300      	movs	r3, #0
 8014830:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d102      	bne.n	801483e <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014838:	231c      	movs	r3, #28
 801483a:	647b      	str	r3, [r7, #68]	; 0x44
 801483c:	e053      	b.n	80148e6 <_txe_mutex_create+0xc6>
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	2b34      	cmp	r3, #52	; 0x34
 8014842:	d002      	beq.n	801484a <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014844:	231c      	movs	r3, #28
 8014846:	647b      	str	r3, [r7, #68]	; 0x44
 8014848:	e04d      	b.n	80148e6 <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801484a:	f3ef 8310 	mrs	r3, PRIMASK
 801484e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014852:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014854:	b672      	cpsid	i
    return(int_posture);
 8014856:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014858:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801485a:	4b3a      	ldr	r3, [pc, #232]	; (8014944 <_txe_mutex_create+0x124>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	3301      	adds	r3, #1
 8014860:	4a38      	ldr	r2, [pc, #224]	; (8014944 <_txe_mutex_create+0x124>)
 8014862:	6013      	str	r3, [r2, #0]
 8014864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014866:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486a:	f383 8810 	msr	PRIMASK, r3
}
 801486e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8014870:	4b35      	ldr	r3, [pc, #212]	; (8014948 <_txe_mutex_create+0x128>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8014876:	2300      	movs	r3, #0
 8014878:	643b      	str	r3, [r7, #64]	; 0x40
 801487a:	e009      	b.n	8014890 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 801487c:	68fa      	ldr	r2, [r7, #12]
 801487e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014880:	429a      	cmp	r2, r3
 8014882:	d00b      	beq.n	801489c <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8014884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014886:	6a1b      	ldr	r3, [r3, #32]
 8014888:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801488a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801488c:	3301      	adds	r3, #1
 801488e:	643b      	str	r3, [r7, #64]	; 0x40
 8014890:	4b2e      	ldr	r3, [pc, #184]	; (801494c <_txe_mutex_create+0x12c>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014896:	429a      	cmp	r2, r3
 8014898:	d3f0      	bcc.n	801487c <_txe_mutex_create+0x5c>
 801489a:	e000      	b.n	801489e <_txe_mutex_create+0x7e>
                break;
 801489c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801489e:	f3ef 8310 	mrs	r3, PRIMASK
 80148a2:	623b      	str	r3, [r7, #32]
    return(posture);
 80148a4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80148a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80148a8:	b672      	cpsid	i
    return(int_posture);
 80148aa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80148ac:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80148ae:	4b25      	ldr	r3, [pc, #148]	; (8014944 <_txe_mutex_create+0x124>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	3b01      	subs	r3, #1
 80148b4:	4a23      	ldr	r2, [pc, #140]	; (8014944 <_txe_mutex_create+0x124>)
 80148b6:	6013      	str	r3, [r2, #0]
 80148b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148be:	f383 8810 	msr	PRIMASK, r3
}
 80148c2:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80148c4:	f7fe ff94 	bl	80137f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 80148c8:	68fa      	ldr	r2, [r7, #12]
 80148ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d102      	bne.n	80148d6 <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 80148d0:	231c      	movs	r3, #28
 80148d2:	647b      	str	r3, [r7, #68]	; 0x44
 80148d4:	e007      	b.n	80148e6 <_txe_mutex_create+0xc6>
        }
        else
        {
        
            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2b01      	cmp	r3, #1
 80148da:	d004      	beq.n	80148e6 <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d001      	beq.n	80148e6 <_txe_mutex_create+0xc6>
                {
        
                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 80148e2:	231f      	movs	r3, #31
 80148e4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80148e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d11d      	bne.n	8014928 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80148ec:	4b18      	ldr	r3, [pc, #96]	; (8014950 <_txe_mutex_create+0x130>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80148f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148f4:	4a17      	ldr	r2, [pc, #92]	; (8014954 <_txe_mutex_create+0x134>)
 80148f6:	4293      	cmp	r3, r2
 80148f8:	d101      	bne.n	80148fe <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80148fa:	2313      	movs	r3, #19
 80148fc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80148fe:	f3ef 8305 	mrs	r3, IPSR
 8014902:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014904:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014906:	4b14      	ldr	r3, [pc, #80]	; (8014958 <_txe_mutex_create+0x138>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	4313      	orrs	r3, r2
 801490c:	2b00      	cmp	r3, #0
 801490e:	d00b      	beq.n	8014928 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014910:	f3ef 8305 	mrs	r3, IPSR
 8014914:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014916:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014918:	4b0f      	ldr	r3, [pc, #60]	; (8014958 <_txe_mutex_create+0x138>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	4313      	orrs	r3, r2
 801491e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014922:	d201      	bcs.n	8014928 <_txe_mutex_create+0x108>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014924:	2313      	movs	r3, #19
 8014926:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801492a:	2b00      	cmp	r3, #0
 801492c:	d105      	bne.n	801493a <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	68b9      	ldr	r1, [r7, #8]
 8014932:	68f8      	ldr	r0, [r7, #12]
 8014934:	f7fd fc52 	bl	80121dc <_tx_mutex_create>
 8014938:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801493a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801493c:	4618      	mov	r0, r3
 801493e:	3748      	adds	r7, #72	; 0x48
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	240023cc 	.word	0x240023cc
 8014948:	24002308 	.word	0x24002308
 801494c:	24002304 	.word	0x24002304
 8014950:	240023d0 	.word	0x240023d0
 8014954:	24002470 	.word	0x24002470
 8014958:	2400008c 	.word	0x2400008c

0801495c <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b086      	sub	sp, #24
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014964:	2300      	movs	r3, #0
 8014966:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d102      	bne.n	8014974 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801496e:	231c      	movs	r3, #28
 8014970:	617b      	str	r3, [r7, #20]
 8014972:	e023      	b.n	80149bc <_txe_mutex_delete+0x60>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	4a13      	ldr	r2, [pc, #76]	; (80149c8 <_txe_mutex_delete+0x6c>)
 801497a:	4293      	cmp	r3, r2
 801497c:	d002      	beq.n	8014984 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801497e:	231c      	movs	r3, #28
 8014980:	617b      	str	r3, [r7, #20]
 8014982:	e01b      	b.n	80149bc <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014984:	f3ef 8305 	mrs	r3, IPSR
 8014988:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801498a:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801498c:	4b0f      	ldr	r3, [pc, #60]	; (80149cc <_txe_mutex_delete+0x70>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	4313      	orrs	r3, r2
 8014992:	2b00      	cmp	r3, #0
 8014994:	d002      	beq.n	801499c <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8014996:	2313      	movs	r3, #19
 8014998:	617b      	str	r3, [r7, #20]
 801499a:	e00f      	b.n	80149bc <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801499c:	4b0c      	ldr	r3, [pc, #48]	; (80149d0 <_txe_mutex_delete+0x74>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	4a0b      	ldr	r2, [pc, #44]	; (80149d4 <_txe_mutex_delete+0x78>)
 80149a6:	4293      	cmp	r3, r2
 80149a8:	d101      	bne.n	80149ae <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80149aa:	2313      	movs	r3, #19
 80149ac:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d103      	bne.n	80149bc <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7fd fc6b 	bl	8012290 <_tx_mutex_delete>
 80149ba:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 80149bc:	697b      	ldr	r3, [r7, #20]
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3718      	adds	r7, #24
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	4d555445 	.word	0x4d555445
 80149cc:	2400008c 	.word	0x2400008c
 80149d0:	240023d0 	.word	0x240023d0
 80149d4:	24002470 	.word	0x24002470

080149d8 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b088      	sub	sp, #32
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80149e2:	2300      	movs	r3, #0
 80149e4:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d102      	bne.n	80149f2 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80149ec:	231c      	movs	r3, #28
 80149ee:	61fb      	str	r3, [r7, #28]
 80149f0:	e01f      	b.n	8014a32 <_txe_mutex_get+0x5a>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4a21      	ldr	r2, [pc, #132]	; (8014a7c <_txe_mutex_get+0xa4>)
 80149f8:	4293      	cmp	r3, r2
 80149fa:	d002      	beq.n	8014a02 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80149fc:	231c      	movs	r3, #28
 80149fe:	61fb      	str	r3, [r7, #28]
 8014a00:	e017      	b.n	8014a32 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d014      	beq.n	8014a32 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014a08:	f3ef 8305 	mrs	r3, IPSR
 8014a0c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014a0e:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014a10:	4b1b      	ldr	r3, [pc, #108]	; (8014a80 <_txe_mutex_get+0xa8>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4313      	orrs	r3, r2
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d002      	beq.n	8014a20 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014a1a:	2304      	movs	r3, #4
 8014a1c:	61fb      	str	r3, [r7, #28]
 8014a1e:	e008      	b.n	8014a32 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014a20:	4b18      	ldr	r3, [pc, #96]	; (8014a84 <_txe_mutex_get+0xac>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	4a17      	ldr	r2, [pc, #92]	; (8014a88 <_txe_mutex_get+0xb0>)
 8014a2a:	4293      	cmp	r3, r2
 8014a2c:	d101      	bne.n	8014a32 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8014a2e:	2304      	movs	r3, #4
 8014a30:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014a32:	69fb      	ldr	r3, [r7, #28]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d114      	bne.n	8014a62 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014a38:	f3ef 8305 	mrs	r3, IPSR
 8014a3c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014a3e:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014a40:	4b0f      	ldr	r3, [pc, #60]	; (8014a80 <_txe_mutex_get+0xa8>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	4313      	orrs	r3, r2
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d00b      	beq.n	8014a62 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014a4a:	f3ef 8305 	mrs	r3, IPSR
 8014a4e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014a50:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014a52:	4b0b      	ldr	r3, [pc, #44]	; (8014a80 <_txe_mutex_get+0xa8>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	4313      	orrs	r3, r2
 8014a58:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014a5c:	d201      	bcs.n	8014a62 <_txe_mutex_get+0x8a>
            {
        
                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014a5e:	2313      	movs	r3, #19
 8014a60:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014a62:	69fb      	ldr	r3, [r7, #28]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d104      	bne.n	8014a72 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8014a68:	6839      	ldr	r1, [r7, #0]
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7fd fcba 	bl	80123e4 <_tx_mutex_get>
 8014a70:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8014a72:	69fb      	ldr	r3, [r7, #28]
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3720      	adds	r7, #32
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	4d555445 	.word	0x4d555445
 8014a80:	2400008c 	.word	0x2400008c
 8014a84:	240023d0 	.word	0x240023d0
 8014a88:	24002470 	.word	0x24002470

08014a8c <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b086      	sub	sp, #24
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014a94:	2300      	movs	r3, #0
 8014a96:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d102      	bne.n	8014aa4 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014a9e:	231c      	movs	r3, #28
 8014aa0:	617b      	str	r3, [r7, #20]
 8014aa2:	e01c      	b.n	8014ade <_txe_mutex_put+0x52>
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4a13      	ldr	r2, [pc, #76]	; (8014af8 <_txe_mutex_put+0x6c>)
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d002      	beq.n	8014ab4 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8014aae:	231c      	movs	r3, #28
 8014ab0:	617b      	str	r3, [r7, #20]
 8014ab2:	e014      	b.n	8014ade <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ab4:	f3ef 8305 	mrs	r3, IPSR
 8014ab8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014aba:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014abc:	4b0f      	ldr	r3, [pc, #60]	; (8014afc <_txe_mutex_put+0x70>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4313      	orrs	r3, r2
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d00b      	beq.n	8014ade <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ac6:	f3ef 8305 	mrs	r3, IPSR
 8014aca:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014acc:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014ace:	4b0b      	ldr	r3, [pc, #44]	; (8014afc <_txe_mutex_put+0x70>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	4313      	orrs	r3, r2
 8014ad4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014ad8:	d201      	bcs.n	8014ade <_txe_mutex_put+0x52>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014ada:	2313      	movs	r3, #19
 8014adc:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d103      	bne.n	8014aec <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f7fd fef5 	bl	80128d4 <_tx_mutex_put>
 8014aea:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014aec:	697b      	ldr	r3, [r7, #20]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3718      	adds	r7, #24
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	4d555445 	.word	0x4d555445
 8014afc:	2400008c 	.word	0x2400008c

08014b00 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b092      	sub	sp, #72	; 0x48
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
 8014b0c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d102      	bne.n	8014b1e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014b18:	230c      	movs	r3, #12
 8014b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8014b1c:	e054      	b.n	8014bc8 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	2b1c      	cmp	r3, #28
 8014b22:	d002      	beq.n	8014b2a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014b24:	230c      	movs	r3, #12
 8014b26:	647b      	str	r3, [r7, #68]	; 0x44
 8014b28:	e04e      	b.n	8014bc8 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8014b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014b32:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b34:	b672      	cpsid	i
    return(int_posture);
 8014b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014b38:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014b3a:	4b36      	ldr	r3, [pc, #216]	; (8014c14 <_txe_semaphore_create+0x114>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	3301      	adds	r3, #1
 8014b40:	4a34      	ldr	r2, [pc, #208]	; (8014c14 <_txe_semaphore_create+0x114>)
 8014b42:	6013      	str	r3, [r2, #0]
 8014b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b46:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b4a:	f383 8810 	msr	PRIMASK, r3
}
 8014b4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8014b50:	4b31      	ldr	r3, [pc, #196]	; (8014c18 <_txe_semaphore_create+0x118>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8014b56:	2300      	movs	r3, #0
 8014b58:	643b      	str	r3, [r7, #64]	; 0x40
 8014b5a:	e009      	b.n	8014b70 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8014b5c:	68fa      	ldr	r2, [r7, #12]
 8014b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d00b      	beq.n	8014b7c <_txe_semaphore_create+0x7c>
            }
            else
            {
            
                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8014b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b66:	695b      	ldr	r3, [r3, #20]
 8014b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8014b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8014b70:	4b2a      	ldr	r3, [pc, #168]	; (8014c1c <_txe_semaphore_create+0x11c>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d3f0      	bcc.n	8014b5c <_txe_semaphore_create+0x5c>
 8014b7a:	e000      	b.n	8014b7e <_txe_semaphore_create+0x7e>
                break;
 8014b7c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8014b82:	623b      	str	r3, [r7, #32]
    return(posture);
 8014b84:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014b86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b88:	b672      	cpsid	i
    return(int_posture);
 8014b8a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014b8c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014b8e:	4b21      	ldr	r3, [pc, #132]	; (8014c14 <_txe_semaphore_create+0x114>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	3b01      	subs	r3, #1
 8014b94:	4a1f      	ldr	r2, [pc, #124]	; (8014c14 <_txe_semaphore_create+0x114>)
 8014b96:	6013      	str	r3, [r2, #0]
 8014b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b9a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9e:	f383 8810 	msr	PRIMASK, r3
}
 8014ba2:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014ba4:	f7fe fe24 	bl	80137f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d102      	bne.n	8014bb6 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8014bb0:	230c      	movs	r3, #12
 8014bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8014bb4:	e008      	b.n	8014bc8 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014bb6:	4b1a      	ldr	r3, [pc, #104]	; (8014c20 <_txe_semaphore_create+0x120>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bbe:	4a19      	ldr	r2, [pc, #100]	; (8014c24 <_txe_semaphore_create+0x124>)
 8014bc0:	4293      	cmp	r3, r2
 8014bc2:	d101      	bne.n	8014bc8 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014bc4:	2313      	movs	r3, #19
 8014bc6:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d114      	bne.n	8014bf8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014bce:	f3ef 8305 	mrs	r3, IPSR
 8014bd2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014bd4:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014bd6:	4b14      	ldr	r3, [pc, #80]	; (8014c28 <_txe_semaphore_create+0x128>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	4313      	orrs	r3, r2
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d00b      	beq.n	8014bf8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014be0:	f3ef 8305 	mrs	r3, IPSR
 8014be4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014be6:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014be8:	4b0f      	ldr	r3, [pc, #60]	; (8014c28 <_txe_semaphore_create+0x128>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	4313      	orrs	r3, r2
 8014bee:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014bf2:	d201      	bcs.n	8014bf8 <_txe_semaphore_create+0xf8>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014bf4:	2313      	movs	r3, #19
 8014bf6:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d105      	bne.n	8014c0a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	68b9      	ldr	r1, [r7, #8]
 8014c02:	68f8      	ldr	r0, [r7, #12]
 8014c04:	f7fe f908 	bl	8012e18 <_tx_semaphore_create>
 8014c08:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8014c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3748      	adds	r7, #72	; 0x48
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}
 8014c14:	240023cc 	.word	0x240023cc
 8014c18:	24002310 	.word	0x24002310
 8014c1c:	24002320 	.word	0x24002320
 8014c20:	240023d0 	.word	0x240023d0
 8014c24:	24002470 	.word	0x24002470
 8014c28:	2400008c 	.word	0x2400008c

08014c2c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b086      	sub	sp, #24
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014c36:	2300      	movs	r3, #0
 8014c38:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d102      	bne.n	8014c46 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014c40:	230c      	movs	r3, #12
 8014c42:	617b      	str	r3, [r7, #20]
 8014c44:	e01f      	b.n	8014c86 <_txe_semaphore_get+0x5a>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	4a15      	ldr	r2, [pc, #84]	; (8014ca0 <_txe_semaphore_get+0x74>)
 8014c4c:	4293      	cmp	r3, r2
 8014c4e:	d002      	beq.n	8014c56 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014c50:	230c      	movs	r3, #12
 8014c52:	617b      	str	r3, [r7, #20]
 8014c54:	e017      	b.n	8014c86 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d014      	beq.n	8014c86 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014c5c:	f3ef 8305 	mrs	r3, IPSR
 8014c60:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014c62:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014c64:	4b0f      	ldr	r3, [pc, #60]	; (8014ca4 <_txe_semaphore_get+0x78>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	4313      	orrs	r3, r2
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d002      	beq.n	8014c74 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014c6e:	2304      	movs	r3, #4
 8014c70:	617b      	str	r3, [r7, #20]
 8014c72:	e008      	b.n	8014c86 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014c74:	4b0c      	ldr	r3, [pc, #48]	; (8014ca8 <_txe_semaphore_get+0x7c>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	4a0b      	ldr	r2, [pc, #44]	; (8014cac <_txe_semaphore_get+0x80>)
 8014c7e:	4293      	cmp	r3, r2
 8014c80:	d101      	bne.n	8014c86 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8014c82:	2304      	movs	r3, #4
 8014c84:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d104      	bne.n	8014c96 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f7fe f914 	bl	8012ebc <_tx_semaphore_get>
 8014c94:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014c96:	697b      	ldr	r3, [r7, #20]
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3718      	adds	r7, #24
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}
 8014ca0:	53454d41 	.word	0x53454d41
 8014ca4:	2400008c 	.word	0x2400008c
 8014ca8:	240023d0 	.word	0x240023d0
 8014cac:	24002470 	.word	0x24002470

08014cb0 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b084      	sub	sp, #16
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d102      	bne.n	8014cc4 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014cbe:	230c      	movs	r3, #12
 8014cc0:	60fb      	str	r3, [r7, #12]
 8014cc2:	e00b      	b.n	8014cdc <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4a07      	ldr	r2, [pc, #28]	; (8014ce8 <_txe_semaphore_put+0x38>)
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d002      	beq.n	8014cd4 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014cce:	230c      	movs	r3, #12
 8014cd0:	60fb      	str	r3, [r7, #12]
 8014cd2:	e003      	b.n	8014cdc <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f7fe f983 	bl	8012fe0 <_tx_semaphore_put>
 8014cda:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014cdc:	68fb      	ldr	r3, [r7, #12]
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3710      	adds	r7, #16
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	53454d41 	.word	0x53454d41

08014cec <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b09a      	sub	sp, #104	; 0x68
 8014cf0:	af06      	add	r7, sp, #24
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	60b9      	str	r1, [r7, #8]
 8014cf6:	607a      	str	r2, [r7, #4]
 8014cf8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d102      	bne.n	8014d0a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014d04:	230e      	movs	r3, #14
 8014d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d08:	e0bb      	b.n	8014e82 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8014d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014d0c:	2bb0      	cmp	r3, #176	; 0xb0
 8014d0e:	d002      	beq.n	8014d16 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014d10:	230e      	movs	r3, #14
 8014d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d14:	e0b5      	b.n	8014e82 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d16:	f3ef 8310 	mrs	r3, PRIMASK
 8014d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014d1e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d20:	b672      	cpsid	i
    return(int_posture);
 8014d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014d24:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014d26:	4b64      	ldr	r3, [pc, #400]	; (8014eb8 <_txe_thread_create+0x1cc>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	3301      	adds	r3, #1
 8014d2c:	4a62      	ldr	r2, [pc, #392]	; (8014eb8 <_txe_thread_create+0x1cc>)
 8014d2e:	6013      	str	r3, [r2, #0]
 8014d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d36:	f383 8810 	msr	PRIMASK, r3
}
 8014d3a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8014d40:	4b5e      	ldr	r3, [pc, #376]	; (8014ebc <_txe_thread_create+0x1d0>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8014d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d48:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8014d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d4c:	3b01      	subs	r3, #1
 8014d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d50:	4413      	add	r3, r2
 8014d52:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8014d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d56:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014d58:	2300      	movs	r3, #0
 8014d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8014d5c:	e02b      	b.n	8014db6 <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8014d5e:	68fa      	ldr	r2, [r7, #12]
 8014d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d101      	bne.n	8014d6a <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8014d66:	2301      	movs	r3, #1
 8014d68:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8014d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d6c:	2b01      	cmp	r3, #1
 8014d6e:	d028      	beq.n	8014dc2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8014d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d72:	68db      	ldr	r3, [r3, #12]
 8014d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d308      	bcc.n	8014d8c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8014d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d7c:	691b      	ldr	r3, [r3, #16]
 8014d7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d203      	bcs.n	8014d8c <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014d84:	2300      	movs	r3, #0
 8014d86:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014d88:	2301      	movs	r3, #1
 8014d8a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8014d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d308      	bcc.n	8014da8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8014d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d98:	691b      	ldr	r3, [r3, #16]
 8014d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d203      	bcs.n	8014da8 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014da0:	2300      	movs	r3, #0
 8014da2:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014da4:	2301      	movs	r3, #1
 8014da6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8014da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014dae:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014db2:	3301      	adds	r3, #1
 8014db4:	647b      	str	r3, [r7, #68]	; 0x44
 8014db6:	4b42      	ldr	r3, [pc, #264]	; (8014ec0 <_txe_thread_create+0x1d4>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d3ce      	bcc.n	8014d5e <_txe_thread_create+0x72>
 8014dc0:	e000      	b.n	8014dc4 <_txe_thread_create+0xd8>
                break;
 8014dc2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8014dc8:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014dca:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014dcc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014dce:	b672      	cpsid	i
    return(int_posture);
 8014dd0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014dd2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014dd4:	4b38      	ldr	r3, [pc, #224]	; (8014eb8 <_txe_thread_create+0x1cc>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	3b01      	subs	r3, #1
 8014dda:	4a37      	ldr	r2, [pc, #220]	; (8014eb8 <_txe_thread_create+0x1cc>)
 8014ddc:	6013      	str	r3, [r2, #0]
 8014dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014de0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014de2:	6a3b      	ldr	r3, [r7, #32]
 8014de4:	f383 8810 	msr	PRIMASK, r3
}
 8014de8:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014dea:	f7fe fd01 	bl	80137f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8014dee:	68fa      	ldr	r2, [r7, #12]
 8014df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d102      	bne.n	8014dfc <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8014df6:	230e      	movs	r3, #14
 8014df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014dfa:	e042      	b.n	8014e82 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8014dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d102      	bne.n	8014e08 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8014e02:	2303      	movs	r3, #3
 8014e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e06:	e03c      	b.n	8014e82 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d102      	bne.n	8014e14 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8014e0e:	2303      	movs	r3, #3
 8014e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e12:	e036      	b.n	8014e82 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8014e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e16:	2bc7      	cmp	r3, #199	; 0xc7
 8014e18:	d802      	bhi.n	8014e20 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8014e1a:	2305      	movs	r3, #5
 8014e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e1e:	e030      	b.n	8014e82 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8014e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e22:	2b1f      	cmp	r3, #31
 8014e24:	d902      	bls.n	8014e2c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8014e26:	230f      	movs	r3, #15
 8014e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e2a:	e02a      	b.n	8014e82 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8014e2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d902      	bls.n	8014e3a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8014e34:	2318      	movs	r3, #24
 8014e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e38:	e023      	b.n	8014e82 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8014e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d902      	bls.n	8014e46 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8014e40:	2310      	movs	r3, #16
 8014e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e44:	e01d      	b.n	8014e82 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8014e46:	4b1f      	ldr	r3, [pc, #124]	; (8014ec4 <_txe_thread_create+0x1d8>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8014e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4e:	4a1e      	ldr	r2, [pc, #120]	; (8014ec8 <_txe_thread_create+0x1dc>)
 8014e50:	4293      	cmp	r3, r2
 8014e52:	d101      	bne.n	8014e58 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014e54:	2313      	movs	r3, #19
 8014e56:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014e58:	f3ef 8305 	mrs	r3, IPSR
 8014e5c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014e5e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014e60:	4b1a      	ldr	r3, [pc, #104]	; (8014ecc <_txe_thread_create+0x1e0>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	4313      	orrs	r3, r2
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d00b      	beq.n	8014e82 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014e6a:	f3ef 8305 	mrs	r3, IPSR
 8014e6e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014e70:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014e72:	4b16      	ldr	r3, [pc, #88]	; (8014ecc <_txe_thread_create+0x1e0>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	4313      	orrs	r3, r2
 8014e78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014e7c:	d201      	bcs.n	8014e82 <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014e7e:	2313      	movs	r3, #19
 8014e80:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d112      	bne.n	8014eae <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8014e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e8a:	9305      	str	r3, [sp, #20]
 8014e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014e8e:	9304      	str	r3, [sp, #16]
 8014e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e92:	9303      	str	r3, [sp, #12]
 8014e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e96:	9302      	str	r3, [sp, #8]
 8014e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e9a:	9301      	str	r3, [sp, #4]
 8014e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e9e:	9300      	str	r3, [sp, #0]
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	687a      	ldr	r2, [r7, #4]
 8014ea4:	68b9      	ldr	r1, [r7, #8]
 8014ea6:	68f8      	ldr	r0, [r7, #12]
 8014ea8:	f7fe f8f2 	bl	8013090 <_tx_thread_create>
 8014eac:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8014eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3750      	adds	r7, #80	; 0x50
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	240023cc 	.word	0x240023cc
 8014ebc:	240023bc 	.word	0x240023bc
 8014ec0:	240023c4 	.word	0x240023c4
 8014ec4:	240023d0 	.word	0x240023d0
 8014ec8:	24002470 	.word	0x24002470
 8014ecc:	2400008c 	.word	0x2400008c

08014ed0 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ed8:	f3ef 8305 	mrs	r3, IPSR
 8014edc:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8014ede:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014ee0:	4b0f      	ldr	r3, [pc, #60]	; (8014f20 <_txe_thread_delete+0x50>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	4313      	orrs	r3, r2
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d002      	beq.n	8014ef0 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8014eea:	2313      	movs	r3, #19
 8014eec:	60fb      	str	r3, [r7, #12]
 8014eee:	e011      	b.n	8014f14 <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d102      	bne.n	8014efc <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014ef6:	230e      	movs	r3, #14
 8014ef8:	60fb      	str	r3, [r7, #12]
 8014efa:	e00b      	b.n	8014f14 <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	4a08      	ldr	r2, [pc, #32]	; (8014f24 <_txe_thread_delete+0x54>)
 8014f02:	4293      	cmp	r3, r2
 8014f04:	d002      	beq.n	8014f0c <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014f06:	230e      	movs	r3, #14
 8014f08:	60fb      	str	r3, [r7, #12]
 8014f0a:	e003      	b.n	8014f14 <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	f7fe f9b5 	bl	801327c <_tx_thread_delete>
 8014f12:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014f14:	68fb      	ldr	r3, [r7, #12]
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	2400008c 	.word	0x2400008c
 8014f24:	54485244 	.word	0x54485244

08014f28 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8014f2e:	4b0a      	ldr	r3, [pc, #40]	; (8014f58 <_txe_thread_relinquish+0x30>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d00a      	beq.n	8014f50 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014f3a:	f3ef 8305 	mrs	r3, IPSR
 8014f3e:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 8014f40:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8014f42:	4b06      	ldr	r3, [pc, #24]	; (8014f5c <_txe_thread_relinquish+0x34>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	4313      	orrs	r3, r2
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d101      	bne.n	8014f50 <_txe_thread_relinquish+0x28>
        {
        
            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 8014f4c:	f7fe fabe 	bl	80134cc <_tx_thread_relinquish>
        }
    }
}
 8014f50:	bf00      	nop
 8014f52:	3708      	adds	r7, #8
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	240023d0 	.word	0x240023d0
 8014f5c:	2400008c 	.word	0x2400008c

08014f60 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d102      	bne.n	8014f74 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014f6e:	230e      	movs	r3, #14
 8014f70:	60fb      	str	r3, [r7, #12]
 8014f72:	e00b      	b.n	8014f8c <_txe_thread_resume+0x2c>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4a07      	ldr	r2, [pc, #28]	; (8014f98 <_txe_thread_resume+0x38>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d002      	beq.n	8014f84 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014f7e:	230e      	movs	r3, #14
 8014f80:	60fb      	str	r3, [r7, #12]
 8014f82:	e003      	b.n	8014f8c <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f7fe fb07 	bl	8013598 <_tx_thread_resume>
 8014f8a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014f8c:	68fb      	ldr	r3, [r7, #12]
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3710      	adds	r7, #16
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	bf00      	nop
 8014f98:	54485244 	.word	0x54485244

08014f9c <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d102      	bne.n	8014fb0 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8014faa:	2315      	movs	r3, #21
 8014fac:	60fb      	str	r3, [r7, #12]
 8014fae:	e00b      	b.n	8014fc8 <_txe_timer_activate+0x2c>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	4a07      	ldr	r2, [pc, #28]	; (8014fd4 <_txe_timer_activate+0x38>)
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d002      	beq.n	8014fc0 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8014fba:	2315      	movs	r3, #21
 8014fbc:	60fb      	str	r3, [r7, #12]
 8014fbe:	e003      	b.n	8014fc8 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f7fe fef5 	bl	8013db0 <_tx_timer_activate>
 8014fc6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	4154494d 	.word	0x4154494d

08014fd8 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b096      	sub	sp, #88	; 0x58
 8014fdc:	af04      	add	r7, sp, #16
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	607a      	str	r2, [r7, #4]
 8014fe4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d102      	bne.n	8014ff6 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8014ff0:	2315      	movs	r3, #21
 8014ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8014ff4:	e059      	b.n	80150aa <_txe_timer_create+0xd2>
    }
    
    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 8014ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ff8:	2b2c      	cmp	r3, #44	; 0x2c
 8014ffa:	d002      	beq.n	8015002 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8014ffc:	2315      	movs	r3, #21
 8014ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8015000:	e053      	b.n	80150aa <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015002:	f3ef 8310 	mrs	r3, PRIMASK
 8015006:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801500a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801500c:	b672      	cpsid	i
    return(int_posture);
 801500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015010:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015012:	4b41      	ldr	r3, [pc, #260]	; (8015118 <_txe_timer_create+0x140>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	3301      	adds	r3, #1
 8015018:	4a3f      	ldr	r2, [pc, #252]	; (8015118 <_txe_timer_create+0x140>)
 801501a:	6013      	str	r3, [r2, #0]
 801501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801501e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015022:	f383 8810 	msr	PRIMASK, r3
}
 8015026:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 8015028:	4b3c      	ldr	r3, [pc, #240]	; (801511c <_txe_timer_create+0x144>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 801502e:	2300      	movs	r3, #0
 8015030:	643b      	str	r3, [r7, #64]	; 0x40
 8015032:	e009      	b.n	8015048 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015038:	429a      	cmp	r2, r3
 801503a:	d00b      	beq.n	8015054 <_txe_timer_create+0x7c>
            }
            else
            {
        
                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 801503c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015040:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 8015042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015044:	3301      	adds	r3, #1
 8015046:	643b      	str	r3, [r7, #64]	; 0x40
 8015048:	4b35      	ldr	r3, [pc, #212]	; (8015120 <_txe_timer_create+0x148>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801504e:	429a      	cmp	r2, r3
 8015050:	d3f0      	bcc.n	8015034 <_txe_timer_create+0x5c>
 8015052:	e000      	b.n	8015056 <_txe_timer_create+0x7e>
                break;
 8015054:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015056:	f3ef 8310 	mrs	r3, PRIMASK
 801505a:	623b      	str	r3, [r7, #32]
    return(posture);
 801505c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801505e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015060:	b672      	cpsid	i
    return(int_posture);
 8015062:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015064:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015066:	4b2c      	ldr	r3, [pc, #176]	; (8015118 <_txe_timer_create+0x140>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	3b01      	subs	r3, #1
 801506c:	4a2a      	ldr	r2, [pc, #168]	; (8015118 <_txe_timer_create+0x140>)
 801506e:	6013      	str	r3, [r2, #0]
 8015070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015072:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015076:	f383 8810 	msr	PRIMASK, r3
}
 801507a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801507c:	f7fe fbb8 	bl	80137f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 8015080:	68fa      	ldr	r2, [r7, #12]
 8015082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015084:	429a      	cmp	r2, r3
 8015086:	d102      	bne.n	801508e <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 8015088:	2315      	movs	r3, #21
 801508a:	647b      	str	r3, [r7, #68]	; 0x44
 801508c:	e00d      	b.n	80150aa <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 801508e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015090:	2b00      	cmp	r3, #0
 8015092:	d102      	bne.n	801509a <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 8015094:	2316      	movs	r3, #22
 8015096:	647b      	str	r3, [r7, #68]	; 0x44
 8015098:	e007      	b.n	80150aa <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 801509a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801509c:	2b01      	cmp	r3, #1
 801509e:	d004      	beq.n	80150aa <_txe_timer_create+0xd2>
            {
    
                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 80150a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d001      	beq.n	80150aa <_txe_timer_create+0xd2>
                {
        
                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 80150a6:	2317      	movs	r3, #23
 80150a8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80150aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d11d      	bne.n	80150ec <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80150b0:	4b1c      	ldr	r3, [pc, #112]	; (8015124 <_txe_timer_create+0x14c>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80150b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150b8:	4a1b      	ldr	r2, [pc, #108]	; (8015128 <_txe_timer_create+0x150>)
 80150ba:	4293      	cmp	r3, r2
 80150bc:	d101      	bne.n	80150c2 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80150be:	2313      	movs	r3, #19
 80150c0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80150c2:	f3ef 8305 	mrs	r3, IPSR
 80150c6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80150c8:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80150ca:	4b18      	ldr	r3, [pc, #96]	; (801512c <_txe_timer_create+0x154>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	4313      	orrs	r3, r2
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d00b      	beq.n	80150ec <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80150d4:	f3ef 8305 	mrs	r3, IPSR
 80150d8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80150da:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80150dc:	4b13      	ldr	r3, [pc, #76]	; (801512c <_txe_timer_create+0x154>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4313      	orrs	r3, r2
 80150e2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80150e6:	d201      	bcs.n	80150ec <_txe_timer_create+0x114>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80150e8:	2313      	movs	r3, #19
 80150ea:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80150ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d10c      	bne.n	801510c <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 80150f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80150f4:	9302      	str	r3, [sp, #8]
 80150f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150f8:	9301      	str	r3, [sp, #4]
 80150fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150fc:	9300      	str	r3, [sp, #0]
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	687a      	ldr	r2, [r7, #4]
 8015102:	68b9      	ldr	r1, [r7, #8]
 8015104:	68f8      	ldr	r0, [r7, #12]
 8015106:	f7fe fe7f 	bl	8013e08 <_tx_timer_create>
 801510a:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 801510c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801510e:	4618      	mov	r0, r3
 8015110:	3748      	adds	r7, #72	; 0x48
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	240023cc 	.word	0x240023cc
 801511c:	24002528 	.word	0x24002528
 8015120:	24002934 	.word	0x24002934
 8015124:	240023d0 	.word	0x240023d0
 8015128:	24002470 	.word	0x24002470
 801512c:	2400008c 	.word	0x2400008c

08015130 <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b086      	sub	sp, #24
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015138:	2300      	movs	r3, #0
 801513a:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d102      	bne.n	8015148 <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8015142:	2315      	movs	r3, #21
 8015144:	617b      	str	r3, [r7, #20]
 8015146:	e023      	b.n	8015190 <_txe_timer_delete+0x60>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4a13      	ldr	r2, [pc, #76]	; (801519c <_txe_timer_delete+0x6c>)
 801514e:	4293      	cmp	r3, r2
 8015150:	d002      	beq.n	8015158 <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8015152:	2315      	movs	r3, #21
 8015154:	617b      	str	r3, [r7, #20]
 8015156:	e01b      	b.n	8015190 <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015158:	f3ef 8305 	mrs	r3, IPSR
 801515c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801515e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015160:	4b0f      	ldr	r3, [pc, #60]	; (80151a0 <_txe_timer_delete+0x70>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	4313      	orrs	r3, r2
 8015166:	2b00      	cmp	r3, #0
 8015168:	d002      	beq.n	8015170 <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 801516a:	2313      	movs	r3, #19
 801516c:	617b      	str	r3, [r7, #20]
 801516e:	e00f      	b.n	8015190 <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8015170:	4b0c      	ldr	r3, [pc, #48]	; (80151a4 <_txe_timer_delete+0x74>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	4a0b      	ldr	r2, [pc, #44]	; (80151a8 <_txe_timer_delete+0x78>)
 801517a:	4293      	cmp	r3, r2
 801517c:	d101      	bne.n	8015182 <_txe_timer_delete+0x52>
        {
        
            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801517e:	2313      	movs	r3, #19
 8015180:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d103      	bne.n	8015190 <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7fe fea1 	bl	8013ed0 <_tx_timer_delete>
 801518e:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8015190:	697b      	ldr	r3, [r7, #20]
}
 8015192:	4618      	mov	r0, r3
 8015194:	3718      	adds	r7, #24
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	4154494d 	.word	0x4154494d
 80151a0:	2400008c 	.word	0x2400008c
 80151a4:	240023d0 	.word	0x240023d0
 80151a8:	24002470 	.word	0x24002470

080151ac <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b08c      	sub	sp, #48	; 0x30
 80151b0:	af08      	add	r7, sp, #32
 80151b2:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 80151b4:	2300      	movs	r3, #0
 80151b6:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN MX_NetXDuo_Init */
  //Avoid HAL and Thread calls in this function, wait for thread creation
  //TX_BYTE_POOL *byte_pool is the 'ThreadX Byte Pool' defined in CubeMX
  //NX_PACKET_POOL AppPool is the 'NetXDuo Memory Pool' defined in CubeMX
  printf("NX_PACKET_POOL_SIZE=%u\r\n",NX_PACKET_POOL_SIZE);
 80151bc:	f643 6158 	movw	r1, #15960	; 0x3e58
 80151c0:	4876      	ldr	r0, [pc, #472]	; (801539c <MX_NetXDuo_Init+0x1f0>)
 80151c2:	f000 fa2b 	bl	801561c <iprintf>

  //Allocate the memory for packet_pool.
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer,  NX_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80151c6:	2300      	movs	r3, #0
 80151c8:	f643 6258 	movw	r2, #15960	; 0x3e58
 80151cc:	4974      	ldr	r1, [pc, #464]	; (80153a0 <MX_NetXDuo_Init+0x1f4>)
 80151ce:	68b8      	ldr	r0, [r7, #8]
 80151d0:	f7ff f8fc 	bl	80143cc <_txe_byte_allocate>
 80151d4:	4603      	mov	r3, r0
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d001      	beq.n	80151de <MX_NetXDuo_Init+0x32>
  {
    return TX_POOL_ERROR;
 80151da:	2302      	movs	r3, #2
 80151dc:	e0da      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  //Create the Packet pool to be used for packet allocation
  ret = nx_packet_pool_create(&nx.AppPool, "Main Packet Pool", PAYLOAD_SIZE, nx.pointer, NX_PACKET_POOL_SIZE);
 80151de:	4b71      	ldr	r3, [pc, #452]	; (80153a4 <MX_NetXDuo_Init+0x1f8>)
 80151e0:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	223c      	movs	r2, #60	; 0x3c
 80151e8:	9201      	str	r2, [sp, #4]
 80151ea:	f643 6258 	movw	r2, #15960	; 0x3e58
 80151ee:	9200      	str	r2, [sp, #0]
 80151f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80151f4:	496c      	ldr	r1, [pc, #432]	; (80153a8 <MX_NetXDuo_Init+0x1fc>)
 80151f6:	486d      	ldr	r0, [pc, #436]	; (80153ac <MX_NetXDuo_Init+0x200>)
 80151f8:	f7fb fe6a 	bl	8010ed0 <_nxe_packet_pool_create>
 80151fc:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d001      	beq.n	8015208 <MX_NetXDuo_Init+0x5c>
  {
    return NX_NOT_ENABLED;
 8015204:	2314      	movs	r3, #20
 8015206:	e0c5      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  //Allocate the memory for Ip_Instance
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer,   2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8015208:	2300      	movs	r3, #0
 801520a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801520e:	4964      	ldr	r1, [pc, #400]	; (80153a0 <MX_NetXDuo_Init+0x1f4>)
 8015210:	68b8      	ldr	r0, [r7, #8]
 8015212:	f7ff f8db 	bl	80143cc <_txe_byte_allocate>
 8015216:	4603      	mov	r3, r0
 8015218:	2b00      	cmp	r3, #0
 801521a:	d001      	beq.n	8015220 <MX_NetXDuo_Init+0x74>
  {
    return TX_POOL_ERROR;
 801521c:	2302      	movs	r3, #2
 801521e:	e0b9      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  //Create the main NX_IP instance
  ret = nx_ip_create(&nx.IpInstance, "Main Ip instance", NULL_ADDRESS, NULL_ADDRESS, &nx.AppPool,nx_stm32_eth_driver,nx.pointer, 2 * DEFAULT_MEMORY_SIZE, DEFAULT_PRIORITY);
 8015220:	4b60      	ldr	r3, [pc, #384]	; (80153a4 <MX_NetXDuo_Init+0x1f8>)
 8015222:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801522c:	9205      	str	r2, [sp, #20]
 801522e:	220a      	movs	r2, #10
 8015230:	9204      	str	r2, [sp, #16]
 8015232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015236:	9203      	str	r2, [sp, #12]
 8015238:	9302      	str	r3, [sp, #8]
 801523a:	4b5d      	ldr	r3, [pc, #372]	; (80153b0 <MX_NetXDuo_Init+0x204>)
 801523c:	9301      	str	r3, [sp, #4]
 801523e:	4b5b      	ldr	r3, [pc, #364]	; (80153ac <MX_NetXDuo_Init+0x200>)
 8015240:	9300      	str	r3, [sp, #0]
 8015242:	2300      	movs	r3, #0
 8015244:	2200      	movs	r2, #0
 8015246:	495b      	ldr	r1, [pc, #364]	; (80153b4 <MX_NetXDuo_Init+0x208>)
 8015248:	485b      	ldr	r0, [pc, #364]	; (80153b8 <MX_NetXDuo_Init+0x20c>)
 801524a:	f7fb fd2b 	bl	8010ca4 <_nxe_ip_create>
 801524e:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d001      	beq.n	801525a <MX_NetXDuo_Init+0xae>
  {
    return NX_NOT_ENABLED;
 8015256:	2314      	movs	r3, #20
 8015258:	e09c      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  // Allocate the memory for ARP
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer, DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 801525a:	2300      	movs	r3, #0
 801525c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015260:	494f      	ldr	r1, [pc, #316]	; (80153a0 <MX_NetXDuo_Init+0x1f4>)
 8015262:	68b8      	ldr	r0, [r7, #8]
 8015264:	f7ff f8b2 	bl	80143cc <_txe_byte_allocate>
 8015268:	4603      	mov	r3, r0
 801526a:	2b00      	cmp	r3, #0
 801526c:	d001      	beq.n	8015272 <MX_NetXDuo_Init+0xc6>
  {
    return TX_POOL_ERROR;
 801526e:	2302      	movs	r3, #2
 8015270:	e090      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  //Enable the ARP protocol and provide the ARP cache size for the IP instance
  ret = nx_arp_enable(&nx.IpInstance, (VOID *)nx.pointer, DEFAULT_MEMORY_SIZE);
 8015272:	4b4c      	ldr	r3, [pc, #304]	; (80153a4 <MX_NetXDuo_Init+0x1f8>)
 8015274:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801527e:	4619      	mov	r1, r3
 8015280:	484d      	ldr	r0, [pc, #308]	; (80153b8 <MX_NetXDuo_Init+0x20c>)
 8015282:	f7fb fc01 	bl	8010a88 <_nxe_arp_enable>
 8015286:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d001      	beq.n	8015292 <MX_NetXDuo_Init+0xe6>
  {
    return NX_NOT_ENABLED;
 801528e:	2314      	movs	r3, #20
 8015290:	e080      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  //Enable the ICMP
  ret = nx_icmp_enable(&nx.IpInstance);
 8015292:	4849      	ldr	r0, [pc, #292]	; (80153b8 <MX_NetXDuo_Init+0x20c>)
 8015294:	f7fb fc44 	bl	8010b20 <_nxe_icmp_enable>
 8015298:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d001      	beq.n	80152a4 <MX_NetXDuo_Init+0xf8>
  {
    return NX_NOT_ENABLED;
 80152a0:	2314      	movs	r3, #20
 80152a2:	e077      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  // Enable the UDP protocol required for  DHCP communication
  ret = nx_udp_enable(&nx.IpInstance);
 80152a4:	4844      	ldr	r0, [pc, #272]	; (80153b8 <MX_NetXDuo_Init+0x20c>)
 80152a6:	f7fb ff85 	bl	80111b4 <_nxe_udp_enable>
 80152aa:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d001      	beq.n	80152b6 <MX_NetXDuo_Init+0x10a>
  {
    return NX_NOT_ENABLED;
 80152b2:	2314      	movs	r3, #20
 80152b4:	e06e      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  // Enable the TCP protocol
  ret = nx_tcp_enable(&nx.IpInstance);
 80152b6:	4840      	ldr	r0, [pc, #256]	; (80153b8 <MX_NetXDuo_Init+0x20c>)
 80152b8:	f7fb ff44 	bl	8011144 <_nxe_tcp_enable>
 80152bc:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d001      	beq.n	80152c8 <MX_NetXDuo_Init+0x11c>
  {
    return NX_NOT_ENABLED;
 80152c4:	2314      	movs	r3, #20
 80152c6:	e065      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  // Allocate the memory for main thread
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80152c8:	2300      	movs	r3, #0
 80152ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152ce:	4934      	ldr	r1, [pc, #208]	; (80153a0 <MX_NetXDuo_Init+0x1f4>)
 80152d0:	68b8      	ldr	r0, [r7, #8]
 80152d2:	f7ff f87b 	bl	80143cc <_txe_byte_allocate>
 80152d6:	4603      	mov	r3, r0
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d001      	beq.n	80152e0 <MX_NetXDuo_Init+0x134>
  {
    return TX_POOL_ERROR;
 80152dc:	2302      	movs	r3, #2
 80152de:	e059      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  // Create the main thread
  ret = tx_thread_create(&nx.AppMainThread, "App Main thread", App_Main_Thread_Entry, 0, nx.pointer, 2 * DEFAULT_MEMORY_SIZE,DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);
 80152e0:	4b30      	ldr	r3, [pc, #192]	; (80153a4 <MX_NetXDuo_Init+0x1f8>)
 80152e2:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	22b0      	movs	r2, #176	; 0xb0
 80152ea:	9206      	str	r2, [sp, #24]
 80152ec:	2201      	movs	r2, #1
 80152ee:	9205      	str	r2, [sp, #20]
 80152f0:	2200      	movs	r2, #0
 80152f2:	9204      	str	r2, [sp, #16]
 80152f4:	220a      	movs	r2, #10
 80152f6:	9203      	str	r2, [sp, #12]
 80152f8:	220a      	movs	r2, #10
 80152fa:	9202      	str	r2, [sp, #8]
 80152fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015300:	9201      	str	r2, [sp, #4]
 8015302:	9300      	str	r3, [sp, #0]
 8015304:	2300      	movs	r3, #0
 8015306:	4a2d      	ldr	r2, [pc, #180]	; (80153bc <MX_NetXDuo_Init+0x210>)
 8015308:	492d      	ldr	r1, [pc, #180]	; (80153c0 <MX_NetXDuo_Init+0x214>)
 801530a:	482e      	ldr	r0, [pc, #184]	; (80153c4 <MX_NetXDuo_Init+0x218>)
 801530c:	f7ff fcee 	bl	8014cec <_txe_thread_create>
 8015310:	60f8      	str	r0, [r7, #12]
  if (ret != TX_SUCCESS)
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d001      	beq.n	801531c <MX_NetXDuo_Init+0x170>
  {
    return NX_NOT_ENABLED;
 8015318:	2314      	movs	r3, #20
 801531a:	e03b      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  // Allocate the memory for TCP server thread
  if (tx_byte_allocate(byte_pool, (VOID **) &nx.pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 801531c:	2300      	movs	r3, #0
 801531e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015322:	491f      	ldr	r1, [pc, #124]	; (80153a0 <MX_NetXDuo_Init+0x1f4>)
 8015324:	68b8      	ldr	r0, [r7, #8]
 8015326:	f7ff f851 	bl	80143cc <_txe_byte_allocate>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d001      	beq.n	8015334 <MX_NetXDuo_Init+0x188>
  {
    return TX_POOL_ERROR;
 8015330:	2302      	movs	r3, #2
 8015332:	e02f      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  // create the TCP server thread
  ret = tx_thread_create(&nx.AppTCPThread, "App TCP Thread", App_TCP_Thread_Entry, 0, nx.pointer, 2 * DEFAULT_MEMORY_SIZE,DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);
 8015334:	4b1b      	ldr	r3, [pc, #108]	; (80153a4 <MX_NetXDuo_Init+0x1f8>)
 8015336:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	22b0      	movs	r2, #176	; 0xb0
 801533e:	9206      	str	r2, [sp, #24]
 8015340:	2200      	movs	r2, #0
 8015342:	9205      	str	r2, [sp, #20]
 8015344:	2200      	movs	r2, #0
 8015346:	9204      	str	r2, [sp, #16]
 8015348:	220a      	movs	r2, #10
 801534a:	9203      	str	r2, [sp, #12]
 801534c:	220a      	movs	r2, #10
 801534e:	9202      	str	r2, [sp, #8]
 8015350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015354:	9201      	str	r2, [sp, #4]
 8015356:	9300      	str	r3, [sp, #0]
 8015358:	2300      	movs	r3, #0
 801535a:	4a1b      	ldr	r2, [pc, #108]	; (80153c8 <MX_NetXDuo_Init+0x21c>)
 801535c:	491b      	ldr	r1, [pc, #108]	; (80153cc <MX_NetXDuo_Init+0x220>)
 801535e:	481c      	ldr	r0, [pc, #112]	; (80153d0 <MX_NetXDuo_Init+0x224>)
 8015360:	f7ff fcc4 	bl	8014cec <_txe_thread_create>
 8015364:	60f8      	str	r0, [r7, #12]
  if (ret != TX_SUCCESS)
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d001      	beq.n	8015370 <MX_NetXDuo_Init+0x1c4>
  {
    return NX_NOT_ENABLED;
 801536c:	2314      	movs	r3, #20
 801536e:	e011      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  // create the DHCP client
  ret = nx_dhcp_create(&nx.DHCPClient, &nx.IpInstance, "DHCP Client");
 8015370:	4a18      	ldr	r2, [pc, #96]	; (80153d4 <MX_NetXDuo_Init+0x228>)
 8015372:	4911      	ldr	r1, [pc, #68]	; (80153b8 <MX_NetXDuo_Init+0x20c>)
 8015374:	4818      	ldr	r0, [pc, #96]	; (80153d8 <MX_NetXDuo_Init+0x22c>)
 8015376:	f7ef fd91 	bl	8004e9c <_nxe_dhcp_create>
 801537a:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d001      	beq.n	8015386 <MX_NetXDuo_Init+0x1da>
  {
    return NX_NOT_ENABLED;
 8015382:	2314      	movs	r3, #20
 8015384:	e006      	b.n	8015394 <MX_NetXDuo_Init+0x1e8>
  }

  tx_semaphore_create(&nx.Semaphore, "App Semaphore", 0); // set DHCP notification callback
 8015386:	231c      	movs	r3, #28
 8015388:	2200      	movs	r2, #0
 801538a:	4914      	ldr	r1, [pc, #80]	; (80153dc <MX_NetXDuo_Init+0x230>)
 801538c:	4814      	ldr	r0, [pc, #80]	; (80153e0 <MX_NetXDuo_Init+0x234>)
 801538e:	f7ff fbb7 	bl	8014b00 <_txe_semaphore_create>
  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 8015392:	68fb      	ldr	r3, [r7, #12]
}
 8015394:	4618      	mov	r0, r3
 8015396:	3710      	adds	r7, #16
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}
 801539c:	08016a84 	.word	0x08016a84
 80153a0:	24005340 	.word	0x24005340
 80153a4:	24002940 	.word	0x24002940
 80153a8:	08016aa0 	.word	0x08016aa0
 80153ac:	24002ac4 	.word	0x24002ac4
 80153b0:	08006fb1 	.word	0x08006fb1
 80153b4:	08016ab4 	.word	0x08016ab4
 80153b8:	24002b08 	.word	0x24002b08
 80153bc:	080153e5 	.word	0x080153e5
 80153c0:	08016ac8 	.word	0x08016ac8
 80153c4:	24002948 	.word	0x24002948
 80153c8:	0801554d 	.word	0x0801554d
 80153cc:	08016ad8 	.word	0x08016ad8
 80153d0:	240029f8 	.word	0x240029f8
 80153d4:	08016ae8 	.word	0x08016ae8
 80153d8:	240032cc 	.word	0x240032cc
 80153dc:	08016af4 	.word	0x08016af4
 80153e0:	24002aa8 	.word	0x24002aa8

080153e4 <App_Main_Thread_Entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID App_Main_Thread_Entry(ULONG thread_input)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
	UINT ret;

	ret = nx_ip_address_change_notify(&nx.IpInstance, ip_address_change_notify_callback, NULL);
 80153ec:	2200      	movs	r2, #0
 80153ee:	4939      	ldr	r1, [pc, #228]	; (80154d4 <App_Main_Thread_Entry+0xf0>)
 80153f0:	4839      	ldr	r0, [pc, #228]	; (80154d8 <App_Main_Thread_Entry+0xf4>)
 80153f2:	f7fb fbd5 	bl	8010ba0 <_nxe_ip_address_change_notify>
 80153f6:	60f8      	str	r0, [r7, #12]
	if (ret != NX_SUCCESS)
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d008      	beq.n	8015410 <App_Main_Thread_Entry+0x2c>
	{
		printf("F:nx_ip_address_change_notify\r\n");
 80153fe:	4837      	ldr	r0, [pc, #220]	; (80154dc <App_Main_Thread_Entry+0xf8>)
 8015400:	f000 f992 	bl	8015728 <puts>
		nx.fCount++;
 8015404:	4b36      	ldr	r3, [pc, #216]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	3301      	adds	r3, #1
 801540a:	4a35      	ldr	r2, [pc, #212]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 801540c:	6053      	str	r3, [r2, #4]
 801540e:	e007      	b.n	8015420 <App_Main_Thread_Entry+0x3c>
	}
 	else
 	{
 		printf("S:nx_ip_address_change_notify\r\n");
 8015410:	4834      	ldr	r0, [pc, #208]	; (80154e4 <App_Main_Thread_Entry+0x100>)
 8015412:	f000 f989 	bl	8015728 <puts>
 		nx.sCount++;
 8015416:	4b32      	ldr	r3, [pc, #200]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	3301      	adds	r3, #1
 801541c:	4a30      	ldr	r2, [pc, #192]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 801541e:	6013      	str	r3, [r2, #0]
 	}

	ret = nx_dhcp_start(&nx.DHCPClient);
 8015420:	4831      	ldr	r0, [pc, #196]	; (80154e8 <App_Main_Thread_Entry+0x104>)
 8015422:	f7ef ff11 	bl	8005248 <_nxe_dhcp_start>
 8015426:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d008      	beq.n	8015440 <App_Main_Thread_Entry+0x5c>
  {
  	printf("F:nx_dhcp_start\r\n");
 801542e:	482f      	ldr	r0, [pc, #188]	; (80154ec <App_Main_Thread_Entry+0x108>)
 8015430:	f000 f97a 	bl	8015728 <puts>
  	nx.fCount++;
 8015434:	4b2a      	ldr	r3, [pc, #168]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 8015436:	685b      	ldr	r3, [r3, #4]
 8015438:	3301      	adds	r3, #1
 801543a:	4a29      	ldr	r2, [pc, #164]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 801543c:	6053      	str	r3, [r2, #4]
 801543e:	e007      	b.n	8015450 <App_Main_Thread_Entry+0x6c>
  }
  else
  {
  	printf("S:nx_dhcp_start\r\n");
 8015440:	482b      	ldr	r0, [pc, #172]	; (80154f0 <App_Main_Thread_Entry+0x10c>)
 8015442:	f000 f971 	bl	8015728 <puts>
  	nx.sCount++;
 8015446:	4b26      	ldr	r3, [pc, #152]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	3301      	adds	r3, #1
 801544c:	4a24      	ldr	r2, [pc, #144]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 801544e:	6013      	str	r3, [r2, #0]
  }

  printf("I:tx_semaphore_get\r\n");
 8015450:	4828      	ldr	r0, [pc, #160]	; (80154f4 <App_Main_Thread_Entry+0x110>)
 8015452:	f000 f969 	bl	8015728 <puts>
  if(tx_semaphore_get(&nx.Semaphore, TX_WAIT_FOREVER) != TX_SUCCESS) // wait until an IP address is ready
 8015456:	f04f 31ff 	mov.w	r1, #4294967295
 801545a:	4827      	ldr	r0, [pc, #156]	; (80154f8 <App_Main_Thread_Entry+0x114>)
 801545c:	f7ff fbe6 	bl	8014c2c <_txe_semaphore_get>
 8015460:	4603      	mov	r3, r0
 8015462:	2b00      	cmp	r3, #0
 8015464:	d008      	beq.n	8015478 <App_Main_Thread_Entry+0x94>
  {
  	printf("F:tx_semaphore_get\r\n");
 8015466:	4825      	ldr	r0, [pc, #148]	; (80154fc <App_Main_Thread_Entry+0x118>)
 8015468:	f000 f95e 	bl	8015728 <puts>
  	nx.fCount++;
 801546c:	4b1c      	ldr	r3, [pc, #112]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	3301      	adds	r3, #1
 8015472:	4a1b      	ldr	r2, [pc, #108]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 8015474:	6053      	str	r3, [r2, #4]
 8015476:	e007      	b.n	8015488 <App_Main_Thread_Entry+0xa4>
  }
  else
  {
  	printf("S:tx_semaphore_get\r\n");
 8015478:	4821      	ldr	r0, [pc, #132]	; (8015500 <App_Main_Thread_Entry+0x11c>)
 801547a:	f000 f955 	bl	8015728 <puts>
  	nx.sCount++;
 801547e:	4b18      	ldr	r3, [pc, #96]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	3301      	adds	r3, #1
 8015484:	4a16      	ldr	r2, [pc, #88]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 8015486:	6013      	str	r3, [r2, #0]
  }

  ret = nx_ip_address_get(&nx.IpInstance, &nx.IpAddress, &nx.NetMask);
 8015488:	4a1e      	ldr	r2, [pc, #120]	; (8015504 <App_Main_Thread_Entry+0x120>)
 801548a:	491f      	ldr	r1, [pc, #124]	; (8015508 <App_Main_Thread_Entry+0x124>)
 801548c:	4812      	ldr	r0, [pc, #72]	; (80154d8 <App_Main_Thread_Entry+0xf4>)
 801548e:	f7fb fbc5 	bl	8010c1c <_nxe_ip_address_get>
 8015492:	60f8      	str	r0, [r7, #12]
  if (ret != TX_SUCCESS)
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d008      	beq.n	80154ac <App_Main_Thread_Entry+0xc8>
  {
  	printf("F:nx_ip_address_get\r\n");
 801549a:	481c      	ldr	r0, [pc, #112]	; (801550c <App_Main_Thread_Entry+0x128>)
 801549c:	f000 f944 	bl	8015728 <puts>
  	nx.fCount++;
 80154a0:	4b0f      	ldr	r3, [pc, #60]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 80154a2:	685b      	ldr	r3, [r3, #4]
 80154a4:	3301      	adds	r3, #1
 80154a6:	4a0e      	ldr	r2, [pc, #56]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 80154a8:	6053      	str	r3, [r2, #4]
 80154aa:	e007      	b.n	80154bc <App_Main_Thread_Entry+0xd8>
  }
  else
  {
  	printf("S:nx_ip_address_get\r\n");
 80154ac:	4818      	ldr	r0, [pc, #96]	; (8015510 <App_Main_Thread_Entry+0x12c>)
 80154ae:	f000 f93b 	bl	8015728 <puts>
  	nx.sCount++;
 80154b2:	4b0b      	ldr	r3, [pc, #44]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	3301      	adds	r3, #1
 80154b8:	4a09      	ldr	r2, [pc, #36]	; (80154e0 <App_Main_Thread_Entry+0xfc>)
 80154ba:	6013      	str	r3, [r2, #0]
  //  PRINT_IP_ADDRESS(nx.IpAddress);
  //  tx_thread_sleep(100); // Thread sleep for 1s
  //}

  /* the network is correctly initialized, start the TCP server thread */
  tx_thread_resume(&nx.AppTCPThread);
 80154bc:	4815      	ldr	r0, [pc, #84]	; (8015514 <App_Main_Thread_Entry+0x130>)
 80154be:	f7ff fd4f 	bl	8014f60 <_txe_thread_resume>
  /* this thread is not needed any more, relinquish it */
  tx_thread_relinquish();
 80154c2:	f7ff fd31 	bl	8014f28 <_txe_thread_relinquish>
  printf("I:***END OF App_Main_Thread_Entry***\r\n");
 80154c6:	4814      	ldr	r0, [pc, #80]	; (8015518 <App_Main_Thread_Entry+0x134>)
 80154c8:	f000 f92e 	bl	8015728 <puts>
  return;
 80154cc:	bf00      	nop
}
 80154ce:	3710      	adds	r7, #16
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	0801551d 	.word	0x0801551d
 80154d8:	24002b08 	.word	0x24002b08
 80154dc:	08016b04 	.word	0x08016b04
 80154e0:	24002940 	.word	0x24002940
 80154e4:	08016b24 	.word	0x08016b24
 80154e8:	240032cc 	.word	0x240032cc
 80154ec:	08016b44 	.word	0x08016b44
 80154f0:	08016b58 	.word	0x08016b58
 80154f4:	08016b6c 	.word	0x08016b6c
 80154f8:	24002aa8 	.word	0x24002aa8
 80154fc:	08016b80 	.word	0x08016b80
 8015500:	08016b94 	.word	0x08016b94
 8015504:	24002b04 	.word	0x24002b04
 8015508:	24002b00 	.word	0x24002b00
 801550c:	08016ba8 	.word	0x08016ba8
 8015510:	08016bc0 	.word	0x08016bc0
 8015514:	240029f8 	.word	0x240029f8
 8015518:	08016bd8 	.word	0x08016bd8

0801551c <ip_address_change_notify_callback>:
* @param ip_instance: NX_IP instance registered for this callback.
* @param ptr: VOID* user data pointer
* @retval none
*/
static VOID ip_address_change_notify_callback(NX_IP *ip_instance, VOID *ptr)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
 8015524:	6039      	str	r1, [r7, #0]
	printf("I:ip_address_change_notify_callback\r\n");
 8015526:	4806      	ldr	r0, [pc, #24]	; (8015540 <ip_address_change_notify_callback+0x24>)
 8015528:	f000 f8fe 	bl	8015728 <puts>
  tx_semaphore_put(&nx.Semaphore);
 801552c:	4805      	ldr	r0, [pc, #20]	; (8015544 <ip_address_change_notify_callback+0x28>)
 801552e:	f7ff fbbf 	bl	8014cb0 <_txe_semaphore_put>
  printf("S:ip_address_change_notify_callback\r\n");
 8015532:	4805      	ldr	r0, [pc, #20]	; (8015548 <ip_address_change_notify_callback+0x2c>)
 8015534:	f000 f8f8 	bl	8015728 <puts>
}
 8015538:	bf00      	nop
 801553a:	3708      	adds	r7, #8
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}
 8015540:	08016c00 	.word	0x08016c00
 8015544:	24002aa8 	.word	0x24002aa8
 8015548:	08016c28 	.word	0x08016c28

0801554c <App_TCP_Thread_Entry>:
* @param thread_input: thread user data
* @retval none
*/

static VOID App_TCP_Thread_Entry(ULONG thread_input)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
	printf("I:App_TCP_Thread_Entry\r\n");
 8015554:	4803      	ldr	r0, [pc, #12]	; (8015564 <App_TCP_Thread_Entry+0x18>)
 8015556:	f000 f8e7 	bl	8015728 <puts>
  {
    printf("\n-------------------------------------\n\tFAIL : %u / %u packets sent\n-------------------------------------\n", count - 1, MAX_PACKET_COUNT);
    //Error_Handler();
  }
*/
}
 801555a:	bf00      	nop
 801555c:	3708      	adds	r7, #8
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}
 8015562:	bf00      	nop
 8015564:	08016c50 	.word	0x08016c50

08015568 <__errno>:
 8015568:	4b01      	ldr	r3, [pc, #4]	; (8015570 <__errno+0x8>)
 801556a:	6818      	ldr	r0, [r3, #0]
 801556c:	4770      	bx	lr
 801556e:	bf00      	nop
 8015570:	24000090 	.word	0x24000090

08015574 <__libc_init_array>:
 8015574:	b570      	push	{r4, r5, r6, lr}
 8015576:	4d0d      	ldr	r5, [pc, #52]	; (80155ac <__libc_init_array+0x38>)
 8015578:	4c0d      	ldr	r4, [pc, #52]	; (80155b0 <__libc_init_array+0x3c>)
 801557a:	1b64      	subs	r4, r4, r5
 801557c:	10a4      	asrs	r4, r4, #2
 801557e:	2600      	movs	r6, #0
 8015580:	42a6      	cmp	r6, r4
 8015582:	d109      	bne.n	8015598 <__libc_init_array+0x24>
 8015584:	4d0b      	ldr	r5, [pc, #44]	; (80155b4 <__libc_init_array+0x40>)
 8015586:	4c0c      	ldr	r4, [pc, #48]	; (80155b8 <__libc_init_array+0x44>)
 8015588:	f001 f99e 	bl	80168c8 <_init>
 801558c:	1b64      	subs	r4, r4, r5
 801558e:	10a4      	asrs	r4, r4, #2
 8015590:	2600      	movs	r6, #0
 8015592:	42a6      	cmp	r6, r4
 8015594:	d105      	bne.n	80155a2 <__libc_init_array+0x2e>
 8015596:	bd70      	pop	{r4, r5, r6, pc}
 8015598:	f855 3b04 	ldr.w	r3, [r5], #4
 801559c:	4798      	blx	r3
 801559e:	3601      	adds	r6, #1
 80155a0:	e7ee      	b.n	8015580 <__libc_init_array+0xc>
 80155a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80155a6:	4798      	blx	r3
 80155a8:	3601      	adds	r6, #1
 80155aa:	e7f2      	b.n	8015592 <__libc_init_array+0x1e>
 80155ac:	08016dc4 	.word	0x08016dc4
 80155b0:	08016dc4 	.word	0x08016dc4
 80155b4:	08016dc4 	.word	0x08016dc4
 80155b8:	08016dc8 	.word	0x08016dc8

080155bc <memcpy>:
 80155bc:	440a      	add	r2, r1
 80155be:	4291      	cmp	r1, r2
 80155c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80155c4:	d100      	bne.n	80155c8 <memcpy+0xc>
 80155c6:	4770      	bx	lr
 80155c8:	b510      	push	{r4, lr}
 80155ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155d2:	4291      	cmp	r1, r2
 80155d4:	d1f9      	bne.n	80155ca <memcpy+0xe>
 80155d6:	bd10      	pop	{r4, pc}

080155d8 <memmove>:
 80155d8:	4288      	cmp	r0, r1
 80155da:	b510      	push	{r4, lr}
 80155dc:	eb01 0402 	add.w	r4, r1, r2
 80155e0:	d902      	bls.n	80155e8 <memmove+0x10>
 80155e2:	4284      	cmp	r4, r0
 80155e4:	4623      	mov	r3, r4
 80155e6:	d807      	bhi.n	80155f8 <memmove+0x20>
 80155e8:	1e43      	subs	r3, r0, #1
 80155ea:	42a1      	cmp	r1, r4
 80155ec:	d008      	beq.n	8015600 <memmove+0x28>
 80155ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80155f6:	e7f8      	b.n	80155ea <memmove+0x12>
 80155f8:	4402      	add	r2, r0
 80155fa:	4601      	mov	r1, r0
 80155fc:	428a      	cmp	r2, r1
 80155fe:	d100      	bne.n	8015602 <memmove+0x2a>
 8015600:	bd10      	pop	{r4, pc}
 8015602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801560a:	e7f7      	b.n	80155fc <memmove+0x24>

0801560c <memset>:
 801560c:	4402      	add	r2, r0
 801560e:	4603      	mov	r3, r0
 8015610:	4293      	cmp	r3, r2
 8015612:	d100      	bne.n	8015616 <memset+0xa>
 8015614:	4770      	bx	lr
 8015616:	f803 1b01 	strb.w	r1, [r3], #1
 801561a:	e7f9      	b.n	8015610 <memset+0x4>

0801561c <iprintf>:
 801561c:	b40f      	push	{r0, r1, r2, r3}
 801561e:	4b0a      	ldr	r3, [pc, #40]	; (8015648 <iprintf+0x2c>)
 8015620:	b513      	push	{r0, r1, r4, lr}
 8015622:	681c      	ldr	r4, [r3, #0]
 8015624:	b124      	cbz	r4, 8015630 <iprintf+0x14>
 8015626:	69a3      	ldr	r3, [r4, #24]
 8015628:	b913      	cbnz	r3, 8015630 <iprintf+0x14>
 801562a:	4620      	mov	r0, r4
 801562c:	f000 fb82 	bl	8015d34 <__sinit>
 8015630:	ab05      	add	r3, sp, #20
 8015632:	9a04      	ldr	r2, [sp, #16]
 8015634:	68a1      	ldr	r1, [r4, #8]
 8015636:	9301      	str	r3, [sp, #4]
 8015638:	4620      	mov	r0, r4
 801563a:	f000 fd6d 	bl	8016118 <_vfiprintf_r>
 801563e:	b002      	add	sp, #8
 8015640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015644:	b004      	add	sp, #16
 8015646:	4770      	bx	lr
 8015648:	24000090 	.word	0x24000090

0801564c <_puts_r>:
 801564c:	b570      	push	{r4, r5, r6, lr}
 801564e:	460e      	mov	r6, r1
 8015650:	4605      	mov	r5, r0
 8015652:	b118      	cbz	r0, 801565c <_puts_r+0x10>
 8015654:	6983      	ldr	r3, [r0, #24]
 8015656:	b90b      	cbnz	r3, 801565c <_puts_r+0x10>
 8015658:	f000 fb6c 	bl	8015d34 <__sinit>
 801565c:	69ab      	ldr	r3, [r5, #24]
 801565e:	68ac      	ldr	r4, [r5, #8]
 8015660:	b913      	cbnz	r3, 8015668 <_puts_r+0x1c>
 8015662:	4628      	mov	r0, r5
 8015664:	f000 fb66 	bl	8015d34 <__sinit>
 8015668:	4b2c      	ldr	r3, [pc, #176]	; (801571c <_puts_r+0xd0>)
 801566a:	429c      	cmp	r4, r3
 801566c:	d120      	bne.n	80156b0 <_puts_r+0x64>
 801566e:	686c      	ldr	r4, [r5, #4]
 8015670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015672:	07db      	lsls	r3, r3, #31
 8015674:	d405      	bmi.n	8015682 <_puts_r+0x36>
 8015676:	89a3      	ldrh	r3, [r4, #12]
 8015678:	0598      	lsls	r0, r3, #22
 801567a:	d402      	bmi.n	8015682 <_puts_r+0x36>
 801567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801567e:	f000 fc09 	bl	8015e94 <__retarget_lock_acquire_recursive>
 8015682:	89a3      	ldrh	r3, [r4, #12]
 8015684:	0719      	lsls	r1, r3, #28
 8015686:	d51d      	bpl.n	80156c4 <_puts_r+0x78>
 8015688:	6923      	ldr	r3, [r4, #16]
 801568a:	b1db      	cbz	r3, 80156c4 <_puts_r+0x78>
 801568c:	3e01      	subs	r6, #1
 801568e:	68a3      	ldr	r3, [r4, #8]
 8015690:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015694:	3b01      	subs	r3, #1
 8015696:	60a3      	str	r3, [r4, #8]
 8015698:	bb39      	cbnz	r1, 80156ea <_puts_r+0x9e>
 801569a:	2b00      	cmp	r3, #0
 801569c:	da38      	bge.n	8015710 <_puts_r+0xc4>
 801569e:	4622      	mov	r2, r4
 80156a0:	210a      	movs	r1, #10
 80156a2:	4628      	mov	r0, r5
 80156a4:	f000 f94e 	bl	8015944 <__swbuf_r>
 80156a8:	3001      	adds	r0, #1
 80156aa:	d011      	beq.n	80156d0 <_puts_r+0x84>
 80156ac:	250a      	movs	r5, #10
 80156ae:	e011      	b.n	80156d4 <_puts_r+0x88>
 80156b0:	4b1b      	ldr	r3, [pc, #108]	; (8015720 <_puts_r+0xd4>)
 80156b2:	429c      	cmp	r4, r3
 80156b4:	d101      	bne.n	80156ba <_puts_r+0x6e>
 80156b6:	68ac      	ldr	r4, [r5, #8]
 80156b8:	e7da      	b.n	8015670 <_puts_r+0x24>
 80156ba:	4b1a      	ldr	r3, [pc, #104]	; (8015724 <_puts_r+0xd8>)
 80156bc:	429c      	cmp	r4, r3
 80156be:	bf08      	it	eq
 80156c0:	68ec      	ldreq	r4, [r5, #12]
 80156c2:	e7d5      	b.n	8015670 <_puts_r+0x24>
 80156c4:	4621      	mov	r1, r4
 80156c6:	4628      	mov	r0, r5
 80156c8:	f000 f98e 	bl	80159e8 <__swsetup_r>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	d0dd      	beq.n	801568c <_puts_r+0x40>
 80156d0:	f04f 35ff 	mov.w	r5, #4294967295
 80156d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80156d6:	07da      	lsls	r2, r3, #31
 80156d8:	d405      	bmi.n	80156e6 <_puts_r+0x9a>
 80156da:	89a3      	ldrh	r3, [r4, #12]
 80156dc:	059b      	lsls	r3, r3, #22
 80156de:	d402      	bmi.n	80156e6 <_puts_r+0x9a>
 80156e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156e2:	f000 fbd8 	bl	8015e96 <__retarget_lock_release_recursive>
 80156e6:	4628      	mov	r0, r5
 80156e8:	bd70      	pop	{r4, r5, r6, pc}
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	da04      	bge.n	80156f8 <_puts_r+0xac>
 80156ee:	69a2      	ldr	r2, [r4, #24]
 80156f0:	429a      	cmp	r2, r3
 80156f2:	dc06      	bgt.n	8015702 <_puts_r+0xb6>
 80156f4:	290a      	cmp	r1, #10
 80156f6:	d004      	beq.n	8015702 <_puts_r+0xb6>
 80156f8:	6823      	ldr	r3, [r4, #0]
 80156fa:	1c5a      	adds	r2, r3, #1
 80156fc:	6022      	str	r2, [r4, #0]
 80156fe:	7019      	strb	r1, [r3, #0]
 8015700:	e7c5      	b.n	801568e <_puts_r+0x42>
 8015702:	4622      	mov	r2, r4
 8015704:	4628      	mov	r0, r5
 8015706:	f000 f91d 	bl	8015944 <__swbuf_r>
 801570a:	3001      	adds	r0, #1
 801570c:	d1bf      	bne.n	801568e <_puts_r+0x42>
 801570e:	e7df      	b.n	80156d0 <_puts_r+0x84>
 8015710:	6823      	ldr	r3, [r4, #0]
 8015712:	250a      	movs	r5, #10
 8015714:	1c5a      	adds	r2, r3, #1
 8015716:	6022      	str	r2, [r4, #0]
 8015718:	701d      	strb	r5, [r3, #0]
 801571a:	e7db      	b.n	80156d4 <_puts_r+0x88>
 801571c:	08016d50 	.word	0x08016d50
 8015720:	08016d70 	.word	0x08016d70
 8015724:	08016d30 	.word	0x08016d30

08015728 <puts>:
 8015728:	4b02      	ldr	r3, [pc, #8]	; (8015734 <puts+0xc>)
 801572a:	4601      	mov	r1, r0
 801572c:	6818      	ldr	r0, [r3, #0]
 801572e:	f7ff bf8d 	b.w	801564c <_puts_r>
 8015732:	bf00      	nop
 8015734:	24000090 	.word	0x24000090

08015738 <rand>:
 8015738:	4b17      	ldr	r3, [pc, #92]	; (8015798 <rand+0x60>)
 801573a:	b510      	push	{r4, lr}
 801573c:	681c      	ldr	r4, [r3, #0]
 801573e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015740:	b9b3      	cbnz	r3, 8015770 <rand+0x38>
 8015742:	2018      	movs	r0, #24
 8015744:	f000 fc0c 	bl	8015f60 <malloc>
 8015748:	63a0      	str	r0, [r4, #56]	; 0x38
 801574a:	b928      	cbnz	r0, 8015758 <rand+0x20>
 801574c:	4602      	mov	r2, r0
 801574e:	4b13      	ldr	r3, [pc, #76]	; (801579c <rand+0x64>)
 8015750:	4813      	ldr	r0, [pc, #76]	; (80157a0 <rand+0x68>)
 8015752:	214e      	movs	r1, #78	; 0x4e
 8015754:	f000 f9b6 	bl	8015ac4 <__assert_func>
 8015758:	4a12      	ldr	r2, [pc, #72]	; (80157a4 <rand+0x6c>)
 801575a:	4b13      	ldr	r3, [pc, #76]	; (80157a8 <rand+0x70>)
 801575c:	e9c0 2300 	strd	r2, r3, [r0]
 8015760:	4b12      	ldr	r3, [pc, #72]	; (80157ac <rand+0x74>)
 8015762:	6083      	str	r3, [r0, #8]
 8015764:	230b      	movs	r3, #11
 8015766:	8183      	strh	r3, [r0, #12]
 8015768:	2201      	movs	r2, #1
 801576a:	2300      	movs	r3, #0
 801576c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015770:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015772:	480f      	ldr	r0, [pc, #60]	; (80157b0 <rand+0x78>)
 8015774:	690a      	ldr	r2, [r1, #16]
 8015776:	694b      	ldr	r3, [r1, #20]
 8015778:	4c0e      	ldr	r4, [pc, #56]	; (80157b4 <rand+0x7c>)
 801577a:	4350      	muls	r0, r2
 801577c:	fb04 0003 	mla	r0, r4, r3, r0
 8015780:	fba2 3404 	umull	r3, r4, r2, r4
 8015784:	1c5a      	adds	r2, r3, #1
 8015786:	4404      	add	r4, r0
 8015788:	f144 0000 	adc.w	r0, r4, #0
 801578c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015790:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015794:	bd10      	pop	{r4, pc}
 8015796:	bf00      	nop
 8015798:	24000090 	.word	0x24000090
 801579c:	08016c7c 	.word	0x08016c7c
 80157a0:	08016c93 	.word	0x08016c93
 80157a4:	abcd330e 	.word	0xabcd330e
 80157a8:	e66d1234 	.word	0xe66d1234
 80157ac:	0005deec 	.word	0x0005deec
 80157b0:	5851f42d 	.word	0x5851f42d
 80157b4:	4c957f2d 	.word	0x4c957f2d

080157b8 <setvbuf>:
 80157b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80157bc:	461d      	mov	r5, r3
 80157be:	4b5d      	ldr	r3, [pc, #372]	; (8015934 <setvbuf+0x17c>)
 80157c0:	681f      	ldr	r7, [r3, #0]
 80157c2:	4604      	mov	r4, r0
 80157c4:	460e      	mov	r6, r1
 80157c6:	4690      	mov	r8, r2
 80157c8:	b127      	cbz	r7, 80157d4 <setvbuf+0x1c>
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	b913      	cbnz	r3, 80157d4 <setvbuf+0x1c>
 80157ce:	4638      	mov	r0, r7
 80157d0:	f000 fab0 	bl	8015d34 <__sinit>
 80157d4:	4b58      	ldr	r3, [pc, #352]	; (8015938 <setvbuf+0x180>)
 80157d6:	429c      	cmp	r4, r3
 80157d8:	d167      	bne.n	80158aa <setvbuf+0xf2>
 80157da:	687c      	ldr	r4, [r7, #4]
 80157dc:	f1b8 0f02 	cmp.w	r8, #2
 80157e0:	d006      	beq.n	80157f0 <setvbuf+0x38>
 80157e2:	f1b8 0f01 	cmp.w	r8, #1
 80157e6:	f200 809f 	bhi.w	8015928 <setvbuf+0x170>
 80157ea:	2d00      	cmp	r5, #0
 80157ec:	f2c0 809c 	blt.w	8015928 <setvbuf+0x170>
 80157f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80157f2:	07db      	lsls	r3, r3, #31
 80157f4:	d405      	bmi.n	8015802 <setvbuf+0x4a>
 80157f6:	89a3      	ldrh	r3, [r4, #12]
 80157f8:	0598      	lsls	r0, r3, #22
 80157fa:	d402      	bmi.n	8015802 <setvbuf+0x4a>
 80157fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157fe:	f000 fb49 	bl	8015e94 <__retarget_lock_acquire_recursive>
 8015802:	4621      	mov	r1, r4
 8015804:	4638      	mov	r0, r7
 8015806:	f000 fa01 	bl	8015c0c <_fflush_r>
 801580a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801580c:	b141      	cbz	r1, 8015820 <setvbuf+0x68>
 801580e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015812:	4299      	cmp	r1, r3
 8015814:	d002      	beq.n	801581c <setvbuf+0x64>
 8015816:	4638      	mov	r0, r7
 8015818:	f000 fbaa 	bl	8015f70 <_free_r>
 801581c:	2300      	movs	r3, #0
 801581e:	6363      	str	r3, [r4, #52]	; 0x34
 8015820:	2300      	movs	r3, #0
 8015822:	61a3      	str	r3, [r4, #24]
 8015824:	6063      	str	r3, [r4, #4]
 8015826:	89a3      	ldrh	r3, [r4, #12]
 8015828:	0619      	lsls	r1, r3, #24
 801582a:	d503      	bpl.n	8015834 <setvbuf+0x7c>
 801582c:	6921      	ldr	r1, [r4, #16]
 801582e:	4638      	mov	r0, r7
 8015830:	f000 fb9e 	bl	8015f70 <_free_r>
 8015834:	89a3      	ldrh	r3, [r4, #12]
 8015836:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801583a:	f023 0303 	bic.w	r3, r3, #3
 801583e:	f1b8 0f02 	cmp.w	r8, #2
 8015842:	81a3      	strh	r3, [r4, #12]
 8015844:	d06c      	beq.n	8015920 <setvbuf+0x168>
 8015846:	ab01      	add	r3, sp, #4
 8015848:	466a      	mov	r2, sp
 801584a:	4621      	mov	r1, r4
 801584c:	4638      	mov	r0, r7
 801584e:	f000 fb23 	bl	8015e98 <__swhatbuf_r>
 8015852:	89a3      	ldrh	r3, [r4, #12]
 8015854:	4318      	orrs	r0, r3
 8015856:	81a0      	strh	r0, [r4, #12]
 8015858:	2d00      	cmp	r5, #0
 801585a:	d130      	bne.n	80158be <setvbuf+0x106>
 801585c:	9d00      	ldr	r5, [sp, #0]
 801585e:	4628      	mov	r0, r5
 8015860:	f000 fb7e 	bl	8015f60 <malloc>
 8015864:	4606      	mov	r6, r0
 8015866:	2800      	cmp	r0, #0
 8015868:	d155      	bne.n	8015916 <setvbuf+0x15e>
 801586a:	f8dd 9000 	ldr.w	r9, [sp]
 801586e:	45a9      	cmp	r9, r5
 8015870:	d14a      	bne.n	8015908 <setvbuf+0x150>
 8015872:	f04f 35ff 	mov.w	r5, #4294967295
 8015876:	2200      	movs	r2, #0
 8015878:	60a2      	str	r2, [r4, #8]
 801587a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801587e:	6022      	str	r2, [r4, #0]
 8015880:	6122      	str	r2, [r4, #16]
 8015882:	2201      	movs	r2, #1
 8015884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015888:	6162      	str	r2, [r4, #20]
 801588a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801588c:	f043 0302 	orr.w	r3, r3, #2
 8015890:	07d2      	lsls	r2, r2, #31
 8015892:	81a3      	strh	r3, [r4, #12]
 8015894:	d405      	bmi.n	80158a2 <setvbuf+0xea>
 8015896:	f413 7f00 	tst.w	r3, #512	; 0x200
 801589a:	d102      	bne.n	80158a2 <setvbuf+0xea>
 801589c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801589e:	f000 fafa 	bl	8015e96 <__retarget_lock_release_recursive>
 80158a2:	4628      	mov	r0, r5
 80158a4:	b003      	add	sp, #12
 80158a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158aa:	4b24      	ldr	r3, [pc, #144]	; (801593c <setvbuf+0x184>)
 80158ac:	429c      	cmp	r4, r3
 80158ae:	d101      	bne.n	80158b4 <setvbuf+0xfc>
 80158b0:	68bc      	ldr	r4, [r7, #8]
 80158b2:	e793      	b.n	80157dc <setvbuf+0x24>
 80158b4:	4b22      	ldr	r3, [pc, #136]	; (8015940 <setvbuf+0x188>)
 80158b6:	429c      	cmp	r4, r3
 80158b8:	bf08      	it	eq
 80158ba:	68fc      	ldreq	r4, [r7, #12]
 80158bc:	e78e      	b.n	80157dc <setvbuf+0x24>
 80158be:	2e00      	cmp	r6, #0
 80158c0:	d0cd      	beq.n	801585e <setvbuf+0xa6>
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	b913      	cbnz	r3, 80158cc <setvbuf+0x114>
 80158c6:	4638      	mov	r0, r7
 80158c8:	f000 fa34 	bl	8015d34 <__sinit>
 80158cc:	f1b8 0f01 	cmp.w	r8, #1
 80158d0:	bf08      	it	eq
 80158d2:	89a3      	ldrheq	r3, [r4, #12]
 80158d4:	6026      	str	r6, [r4, #0]
 80158d6:	bf04      	itt	eq
 80158d8:	f043 0301 	orreq.w	r3, r3, #1
 80158dc:	81a3      	strheq	r3, [r4, #12]
 80158de:	89a2      	ldrh	r2, [r4, #12]
 80158e0:	f012 0308 	ands.w	r3, r2, #8
 80158e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80158e8:	d01c      	beq.n	8015924 <setvbuf+0x16c>
 80158ea:	07d3      	lsls	r3, r2, #31
 80158ec:	bf41      	itttt	mi
 80158ee:	2300      	movmi	r3, #0
 80158f0:	426d      	negmi	r5, r5
 80158f2:	60a3      	strmi	r3, [r4, #8]
 80158f4:	61a5      	strmi	r5, [r4, #24]
 80158f6:	bf58      	it	pl
 80158f8:	60a5      	strpl	r5, [r4, #8]
 80158fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80158fc:	f015 0501 	ands.w	r5, r5, #1
 8015900:	d115      	bne.n	801592e <setvbuf+0x176>
 8015902:	f412 7f00 	tst.w	r2, #512	; 0x200
 8015906:	e7c8      	b.n	801589a <setvbuf+0xe2>
 8015908:	4648      	mov	r0, r9
 801590a:	f000 fb29 	bl	8015f60 <malloc>
 801590e:	4606      	mov	r6, r0
 8015910:	2800      	cmp	r0, #0
 8015912:	d0ae      	beq.n	8015872 <setvbuf+0xba>
 8015914:	464d      	mov	r5, r9
 8015916:	89a3      	ldrh	r3, [r4, #12]
 8015918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801591c:	81a3      	strh	r3, [r4, #12]
 801591e:	e7d0      	b.n	80158c2 <setvbuf+0x10a>
 8015920:	2500      	movs	r5, #0
 8015922:	e7a8      	b.n	8015876 <setvbuf+0xbe>
 8015924:	60a3      	str	r3, [r4, #8]
 8015926:	e7e8      	b.n	80158fa <setvbuf+0x142>
 8015928:	f04f 35ff 	mov.w	r5, #4294967295
 801592c:	e7b9      	b.n	80158a2 <setvbuf+0xea>
 801592e:	2500      	movs	r5, #0
 8015930:	e7b7      	b.n	80158a2 <setvbuf+0xea>
 8015932:	bf00      	nop
 8015934:	24000090 	.word	0x24000090
 8015938:	08016d50 	.word	0x08016d50
 801593c:	08016d70 	.word	0x08016d70
 8015940:	08016d30 	.word	0x08016d30

08015944 <__swbuf_r>:
 8015944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015946:	460e      	mov	r6, r1
 8015948:	4614      	mov	r4, r2
 801594a:	4605      	mov	r5, r0
 801594c:	b118      	cbz	r0, 8015956 <__swbuf_r+0x12>
 801594e:	6983      	ldr	r3, [r0, #24]
 8015950:	b90b      	cbnz	r3, 8015956 <__swbuf_r+0x12>
 8015952:	f000 f9ef 	bl	8015d34 <__sinit>
 8015956:	4b21      	ldr	r3, [pc, #132]	; (80159dc <__swbuf_r+0x98>)
 8015958:	429c      	cmp	r4, r3
 801595a:	d12b      	bne.n	80159b4 <__swbuf_r+0x70>
 801595c:	686c      	ldr	r4, [r5, #4]
 801595e:	69a3      	ldr	r3, [r4, #24]
 8015960:	60a3      	str	r3, [r4, #8]
 8015962:	89a3      	ldrh	r3, [r4, #12]
 8015964:	071a      	lsls	r2, r3, #28
 8015966:	d52f      	bpl.n	80159c8 <__swbuf_r+0x84>
 8015968:	6923      	ldr	r3, [r4, #16]
 801596a:	b36b      	cbz	r3, 80159c8 <__swbuf_r+0x84>
 801596c:	6923      	ldr	r3, [r4, #16]
 801596e:	6820      	ldr	r0, [r4, #0]
 8015970:	1ac0      	subs	r0, r0, r3
 8015972:	6963      	ldr	r3, [r4, #20]
 8015974:	b2f6      	uxtb	r6, r6
 8015976:	4283      	cmp	r3, r0
 8015978:	4637      	mov	r7, r6
 801597a:	dc04      	bgt.n	8015986 <__swbuf_r+0x42>
 801597c:	4621      	mov	r1, r4
 801597e:	4628      	mov	r0, r5
 8015980:	f000 f944 	bl	8015c0c <_fflush_r>
 8015984:	bb30      	cbnz	r0, 80159d4 <__swbuf_r+0x90>
 8015986:	68a3      	ldr	r3, [r4, #8]
 8015988:	3b01      	subs	r3, #1
 801598a:	60a3      	str	r3, [r4, #8]
 801598c:	6823      	ldr	r3, [r4, #0]
 801598e:	1c5a      	adds	r2, r3, #1
 8015990:	6022      	str	r2, [r4, #0]
 8015992:	701e      	strb	r6, [r3, #0]
 8015994:	6963      	ldr	r3, [r4, #20]
 8015996:	3001      	adds	r0, #1
 8015998:	4283      	cmp	r3, r0
 801599a:	d004      	beq.n	80159a6 <__swbuf_r+0x62>
 801599c:	89a3      	ldrh	r3, [r4, #12]
 801599e:	07db      	lsls	r3, r3, #31
 80159a0:	d506      	bpl.n	80159b0 <__swbuf_r+0x6c>
 80159a2:	2e0a      	cmp	r6, #10
 80159a4:	d104      	bne.n	80159b0 <__swbuf_r+0x6c>
 80159a6:	4621      	mov	r1, r4
 80159a8:	4628      	mov	r0, r5
 80159aa:	f000 f92f 	bl	8015c0c <_fflush_r>
 80159ae:	b988      	cbnz	r0, 80159d4 <__swbuf_r+0x90>
 80159b0:	4638      	mov	r0, r7
 80159b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159b4:	4b0a      	ldr	r3, [pc, #40]	; (80159e0 <__swbuf_r+0x9c>)
 80159b6:	429c      	cmp	r4, r3
 80159b8:	d101      	bne.n	80159be <__swbuf_r+0x7a>
 80159ba:	68ac      	ldr	r4, [r5, #8]
 80159bc:	e7cf      	b.n	801595e <__swbuf_r+0x1a>
 80159be:	4b09      	ldr	r3, [pc, #36]	; (80159e4 <__swbuf_r+0xa0>)
 80159c0:	429c      	cmp	r4, r3
 80159c2:	bf08      	it	eq
 80159c4:	68ec      	ldreq	r4, [r5, #12]
 80159c6:	e7ca      	b.n	801595e <__swbuf_r+0x1a>
 80159c8:	4621      	mov	r1, r4
 80159ca:	4628      	mov	r0, r5
 80159cc:	f000 f80c 	bl	80159e8 <__swsetup_r>
 80159d0:	2800      	cmp	r0, #0
 80159d2:	d0cb      	beq.n	801596c <__swbuf_r+0x28>
 80159d4:	f04f 37ff 	mov.w	r7, #4294967295
 80159d8:	e7ea      	b.n	80159b0 <__swbuf_r+0x6c>
 80159da:	bf00      	nop
 80159dc:	08016d50 	.word	0x08016d50
 80159e0:	08016d70 	.word	0x08016d70
 80159e4:	08016d30 	.word	0x08016d30

080159e8 <__swsetup_r>:
 80159e8:	4b32      	ldr	r3, [pc, #200]	; (8015ab4 <__swsetup_r+0xcc>)
 80159ea:	b570      	push	{r4, r5, r6, lr}
 80159ec:	681d      	ldr	r5, [r3, #0]
 80159ee:	4606      	mov	r6, r0
 80159f0:	460c      	mov	r4, r1
 80159f2:	b125      	cbz	r5, 80159fe <__swsetup_r+0x16>
 80159f4:	69ab      	ldr	r3, [r5, #24]
 80159f6:	b913      	cbnz	r3, 80159fe <__swsetup_r+0x16>
 80159f8:	4628      	mov	r0, r5
 80159fa:	f000 f99b 	bl	8015d34 <__sinit>
 80159fe:	4b2e      	ldr	r3, [pc, #184]	; (8015ab8 <__swsetup_r+0xd0>)
 8015a00:	429c      	cmp	r4, r3
 8015a02:	d10f      	bne.n	8015a24 <__swsetup_r+0x3c>
 8015a04:	686c      	ldr	r4, [r5, #4]
 8015a06:	89a3      	ldrh	r3, [r4, #12]
 8015a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a0c:	0719      	lsls	r1, r3, #28
 8015a0e:	d42c      	bmi.n	8015a6a <__swsetup_r+0x82>
 8015a10:	06dd      	lsls	r5, r3, #27
 8015a12:	d411      	bmi.n	8015a38 <__swsetup_r+0x50>
 8015a14:	2309      	movs	r3, #9
 8015a16:	6033      	str	r3, [r6, #0]
 8015a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015a1c:	81a3      	strh	r3, [r4, #12]
 8015a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8015a22:	e03e      	b.n	8015aa2 <__swsetup_r+0xba>
 8015a24:	4b25      	ldr	r3, [pc, #148]	; (8015abc <__swsetup_r+0xd4>)
 8015a26:	429c      	cmp	r4, r3
 8015a28:	d101      	bne.n	8015a2e <__swsetup_r+0x46>
 8015a2a:	68ac      	ldr	r4, [r5, #8]
 8015a2c:	e7eb      	b.n	8015a06 <__swsetup_r+0x1e>
 8015a2e:	4b24      	ldr	r3, [pc, #144]	; (8015ac0 <__swsetup_r+0xd8>)
 8015a30:	429c      	cmp	r4, r3
 8015a32:	bf08      	it	eq
 8015a34:	68ec      	ldreq	r4, [r5, #12]
 8015a36:	e7e6      	b.n	8015a06 <__swsetup_r+0x1e>
 8015a38:	0758      	lsls	r0, r3, #29
 8015a3a:	d512      	bpl.n	8015a62 <__swsetup_r+0x7a>
 8015a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a3e:	b141      	cbz	r1, 8015a52 <__swsetup_r+0x6a>
 8015a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a44:	4299      	cmp	r1, r3
 8015a46:	d002      	beq.n	8015a4e <__swsetup_r+0x66>
 8015a48:	4630      	mov	r0, r6
 8015a4a:	f000 fa91 	bl	8015f70 <_free_r>
 8015a4e:	2300      	movs	r3, #0
 8015a50:	6363      	str	r3, [r4, #52]	; 0x34
 8015a52:	89a3      	ldrh	r3, [r4, #12]
 8015a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a58:	81a3      	strh	r3, [r4, #12]
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	6063      	str	r3, [r4, #4]
 8015a5e:	6923      	ldr	r3, [r4, #16]
 8015a60:	6023      	str	r3, [r4, #0]
 8015a62:	89a3      	ldrh	r3, [r4, #12]
 8015a64:	f043 0308 	orr.w	r3, r3, #8
 8015a68:	81a3      	strh	r3, [r4, #12]
 8015a6a:	6923      	ldr	r3, [r4, #16]
 8015a6c:	b94b      	cbnz	r3, 8015a82 <__swsetup_r+0x9a>
 8015a6e:	89a3      	ldrh	r3, [r4, #12]
 8015a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a78:	d003      	beq.n	8015a82 <__swsetup_r+0x9a>
 8015a7a:	4621      	mov	r1, r4
 8015a7c:	4630      	mov	r0, r6
 8015a7e:	f000 fa2f 	bl	8015ee0 <__smakebuf_r>
 8015a82:	89a0      	ldrh	r0, [r4, #12]
 8015a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a88:	f010 0301 	ands.w	r3, r0, #1
 8015a8c:	d00a      	beq.n	8015aa4 <__swsetup_r+0xbc>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	60a3      	str	r3, [r4, #8]
 8015a92:	6963      	ldr	r3, [r4, #20]
 8015a94:	425b      	negs	r3, r3
 8015a96:	61a3      	str	r3, [r4, #24]
 8015a98:	6923      	ldr	r3, [r4, #16]
 8015a9a:	b943      	cbnz	r3, 8015aae <__swsetup_r+0xc6>
 8015a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015aa0:	d1ba      	bne.n	8015a18 <__swsetup_r+0x30>
 8015aa2:	bd70      	pop	{r4, r5, r6, pc}
 8015aa4:	0781      	lsls	r1, r0, #30
 8015aa6:	bf58      	it	pl
 8015aa8:	6963      	ldrpl	r3, [r4, #20]
 8015aaa:	60a3      	str	r3, [r4, #8]
 8015aac:	e7f4      	b.n	8015a98 <__swsetup_r+0xb0>
 8015aae:	2000      	movs	r0, #0
 8015ab0:	e7f7      	b.n	8015aa2 <__swsetup_r+0xba>
 8015ab2:	bf00      	nop
 8015ab4:	24000090 	.word	0x24000090
 8015ab8:	08016d50 	.word	0x08016d50
 8015abc:	08016d70 	.word	0x08016d70
 8015ac0:	08016d30 	.word	0x08016d30

08015ac4 <__assert_func>:
 8015ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015ac6:	4614      	mov	r4, r2
 8015ac8:	461a      	mov	r2, r3
 8015aca:	4b09      	ldr	r3, [pc, #36]	; (8015af0 <__assert_func+0x2c>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	4605      	mov	r5, r0
 8015ad0:	68d8      	ldr	r0, [r3, #12]
 8015ad2:	b14c      	cbz	r4, 8015ae8 <__assert_func+0x24>
 8015ad4:	4b07      	ldr	r3, [pc, #28]	; (8015af4 <__assert_func+0x30>)
 8015ad6:	9100      	str	r1, [sp, #0]
 8015ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015adc:	4906      	ldr	r1, [pc, #24]	; (8015af8 <__assert_func+0x34>)
 8015ade:	462b      	mov	r3, r5
 8015ae0:	f000 f9a6 	bl	8015e30 <fiprintf>
 8015ae4:	f000 fe42 	bl	801676c <abort>
 8015ae8:	4b04      	ldr	r3, [pc, #16]	; (8015afc <__assert_func+0x38>)
 8015aea:	461c      	mov	r4, r3
 8015aec:	e7f3      	b.n	8015ad6 <__assert_func+0x12>
 8015aee:	bf00      	nop
 8015af0:	24000090 	.word	0x24000090
 8015af4:	08016cf2 	.word	0x08016cf2
 8015af8:	08016cff 	.word	0x08016cff
 8015afc:	08016d2d 	.word	0x08016d2d

08015b00 <__sflush_r>:
 8015b00:	898a      	ldrh	r2, [r1, #12]
 8015b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b06:	4605      	mov	r5, r0
 8015b08:	0710      	lsls	r0, r2, #28
 8015b0a:	460c      	mov	r4, r1
 8015b0c:	d458      	bmi.n	8015bc0 <__sflush_r+0xc0>
 8015b0e:	684b      	ldr	r3, [r1, #4]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	dc05      	bgt.n	8015b20 <__sflush_r+0x20>
 8015b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	dc02      	bgt.n	8015b20 <__sflush_r+0x20>
 8015b1a:	2000      	movs	r0, #0
 8015b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b22:	2e00      	cmp	r6, #0
 8015b24:	d0f9      	beq.n	8015b1a <__sflush_r+0x1a>
 8015b26:	2300      	movs	r3, #0
 8015b28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015b2c:	682f      	ldr	r7, [r5, #0]
 8015b2e:	602b      	str	r3, [r5, #0]
 8015b30:	d032      	beq.n	8015b98 <__sflush_r+0x98>
 8015b32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015b34:	89a3      	ldrh	r3, [r4, #12]
 8015b36:	075a      	lsls	r2, r3, #29
 8015b38:	d505      	bpl.n	8015b46 <__sflush_r+0x46>
 8015b3a:	6863      	ldr	r3, [r4, #4]
 8015b3c:	1ac0      	subs	r0, r0, r3
 8015b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b40:	b10b      	cbz	r3, 8015b46 <__sflush_r+0x46>
 8015b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b44:	1ac0      	subs	r0, r0, r3
 8015b46:	2300      	movs	r3, #0
 8015b48:	4602      	mov	r2, r0
 8015b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b4c:	6a21      	ldr	r1, [r4, #32]
 8015b4e:	4628      	mov	r0, r5
 8015b50:	47b0      	blx	r6
 8015b52:	1c43      	adds	r3, r0, #1
 8015b54:	89a3      	ldrh	r3, [r4, #12]
 8015b56:	d106      	bne.n	8015b66 <__sflush_r+0x66>
 8015b58:	6829      	ldr	r1, [r5, #0]
 8015b5a:	291d      	cmp	r1, #29
 8015b5c:	d82c      	bhi.n	8015bb8 <__sflush_r+0xb8>
 8015b5e:	4a2a      	ldr	r2, [pc, #168]	; (8015c08 <__sflush_r+0x108>)
 8015b60:	40ca      	lsrs	r2, r1
 8015b62:	07d6      	lsls	r6, r2, #31
 8015b64:	d528      	bpl.n	8015bb8 <__sflush_r+0xb8>
 8015b66:	2200      	movs	r2, #0
 8015b68:	6062      	str	r2, [r4, #4]
 8015b6a:	04d9      	lsls	r1, r3, #19
 8015b6c:	6922      	ldr	r2, [r4, #16]
 8015b6e:	6022      	str	r2, [r4, #0]
 8015b70:	d504      	bpl.n	8015b7c <__sflush_r+0x7c>
 8015b72:	1c42      	adds	r2, r0, #1
 8015b74:	d101      	bne.n	8015b7a <__sflush_r+0x7a>
 8015b76:	682b      	ldr	r3, [r5, #0]
 8015b78:	b903      	cbnz	r3, 8015b7c <__sflush_r+0x7c>
 8015b7a:	6560      	str	r0, [r4, #84]	; 0x54
 8015b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b7e:	602f      	str	r7, [r5, #0]
 8015b80:	2900      	cmp	r1, #0
 8015b82:	d0ca      	beq.n	8015b1a <__sflush_r+0x1a>
 8015b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b88:	4299      	cmp	r1, r3
 8015b8a:	d002      	beq.n	8015b92 <__sflush_r+0x92>
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	f000 f9ef 	bl	8015f70 <_free_r>
 8015b92:	2000      	movs	r0, #0
 8015b94:	6360      	str	r0, [r4, #52]	; 0x34
 8015b96:	e7c1      	b.n	8015b1c <__sflush_r+0x1c>
 8015b98:	6a21      	ldr	r1, [r4, #32]
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	4628      	mov	r0, r5
 8015b9e:	47b0      	blx	r6
 8015ba0:	1c41      	adds	r1, r0, #1
 8015ba2:	d1c7      	bne.n	8015b34 <__sflush_r+0x34>
 8015ba4:	682b      	ldr	r3, [r5, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d0c4      	beq.n	8015b34 <__sflush_r+0x34>
 8015baa:	2b1d      	cmp	r3, #29
 8015bac:	d001      	beq.n	8015bb2 <__sflush_r+0xb2>
 8015bae:	2b16      	cmp	r3, #22
 8015bb0:	d101      	bne.n	8015bb6 <__sflush_r+0xb6>
 8015bb2:	602f      	str	r7, [r5, #0]
 8015bb4:	e7b1      	b.n	8015b1a <__sflush_r+0x1a>
 8015bb6:	89a3      	ldrh	r3, [r4, #12]
 8015bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bbc:	81a3      	strh	r3, [r4, #12]
 8015bbe:	e7ad      	b.n	8015b1c <__sflush_r+0x1c>
 8015bc0:	690f      	ldr	r7, [r1, #16]
 8015bc2:	2f00      	cmp	r7, #0
 8015bc4:	d0a9      	beq.n	8015b1a <__sflush_r+0x1a>
 8015bc6:	0793      	lsls	r3, r2, #30
 8015bc8:	680e      	ldr	r6, [r1, #0]
 8015bca:	bf08      	it	eq
 8015bcc:	694b      	ldreq	r3, [r1, #20]
 8015bce:	600f      	str	r7, [r1, #0]
 8015bd0:	bf18      	it	ne
 8015bd2:	2300      	movne	r3, #0
 8015bd4:	eba6 0807 	sub.w	r8, r6, r7
 8015bd8:	608b      	str	r3, [r1, #8]
 8015bda:	f1b8 0f00 	cmp.w	r8, #0
 8015bde:	dd9c      	ble.n	8015b1a <__sflush_r+0x1a>
 8015be0:	6a21      	ldr	r1, [r4, #32]
 8015be2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015be4:	4643      	mov	r3, r8
 8015be6:	463a      	mov	r2, r7
 8015be8:	4628      	mov	r0, r5
 8015bea:	47b0      	blx	r6
 8015bec:	2800      	cmp	r0, #0
 8015bee:	dc06      	bgt.n	8015bfe <__sflush_r+0xfe>
 8015bf0:	89a3      	ldrh	r3, [r4, #12]
 8015bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bf6:	81a3      	strh	r3, [r4, #12]
 8015bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bfc:	e78e      	b.n	8015b1c <__sflush_r+0x1c>
 8015bfe:	4407      	add	r7, r0
 8015c00:	eba8 0800 	sub.w	r8, r8, r0
 8015c04:	e7e9      	b.n	8015bda <__sflush_r+0xda>
 8015c06:	bf00      	nop
 8015c08:	20400001 	.word	0x20400001

08015c0c <_fflush_r>:
 8015c0c:	b538      	push	{r3, r4, r5, lr}
 8015c0e:	690b      	ldr	r3, [r1, #16]
 8015c10:	4605      	mov	r5, r0
 8015c12:	460c      	mov	r4, r1
 8015c14:	b913      	cbnz	r3, 8015c1c <_fflush_r+0x10>
 8015c16:	2500      	movs	r5, #0
 8015c18:	4628      	mov	r0, r5
 8015c1a:	bd38      	pop	{r3, r4, r5, pc}
 8015c1c:	b118      	cbz	r0, 8015c26 <_fflush_r+0x1a>
 8015c1e:	6983      	ldr	r3, [r0, #24]
 8015c20:	b90b      	cbnz	r3, 8015c26 <_fflush_r+0x1a>
 8015c22:	f000 f887 	bl	8015d34 <__sinit>
 8015c26:	4b14      	ldr	r3, [pc, #80]	; (8015c78 <_fflush_r+0x6c>)
 8015c28:	429c      	cmp	r4, r3
 8015c2a:	d11b      	bne.n	8015c64 <_fflush_r+0x58>
 8015c2c:	686c      	ldr	r4, [r5, #4]
 8015c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d0ef      	beq.n	8015c16 <_fflush_r+0xa>
 8015c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015c38:	07d0      	lsls	r0, r2, #31
 8015c3a:	d404      	bmi.n	8015c46 <_fflush_r+0x3a>
 8015c3c:	0599      	lsls	r1, r3, #22
 8015c3e:	d402      	bmi.n	8015c46 <_fflush_r+0x3a>
 8015c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c42:	f000 f927 	bl	8015e94 <__retarget_lock_acquire_recursive>
 8015c46:	4628      	mov	r0, r5
 8015c48:	4621      	mov	r1, r4
 8015c4a:	f7ff ff59 	bl	8015b00 <__sflush_r>
 8015c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c50:	07da      	lsls	r2, r3, #31
 8015c52:	4605      	mov	r5, r0
 8015c54:	d4e0      	bmi.n	8015c18 <_fflush_r+0xc>
 8015c56:	89a3      	ldrh	r3, [r4, #12]
 8015c58:	059b      	lsls	r3, r3, #22
 8015c5a:	d4dd      	bmi.n	8015c18 <_fflush_r+0xc>
 8015c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c5e:	f000 f91a 	bl	8015e96 <__retarget_lock_release_recursive>
 8015c62:	e7d9      	b.n	8015c18 <_fflush_r+0xc>
 8015c64:	4b05      	ldr	r3, [pc, #20]	; (8015c7c <_fflush_r+0x70>)
 8015c66:	429c      	cmp	r4, r3
 8015c68:	d101      	bne.n	8015c6e <_fflush_r+0x62>
 8015c6a:	68ac      	ldr	r4, [r5, #8]
 8015c6c:	e7df      	b.n	8015c2e <_fflush_r+0x22>
 8015c6e:	4b04      	ldr	r3, [pc, #16]	; (8015c80 <_fflush_r+0x74>)
 8015c70:	429c      	cmp	r4, r3
 8015c72:	bf08      	it	eq
 8015c74:	68ec      	ldreq	r4, [r5, #12]
 8015c76:	e7da      	b.n	8015c2e <_fflush_r+0x22>
 8015c78:	08016d50 	.word	0x08016d50
 8015c7c:	08016d70 	.word	0x08016d70
 8015c80:	08016d30 	.word	0x08016d30

08015c84 <std>:
 8015c84:	2300      	movs	r3, #0
 8015c86:	b510      	push	{r4, lr}
 8015c88:	4604      	mov	r4, r0
 8015c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8015c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015c92:	6083      	str	r3, [r0, #8]
 8015c94:	8181      	strh	r1, [r0, #12]
 8015c96:	6643      	str	r3, [r0, #100]	; 0x64
 8015c98:	81c2      	strh	r2, [r0, #14]
 8015c9a:	6183      	str	r3, [r0, #24]
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	2208      	movs	r2, #8
 8015ca0:	305c      	adds	r0, #92	; 0x5c
 8015ca2:	f7ff fcb3 	bl	801560c <memset>
 8015ca6:	4b05      	ldr	r3, [pc, #20]	; (8015cbc <std+0x38>)
 8015ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8015caa:	4b05      	ldr	r3, [pc, #20]	; (8015cc0 <std+0x3c>)
 8015cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8015cae:	4b05      	ldr	r3, [pc, #20]	; (8015cc4 <std+0x40>)
 8015cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015cb2:	4b05      	ldr	r3, [pc, #20]	; (8015cc8 <std+0x44>)
 8015cb4:	6224      	str	r4, [r4, #32]
 8015cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8015cb8:	bd10      	pop	{r4, pc}
 8015cba:	bf00      	nop
 8015cbc:	080166c1 	.word	0x080166c1
 8015cc0:	080166e3 	.word	0x080166e3
 8015cc4:	0801671b 	.word	0x0801671b
 8015cc8:	0801673f 	.word	0x0801673f

08015ccc <_cleanup_r>:
 8015ccc:	4901      	ldr	r1, [pc, #4]	; (8015cd4 <_cleanup_r+0x8>)
 8015cce:	f000 b8c1 	b.w	8015e54 <_fwalk_reent>
 8015cd2:	bf00      	nop
 8015cd4:	08015c0d 	.word	0x08015c0d

08015cd8 <__sfmoreglue>:
 8015cd8:	b570      	push	{r4, r5, r6, lr}
 8015cda:	1e4a      	subs	r2, r1, #1
 8015cdc:	2568      	movs	r5, #104	; 0x68
 8015cde:	4355      	muls	r5, r2
 8015ce0:	460e      	mov	r6, r1
 8015ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015ce6:	f000 f993 	bl	8016010 <_malloc_r>
 8015cea:	4604      	mov	r4, r0
 8015cec:	b140      	cbz	r0, 8015d00 <__sfmoreglue+0x28>
 8015cee:	2100      	movs	r1, #0
 8015cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8015cf4:	300c      	adds	r0, #12
 8015cf6:	60a0      	str	r0, [r4, #8]
 8015cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015cfc:	f7ff fc86 	bl	801560c <memset>
 8015d00:	4620      	mov	r0, r4
 8015d02:	bd70      	pop	{r4, r5, r6, pc}

08015d04 <__sfp_lock_acquire>:
 8015d04:	4801      	ldr	r0, [pc, #4]	; (8015d0c <__sfp_lock_acquire+0x8>)
 8015d06:	f000 b8c5 	b.w	8015e94 <__retarget_lock_acquire_recursive>
 8015d0a:	bf00      	nop
 8015d0c:	2400534c 	.word	0x2400534c

08015d10 <__sfp_lock_release>:
 8015d10:	4801      	ldr	r0, [pc, #4]	; (8015d18 <__sfp_lock_release+0x8>)
 8015d12:	f000 b8c0 	b.w	8015e96 <__retarget_lock_release_recursive>
 8015d16:	bf00      	nop
 8015d18:	2400534c 	.word	0x2400534c

08015d1c <__sinit_lock_acquire>:
 8015d1c:	4801      	ldr	r0, [pc, #4]	; (8015d24 <__sinit_lock_acquire+0x8>)
 8015d1e:	f000 b8b9 	b.w	8015e94 <__retarget_lock_acquire_recursive>
 8015d22:	bf00      	nop
 8015d24:	24005347 	.word	0x24005347

08015d28 <__sinit_lock_release>:
 8015d28:	4801      	ldr	r0, [pc, #4]	; (8015d30 <__sinit_lock_release+0x8>)
 8015d2a:	f000 b8b4 	b.w	8015e96 <__retarget_lock_release_recursive>
 8015d2e:	bf00      	nop
 8015d30:	24005347 	.word	0x24005347

08015d34 <__sinit>:
 8015d34:	b510      	push	{r4, lr}
 8015d36:	4604      	mov	r4, r0
 8015d38:	f7ff fff0 	bl	8015d1c <__sinit_lock_acquire>
 8015d3c:	69a3      	ldr	r3, [r4, #24]
 8015d3e:	b11b      	cbz	r3, 8015d48 <__sinit+0x14>
 8015d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d44:	f7ff bff0 	b.w	8015d28 <__sinit_lock_release>
 8015d48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015d4c:	6523      	str	r3, [r4, #80]	; 0x50
 8015d4e:	4b13      	ldr	r3, [pc, #76]	; (8015d9c <__sinit+0x68>)
 8015d50:	4a13      	ldr	r2, [pc, #76]	; (8015da0 <__sinit+0x6c>)
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	62a2      	str	r2, [r4, #40]	; 0x28
 8015d56:	42a3      	cmp	r3, r4
 8015d58:	bf04      	itt	eq
 8015d5a:	2301      	moveq	r3, #1
 8015d5c:	61a3      	streq	r3, [r4, #24]
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f000 f820 	bl	8015da4 <__sfp>
 8015d64:	6060      	str	r0, [r4, #4]
 8015d66:	4620      	mov	r0, r4
 8015d68:	f000 f81c 	bl	8015da4 <__sfp>
 8015d6c:	60a0      	str	r0, [r4, #8]
 8015d6e:	4620      	mov	r0, r4
 8015d70:	f000 f818 	bl	8015da4 <__sfp>
 8015d74:	2200      	movs	r2, #0
 8015d76:	60e0      	str	r0, [r4, #12]
 8015d78:	2104      	movs	r1, #4
 8015d7a:	6860      	ldr	r0, [r4, #4]
 8015d7c:	f7ff ff82 	bl	8015c84 <std>
 8015d80:	68a0      	ldr	r0, [r4, #8]
 8015d82:	2201      	movs	r2, #1
 8015d84:	2109      	movs	r1, #9
 8015d86:	f7ff ff7d 	bl	8015c84 <std>
 8015d8a:	68e0      	ldr	r0, [r4, #12]
 8015d8c:	2202      	movs	r2, #2
 8015d8e:	2112      	movs	r1, #18
 8015d90:	f7ff ff78 	bl	8015c84 <std>
 8015d94:	2301      	movs	r3, #1
 8015d96:	61a3      	str	r3, [r4, #24]
 8015d98:	e7d2      	b.n	8015d40 <__sinit+0xc>
 8015d9a:	bf00      	nop
 8015d9c:	08016c78 	.word	0x08016c78
 8015da0:	08015ccd 	.word	0x08015ccd

08015da4 <__sfp>:
 8015da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015da6:	4607      	mov	r7, r0
 8015da8:	f7ff ffac 	bl	8015d04 <__sfp_lock_acquire>
 8015dac:	4b1e      	ldr	r3, [pc, #120]	; (8015e28 <__sfp+0x84>)
 8015dae:	681e      	ldr	r6, [r3, #0]
 8015db0:	69b3      	ldr	r3, [r6, #24]
 8015db2:	b913      	cbnz	r3, 8015dba <__sfp+0x16>
 8015db4:	4630      	mov	r0, r6
 8015db6:	f7ff ffbd 	bl	8015d34 <__sinit>
 8015dba:	3648      	adds	r6, #72	; 0x48
 8015dbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015dc0:	3b01      	subs	r3, #1
 8015dc2:	d503      	bpl.n	8015dcc <__sfp+0x28>
 8015dc4:	6833      	ldr	r3, [r6, #0]
 8015dc6:	b30b      	cbz	r3, 8015e0c <__sfp+0x68>
 8015dc8:	6836      	ldr	r6, [r6, #0]
 8015dca:	e7f7      	b.n	8015dbc <__sfp+0x18>
 8015dcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015dd0:	b9d5      	cbnz	r5, 8015e08 <__sfp+0x64>
 8015dd2:	4b16      	ldr	r3, [pc, #88]	; (8015e2c <__sfp+0x88>)
 8015dd4:	60e3      	str	r3, [r4, #12]
 8015dd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015dda:	6665      	str	r5, [r4, #100]	; 0x64
 8015ddc:	f000 f859 	bl	8015e92 <__retarget_lock_init_recursive>
 8015de0:	f7ff ff96 	bl	8015d10 <__sfp_lock_release>
 8015de4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015de8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015dec:	6025      	str	r5, [r4, #0]
 8015dee:	61a5      	str	r5, [r4, #24]
 8015df0:	2208      	movs	r2, #8
 8015df2:	4629      	mov	r1, r5
 8015df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015df8:	f7ff fc08 	bl	801560c <memset>
 8015dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015e04:	4620      	mov	r0, r4
 8015e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e08:	3468      	adds	r4, #104	; 0x68
 8015e0a:	e7d9      	b.n	8015dc0 <__sfp+0x1c>
 8015e0c:	2104      	movs	r1, #4
 8015e0e:	4638      	mov	r0, r7
 8015e10:	f7ff ff62 	bl	8015cd8 <__sfmoreglue>
 8015e14:	4604      	mov	r4, r0
 8015e16:	6030      	str	r0, [r6, #0]
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d1d5      	bne.n	8015dc8 <__sfp+0x24>
 8015e1c:	f7ff ff78 	bl	8015d10 <__sfp_lock_release>
 8015e20:	230c      	movs	r3, #12
 8015e22:	603b      	str	r3, [r7, #0]
 8015e24:	e7ee      	b.n	8015e04 <__sfp+0x60>
 8015e26:	bf00      	nop
 8015e28:	08016c78 	.word	0x08016c78
 8015e2c:	ffff0001 	.word	0xffff0001

08015e30 <fiprintf>:
 8015e30:	b40e      	push	{r1, r2, r3}
 8015e32:	b503      	push	{r0, r1, lr}
 8015e34:	4601      	mov	r1, r0
 8015e36:	ab03      	add	r3, sp, #12
 8015e38:	4805      	ldr	r0, [pc, #20]	; (8015e50 <fiprintf+0x20>)
 8015e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e3e:	6800      	ldr	r0, [r0, #0]
 8015e40:	9301      	str	r3, [sp, #4]
 8015e42:	f000 f969 	bl	8016118 <_vfiprintf_r>
 8015e46:	b002      	add	sp, #8
 8015e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e4c:	b003      	add	sp, #12
 8015e4e:	4770      	bx	lr
 8015e50:	24000090 	.word	0x24000090

08015e54 <_fwalk_reent>:
 8015e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e58:	4606      	mov	r6, r0
 8015e5a:	4688      	mov	r8, r1
 8015e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015e60:	2700      	movs	r7, #0
 8015e62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015e66:	f1b9 0901 	subs.w	r9, r9, #1
 8015e6a:	d505      	bpl.n	8015e78 <_fwalk_reent+0x24>
 8015e6c:	6824      	ldr	r4, [r4, #0]
 8015e6e:	2c00      	cmp	r4, #0
 8015e70:	d1f7      	bne.n	8015e62 <_fwalk_reent+0xe>
 8015e72:	4638      	mov	r0, r7
 8015e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e78:	89ab      	ldrh	r3, [r5, #12]
 8015e7a:	2b01      	cmp	r3, #1
 8015e7c:	d907      	bls.n	8015e8e <_fwalk_reent+0x3a>
 8015e7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e82:	3301      	adds	r3, #1
 8015e84:	d003      	beq.n	8015e8e <_fwalk_reent+0x3a>
 8015e86:	4629      	mov	r1, r5
 8015e88:	4630      	mov	r0, r6
 8015e8a:	47c0      	blx	r8
 8015e8c:	4307      	orrs	r7, r0
 8015e8e:	3568      	adds	r5, #104	; 0x68
 8015e90:	e7e9      	b.n	8015e66 <_fwalk_reent+0x12>

08015e92 <__retarget_lock_init_recursive>:
 8015e92:	4770      	bx	lr

08015e94 <__retarget_lock_acquire_recursive>:
 8015e94:	4770      	bx	lr

08015e96 <__retarget_lock_release_recursive>:
 8015e96:	4770      	bx	lr

08015e98 <__swhatbuf_r>:
 8015e98:	b570      	push	{r4, r5, r6, lr}
 8015e9a:	460e      	mov	r6, r1
 8015e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ea0:	2900      	cmp	r1, #0
 8015ea2:	b096      	sub	sp, #88	; 0x58
 8015ea4:	4614      	mov	r4, r2
 8015ea6:	461d      	mov	r5, r3
 8015ea8:	da07      	bge.n	8015eba <__swhatbuf_r+0x22>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	602b      	str	r3, [r5, #0]
 8015eae:	89b3      	ldrh	r3, [r6, #12]
 8015eb0:	061a      	lsls	r2, r3, #24
 8015eb2:	d410      	bmi.n	8015ed6 <__swhatbuf_r+0x3e>
 8015eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015eb8:	e00e      	b.n	8015ed8 <__swhatbuf_r+0x40>
 8015eba:	466a      	mov	r2, sp
 8015ebc:	f000 fc6e 	bl	801679c <_fstat_r>
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	dbf2      	blt.n	8015eaa <__swhatbuf_r+0x12>
 8015ec4:	9a01      	ldr	r2, [sp, #4]
 8015ec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015eca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ece:	425a      	negs	r2, r3
 8015ed0:	415a      	adcs	r2, r3
 8015ed2:	602a      	str	r2, [r5, #0]
 8015ed4:	e7ee      	b.n	8015eb4 <__swhatbuf_r+0x1c>
 8015ed6:	2340      	movs	r3, #64	; 0x40
 8015ed8:	2000      	movs	r0, #0
 8015eda:	6023      	str	r3, [r4, #0]
 8015edc:	b016      	add	sp, #88	; 0x58
 8015ede:	bd70      	pop	{r4, r5, r6, pc}

08015ee0 <__smakebuf_r>:
 8015ee0:	898b      	ldrh	r3, [r1, #12]
 8015ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ee4:	079d      	lsls	r5, r3, #30
 8015ee6:	4606      	mov	r6, r0
 8015ee8:	460c      	mov	r4, r1
 8015eea:	d507      	bpl.n	8015efc <__smakebuf_r+0x1c>
 8015eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ef0:	6023      	str	r3, [r4, #0]
 8015ef2:	6123      	str	r3, [r4, #16]
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	6163      	str	r3, [r4, #20]
 8015ef8:	b002      	add	sp, #8
 8015efa:	bd70      	pop	{r4, r5, r6, pc}
 8015efc:	ab01      	add	r3, sp, #4
 8015efe:	466a      	mov	r2, sp
 8015f00:	f7ff ffca 	bl	8015e98 <__swhatbuf_r>
 8015f04:	9900      	ldr	r1, [sp, #0]
 8015f06:	4605      	mov	r5, r0
 8015f08:	4630      	mov	r0, r6
 8015f0a:	f000 f881 	bl	8016010 <_malloc_r>
 8015f0e:	b948      	cbnz	r0, 8015f24 <__smakebuf_r+0x44>
 8015f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f14:	059a      	lsls	r2, r3, #22
 8015f16:	d4ef      	bmi.n	8015ef8 <__smakebuf_r+0x18>
 8015f18:	f023 0303 	bic.w	r3, r3, #3
 8015f1c:	f043 0302 	orr.w	r3, r3, #2
 8015f20:	81a3      	strh	r3, [r4, #12]
 8015f22:	e7e3      	b.n	8015eec <__smakebuf_r+0xc>
 8015f24:	4b0d      	ldr	r3, [pc, #52]	; (8015f5c <__smakebuf_r+0x7c>)
 8015f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f28:	89a3      	ldrh	r3, [r4, #12]
 8015f2a:	6020      	str	r0, [r4, #0]
 8015f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f30:	81a3      	strh	r3, [r4, #12]
 8015f32:	9b00      	ldr	r3, [sp, #0]
 8015f34:	6163      	str	r3, [r4, #20]
 8015f36:	9b01      	ldr	r3, [sp, #4]
 8015f38:	6120      	str	r0, [r4, #16]
 8015f3a:	b15b      	cbz	r3, 8015f54 <__smakebuf_r+0x74>
 8015f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f40:	4630      	mov	r0, r6
 8015f42:	f000 fc3d 	bl	80167c0 <_isatty_r>
 8015f46:	b128      	cbz	r0, 8015f54 <__smakebuf_r+0x74>
 8015f48:	89a3      	ldrh	r3, [r4, #12]
 8015f4a:	f023 0303 	bic.w	r3, r3, #3
 8015f4e:	f043 0301 	orr.w	r3, r3, #1
 8015f52:	81a3      	strh	r3, [r4, #12]
 8015f54:	89a0      	ldrh	r0, [r4, #12]
 8015f56:	4305      	orrs	r5, r0
 8015f58:	81a5      	strh	r5, [r4, #12]
 8015f5a:	e7cd      	b.n	8015ef8 <__smakebuf_r+0x18>
 8015f5c:	08015ccd 	.word	0x08015ccd

08015f60 <malloc>:
 8015f60:	4b02      	ldr	r3, [pc, #8]	; (8015f6c <malloc+0xc>)
 8015f62:	4601      	mov	r1, r0
 8015f64:	6818      	ldr	r0, [r3, #0]
 8015f66:	f000 b853 	b.w	8016010 <_malloc_r>
 8015f6a:	bf00      	nop
 8015f6c:	24000090 	.word	0x24000090

08015f70 <_free_r>:
 8015f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f72:	2900      	cmp	r1, #0
 8015f74:	d048      	beq.n	8016008 <_free_r+0x98>
 8015f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f7a:	9001      	str	r0, [sp, #4]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8015f82:	bfb8      	it	lt
 8015f84:	18e4      	addlt	r4, r4, r3
 8015f86:	f000 fc3d 	bl	8016804 <__malloc_lock>
 8015f8a:	4a20      	ldr	r2, [pc, #128]	; (801600c <_free_r+0x9c>)
 8015f8c:	9801      	ldr	r0, [sp, #4]
 8015f8e:	6813      	ldr	r3, [r2, #0]
 8015f90:	4615      	mov	r5, r2
 8015f92:	b933      	cbnz	r3, 8015fa2 <_free_r+0x32>
 8015f94:	6063      	str	r3, [r4, #4]
 8015f96:	6014      	str	r4, [r2, #0]
 8015f98:	b003      	add	sp, #12
 8015f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f9e:	f000 bc37 	b.w	8016810 <__malloc_unlock>
 8015fa2:	42a3      	cmp	r3, r4
 8015fa4:	d90b      	bls.n	8015fbe <_free_r+0x4e>
 8015fa6:	6821      	ldr	r1, [r4, #0]
 8015fa8:	1862      	adds	r2, r4, r1
 8015faa:	4293      	cmp	r3, r2
 8015fac:	bf04      	itt	eq
 8015fae:	681a      	ldreq	r2, [r3, #0]
 8015fb0:	685b      	ldreq	r3, [r3, #4]
 8015fb2:	6063      	str	r3, [r4, #4]
 8015fb4:	bf04      	itt	eq
 8015fb6:	1852      	addeq	r2, r2, r1
 8015fb8:	6022      	streq	r2, [r4, #0]
 8015fba:	602c      	str	r4, [r5, #0]
 8015fbc:	e7ec      	b.n	8015f98 <_free_r+0x28>
 8015fbe:	461a      	mov	r2, r3
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	b10b      	cbz	r3, 8015fc8 <_free_r+0x58>
 8015fc4:	42a3      	cmp	r3, r4
 8015fc6:	d9fa      	bls.n	8015fbe <_free_r+0x4e>
 8015fc8:	6811      	ldr	r1, [r2, #0]
 8015fca:	1855      	adds	r5, r2, r1
 8015fcc:	42a5      	cmp	r5, r4
 8015fce:	d10b      	bne.n	8015fe8 <_free_r+0x78>
 8015fd0:	6824      	ldr	r4, [r4, #0]
 8015fd2:	4421      	add	r1, r4
 8015fd4:	1854      	adds	r4, r2, r1
 8015fd6:	42a3      	cmp	r3, r4
 8015fd8:	6011      	str	r1, [r2, #0]
 8015fda:	d1dd      	bne.n	8015f98 <_free_r+0x28>
 8015fdc:	681c      	ldr	r4, [r3, #0]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	6053      	str	r3, [r2, #4]
 8015fe2:	4421      	add	r1, r4
 8015fe4:	6011      	str	r1, [r2, #0]
 8015fe6:	e7d7      	b.n	8015f98 <_free_r+0x28>
 8015fe8:	d902      	bls.n	8015ff0 <_free_r+0x80>
 8015fea:	230c      	movs	r3, #12
 8015fec:	6003      	str	r3, [r0, #0]
 8015fee:	e7d3      	b.n	8015f98 <_free_r+0x28>
 8015ff0:	6825      	ldr	r5, [r4, #0]
 8015ff2:	1961      	adds	r1, r4, r5
 8015ff4:	428b      	cmp	r3, r1
 8015ff6:	bf04      	itt	eq
 8015ff8:	6819      	ldreq	r1, [r3, #0]
 8015ffa:	685b      	ldreq	r3, [r3, #4]
 8015ffc:	6063      	str	r3, [r4, #4]
 8015ffe:	bf04      	itt	eq
 8016000:	1949      	addeq	r1, r1, r5
 8016002:	6021      	streq	r1, [r4, #0]
 8016004:	6054      	str	r4, [r2, #4]
 8016006:	e7c7      	b.n	8015f98 <_free_r+0x28>
 8016008:	b003      	add	sp, #12
 801600a:	bd30      	pop	{r4, r5, pc}
 801600c:	24002164 	.word	0x24002164

08016010 <_malloc_r>:
 8016010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016012:	1ccd      	adds	r5, r1, #3
 8016014:	f025 0503 	bic.w	r5, r5, #3
 8016018:	3508      	adds	r5, #8
 801601a:	2d0c      	cmp	r5, #12
 801601c:	bf38      	it	cc
 801601e:	250c      	movcc	r5, #12
 8016020:	2d00      	cmp	r5, #0
 8016022:	4606      	mov	r6, r0
 8016024:	db01      	blt.n	801602a <_malloc_r+0x1a>
 8016026:	42a9      	cmp	r1, r5
 8016028:	d903      	bls.n	8016032 <_malloc_r+0x22>
 801602a:	230c      	movs	r3, #12
 801602c:	6033      	str	r3, [r6, #0]
 801602e:	2000      	movs	r0, #0
 8016030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016032:	f000 fbe7 	bl	8016804 <__malloc_lock>
 8016036:	4921      	ldr	r1, [pc, #132]	; (80160bc <_malloc_r+0xac>)
 8016038:	680a      	ldr	r2, [r1, #0]
 801603a:	4614      	mov	r4, r2
 801603c:	b99c      	cbnz	r4, 8016066 <_malloc_r+0x56>
 801603e:	4f20      	ldr	r7, [pc, #128]	; (80160c0 <_malloc_r+0xb0>)
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	b923      	cbnz	r3, 801604e <_malloc_r+0x3e>
 8016044:	4621      	mov	r1, r4
 8016046:	4630      	mov	r0, r6
 8016048:	f000 fb2a 	bl	80166a0 <_sbrk_r>
 801604c:	6038      	str	r0, [r7, #0]
 801604e:	4629      	mov	r1, r5
 8016050:	4630      	mov	r0, r6
 8016052:	f000 fb25 	bl	80166a0 <_sbrk_r>
 8016056:	1c43      	adds	r3, r0, #1
 8016058:	d123      	bne.n	80160a2 <_malloc_r+0x92>
 801605a:	230c      	movs	r3, #12
 801605c:	6033      	str	r3, [r6, #0]
 801605e:	4630      	mov	r0, r6
 8016060:	f000 fbd6 	bl	8016810 <__malloc_unlock>
 8016064:	e7e3      	b.n	801602e <_malloc_r+0x1e>
 8016066:	6823      	ldr	r3, [r4, #0]
 8016068:	1b5b      	subs	r3, r3, r5
 801606a:	d417      	bmi.n	801609c <_malloc_r+0x8c>
 801606c:	2b0b      	cmp	r3, #11
 801606e:	d903      	bls.n	8016078 <_malloc_r+0x68>
 8016070:	6023      	str	r3, [r4, #0]
 8016072:	441c      	add	r4, r3
 8016074:	6025      	str	r5, [r4, #0]
 8016076:	e004      	b.n	8016082 <_malloc_r+0x72>
 8016078:	6863      	ldr	r3, [r4, #4]
 801607a:	42a2      	cmp	r2, r4
 801607c:	bf0c      	ite	eq
 801607e:	600b      	streq	r3, [r1, #0]
 8016080:	6053      	strne	r3, [r2, #4]
 8016082:	4630      	mov	r0, r6
 8016084:	f000 fbc4 	bl	8016810 <__malloc_unlock>
 8016088:	f104 000b 	add.w	r0, r4, #11
 801608c:	1d23      	adds	r3, r4, #4
 801608e:	f020 0007 	bic.w	r0, r0, #7
 8016092:	1ac2      	subs	r2, r0, r3
 8016094:	d0cc      	beq.n	8016030 <_malloc_r+0x20>
 8016096:	1a1b      	subs	r3, r3, r0
 8016098:	50a3      	str	r3, [r4, r2]
 801609a:	e7c9      	b.n	8016030 <_malloc_r+0x20>
 801609c:	4622      	mov	r2, r4
 801609e:	6864      	ldr	r4, [r4, #4]
 80160a0:	e7cc      	b.n	801603c <_malloc_r+0x2c>
 80160a2:	1cc4      	adds	r4, r0, #3
 80160a4:	f024 0403 	bic.w	r4, r4, #3
 80160a8:	42a0      	cmp	r0, r4
 80160aa:	d0e3      	beq.n	8016074 <_malloc_r+0x64>
 80160ac:	1a21      	subs	r1, r4, r0
 80160ae:	4630      	mov	r0, r6
 80160b0:	f000 faf6 	bl	80166a0 <_sbrk_r>
 80160b4:	3001      	adds	r0, #1
 80160b6:	d1dd      	bne.n	8016074 <_malloc_r+0x64>
 80160b8:	e7cf      	b.n	801605a <_malloc_r+0x4a>
 80160ba:	bf00      	nop
 80160bc:	24002164 	.word	0x24002164
 80160c0:	24002168 	.word	0x24002168

080160c4 <__sfputc_r>:
 80160c4:	6893      	ldr	r3, [r2, #8]
 80160c6:	3b01      	subs	r3, #1
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	b410      	push	{r4}
 80160cc:	6093      	str	r3, [r2, #8]
 80160ce:	da08      	bge.n	80160e2 <__sfputc_r+0x1e>
 80160d0:	6994      	ldr	r4, [r2, #24]
 80160d2:	42a3      	cmp	r3, r4
 80160d4:	db01      	blt.n	80160da <__sfputc_r+0x16>
 80160d6:	290a      	cmp	r1, #10
 80160d8:	d103      	bne.n	80160e2 <__sfputc_r+0x1e>
 80160da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160de:	f7ff bc31 	b.w	8015944 <__swbuf_r>
 80160e2:	6813      	ldr	r3, [r2, #0]
 80160e4:	1c58      	adds	r0, r3, #1
 80160e6:	6010      	str	r0, [r2, #0]
 80160e8:	7019      	strb	r1, [r3, #0]
 80160ea:	4608      	mov	r0, r1
 80160ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160f0:	4770      	bx	lr

080160f2 <__sfputs_r>:
 80160f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160f4:	4606      	mov	r6, r0
 80160f6:	460f      	mov	r7, r1
 80160f8:	4614      	mov	r4, r2
 80160fa:	18d5      	adds	r5, r2, r3
 80160fc:	42ac      	cmp	r4, r5
 80160fe:	d101      	bne.n	8016104 <__sfputs_r+0x12>
 8016100:	2000      	movs	r0, #0
 8016102:	e007      	b.n	8016114 <__sfputs_r+0x22>
 8016104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016108:	463a      	mov	r2, r7
 801610a:	4630      	mov	r0, r6
 801610c:	f7ff ffda 	bl	80160c4 <__sfputc_r>
 8016110:	1c43      	adds	r3, r0, #1
 8016112:	d1f3      	bne.n	80160fc <__sfputs_r+0xa>
 8016114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016118 <_vfiprintf_r>:
 8016118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801611c:	460d      	mov	r5, r1
 801611e:	b09d      	sub	sp, #116	; 0x74
 8016120:	4614      	mov	r4, r2
 8016122:	4698      	mov	r8, r3
 8016124:	4606      	mov	r6, r0
 8016126:	b118      	cbz	r0, 8016130 <_vfiprintf_r+0x18>
 8016128:	6983      	ldr	r3, [r0, #24]
 801612a:	b90b      	cbnz	r3, 8016130 <_vfiprintf_r+0x18>
 801612c:	f7ff fe02 	bl	8015d34 <__sinit>
 8016130:	4b89      	ldr	r3, [pc, #548]	; (8016358 <_vfiprintf_r+0x240>)
 8016132:	429d      	cmp	r5, r3
 8016134:	d11b      	bne.n	801616e <_vfiprintf_r+0x56>
 8016136:	6875      	ldr	r5, [r6, #4]
 8016138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801613a:	07d9      	lsls	r1, r3, #31
 801613c:	d405      	bmi.n	801614a <_vfiprintf_r+0x32>
 801613e:	89ab      	ldrh	r3, [r5, #12]
 8016140:	059a      	lsls	r2, r3, #22
 8016142:	d402      	bmi.n	801614a <_vfiprintf_r+0x32>
 8016144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016146:	f7ff fea5 	bl	8015e94 <__retarget_lock_acquire_recursive>
 801614a:	89ab      	ldrh	r3, [r5, #12]
 801614c:	071b      	lsls	r3, r3, #28
 801614e:	d501      	bpl.n	8016154 <_vfiprintf_r+0x3c>
 8016150:	692b      	ldr	r3, [r5, #16]
 8016152:	b9eb      	cbnz	r3, 8016190 <_vfiprintf_r+0x78>
 8016154:	4629      	mov	r1, r5
 8016156:	4630      	mov	r0, r6
 8016158:	f7ff fc46 	bl	80159e8 <__swsetup_r>
 801615c:	b1c0      	cbz	r0, 8016190 <_vfiprintf_r+0x78>
 801615e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016160:	07dc      	lsls	r4, r3, #31
 8016162:	d50e      	bpl.n	8016182 <_vfiprintf_r+0x6a>
 8016164:	f04f 30ff 	mov.w	r0, #4294967295
 8016168:	b01d      	add	sp, #116	; 0x74
 801616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801616e:	4b7b      	ldr	r3, [pc, #492]	; (801635c <_vfiprintf_r+0x244>)
 8016170:	429d      	cmp	r5, r3
 8016172:	d101      	bne.n	8016178 <_vfiprintf_r+0x60>
 8016174:	68b5      	ldr	r5, [r6, #8]
 8016176:	e7df      	b.n	8016138 <_vfiprintf_r+0x20>
 8016178:	4b79      	ldr	r3, [pc, #484]	; (8016360 <_vfiprintf_r+0x248>)
 801617a:	429d      	cmp	r5, r3
 801617c:	bf08      	it	eq
 801617e:	68f5      	ldreq	r5, [r6, #12]
 8016180:	e7da      	b.n	8016138 <_vfiprintf_r+0x20>
 8016182:	89ab      	ldrh	r3, [r5, #12]
 8016184:	0598      	lsls	r0, r3, #22
 8016186:	d4ed      	bmi.n	8016164 <_vfiprintf_r+0x4c>
 8016188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801618a:	f7ff fe84 	bl	8015e96 <__retarget_lock_release_recursive>
 801618e:	e7e9      	b.n	8016164 <_vfiprintf_r+0x4c>
 8016190:	2300      	movs	r3, #0
 8016192:	9309      	str	r3, [sp, #36]	; 0x24
 8016194:	2320      	movs	r3, #32
 8016196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801619a:	f8cd 800c 	str.w	r8, [sp, #12]
 801619e:	2330      	movs	r3, #48	; 0x30
 80161a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016364 <_vfiprintf_r+0x24c>
 80161a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80161a8:	f04f 0901 	mov.w	r9, #1
 80161ac:	4623      	mov	r3, r4
 80161ae:	469a      	mov	sl, r3
 80161b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161b4:	b10a      	cbz	r2, 80161ba <_vfiprintf_r+0xa2>
 80161b6:	2a25      	cmp	r2, #37	; 0x25
 80161b8:	d1f9      	bne.n	80161ae <_vfiprintf_r+0x96>
 80161ba:	ebba 0b04 	subs.w	fp, sl, r4
 80161be:	d00b      	beq.n	80161d8 <_vfiprintf_r+0xc0>
 80161c0:	465b      	mov	r3, fp
 80161c2:	4622      	mov	r2, r4
 80161c4:	4629      	mov	r1, r5
 80161c6:	4630      	mov	r0, r6
 80161c8:	f7ff ff93 	bl	80160f2 <__sfputs_r>
 80161cc:	3001      	adds	r0, #1
 80161ce:	f000 80aa 	beq.w	8016326 <_vfiprintf_r+0x20e>
 80161d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80161d4:	445a      	add	r2, fp
 80161d6:	9209      	str	r2, [sp, #36]	; 0x24
 80161d8:	f89a 3000 	ldrb.w	r3, [sl]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	f000 80a2 	beq.w	8016326 <_vfiprintf_r+0x20e>
 80161e2:	2300      	movs	r3, #0
 80161e4:	f04f 32ff 	mov.w	r2, #4294967295
 80161e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161ec:	f10a 0a01 	add.w	sl, sl, #1
 80161f0:	9304      	str	r3, [sp, #16]
 80161f2:	9307      	str	r3, [sp, #28]
 80161f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80161f8:	931a      	str	r3, [sp, #104]	; 0x68
 80161fa:	4654      	mov	r4, sl
 80161fc:	2205      	movs	r2, #5
 80161fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016202:	4858      	ldr	r0, [pc, #352]	; (8016364 <_vfiprintf_r+0x24c>)
 8016204:	f7ea f98c 	bl	8000520 <memchr>
 8016208:	9a04      	ldr	r2, [sp, #16]
 801620a:	b9d8      	cbnz	r0, 8016244 <_vfiprintf_r+0x12c>
 801620c:	06d1      	lsls	r1, r2, #27
 801620e:	bf44      	itt	mi
 8016210:	2320      	movmi	r3, #32
 8016212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016216:	0713      	lsls	r3, r2, #28
 8016218:	bf44      	itt	mi
 801621a:	232b      	movmi	r3, #43	; 0x2b
 801621c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016220:	f89a 3000 	ldrb.w	r3, [sl]
 8016224:	2b2a      	cmp	r3, #42	; 0x2a
 8016226:	d015      	beq.n	8016254 <_vfiprintf_r+0x13c>
 8016228:	9a07      	ldr	r2, [sp, #28]
 801622a:	4654      	mov	r4, sl
 801622c:	2000      	movs	r0, #0
 801622e:	f04f 0c0a 	mov.w	ip, #10
 8016232:	4621      	mov	r1, r4
 8016234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016238:	3b30      	subs	r3, #48	; 0x30
 801623a:	2b09      	cmp	r3, #9
 801623c:	d94e      	bls.n	80162dc <_vfiprintf_r+0x1c4>
 801623e:	b1b0      	cbz	r0, 801626e <_vfiprintf_r+0x156>
 8016240:	9207      	str	r2, [sp, #28]
 8016242:	e014      	b.n	801626e <_vfiprintf_r+0x156>
 8016244:	eba0 0308 	sub.w	r3, r0, r8
 8016248:	fa09 f303 	lsl.w	r3, r9, r3
 801624c:	4313      	orrs	r3, r2
 801624e:	9304      	str	r3, [sp, #16]
 8016250:	46a2      	mov	sl, r4
 8016252:	e7d2      	b.n	80161fa <_vfiprintf_r+0xe2>
 8016254:	9b03      	ldr	r3, [sp, #12]
 8016256:	1d19      	adds	r1, r3, #4
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	9103      	str	r1, [sp, #12]
 801625c:	2b00      	cmp	r3, #0
 801625e:	bfbb      	ittet	lt
 8016260:	425b      	neglt	r3, r3
 8016262:	f042 0202 	orrlt.w	r2, r2, #2
 8016266:	9307      	strge	r3, [sp, #28]
 8016268:	9307      	strlt	r3, [sp, #28]
 801626a:	bfb8      	it	lt
 801626c:	9204      	strlt	r2, [sp, #16]
 801626e:	7823      	ldrb	r3, [r4, #0]
 8016270:	2b2e      	cmp	r3, #46	; 0x2e
 8016272:	d10c      	bne.n	801628e <_vfiprintf_r+0x176>
 8016274:	7863      	ldrb	r3, [r4, #1]
 8016276:	2b2a      	cmp	r3, #42	; 0x2a
 8016278:	d135      	bne.n	80162e6 <_vfiprintf_r+0x1ce>
 801627a:	9b03      	ldr	r3, [sp, #12]
 801627c:	1d1a      	adds	r2, r3, #4
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	9203      	str	r2, [sp, #12]
 8016282:	2b00      	cmp	r3, #0
 8016284:	bfb8      	it	lt
 8016286:	f04f 33ff 	movlt.w	r3, #4294967295
 801628a:	3402      	adds	r4, #2
 801628c:	9305      	str	r3, [sp, #20]
 801628e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016374 <_vfiprintf_r+0x25c>
 8016292:	7821      	ldrb	r1, [r4, #0]
 8016294:	2203      	movs	r2, #3
 8016296:	4650      	mov	r0, sl
 8016298:	f7ea f942 	bl	8000520 <memchr>
 801629c:	b140      	cbz	r0, 80162b0 <_vfiprintf_r+0x198>
 801629e:	2340      	movs	r3, #64	; 0x40
 80162a0:	eba0 000a 	sub.w	r0, r0, sl
 80162a4:	fa03 f000 	lsl.w	r0, r3, r0
 80162a8:	9b04      	ldr	r3, [sp, #16]
 80162aa:	4303      	orrs	r3, r0
 80162ac:	3401      	adds	r4, #1
 80162ae:	9304      	str	r3, [sp, #16]
 80162b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162b4:	482c      	ldr	r0, [pc, #176]	; (8016368 <_vfiprintf_r+0x250>)
 80162b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80162ba:	2206      	movs	r2, #6
 80162bc:	f7ea f930 	bl	8000520 <memchr>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d03f      	beq.n	8016344 <_vfiprintf_r+0x22c>
 80162c4:	4b29      	ldr	r3, [pc, #164]	; (801636c <_vfiprintf_r+0x254>)
 80162c6:	bb1b      	cbnz	r3, 8016310 <_vfiprintf_r+0x1f8>
 80162c8:	9b03      	ldr	r3, [sp, #12]
 80162ca:	3307      	adds	r3, #7
 80162cc:	f023 0307 	bic.w	r3, r3, #7
 80162d0:	3308      	adds	r3, #8
 80162d2:	9303      	str	r3, [sp, #12]
 80162d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162d6:	443b      	add	r3, r7
 80162d8:	9309      	str	r3, [sp, #36]	; 0x24
 80162da:	e767      	b.n	80161ac <_vfiprintf_r+0x94>
 80162dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80162e0:	460c      	mov	r4, r1
 80162e2:	2001      	movs	r0, #1
 80162e4:	e7a5      	b.n	8016232 <_vfiprintf_r+0x11a>
 80162e6:	2300      	movs	r3, #0
 80162e8:	3401      	adds	r4, #1
 80162ea:	9305      	str	r3, [sp, #20]
 80162ec:	4619      	mov	r1, r3
 80162ee:	f04f 0c0a 	mov.w	ip, #10
 80162f2:	4620      	mov	r0, r4
 80162f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162f8:	3a30      	subs	r2, #48	; 0x30
 80162fa:	2a09      	cmp	r2, #9
 80162fc:	d903      	bls.n	8016306 <_vfiprintf_r+0x1ee>
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d0c5      	beq.n	801628e <_vfiprintf_r+0x176>
 8016302:	9105      	str	r1, [sp, #20]
 8016304:	e7c3      	b.n	801628e <_vfiprintf_r+0x176>
 8016306:	fb0c 2101 	mla	r1, ip, r1, r2
 801630a:	4604      	mov	r4, r0
 801630c:	2301      	movs	r3, #1
 801630e:	e7f0      	b.n	80162f2 <_vfiprintf_r+0x1da>
 8016310:	ab03      	add	r3, sp, #12
 8016312:	9300      	str	r3, [sp, #0]
 8016314:	462a      	mov	r2, r5
 8016316:	4b16      	ldr	r3, [pc, #88]	; (8016370 <_vfiprintf_r+0x258>)
 8016318:	a904      	add	r1, sp, #16
 801631a:	4630      	mov	r0, r6
 801631c:	f3af 8000 	nop.w
 8016320:	4607      	mov	r7, r0
 8016322:	1c78      	adds	r0, r7, #1
 8016324:	d1d6      	bne.n	80162d4 <_vfiprintf_r+0x1bc>
 8016326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016328:	07d9      	lsls	r1, r3, #31
 801632a:	d405      	bmi.n	8016338 <_vfiprintf_r+0x220>
 801632c:	89ab      	ldrh	r3, [r5, #12]
 801632e:	059a      	lsls	r2, r3, #22
 8016330:	d402      	bmi.n	8016338 <_vfiprintf_r+0x220>
 8016332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016334:	f7ff fdaf 	bl	8015e96 <__retarget_lock_release_recursive>
 8016338:	89ab      	ldrh	r3, [r5, #12]
 801633a:	065b      	lsls	r3, r3, #25
 801633c:	f53f af12 	bmi.w	8016164 <_vfiprintf_r+0x4c>
 8016340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016342:	e711      	b.n	8016168 <_vfiprintf_r+0x50>
 8016344:	ab03      	add	r3, sp, #12
 8016346:	9300      	str	r3, [sp, #0]
 8016348:	462a      	mov	r2, r5
 801634a:	4b09      	ldr	r3, [pc, #36]	; (8016370 <_vfiprintf_r+0x258>)
 801634c:	a904      	add	r1, sp, #16
 801634e:	4630      	mov	r0, r6
 8016350:	f000 f880 	bl	8016454 <_printf_i>
 8016354:	e7e4      	b.n	8016320 <_vfiprintf_r+0x208>
 8016356:	bf00      	nop
 8016358:	08016d50 	.word	0x08016d50
 801635c:	08016d70 	.word	0x08016d70
 8016360:	08016d30 	.word	0x08016d30
 8016364:	08016d90 	.word	0x08016d90
 8016368:	08016d9a 	.word	0x08016d9a
 801636c:	00000000 	.word	0x00000000
 8016370:	080160f3 	.word	0x080160f3
 8016374:	08016d96 	.word	0x08016d96

08016378 <_printf_common>:
 8016378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801637c:	4616      	mov	r6, r2
 801637e:	4699      	mov	r9, r3
 8016380:	688a      	ldr	r2, [r1, #8]
 8016382:	690b      	ldr	r3, [r1, #16]
 8016384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016388:	4293      	cmp	r3, r2
 801638a:	bfb8      	it	lt
 801638c:	4613      	movlt	r3, r2
 801638e:	6033      	str	r3, [r6, #0]
 8016390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016394:	4607      	mov	r7, r0
 8016396:	460c      	mov	r4, r1
 8016398:	b10a      	cbz	r2, 801639e <_printf_common+0x26>
 801639a:	3301      	adds	r3, #1
 801639c:	6033      	str	r3, [r6, #0]
 801639e:	6823      	ldr	r3, [r4, #0]
 80163a0:	0699      	lsls	r1, r3, #26
 80163a2:	bf42      	ittt	mi
 80163a4:	6833      	ldrmi	r3, [r6, #0]
 80163a6:	3302      	addmi	r3, #2
 80163a8:	6033      	strmi	r3, [r6, #0]
 80163aa:	6825      	ldr	r5, [r4, #0]
 80163ac:	f015 0506 	ands.w	r5, r5, #6
 80163b0:	d106      	bne.n	80163c0 <_printf_common+0x48>
 80163b2:	f104 0a19 	add.w	sl, r4, #25
 80163b6:	68e3      	ldr	r3, [r4, #12]
 80163b8:	6832      	ldr	r2, [r6, #0]
 80163ba:	1a9b      	subs	r3, r3, r2
 80163bc:	42ab      	cmp	r3, r5
 80163be:	dc26      	bgt.n	801640e <_printf_common+0x96>
 80163c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80163c4:	1e13      	subs	r3, r2, #0
 80163c6:	6822      	ldr	r2, [r4, #0]
 80163c8:	bf18      	it	ne
 80163ca:	2301      	movne	r3, #1
 80163cc:	0692      	lsls	r2, r2, #26
 80163ce:	d42b      	bmi.n	8016428 <_printf_common+0xb0>
 80163d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80163d4:	4649      	mov	r1, r9
 80163d6:	4638      	mov	r0, r7
 80163d8:	47c0      	blx	r8
 80163da:	3001      	adds	r0, #1
 80163dc:	d01e      	beq.n	801641c <_printf_common+0xa4>
 80163de:	6823      	ldr	r3, [r4, #0]
 80163e0:	68e5      	ldr	r5, [r4, #12]
 80163e2:	6832      	ldr	r2, [r6, #0]
 80163e4:	f003 0306 	and.w	r3, r3, #6
 80163e8:	2b04      	cmp	r3, #4
 80163ea:	bf08      	it	eq
 80163ec:	1aad      	subeq	r5, r5, r2
 80163ee:	68a3      	ldr	r3, [r4, #8]
 80163f0:	6922      	ldr	r2, [r4, #16]
 80163f2:	bf0c      	ite	eq
 80163f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80163f8:	2500      	movne	r5, #0
 80163fa:	4293      	cmp	r3, r2
 80163fc:	bfc4      	itt	gt
 80163fe:	1a9b      	subgt	r3, r3, r2
 8016400:	18ed      	addgt	r5, r5, r3
 8016402:	2600      	movs	r6, #0
 8016404:	341a      	adds	r4, #26
 8016406:	42b5      	cmp	r5, r6
 8016408:	d11a      	bne.n	8016440 <_printf_common+0xc8>
 801640a:	2000      	movs	r0, #0
 801640c:	e008      	b.n	8016420 <_printf_common+0xa8>
 801640e:	2301      	movs	r3, #1
 8016410:	4652      	mov	r2, sl
 8016412:	4649      	mov	r1, r9
 8016414:	4638      	mov	r0, r7
 8016416:	47c0      	blx	r8
 8016418:	3001      	adds	r0, #1
 801641a:	d103      	bne.n	8016424 <_printf_common+0xac>
 801641c:	f04f 30ff 	mov.w	r0, #4294967295
 8016420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016424:	3501      	adds	r5, #1
 8016426:	e7c6      	b.n	80163b6 <_printf_common+0x3e>
 8016428:	18e1      	adds	r1, r4, r3
 801642a:	1c5a      	adds	r2, r3, #1
 801642c:	2030      	movs	r0, #48	; 0x30
 801642e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016432:	4422      	add	r2, r4
 8016434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801643c:	3302      	adds	r3, #2
 801643e:	e7c7      	b.n	80163d0 <_printf_common+0x58>
 8016440:	2301      	movs	r3, #1
 8016442:	4622      	mov	r2, r4
 8016444:	4649      	mov	r1, r9
 8016446:	4638      	mov	r0, r7
 8016448:	47c0      	blx	r8
 801644a:	3001      	adds	r0, #1
 801644c:	d0e6      	beq.n	801641c <_printf_common+0xa4>
 801644e:	3601      	adds	r6, #1
 8016450:	e7d9      	b.n	8016406 <_printf_common+0x8e>
	...

08016454 <_printf_i>:
 8016454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016458:	460c      	mov	r4, r1
 801645a:	4691      	mov	r9, r2
 801645c:	7e27      	ldrb	r7, [r4, #24]
 801645e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016460:	2f78      	cmp	r7, #120	; 0x78
 8016462:	4680      	mov	r8, r0
 8016464:	469a      	mov	sl, r3
 8016466:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801646a:	d807      	bhi.n	801647c <_printf_i+0x28>
 801646c:	2f62      	cmp	r7, #98	; 0x62
 801646e:	d80a      	bhi.n	8016486 <_printf_i+0x32>
 8016470:	2f00      	cmp	r7, #0
 8016472:	f000 80d8 	beq.w	8016626 <_printf_i+0x1d2>
 8016476:	2f58      	cmp	r7, #88	; 0x58
 8016478:	f000 80a3 	beq.w	80165c2 <_printf_i+0x16e>
 801647c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016484:	e03a      	b.n	80164fc <_printf_i+0xa8>
 8016486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801648a:	2b15      	cmp	r3, #21
 801648c:	d8f6      	bhi.n	801647c <_printf_i+0x28>
 801648e:	a001      	add	r0, pc, #4	; (adr r0, 8016494 <_printf_i+0x40>)
 8016490:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016494:	080164ed 	.word	0x080164ed
 8016498:	08016501 	.word	0x08016501
 801649c:	0801647d 	.word	0x0801647d
 80164a0:	0801647d 	.word	0x0801647d
 80164a4:	0801647d 	.word	0x0801647d
 80164a8:	0801647d 	.word	0x0801647d
 80164ac:	08016501 	.word	0x08016501
 80164b0:	0801647d 	.word	0x0801647d
 80164b4:	0801647d 	.word	0x0801647d
 80164b8:	0801647d 	.word	0x0801647d
 80164bc:	0801647d 	.word	0x0801647d
 80164c0:	0801660d 	.word	0x0801660d
 80164c4:	08016531 	.word	0x08016531
 80164c8:	080165ef 	.word	0x080165ef
 80164cc:	0801647d 	.word	0x0801647d
 80164d0:	0801647d 	.word	0x0801647d
 80164d4:	0801662f 	.word	0x0801662f
 80164d8:	0801647d 	.word	0x0801647d
 80164dc:	08016531 	.word	0x08016531
 80164e0:	0801647d 	.word	0x0801647d
 80164e4:	0801647d 	.word	0x0801647d
 80164e8:	080165f7 	.word	0x080165f7
 80164ec:	680b      	ldr	r3, [r1, #0]
 80164ee:	1d1a      	adds	r2, r3, #4
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	600a      	str	r2, [r1, #0]
 80164f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80164f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80164fc:	2301      	movs	r3, #1
 80164fe:	e0a3      	b.n	8016648 <_printf_i+0x1f4>
 8016500:	6825      	ldr	r5, [r4, #0]
 8016502:	6808      	ldr	r0, [r1, #0]
 8016504:	062e      	lsls	r6, r5, #24
 8016506:	f100 0304 	add.w	r3, r0, #4
 801650a:	d50a      	bpl.n	8016522 <_printf_i+0xce>
 801650c:	6805      	ldr	r5, [r0, #0]
 801650e:	600b      	str	r3, [r1, #0]
 8016510:	2d00      	cmp	r5, #0
 8016512:	da03      	bge.n	801651c <_printf_i+0xc8>
 8016514:	232d      	movs	r3, #45	; 0x2d
 8016516:	426d      	negs	r5, r5
 8016518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801651c:	485e      	ldr	r0, [pc, #376]	; (8016698 <_printf_i+0x244>)
 801651e:	230a      	movs	r3, #10
 8016520:	e019      	b.n	8016556 <_printf_i+0x102>
 8016522:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016526:	6805      	ldr	r5, [r0, #0]
 8016528:	600b      	str	r3, [r1, #0]
 801652a:	bf18      	it	ne
 801652c:	b22d      	sxthne	r5, r5
 801652e:	e7ef      	b.n	8016510 <_printf_i+0xbc>
 8016530:	680b      	ldr	r3, [r1, #0]
 8016532:	6825      	ldr	r5, [r4, #0]
 8016534:	1d18      	adds	r0, r3, #4
 8016536:	6008      	str	r0, [r1, #0]
 8016538:	0628      	lsls	r0, r5, #24
 801653a:	d501      	bpl.n	8016540 <_printf_i+0xec>
 801653c:	681d      	ldr	r5, [r3, #0]
 801653e:	e002      	b.n	8016546 <_printf_i+0xf2>
 8016540:	0669      	lsls	r1, r5, #25
 8016542:	d5fb      	bpl.n	801653c <_printf_i+0xe8>
 8016544:	881d      	ldrh	r5, [r3, #0]
 8016546:	4854      	ldr	r0, [pc, #336]	; (8016698 <_printf_i+0x244>)
 8016548:	2f6f      	cmp	r7, #111	; 0x6f
 801654a:	bf0c      	ite	eq
 801654c:	2308      	moveq	r3, #8
 801654e:	230a      	movne	r3, #10
 8016550:	2100      	movs	r1, #0
 8016552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016556:	6866      	ldr	r6, [r4, #4]
 8016558:	60a6      	str	r6, [r4, #8]
 801655a:	2e00      	cmp	r6, #0
 801655c:	bfa2      	ittt	ge
 801655e:	6821      	ldrge	r1, [r4, #0]
 8016560:	f021 0104 	bicge.w	r1, r1, #4
 8016564:	6021      	strge	r1, [r4, #0]
 8016566:	b90d      	cbnz	r5, 801656c <_printf_i+0x118>
 8016568:	2e00      	cmp	r6, #0
 801656a:	d04d      	beq.n	8016608 <_printf_i+0x1b4>
 801656c:	4616      	mov	r6, r2
 801656e:	fbb5 f1f3 	udiv	r1, r5, r3
 8016572:	fb03 5711 	mls	r7, r3, r1, r5
 8016576:	5dc7      	ldrb	r7, [r0, r7]
 8016578:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801657c:	462f      	mov	r7, r5
 801657e:	42bb      	cmp	r3, r7
 8016580:	460d      	mov	r5, r1
 8016582:	d9f4      	bls.n	801656e <_printf_i+0x11a>
 8016584:	2b08      	cmp	r3, #8
 8016586:	d10b      	bne.n	80165a0 <_printf_i+0x14c>
 8016588:	6823      	ldr	r3, [r4, #0]
 801658a:	07df      	lsls	r7, r3, #31
 801658c:	d508      	bpl.n	80165a0 <_printf_i+0x14c>
 801658e:	6923      	ldr	r3, [r4, #16]
 8016590:	6861      	ldr	r1, [r4, #4]
 8016592:	4299      	cmp	r1, r3
 8016594:	bfde      	ittt	le
 8016596:	2330      	movle	r3, #48	; 0x30
 8016598:	f806 3c01 	strble.w	r3, [r6, #-1]
 801659c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80165a0:	1b92      	subs	r2, r2, r6
 80165a2:	6122      	str	r2, [r4, #16]
 80165a4:	f8cd a000 	str.w	sl, [sp]
 80165a8:	464b      	mov	r3, r9
 80165aa:	aa03      	add	r2, sp, #12
 80165ac:	4621      	mov	r1, r4
 80165ae:	4640      	mov	r0, r8
 80165b0:	f7ff fee2 	bl	8016378 <_printf_common>
 80165b4:	3001      	adds	r0, #1
 80165b6:	d14c      	bne.n	8016652 <_printf_i+0x1fe>
 80165b8:	f04f 30ff 	mov.w	r0, #4294967295
 80165bc:	b004      	add	sp, #16
 80165be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165c2:	4835      	ldr	r0, [pc, #212]	; (8016698 <_printf_i+0x244>)
 80165c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80165c8:	6823      	ldr	r3, [r4, #0]
 80165ca:	680e      	ldr	r6, [r1, #0]
 80165cc:	061f      	lsls	r7, r3, #24
 80165ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80165d2:	600e      	str	r6, [r1, #0]
 80165d4:	d514      	bpl.n	8016600 <_printf_i+0x1ac>
 80165d6:	07d9      	lsls	r1, r3, #31
 80165d8:	bf44      	itt	mi
 80165da:	f043 0320 	orrmi.w	r3, r3, #32
 80165de:	6023      	strmi	r3, [r4, #0]
 80165e0:	b91d      	cbnz	r5, 80165ea <_printf_i+0x196>
 80165e2:	6823      	ldr	r3, [r4, #0]
 80165e4:	f023 0320 	bic.w	r3, r3, #32
 80165e8:	6023      	str	r3, [r4, #0]
 80165ea:	2310      	movs	r3, #16
 80165ec:	e7b0      	b.n	8016550 <_printf_i+0xfc>
 80165ee:	6823      	ldr	r3, [r4, #0]
 80165f0:	f043 0320 	orr.w	r3, r3, #32
 80165f4:	6023      	str	r3, [r4, #0]
 80165f6:	2378      	movs	r3, #120	; 0x78
 80165f8:	4828      	ldr	r0, [pc, #160]	; (801669c <_printf_i+0x248>)
 80165fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80165fe:	e7e3      	b.n	80165c8 <_printf_i+0x174>
 8016600:	065e      	lsls	r6, r3, #25
 8016602:	bf48      	it	mi
 8016604:	b2ad      	uxthmi	r5, r5
 8016606:	e7e6      	b.n	80165d6 <_printf_i+0x182>
 8016608:	4616      	mov	r6, r2
 801660a:	e7bb      	b.n	8016584 <_printf_i+0x130>
 801660c:	680b      	ldr	r3, [r1, #0]
 801660e:	6826      	ldr	r6, [r4, #0]
 8016610:	6960      	ldr	r0, [r4, #20]
 8016612:	1d1d      	adds	r5, r3, #4
 8016614:	600d      	str	r5, [r1, #0]
 8016616:	0635      	lsls	r5, r6, #24
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	d501      	bpl.n	8016620 <_printf_i+0x1cc>
 801661c:	6018      	str	r0, [r3, #0]
 801661e:	e002      	b.n	8016626 <_printf_i+0x1d2>
 8016620:	0671      	lsls	r1, r6, #25
 8016622:	d5fb      	bpl.n	801661c <_printf_i+0x1c8>
 8016624:	8018      	strh	r0, [r3, #0]
 8016626:	2300      	movs	r3, #0
 8016628:	6123      	str	r3, [r4, #16]
 801662a:	4616      	mov	r6, r2
 801662c:	e7ba      	b.n	80165a4 <_printf_i+0x150>
 801662e:	680b      	ldr	r3, [r1, #0]
 8016630:	1d1a      	adds	r2, r3, #4
 8016632:	600a      	str	r2, [r1, #0]
 8016634:	681e      	ldr	r6, [r3, #0]
 8016636:	6862      	ldr	r2, [r4, #4]
 8016638:	2100      	movs	r1, #0
 801663a:	4630      	mov	r0, r6
 801663c:	f7e9 ff70 	bl	8000520 <memchr>
 8016640:	b108      	cbz	r0, 8016646 <_printf_i+0x1f2>
 8016642:	1b80      	subs	r0, r0, r6
 8016644:	6060      	str	r0, [r4, #4]
 8016646:	6863      	ldr	r3, [r4, #4]
 8016648:	6123      	str	r3, [r4, #16]
 801664a:	2300      	movs	r3, #0
 801664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016650:	e7a8      	b.n	80165a4 <_printf_i+0x150>
 8016652:	6923      	ldr	r3, [r4, #16]
 8016654:	4632      	mov	r2, r6
 8016656:	4649      	mov	r1, r9
 8016658:	4640      	mov	r0, r8
 801665a:	47d0      	blx	sl
 801665c:	3001      	adds	r0, #1
 801665e:	d0ab      	beq.n	80165b8 <_printf_i+0x164>
 8016660:	6823      	ldr	r3, [r4, #0]
 8016662:	079b      	lsls	r3, r3, #30
 8016664:	d413      	bmi.n	801668e <_printf_i+0x23a>
 8016666:	68e0      	ldr	r0, [r4, #12]
 8016668:	9b03      	ldr	r3, [sp, #12]
 801666a:	4298      	cmp	r0, r3
 801666c:	bfb8      	it	lt
 801666e:	4618      	movlt	r0, r3
 8016670:	e7a4      	b.n	80165bc <_printf_i+0x168>
 8016672:	2301      	movs	r3, #1
 8016674:	4632      	mov	r2, r6
 8016676:	4649      	mov	r1, r9
 8016678:	4640      	mov	r0, r8
 801667a:	47d0      	blx	sl
 801667c:	3001      	adds	r0, #1
 801667e:	d09b      	beq.n	80165b8 <_printf_i+0x164>
 8016680:	3501      	adds	r5, #1
 8016682:	68e3      	ldr	r3, [r4, #12]
 8016684:	9903      	ldr	r1, [sp, #12]
 8016686:	1a5b      	subs	r3, r3, r1
 8016688:	42ab      	cmp	r3, r5
 801668a:	dcf2      	bgt.n	8016672 <_printf_i+0x21e>
 801668c:	e7eb      	b.n	8016666 <_printf_i+0x212>
 801668e:	2500      	movs	r5, #0
 8016690:	f104 0619 	add.w	r6, r4, #25
 8016694:	e7f5      	b.n	8016682 <_printf_i+0x22e>
 8016696:	bf00      	nop
 8016698:	08016da1 	.word	0x08016da1
 801669c:	08016db2 	.word	0x08016db2

080166a0 <_sbrk_r>:
 80166a0:	b538      	push	{r3, r4, r5, lr}
 80166a2:	4d06      	ldr	r5, [pc, #24]	; (80166bc <_sbrk_r+0x1c>)
 80166a4:	2300      	movs	r3, #0
 80166a6:	4604      	mov	r4, r0
 80166a8:	4608      	mov	r0, r1
 80166aa:	602b      	str	r3, [r5, #0]
 80166ac:	f7ea fc9e 	bl	8000fec <_sbrk>
 80166b0:	1c43      	adds	r3, r0, #1
 80166b2:	d102      	bne.n	80166ba <_sbrk_r+0x1a>
 80166b4:	682b      	ldr	r3, [r5, #0]
 80166b6:	b103      	cbz	r3, 80166ba <_sbrk_r+0x1a>
 80166b8:	6023      	str	r3, [r4, #0]
 80166ba:	bd38      	pop	{r3, r4, r5, pc}
 80166bc:	24005350 	.word	0x24005350

080166c0 <__sread>:
 80166c0:	b510      	push	{r4, lr}
 80166c2:	460c      	mov	r4, r1
 80166c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166c8:	f000 f8a8 	bl	801681c <_read_r>
 80166cc:	2800      	cmp	r0, #0
 80166ce:	bfab      	itete	ge
 80166d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80166d2:	89a3      	ldrhlt	r3, [r4, #12]
 80166d4:	181b      	addge	r3, r3, r0
 80166d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80166da:	bfac      	ite	ge
 80166dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80166de:	81a3      	strhlt	r3, [r4, #12]
 80166e0:	bd10      	pop	{r4, pc}

080166e2 <__swrite>:
 80166e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166e6:	461f      	mov	r7, r3
 80166e8:	898b      	ldrh	r3, [r1, #12]
 80166ea:	05db      	lsls	r3, r3, #23
 80166ec:	4605      	mov	r5, r0
 80166ee:	460c      	mov	r4, r1
 80166f0:	4616      	mov	r6, r2
 80166f2:	d505      	bpl.n	8016700 <__swrite+0x1e>
 80166f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166f8:	2302      	movs	r3, #2
 80166fa:	2200      	movs	r2, #0
 80166fc:	f000 f870 	bl	80167e0 <_lseek_r>
 8016700:	89a3      	ldrh	r3, [r4, #12]
 8016702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801670a:	81a3      	strh	r3, [r4, #12]
 801670c:	4632      	mov	r2, r6
 801670e:	463b      	mov	r3, r7
 8016710:	4628      	mov	r0, r5
 8016712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016716:	f000 b817 	b.w	8016748 <_write_r>

0801671a <__sseek>:
 801671a:	b510      	push	{r4, lr}
 801671c:	460c      	mov	r4, r1
 801671e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016722:	f000 f85d 	bl	80167e0 <_lseek_r>
 8016726:	1c43      	adds	r3, r0, #1
 8016728:	89a3      	ldrh	r3, [r4, #12]
 801672a:	bf15      	itete	ne
 801672c:	6560      	strne	r0, [r4, #84]	; 0x54
 801672e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016736:	81a3      	strheq	r3, [r4, #12]
 8016738:	bf18      	it	ne
 801673a:	81a3      	strhne	r3, [r4, #12]
 801673c:	bd10      	pop	{r4, pc}

0801673e <__sclose>:
 801673e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016742:	f000 b81b 	b.w	801677c <_close_r>
	...

08016748 <_write_r>:
 8016748:	b538      	push	{r3, r4, r5, lr}
 801674a:	4d07      	ldr	r5, [pc, #28]	; (8016768 <_write_r+0x20>)
 801674c:	4604      	mov	r4, r0
 801674e:	4608      	mov	r0, r1
 8016750:	4611      	mov	r1, r2
 8016752:	2200      	movs	r2, #0
 8016754:	602a      	str	r2, [r5, #0]
 8016756:	461a      	mov	r2, r3
 8016758:	f7ea fbf7 	bl	8000f4a <_write>
 801675c:	1c43      	adds	r3, r0, #1
 801675e:	d102      	bne.n	8016766 <_write_r+0x1e>
 8016760:	682b      	ldr	r3, [r5, #0]
 8016762:	b103      	cbz	r3, 8016766 <_write_r+0x1e>
 8016764:	6023      	str	r3, [r4, #0]
 8016766:	bd38      	pop	{r3, r4, r5, pc}
 8016768:	24005350 	.word	0x24005350

0801676c <abort>:
 801676c:	b508      	push	{r3, lr}
 801676e:	2006      	movs	r0, #6
 8016770:	f000 f88e 	bl	8016890 <raise>
 8016774:	2001      	movs	r0, #1
 8016776:	f7ea fbc1 	bl	8000efc <_exit>
	...

0801677c <_close_r>:
 801677c:	b538      	push	{r3, r4, r5, lr}
 801677e:	4d06      	ldr	r5, [pc, #24]	; (8016798 <_close_r+0x1c>)
 8016780:	2300      	movs	r3, #0
 8016782:	4604      	mov	r4, r0
 8016784:	4608      	mov	r0, r1
 8016786:	602b      	str	r3, [r5, #0]
 8016788:	f7ea fbfb 	bl	8000f82 <_close>
 801678c:	1c43      	adds	r3, r0, #1
 801678e:	d102      	bne.n	8016796 <_close_r+0x1a>
 8016790:	682b      	ldr	r3, [r5, #0]
 8016792:	b103      	cbz	r3, 8016796 <_close_r+0x1a>
 8016794:	6023      	str	r3, [r4, #0]
 8016796:	bd38      	pop	{r3, r4, r5, pc}
 8016798:	24005350 	.word	0x24005350

0801679c <_fstat_r>:
 801679c:	b538      	push	{r3, r4, r5, lr}
 801679e:	4d07      	ldr	r5, [pc, #28]	; (80167bc <_fstat_r+0x20>)
 80167a0:	2300      	movs	r3, #0
 80167a2:	4604      	mov	r4, r0
 80167a4:	4608      	mov	r0, r1
 80167a6:	4611      	mov	r1, r2
 80167a8:	602b      	str	r3, [r5, #0]
 80167aa:	f7ea fbf6 	bl	8000f9a <_fstat>
 80167ae:	1c43      	adds	r3, r0, #1
 80167b0:	d102      	bne.n	80167b8 <_fstat_r+0x1c>
 80167b2:	682b      	ldr	r3, [r5, #0]
 80167b4:	b103      	cbz	r3, 80167b8 <_fstat_r+0x1c>
 80167b6:	6023      	str	r3, [r4, #0]
 80167b8:	bd38      	pop	{r3, r4, r5, pc}
 80167ba:	bf00      	nop
 80167bc:	24005350 	.word	0x24005350

080167c0 <_isatty_r>:
 80167c0:	b538      	push	{r3, r4, r5, lr}
 80167c2:	4d06      	ldr	r5, [pc, #24]	; (80167dc <_isatty_r+0x1c>)
 80167c4:	2300      	movs	r3, #0
 80167c6:	4604      	mov	r4, r0
 80167c8:	4608      	mov	r0, r1
 80167ca:	602b      	str	r3, [r5, #0]
 80167cc:	f7ea fbf5 	bl	8000fba <_isatty>
 80167d0:	1c43      	adds	r3, r0, #1
 80167d2:	d102      	bne.n	80167da <_isatty_r+0x1a>
 80167d4:	682b      	ldr	r3, [r5, #0]
 80167d6:	b103      	cbz	r3, 80167da <_isatty_r+0x1a>
 80167d8:	6023      	str	r3, [r4, #0]
 80167da:	bd38      	pop	{r3, r4, r5, pc}
 80167dc:	24005350 	.word	0x24005350

080167e0 <_lseek_r>:
 80167e0:	b538      	push	{r3, r4, r5, lr}
 80167e2:	4d07      	ldr	r5, [pc, #28]	; (8016800 <_lseek_r+0x20>)
 80167e4:	4604      	mov	r4, r0
 80167e6:	4608      	mov	r0, r1
 80167e8:	4611      	mov	r1, r2
 80167ea:	2200      	movs	r2, #0
 80167ec:	602a      	str	r2, [r5, #0]
 80167ee:	461a      	mov	r2, r3
 80167f0:	f7ea fbee 	bl	8000fd0 <_lseek>
 80167f4:	1c43      	adds	r3, r0, #1
 80167f6:	d102      	bne.n	80167fe <_lseek_r+0x1e>
 80167f8:	682b      	ldr	r3, [r5, #0]
 80167fa:	b103      	cbz	r3, 80167fe <_lseek_r+0x1e>
 80167fc:	6023      	str	r3, [r4, #0]
 80167fe:	bd38      	pop	{r3, r4, r5, pc}
 8016800:	24005350 	.word	0x24005350

08016804 <__malloc_lock>:
 8016804:	4801      	ldr	r0, [pc, #4]	; (801680c <__malloc_lock+0x8>)
 8016806:	f7ff bb45 	b.w	8015e94 <__retarget_lock_acquire_recursive>
 801680a:	bf00      	nop
 801680c:	24005348 	.word	0x24005348

08016810 <__malloc_unlock>:
 8016810:	4801      	ldr	r0, [pc, #4]	; (8016818 <__malloc_unlock+0x8>)
 8016812:	f7ff bb40 	b.w	8015e96 <__retarget_lock_release_recursive>
 8016816:	bf00      	nop
 8016818:	24005348 	.word	0x24005348

0801681c <_read_r>:
 801681c:	b538      	push	{r3, r4, r5, lr}
 801681e:	4d07      	ldr	r5, [pc, #28]	; (801683c <_read_r+0x20>)
 8016820:	4604      	mov	r4, r0
 8016822:	4608      	mov	r0, r1
 8016824:	4611      	mov	r1, r2
 8016826:	2200      	movs	r2, #0
 8016828:	602a      	str	r2, [r5, #0]
 801682a:	461a      	mov	r2, r3
 801682c:	f7ea fb70 	bl	8000f10 <_read>
 8016830:	1c43      	adds	r3, r0, #1
 8016832:	d102      	bne.n	801683a <_read_r+0x1e>
 8016834:	682b      	ldr	r3, [r5, #0]
 8016836:	b103      	cbz	r3, 801683a <_read_r+0x1e>
 8016838:	6023      	str	r3, [r4, #0]
 801683a:	bd38      	pop	{r3, r4, r5, pc}
 801683c:	24005350 	.word	0x24005350

08016840 <_raise_r>:
 8016840:	291f      	cmp	r1, #31
 8016842:	b538      	push	{r3, r4, r5, lr}
 8016844:	4604      	mov	r4, r0
 8016846:	460d      	mov	r5, r1
 8016848:	d904      	bls.n	8016854 <_raise_r+0x14>
 801684a:	2316      	movs	r3, #22
 801684c:	6003      	str	r3, [r0, #0]
 801684e:	f04f 30ff 	mov.w	r0, #4294967295
 8016852:	bd38      	pop	{r3, r4, r5, pc}
 8016854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016856:	b112      	cbz	r2, 801685e <_raise_r+0x1e>
 8016858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801685c:	b94b      	cbnz	r3, 8016872 <_raise_r+0x32>
 801685e:	4620      	mov	r0, r4
 8016860:	f000 f830 	bl	80168c4 <_getpid_r>
 8016864:	462a      	mov	r2, r5
 8016866:	4601      	mov	r1, r0
 8016868:	4620      	mov	r0, r4
 801686a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801686e:	f000 b817 	b.w	80168a0 <_kill_r>
 8016872:	2b01      	cmp	r3, #1
 8016874:	d00a      	beq.n	801688c <_raise_r+0x4c>
 8016876:	1c59      	adds	r1, r3, #1
 8016878:	d103      	bne.n	8016882 <_raise_r+0x42>
 801687a:	2316      	movs	r3, #22
 801687c:	6003      	str	r3, [r0, #0]
 801687e:	2001      	movs	r0, #1
 8016880:	e7e7      	b.n	8016852 <_raise_r+0x12>
 8016882:	2400      	movs	r4, #0
 8016884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016888:	4628      	mov	r0, r5
 801688a:	4798      	blx	r3
 801688c:	2000      	movs	r0, #0
 801688e:	e7e0      	b.n	8016852 <_raise_r+0x12>

08016890 <raise>:
 8016890:	4b02      	ldr	r3, [pc, #8]	; (801689c <raise+0xc>)
 8016892:	4601      	mov	r1, r0
 8016894:	6818      	ldr	r0, [r3, #0]
 8016896:	f7ff bfd3 	b.w	8016840 <_raise_r>
 801689a:	bf00      	nop
 801689c:	24000090 	.word	0x24000090

080168a0 <_kill_r>:
 80168a0:	b538      	push	{r3, r4, r5, lr}
 80168a2:	4d07      	ldr	r5, [pc, #28]	; (80168c0 <_kill_r+0x20>)
 80168a4:	2300      	movs	r3, #0
 80168a6:	4604      	mov	r4, r0
 80168a8:	4608      	mov	r0, r1
 80168aa:	4611      	mov	r1, r2
 80168ac:	602b      	str	r3, [r5, #0]
 80168ae:	f7ea fb15 	bl	8000edc <_kill>
 80168b2:	1c43      	adds	r3, r0, #1
 80168b4:	d102      	bne.n	80168bc <_kill_r+0x1c>
 80168b6:	682b      	ldr	r3, [r5, #0]
 80168b8:	b103      	cbz	r3, 80168bc <_kill_r+0x1c>
 80168ba:	6023      	str	r3, [r4, #0]
 80168bc:	bd38      	pop	{r3, r4, r5, pc}
 80168be:	bf00      	nop
 80168c0:	24005350 	.word	0x24005350

080168c4 <_getpid_r>:
 80168c4:	f7ea bb02 	b.w	8000ecc <_getpid>

080168c8 <_init>:
 80168c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ca:	bf00      	nop
 80168cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168ce:	bc08      	pop	{r3}
 80168d0:	469e      	mov	lr, r3
 80168d2:	4770      	bx	lr

080168d4 <_fini>:
 80168d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168d6:	bf00      	nop
 80168d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168da:	bc08      	pop	{r3}
 80168dc:	469e      	mov	lr, r3
 80168de:	4770      	bx	lr
